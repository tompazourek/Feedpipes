<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Performance is a Feature!</title>
 <link href="http://www.mattwarren.org/atom.xml" rel="self"/>
 <link href="http://www.mattwarren.org/"/>
 <updated>2019-04-25T15:01:30+00:00</updated>
 <id>http://www.mattwarren.org</id>
 <author>
   <name>Matt Warren</name>
   <email>matt.warren@live.co.uk</email>
 </author>

 
 <entry>
   <title>ASCII Art in .NET Code</title>
   <link href="http://www.mattwarren.org/2019/04/25/ASCII-Art-in-.NET-Code/"/>
   <updated>2019-04-25T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2019/04/25/ASCII-Art-in-.NET-Code</id>
   <content type="html">
     &lt;p&gt;Who doesn’t like a nice bit of ‘ASCII Art’? I know I certainly do!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=bwSNyA1Nfz4&amp;amp;t=1477&quot;&gt;&lt;img src=&quot;/images/2019/04/ASCII Art - Matt's CLR.png&quot; alt=&quot;ASCII Art - Matt's CLR&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To see what &lt;em&gt;Matt’s CLR&lt;/em&gt; was all about you can watch the recording of my talk &lt;a href=&quot;https://www.youtube.com/watch?v=bwSNyA1Nfz4&amp;amp;t=1477&quot;&gt;‘From ‘dotnet run’ to ‘Hello World!’’&lt;/a&gt; (from about ~24:30 in)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So armed with a trusty regex &lt;code class=&quot;highlighter-rouge&quot;&gt;/\*(.*?)\*/|//(.*?)\r?\n|&quot;((\\[^\n]|[^&quot;\n])*)&quot;|@(&quot;[^&quot;]*&quot;)+&lt;/code&gt;, I set out to find all the &lt;strong&gt;interesting ASCII Art&lt;/strong&gt; used in source code comments in the following &lt;em&gt;.NET related&lt;/em&gt; repositories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/&quot;&gt;dotnet/CoreCLR&lt;/a&gt; - “&lt;em&gt;the runtime for .NET Core. It includes the garbage collector, JIT compiler, primitive data types and low-level classes.&lt;/em&gt;”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mono/mono&quot;&gt;Mono&lt;/a&gt; - “&lt;em&gt;open source ECMA CLI, C# and .NET implementation.&lt;/em&gt;”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corefx&quot;&gt;dotnet/CoreFX&lt;/a&gt; - “&lt;em&gt;the foundational class libraries for .NET Core. It includes types for collections, file systems, console, JSON, XML, async and many others.&lt;/em&gt;”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/Roslyn&quot;&gt;dotnet/Roslyn&lt;/a&gt; - “&lt;em&gt;provides C# and Visual Basic languages with rich code analysis APIs&lt;/em&gt;”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aspnet/AspNetCore&quot;&gt;aspnet/AspNetCore&lt;/a&gt; - “&lt;em&gt;a cross-platform .NET framework for building modern cloud-based web applications on Windows, Mac, or Linux.&lt;/em&gt;”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Yes, I shamelessly ‘borrowed’ this idea from &lt;a href=&quot;https://twitter.com/johnregehr/status/1095018518737637376&quot;&gt;John Regehr&lt;/a&gt;, I was motivated to write this because his excellent post &lt;a href=&quot;https://blog.regehr.org/archives/1653&quot;&gt;‘Explaining Code using ASCII Art’&lt;/a&gt; didn’t have any &lt;em&gt;.NET related&lt;/em&gt; code in it!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you’ve come across any interesting examples I’ve missed out, please let me know!&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;p&gt;To make the examples easier to browse, I’ve split them up into categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#dave-cutler&quot;&gt;Dave Cutler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#syntax-trees&quot;&gt;Syntax Trees&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#timelines&quot;&gt;Timelines&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#logic-tables&quot;&gt;Logic Tables&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#class-hierarchies&quot;&gt;Class Hierarchies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#component-diagrams&quot;&gt;Component Diagrams&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#algorithms&quot;&gt;Algorithms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bit-packing&quot;&gt;Bit Packing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#data-structures&quot;&gt;Data Structures&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#state-machines&quot;&gt;State Machines&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rfcs-and-specs&quot;&gt;RFC’s and Specs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dates--times&quot;&gt;Dates &amp;amp; Times&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stack-layouts&quot;&gt;Stack Layouts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-rest&quot;&gt;The Rest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;dave-cutler&quot;&gt;Dave Cutler&lt;/h2&gt;

&lt;p&gt;There’s no &lt;em&gt;art&lt;/em&gt; in this one, but it deserves it’s own category as it quotes the amazing &lt;a href=&quot;https://en.wikipedia.org/wiki/Dave_Cutler&quot;&gt;Dave Cutler&lt;/a&gt; who led the development of Windows NT. Therefore there’s no better person to ask a deep, technical question about how &lt;em&gt;Thread Suspension&lt;/em&gt; works on Windows, from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/dc11162e1c36624d3cabb6e0bf6583a94ab2e30c/src/vm/threadsuspend.cpp#L102-L124&quot;&gt;coreclr/src/vm/threadsuspend.cpp&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Message from David Cutler
/*
    After SuspendThread returns, can the suspended thread continue to execute code in user mode?

    [David Cutler] The suspended thread cannot execute any more user code, but it might be currently &quot;running&quot;
    on a logical processor whose other logical processor is currently actually executing another thread.
    In this case the target thread will not suspend until the hardware switches back to executing instructions
    on its logical processor. In this case even the memory barrier would not necessarily work - a better solution
    would be to use interlocked operations on the variable itself.

    After SuspendThread returns, does the store buffer of the CPU for the suspended thread still need to drain?

    Historically, we've assumed that the answer to both questions is No.  But on one 4/8 hyper-threaded machine
    running Win2K3 SP1 build 1421, we've seen two stress failures where SuspendThread returns while writes seem to still be in flight.

    Usually after we suspend a thread, we then call GetThreadContext.  This seems to guarantee consistency.
    But there are places we would like to avoid GetThreadContext, if it's safe and legal.

    [David Cutler] Get context delivers a APC to the target thread and waits on an event that will be set
    when the target thread has delivered its context.

    Chris.
*/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For more info on Dave Cutler, see this excellent interview &lt;a href=&quot;https://dave.cheney.net/2018/10/06/internets-of-interest-6-dave-cutler-on-dave-cutler&quot;&gt;‘Internets of Interest #6: Dave Cutler on Dave Cutler’&lt;/a&gt; or &lt;a href=&quot;https://news.microsoft.com/features/the-engineers-engineer-computer-industry-luminaries-salute-dave-cutlers-five-decade-long-quest-for-quality/&quot;&gt;‘The engineer’s engineer: Computer industry luminaries salute Dave Cutler’s five-decade-long quest for quality’&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;syntax-trees&quot;&gt;Syntax Trees&lt;/h2&gt;

&lt;p&gt;The inner workings of the .NET ‘Just-in-Time’ (JIT) Compiler have always been a bit of a mystery to me. But, having informative comments like this one from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9d3f264b9ef8b4715017ec615dcb6f9d57e607cc/src/jit/lsra.cpp#L6166-L6196&quot;&gt;coreclr/src/jit/lsra.cpp&lt;/a&gt; go some way to showing what it’s doing&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// For example, for this tree (numbers are execution order, lower is earlier and higher is later):
//
//                                   +---------+----------+
//                                   |       GT_ADD (3)   |
//                                   +---------+----------+
//                                             |
//                                           /   \
//                                         /       \
//                                       /           \
//                   +-------------------+           +----------------------+
//                   |         x (1)     | &quot;tree&quot;    |         y (2)        |
//                   +-------------------+           +----------------------+
//
// generate this tree:
//
//                                   +---------+----------+
//                                   |       GT_ADD (4)   |
//                                   +---------+----------+
//                                             |
//                                           /   \
//                                         /       \
//                                       /           \
//                   +-------------------+           +----------------------+
//                   |  GT_RELOAD (3)    |           |         y (2)        |
//                   +-------------------+           +----------------------+
//                             |
//                   +-------------------+
//                   |         x (1)     | &quot;tree&quot;
//                   +-------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s also a more in-depth example in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9d3f264b9ef8b4715017ec615dcb6f9d57e607cc/src/jit/morph.cpp#L6170-L6236&quot;&gt;coreclr/src/jit/morph.cpp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also from &lt;a href=&quot;https://github.com/dotnet/roslyn/blob/Visual-Studio-2017-Version-15.9/src/Compilers/VisualBasic/Portable/Semantics/TypeInference/RequiredConversion.vb#L87-L104&quot;&gt;roslyn/src/Compilers/VisualBasic/Portable/Semantics/TypeInference/RequiredConversion.vb&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; '// These restrictions form a partial order composed of three chains: from less strict to more strict, we have:
'//    [reverse chain] [None] &amp;lt; AnyReverse &amp;lt; ReverseReference &amp;lt; Identity
'//    [middle  chain] None &amp;lt; [Any,AnyReverse] &amp;lt; AnyConversionAndReverse &amp;lt; Identity
'//    [forward chain] [None] &amp;lt; Any &amp;lt; ArrayElement &amp;lt; Reference &amp;lt; Identity
'//
'//            =           KEY:
'//         /  |  \           =     Identity
'//        /   |   \         +r     Reference
'//      -r    |    +r       -r     ReverseReference
'//       |  +-any  |       +-any   AnyConversionAndReverse
'//       |   /|\   +arr     +arr   ArrayElement
'//       |  / | \  |        +any   Any
'//      -any  |  +any       -any   AnyReverse
'//         \  |  /           none  None
'//          \ | /
'//           none
'//
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;timelines&quot;&gt;Timelines&lt;/h2&gt;

&lt;p&gt;This example from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e277764916cbb740db199132be81701593820bb0/src/vm/comwaithandle.cpp#L129-L156&quot;&gt;coreclr/src/vm/comwaithandle.cpp&lt;/a&gt; was unique! I didn’t find another example of ASCII Art used to illustrate time-lines, it’s a really novel approach.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// In case the CLR is paused inbetween a wait, this method calculates how much 
// the wait has to be adjusted to account for the CLR Freeze. Essentially all
// pause duration has to be considered as &quot;time that never existed&quot;.
//
// Two cases exists, consider that 10 sec wait is issued 
// Case 1: All pauses happened before the wait completes. Hence just the 
// pause time needs to be added back at the end of wait
// 0           3                   8       10
// |-----------|###################|------&amp;gt;
//                 5-sec pause    
//             ....................&amp;gt;
//                                            Additional 5 sec wait
//                                        |=========================&amp;gt; 
//
// Case 2: Pauses ended after the wait completes. 
// 3 second of wait was left as the pause started at 7 so need to add that back
// 0                           7           10
// |---------------------------|###########&amp;gt;
//                                 5-sec pause   12
//                             ...................&amp;gt;
//                                            Additional 3 sec wait
//                                                |==================&amp;gt; 
//
// Both cases can be expressed in the same calculation
// pauseTime:   sum of all pauses that were triggered after the timer was started
// expDuration: expected duration of the wait (without any pauses) 10 in the example
// actDuration: time when the wait finished. Since the CLR is frozen during pause it's
//              max of timeout or pause-end. In case-1 it's 10, in case-2 it's 12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;logic-tables&quot;&gt;Logic Tables&lt;/h2&gt;

&lt;p&gt;A sweet-spot for ASCII Art seems to be tables, there are so many examples. Starting with &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9d3f264b9ef8b4715017ec615dcb6f9d57e607cc/src/vm/methodtablebuilder.cpp#L4675-L4686&quot;&gt;coreclr/src/vm/methodtablebuilder.cpp&lt;/a&gt; (bonus points for combining comments and code together!)&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//               |        Base type
// Subtype       |        mdPrivateScope  mdPrivate   mdFamANDAssem   mdAssem     mdFamily    mdFamORAssem    mdPublic
// --------------+-------------------------------------------------------------------------------------------------------
&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*mdPrivateScope | */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e_SM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;e_NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;e_NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;e_NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;e_NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;e_NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;e_NO&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*mdPrivate      | */&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e_SM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;e_YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;e_NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;e_NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;e_NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;e_NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;e_NO&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*mdFamANDAssem  | */&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e_SM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;e_YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;e_SA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;e_NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;e_NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;e_NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;e_NO&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*mdAssem        | */&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e_SM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;e_YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;e_SA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;e_SA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;e_NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;e_NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;e_NO&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*mdFamily       | */&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e_SM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;e_YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;e_YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;e_NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;e_YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;e_NSA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;e_NO&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*mdFamORAssem   | */&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e_SM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;e_YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;e_YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;e_SA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;e_YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;e_YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;e_NO&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*mdPublic       | */&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e_SM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;e_YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;e_YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;e_YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;e_YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;e_YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;e_YES&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9d3f264b9ef8b4715017ec615dcb6f9d57e607cc/src/jit/importer.cpp#L15265-L15283&quot;&gt;coreclr/src/jit/importer.cpp&lt;/a&gt; which shows how the JIT deals with boxing/un-boxing&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/*
    ----------------------------------------------------------------------
    | \ helper  |                         |                              |
    |   \       |                         |                              |
    |     \     | CORINFO_HELP_UNBOX      | CORINFO_HELP_UNBOX_NULLABLE  |
    |       \   | (which returns a BYREF) | (which returns a STRUCT)     |
    | opcode  \ |                         |                              |
    |---------------------------------------------------------------------
    | UNBOX     | push the BYREF          | spill the STRUCT to a local, |
    |           |                         | push the BYREF to this local |
    |---------------------------------------------------------------------
    | UNBOX_ANY | push a GT_OBJ of        | push the STRUCT              |
    |           | the BYREF               | For Linux when the           |
    |           |                         |  struct is returned in two   |
    |           |                         |  registers create a temp     |
    |           |                         |  which address is passed to  |
    |           |                         |  the unbox_nullable helper.  |
    |---------------------------------------------------------------------
*/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, there’s some other nice examples showing the rules for &lt;a href=&quot;https://github.com/dotnet/roslyn/blob/Visual-Studio-2017-Version-15.9/src/Compilers/CSharp/Portable/Binder/Semantics/Operators/BinaryOperatorEasyOut.cs#L104-L165&quot;&gt;operator overloading&lt;/a&gt; in the C# (Roslyn) Compiler and which .NET data-types &lt;a href=&quot;https://github.com/dotnet/corefx/blob/4b9fff5c022269c7dbb000bd14c10be27400beb2/src/Common/src/CoreLib/System/Convert.cs#L46-L63&quot;&gt;can be converted&lt;/a&gt; via the &lt;code class=&quot;highlighter-rouge&quot;&gt;System.ToXXX()&lt;/code&gt; functions.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;class-hierarchies&quot;&gt;Class Hierarchies&lt;/h2&gt;

&lt;p&gt;Of course, most IDE’s come with tools that will generate class-hierarchies for you, but it’s much nicer to see them in ASCII, from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9d3f264b9ef8b4715017ec615dcb6f9d57e607cc/src/vm/object.h#L28-L55&quot;&gt;coreclr/src/vm/object.h&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; * COM+ Internal Object Model
 *
 *
 * Object              - This is the common base part to all COM+ objects
 *  |                        it contains the MethodTable pointer and the
 *  |                        sync block index, which is at a negative offset
 *  |
 *  +-- code:StringObject       - String objects are specialized objects for string
 *  |                        storage/retrieval for higher performance
 *  |
 *  +-- BaseObjectWithCachedData - Object Plus one object field for caching.
 *  |       |
 *  |       +-  ReflectClassBaseObject    - The base object for the RuntimeType class
 *  |       +-  ReflectMethodObject       - The base object for the RuntimeMethodInfo class
 *  |       +-  ReflectFieldObject        - The base object for the RtFieldInfo class
 *  |
 *  +-- code:ArrayBase          - Base portion of all arrays
 *  |       |
 *  |       +-  I1Array    - Base type arrays
 *  |       |   I2Array
 *  |       |   ...
 *  |       |
 *  |       +-  PtrArray   - Array of OBJECTREFs, different than base arrays because of pObjectClass
 *  |              
 *  +-- code:AssemblyBaseObject - The base object for the class Assembly
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s also an &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1f02c30e053b1da4410e20c3b715128e3d1e354a/src/vm/frames.h#L7-L197&quot;&gt;even larger one&lt;/a&gt; that I stumbled across when writing &lt;a href=&quot;/2019/01/21/Stackwalking-in-the-.NET-Runtime/&quot;&gt;“Stack Walking” in the .NET Runtime&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;component-diagrams&quot;&gt;Component Diagrams&lt;/h2&gt;

&lt;p&gt;When you have several different components in a code-base it’s always nice to see how they fit together. From &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9d3f264b9ef8b4715017ec615dcb6f9d57e607cc/src/vm/codeman.h#L14-L56&quot;&gt;coreclr/src/vm/codeman.h&lt;/a&gt; we can see how the top-level parts of the .NET JIT work together&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                                               ExecutionManager
                                                       |
                           +-----------+---------------+---------------+-----------+--- ...
                           |           |                               |           |
                        CodeType       |                            CodeType       |
                           |           |                               |           |
                           v           v                               v           v
+---------------+      +--------+&amp;lt;---- R    +---------------+      +--------+&amp;lt;---- R
|ICorJitCompiler|&amp;lt;----&amp;gt;|IJitMan |&amp;lt;---- R    |ICorJitCompiler|&amp;lt;----&amp;gt;|IJitMan |&amp;lt;---- R
+---------------+      +--------+&amp;lt;---- R    +---------------+      +--------+&amp;lt;---- R
                           |       x   .                               |       x   .
                           |        \  .                               |        \  .
                           v         \ .                               v         \ .
                       +--------+      R                           +--------+      R
                       |ICodeMan|                                  |ICodeMan|     (RangeSections)
                       +--------+                                  +--------+       
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Other notable examples are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9d3f264b9ef8b4715017ec615dcb6f9d57e607cc/src/vm/compile.h#L14-L47&quot;&gt;coreclr/src/vm/compile.h&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9d3f264b9ef8b4715017ec615dcb6f9d57e607cc/src/inc/ceegen.h#L47-L92&quot;&gt;coreclr/src/inc/ceegen.h&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9d3f264b9ef8b4715017ec615dcb6f9d57e607cc/src/debug/di/divalue.cpp#L1432-L1451&quot;&gt;coreclr/src/debug/di/divalue.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9d3f264b9ef8b4715017ec615dcb6f9d57e607cc/src/vm/ceeload.cpp#L10543-L10578&quot;&gt;coreclr/src/vm/ceeload.cpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e6034d903f2608445a3f66e3694f461fad7b8b88/src/vm/ceeload.cpp#L10350-L10385&quot;&gt;coreclr/src/vm/ceeload.cpp&lt;/a&gt; we see the inner-workings of the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/ngen-exe-native-image-generator&quot;&gt;Native Image Generator (NGEN)&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        This diagram illustrates the layout of fixups in the ngen image.
        This is the case where function foo2 has a class-restore fixup
        for class C1 in b.dll.

                                  zapBase+curTableVA+rva /         FixupList (see Fixup Encoding below)
                                  m_pFixupBlobs
                                                            +-------------------+
                  pEntry-&amp;gt;VA +--------------------+         |     non-NULL      | foo1
                             |Handles             |         +-------------------+
ZapHeader.ImportTable        |                    |         |     non-NULL      |
                             |                    |         +-------------------+
   +------------+            +--------------------+         |     non-NULL      |
   |a.dll       |            |Class cctors        |&amp;lt;---+    +-------------------+
   |            |            |                    |     \   |         0         |
   |            |     p-&amp;gt;VA/ |                    |&amp;lt;---+ \  +===================+
   |            |      blobs +--------------------+     \ +-------non-NULL      | foo2
   +------------+            |Class restore       |      \  +-------------------+
   |b.dll       |            |                    |       +-------non-NULL      |
   |            |            |                    |         +-------------------+
   |  token_C1  |&amp;lt;--------------blob(=&amp;gt;fixedUp/0) |&amp;lt;--pBlob--------index        |
   |            | \          |                    |         +-------------------+
   |            |  \         +--------------------+         |     non-NULL      |
   |            |   \        |                    |         +-------------------+
   |            |    \       |        .           |         |         0         |
   |            |     \      |        .           |         +===================+
   +------------+      \     |        .           |         |         0         | foo3
                        \    |                    |         +===================+
                         \   +--------------------+         |     non-NULL      | foo4
                          \  |Various fixups that |         +-------------------+
                           \ |need too happen     |         |         0         |
                            \|                    |         +===================+
                             |(CorCompileTokenTable)
                             |                    |
               pEntryEnd-&amp;gt;VA +--------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;algorithms&quot;&gt;Algorithms&lt;/h2&gt;

&lt;p&gt;They say ‘&lt;em&gt;a picture paints a thousand words&lt;/em&gt;’ and that definately applies when describing complex algorithms, from &lt;a href=&quot;https://github.com/dotnet/roslyn/blob/Visual-Studio-2017-Version-15.9/src/Workspaces/Core/Portable/Utilities/EditDistance.cs#L232-L287&quot;&gt;roslyn/src/Workspaces/Core/Portable/Utilities/EditDistance.cs&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// If we fill out the matrix fully we'll get:
//          
//           s u n d a y &amp;lt;-- source
//      ----------------
//      |∞ ∞ ∞ ∞ ∞ ∞ ∞ ∞
//      |∞ 0 1 2 3 4 5 6
//    s |∞ 1 0 1 2 3 4 5 
//    a |∞ 2 1 1 2 3 3 4 
//    t |∞ 3 2 2 2 3 4 4 
//    u |∞ 4 3 2 3 3 4 5 
//    r |∞ 5 4 3 3 4 4 5 
//    d |∞ 6 5 4 4 3 4 5 
//    a |∞ 7 6 5 5 4 3 4 
//    y |∞ 8 7 6 6 5 4 3 &amp;lt;--
//                     ^
//                     |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, this gem that explains how the DOS wild-card matching works, &lt;a href=&quot;https://github.com/dotnet/corefx/blob/4b9fff5c022269c7dbb000bd14c10be27400beb2/src/System.IO.FileSystem/src/System/IO/Enumeration/FileSystemName.cs#L104-L158&quot;&gt;corefx/src/System.IO.FileSystem/src/System/IO/Enumeration/FileSystemName.cs&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Matching routine description
// ============================
// (copied from native impl)
//
// This routine compares a Dbcs name and an expression and tells the caller
// if the name is in the language defined by the expression.  The input name
// cannot contain wildcards, while the expression may contain wildcards.
//
// Expression wild cards are evaluated as shown in the nondeterministic
// finite automatons below.  Note that ~* and ~? are DOS_STAR and DOS_QM.
//
//        ~* is DOS_STAR, ~? is DOS_QM, and ~. is DOS_DOT
//
//                                  S
//                               &amp;lt;-----&amp;lt;
//                            X  |     |  e       Y
//        X * Y ==       (0)-----&amp;gt;-(1)-&amp;gt;-----(2)-----(3)
//
//                                 S-.
//                               &amp;lt;-----&amp;lt;
//                            X  |     |  e       Y
//        X ~* Y ==      (0)-----&amp;gt;-(1)-&amp;gt;-----(2)-----(3)
//
//                           X     S     S     Y
//        X ?? Y ==      (0)---(1)---(2)---(3)---(4)
//
//                           X     .        .      Y
//        X ~.~. Y ==    (0)---(1)----(2)------(3)---(4)
//                              |      |________|
//                              |           ^   |
//                              |_______________|
//                                 ^EOF or .^
//
//                           X     S-.     S-.     Y
//        X ~?~? Y ==    (0)---(1)-----(2)-----(3)---(4)
//                              |      |________|
//                              |           ^   |
//                              |_______________|
//                                 ^EOF or .^
//
//    where S is any single character
//          S-. is any single character except the final .
//          e is a null character transition
//          EOF is the end of the name string
//
//   In words:
//
//       * matches 0 or more characters.
//       ? matches exactly 1 character.
//       DOS_STAR matches 0 or more characters until encountering and matching
//           the final . in the name.
//       DOS_QM matches any single character, or upon encountering a period or
//           end of name string, advances the expression to the end of the
//           set of contiguous DOS_QMs.
//       DOS_DOT matches either a . or zero characters beyond name string.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally from &lt;a href=&quot;https://github.com/dotnet/roslyn/blob/Visual-Studio-2017-Version-15.9/src/Workspaces/Core/Portable/Shared/Collections/IntervalTree%601.Node.cs#L65-L125&quot;&gt;roslyn/src/Workspaces/Core/Portable/Shared/Collections/IntervalTree`1.Node.cs&lt;/a&gt; we have per-method comments with samples, this is a great idea!&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Sample:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   1            1                  3&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  / \          / \              /     \&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// a   2        a   3            1       2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    / \   =&amp;gt;     / \     =&amp;gt;   / \     / \&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   3   d        b   2        a   b   c   d&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  / \              / \&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// b   c            c   d&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InnerRightOuterLeftRotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IIntervalIntrospector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;introspector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Sample:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//     1              1              3&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    / \            / \          /     \&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   2   d          3   d        2       1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  / \     =&amp;gt;     / \     =&amp;gt;   / \     / \&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// a   3          2   c        a   b   c   d&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    / \        / \&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   b   c      a   b&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InnerLeftOuterRightRotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IIntervalIntrospector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;introspector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;bit-packing&quot;&gt;Bit Packing&lt;/h2&gt;

&lt;p&gt;Maybe you can visualise which &lt;em&gt;individual&lt;/em&gt; bits are set given a Hexadecimal value, but I can’t, so I’m always grateful for comments like this one from &lt;a href=&quot;https://github.com/dotnet/roslyn/blob/Visual-Studio-2017-Version-15.9/src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberContainerSymbol.cs#L28-L37&quot;&gt;roslyn/src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberContainerSymbol.cs&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// We current pack everything into two 32-bit ints; layouts for each are given below.

// First int:
//
// | |d|yy|xxxxxxxxxxxxxxxxxxxxxxx|wwwwww|
//
// w = special type.  6 bits.
// x = modifiers.  23 bits.
// y = IsManagedType.  2 bits.
// d = FieldDefinitionsNoted. 1 bit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This one from &lt;a href=&quot;https://github.com/dotnet/corefx/blob/4b9fff5c022269c7dbb000bd14c10be27400beb2/src/System.Runtime.WindowsRuntime/src/System/Threading/Tasks/TaskToAsyncInfoAdapter.cs#L26-L43&quot;&gt;corefx/src/System.Runtime.WindowsRuntime/src/System/Threading/Tasks/TaskToAsyncInfoAdapter.cs&lt;/a&gt; also does a great job of showing the different bit-flags and how they interact&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// ! THIS DIAGRAM ILLUSTRATES THE CONSTANTS BELOW. UPDATE THIS IF UPDATING THE CONSTANTS BELOW!:
//     3         2         1         0
//    10987654321098765432109876543210
//    X...............................   Reserved such that we can use Int32 and not worry about negative-valued state constants
//    ..X.............................   STATEFLAG_COMPLETED_SYNCHRONOUSLY
//    ...X............................   STATEFLAG_MUST_RUN_COMPLETION_HNDL_WHEN_SET
//    ....X...........................   STATEFLAG_COMPLETION_HNDL_NOT_YET_INVOKED
//    ................................   STATE_NOT_INITIALIZED
//    ...............................X   STATE_STARTED
//    ..............................X.   STATE_RUN_TO_COMPLETION
//    .............................X..   STATE_CANCELLATION_REQUESTED
//    ............................X...   STATE_CANCELLATION_COMPLETED
//    ...........................X....   STATE_ERROR
//    ..........................X.....   STATE_CLOSED
//    ..........................XXXXXX   STATEMASK_SELECT_ANY_ASYNC_STATE
//    XXXXXXXXXXXXXXXXXXXXXXXXXX......   STATEMASK_CLEAR_ALL_ASYNC_STATES
//     3         2         1         0
//    10987654321098765432109876543210
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, we have some helpful explanations of how different encoding work. Firstly UTF-8 from &lt;a href=&quot;https://github.com/dotnet/corefx/blob/4b9fff5c022269c7dbb000bd14c10be27400beb2/src/Common/src/CoreLib/System/Text/UTF8Encoding.cs#L38-L49&quot;&gt;corefx//src/Common/src/CoreLib/System/Text/UTF8Encoding.cs&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/*
    bytes   bits    UTF-8 representation
    -----   ----    -----------------------------------
    1        7      0vvvvvvv
    2       11      110vvvvv 10vvvvvv
    3       16      1110vvvv 10vvvvvv 10vvvvvv
    4       21      11110vvv 10vvvvvv 10vvvvvv 10vvvvvv
    -----   ----    -----------------------------------
    Surrogate:
    Real Unicode value = (HighSurrogate - 0xD800) * 0x400 + (LowSurrogate - 0xDC00) + 0x10000
*/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then UTF-32 in &lt;a href=&quot;https://github.com/dotnet/corefx/blob/4b9fff5c022269c7dbb000bd14c10be27400beb2/src/Common/src/CoreLib/System/Text/UTF32Encoding.cs#L26-L35&quot;&gt;corefx/src/Common/src/CoreLib/System/Text/UTF32Encoding.cs&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/*
    words   bits    UTF-32 representation
    -----   ----    -----------------------------------
    1       16      00000000 00000000 xxxxxxxx xxxxxxxx
    2       21      00000000 000xxxxx hhhhhhll llllllll
    -----   ----    -----------------------------------
    Surrogate:
    Real Unicode value = (HighSurrogate - 0xD800) * 0x400 + (LowSurrogate - 0xDC00) + 0x10000
*/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;data-structures&quot;&gt;Data Structures&lt;/h2&gt;

&lt;p&gt;This comment from &lt;a href=&quot;https://github.com/mono/mono/blob/2019-02/mono/utils/dlmalloc.c#L1509-L1564&quot;&gt;mono/utils/dlmalloc.c&lt;/a&gt; does a great job of showing how chunks of memory are arranaged by &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  A chunk that's in use looks like:

   chunk-&amp;gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
           | Size of previous chunk (if P = 1)                             |
           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |P|
         | Size of this chunk                                         1| +-+
   mem-&amp;gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
         |                                                               |
         +-                                                             -+
         |                                                               |
         +-                                                             -+
         |                                                               :
         +-      size - sizeof(size_t) available payload bytes          -+
         :                                                               |
 chunk-&amp;gt; +-                                                             -+
         |                                                               |
         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |1|
       | Size of next chunk (may or may not be in use)               | +-+
 mem-&amp;gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    And if it's free, it looks like this:

   chunk-&amp;gt; +-                                                             -+
           | User payload (must be in use, or we would have merged!)       |
           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |P|
         | Size of this chunk                                         0| +-+
   mem-&amp;gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
         | Next pointer                                                  |
         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
         | Prev pointer                                                  |
         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
         |                                                               :
         +-      size - sizeof(struct chunk) unused bytes               -+
         :                                                               |
 chunk-&amp;gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
         | Size of this chunk                                            |
         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |0|
       | Size of next chunk (must be in use, or we would have merged)| +-+
 mem-&amp;gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |                                                               :
       +- User payload                                                -+
       :                                                               |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                                                     |0|
                                                                     +-+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also, from &lt;a href=&quot;https://github.com/dotnet/corefx/blob/4b9fff5c022269c7dbb000bd14c10be27400beb2/src/Common/src/CoreLib/System/MemoryExtensions.cs#L1185-L1311&quot;&gt;corefx/src/Common/src/CoreLib/System/MemoryExtensions.cs&lt;/a&gt; we can see how overlapping memory regions are detected:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//  Visually, the two sequences are located somewhere in the 32-bit
//  address space as follows:
//
//      [----------------------------------------------)                            normal address space
//      0                                             2³²
//                            [------------------)                                  first sequence
//                            xRef            xRef + xLength
//              [--------------------------)     .                                  second sequence
//              yRef          .         yRef + yLength
//              :             .            .     .
//              :             .            .     .
//                            .            .     .
//                            .            .     .
//                            .            .     .
//                            [----------------------------------------------)      relative address space
//                            0            .     .                          2³²
//                            [------------------)             :                    first sequence
//                            x1           .     x2            :
//                            -------------)                   [-------------       second sequence
//                                         y2                  y1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;state-machines&quot;&gt;State Machines&lt;/h2&gt;

&lt;p&gt;This comment from &lt;a href=&quot;https://github.com/mono/mono/blob/2019-02/mono/benchmark/zipmark.cs#L204-L237&quot;&gt;mono/benchmark/zipmark.cs&lt;/a&gt; gives a great over-view of the implementation of &lt;a href=&quot;https://www.ietf.org/rfc/rfc1951.txt&quot;&gt;RFC 1951 - DEFLATE Compressed Data Format Specification&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/*
 * The Deflater can do the following state transitions:
    *
    * (1) -&amp;gt; INIT_STATE   ----&amp;gt; INIT_FINISHING_STATE ---.
    *        /  | (2)      (5)                         |
    *       /   v          (5)                         |
    *   (3)| SETDICT_STATE ---&amp;gt; SETDICT_FINISHING_STATE |(3)
    *       \   | (3)                 |        ,-------'
    *        |  |                     | (3)   /
    *        v  v          (5)        v      v
    * (1) -&amp;gt; BUSY_STATE   ----&amp;gt; FINISHING_STATE
    *                                | (6)
    *                                v
    *                           FINISHED_STATE
    *    \_____________________________________/
    *          | (7)
    *          v
    *        CLOSED_STATE
    *
    * (1) If we should produce a header we start in INIT_STATE, otherwise
    *     we start in BUSY_STATE.
    * (2) A dictionary may be set only when we are in INIT_STATE, then
    *     we change the state as indicated.
    * (3) Whether a dictionary is set or not, on the first call of deflate
    *     we change to BUSY_STATE.
    * (4) -- intentionally left blank -- :)
    * (5) FINISHING_STATE is entered, when flush() is called to indicate that
    *     there is no more INPUT.  There are also states indicating, that
    *     the header wasn't written yet.
    * (6) FINISHED_STATE is entered, when everything has been flushed to the
    *     internal pending output buffer.
    * (7) At any time (7)
    *
    */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This might be pushing the definition of ‘state machine’ a bit far, but I wanted to include it because it shows just how complex ‘exception handling’ can be, from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9d3f264b9ef8b4715017ec615dcb6f9d57e607cc/src/jit/jiteh.cpp#L1935-L1966&quot;&gt;coreclr/src/jit/jiteh.cpp&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// fgNormalizeEH: Enforce the following invariants:
//
//   1. No block is both the first block of a handler and the first block of a try. In IL (and on entry
//      to this function), this can happen if the &quot;try&quot; is more nested than the handler.
//
//      For example, consider:
//
//               try1 ----------------- BB01
//               |                      BB02
//               |--------------------- BB03
//               handler1
//               |----- try2 ---------- BB04
//               |      |               BB05
//               |      handler2 ------ BB06
//               |      |               BB07
//               |      --------------- BB08
//               |--------------------- BB09
//
//      Thus, the start of handler1 and the start of try2 are the same block. We will transform this to:
//
//               try1 ----------------- BB01
//               |                      BB02
//               |--------------------- BB03
//               handler1 ------------- BB10 // empty block
//               |      try2 ---------- BB04
//               |      |               BB05
//               |      handler2 ------ BB06
//               |      |               BB07
//               |      --------------- BB08
//               |--------------------- BB09
//
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;rfcs-and-specs&quot;&gt;RFC’s and Specs&lt;/h2&gt;

&lt;p&gt;Next up, how the &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-2.2&quot;&gt;Kestrel web-server&lt;/a&gt; handles &lt;a href=&quot;https://tools.ietf.org/html/rfc7540&quot;&gt;RFC 7540 - Hypertext Transfer Protocol Version 2 (HTTP/2)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Firstly, from &lt;a href=&quot;https://github.com/aspnet/AspNetCore/blob/ab3e0f953e537c71b3ba06966e6db1e88e33bc41/src/Servers/Kestrel/Core/src/Internal/Http2/Http2Frame.cs#L6-L16&quot;&gt;aspnet/AspNetCore/src/Servers/Kestrel/Core/src/Internal/Http2/Http2Frame.cs&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* https://tools.ietf.org/html/rfc7540#section-4.1
    +-----------------------------------------------+
    |                 Length (24)                   |
    +---------------+---------------+---------------+
    |   Type (8)    |   Flags (8)   |
    +-+-------------+---------------+-------------------------------+
    |R|                 Stream Identifier (31)                      |
    +=+=============================================================+
    |                   Frame Payload (0...)                      ...
    +---------------------------------------------------------------+
*/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then in &lt;a href=&quot;https://github.com/aspnet/AspNetCore/blob/9f1a978230cdd161998815c425bfd2d25e8436b6/src/Servers/Kestrel/Core/src/Internal/Http2/Http2Frame.Headers.cs#L6-L18&quot;&gt;aspnet/AspNetCore/src/Servers/Kestrel/Core/src/Internal/Http2/Http2Frame.Headers.cs&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* https://tools.ietf.org/html/rfc7540#section-6.2
    +---------------+
    |Pad Length? (8)|
    +-+-------------+-----------------------------------------------+
    |E|                 Stream Dependency? (31)                     |
    +-+-------------+-----------------------------------------------+
    |  Weight? (8)  |
    +-+-------------+-----------------------------------------------+
    |                   Header Block Fragment (*)                 ...
    +---------------------------------------------------------------+
    |                           Padding (*)                       ...
    +---------------------------------------------------------------+
*/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are other notable examples in &lt;a href=&quot;https://github.com/aspnet/AspNetCore/blob/9f1a978230cdd161998815c425bfd2d25e8436b6/src/Servers/Kestrel/Core/src/Internal/Http2/Http2FrameReader.cs#L15-L25&quot;&gt;aspnet/AspNetCore/src/Servers/Kestrel/Core/src/Internal/Http2/Http2FrameReader.cs&lt;/a&gt; and &lt;a href=&quot;https://github.com/aspnet/AspNetCore/blob/9f1a978230cdd161998815c425bfd2d25e8436b6/src/Servers/Kestrel/Core/src/Internal/Http2/Http2FrameWriter.cs#L145-L158&quot;&gt;aspnet/AspNetCore/src/Servers/Kestrel/Core/src/Internal/Http2/Http2FrameWriter.cs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also &lt;a href=&quot;https://tools.ietf.org/html/rfc3986&quot;&gt;RFC 3986 - Uniform Resource Identifier (URI)&lt;/a&gt; is discussed in &lt;a href=&quot;https://github.com/dotnet/corefx/blob/4b9fff5c022269c7dbb000bd14c10be27400beb2/src/Common/src/System/Net/IPv4AddressHelper.Common.cs#L105-L113&quot;&gt;corefx/src/Common/src/System/Net/IPv4AddressHelper.Common.cs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, &lt;a href=&quot;https://httpwg.org/specs/rfc7541.html&quot;&gt;RFC 7541 - HPACK: Header Compression for HTTP/2&lt;/a&gt;, is covered in &lt;a href=&quot;https://github.com/aspnet/AspNetCore/blob/9f1a978230cdd161998815c425bfd2d25e8436b6/src/Servers/Kestrel/Core/src/Internal/Http2/HPack/HPackDecoder.cs#L26-L71&quot;&gt;aspnet/AspNetCore/src/Servers/Kestrel/Core/src/Internal/Http2/HPack/HPackDecoder.cs&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// http://httpwg.org/specs/rfc7541.html#rfc.section.6.1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   0   1   2   3   4   5   6   7&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +---+---+---+---+---+---+---+---+&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// | 1 |        Index (7+)         |&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +---+---------------------------+&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IndexedHeaderFieldMask&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IndexedHeaderFieldRepresentation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// http://httpwg.org/specs/rfc7541.html#rfc.section.6.2.1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   0   1   2   3   4   5   6   7&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +---+---+---+---+---+---+---+---+&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// | 0 | 1 |      Index (6+)       |&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +---+---+-----------------------+&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LiteralHeaderFieldWithIncrementalIndexingMask&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0xc0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LiteralHeaderFieldWithIncrementalIndexingRepresentation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0x40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// http://httpwg.org/specs/rfc7541.html#rfc.section.6.2.2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   0   1   2   3   4   5   6   7&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +---+---+---+---+---+---+---+---+&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// | 0 | 0 | 0 | 0 |  Index (4+)   |&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +---+---+-----------------------+&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LiteralHeaderFieldWithoutIndexingMask&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0xf0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LiteralHeaderFieldWithoutIndexingRepresentation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// http://httpwg.org/specs/rfc7541.html#rfc.section.6.2.3&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   0   1   2   3   4   5   6   7&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +---+---+---+---+---+---+---+---+&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// | 0 | 0 | 0 | 1 |  Index (4+)   |&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +---+---+-----------------------+&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LiteralHeaderFieldNeverIndexedMask&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0xf0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LiteralHeaderFieldNeverIndexedRepresentation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// http://httpwg.org/specs/rfc7541.html#rfc.section.6.3&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   0   1   2   3   4   5   6   7&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +---+---+---+---+---+---+---+---+&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// | 0 | 0 | 1 |   Max size (5+)   |&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +---+---------------------------+&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DynamicTableSizeUpdateMask&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0xe0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DynamicTableSizeUpdateRepresentation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// http://httpwg.org/specs/rfc7541.html#rfc.section.5.2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   0   1   2   3   4   5   6   7&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +---+---+---+---+---+---+---+---+&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// | H |    String Length (7+)     |&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// +---+---------------------------+&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HuffmanMask&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;dates--times&quot;&gt;Dates &amp;amp; Times&lt;/h2&gt;

&lt;p&gt;It is pretty widely accepted that &lt;a href=&quot;https://www.reddit.com/r/programming/comments/ln1tg/bad_timing_why_dates_and_times_are_hard/&quot;&gt;dates and times are hard&lt;/a&gt; and that’s reflected in the amount of comments explaining different scenarios. For example from &lt;a href=&quot;https://github.com/dotnet/corefx/blob/4b9fff5c022269c7dbb000bd14c10be27400beb2/src/Common/src/CoreLib/System/TimeZoneInfo.cs#L1273-L1289&quot;&gt;corefx/src/Common/src/CoreLib/System/TimeZoneInfo.cs&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// startTime and endTime represent the period from either the start of DST to the end and
// ***does not include*** the potentially overlapped times
//
//         -=-=-=-=-=- Pacific Standard Time -=-=-=-=-=-=-
//    April 2, 2006                            October 29, 2006
// 2AM            3AM                        1AM              2AM
// |      +1 hr     |                        |       -1 hr      |
// | &amp;lt;invalid time&amp;gt; |                        | &amp;lt;ambiguous time&amp;gt; |
//                  [========== DST ========&amp;gt;)
//
//        -=-=-=-=-=- Some Weird Time Zone -=-=-=-=-=-=-
//    April 2, 2006                          October 29, 2006
// 1AM              2AM                    2AM              3AM
// |      -1 hr       |                      |       +1 hr      |
// | &amp;lt;ambiguous time&amp;gt; |                      |  &amp;lt;invalid time&amp;gt;  |
//                    [======== DST ========&amp;gt;)
//
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also, from &lt;a href=&quot;https://github.com/dotnet/corefx/blob/4b9fff5c022269c7dbb000bd14c10be27400beb2/src/Common/src/CoreLib/System/TimeZoneInfo.Unix.cs#L1244-L1265&quot;&gt;corefx/src/Common/src/CoreLib/System/TimeZoneInfo.Unix.cs&lt;/a&gt; we see some details on how ‘leap-years’ are handled:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// should be n Julian day format which we don't support. 
// 
// This specifies the Julian day, with n between 0 and 365. February 29 is counted in leap years.
//
// n would be a relative number from the begining of the year. which should handle if the 
// the year is a leap year or not.
// 
// In leap year, n would be counted as:
// 
// 0                30 31              59 60              90      335            365
// |-------Jan--------|-------Feb--------|-------Mar--------|....|-------Dec--------|
//
// while in non leap year we'll have 
// 
// 0                30 31              58 59              89      334            364
// |-------Jan--------|-------Feb--------|-------Mar--------|....|-------Dec--------|
//
// 
// For example if n is specified as 60, this means in leap year the rule will start at Mar 1,
// while in non leap year the rule will start at Mar 2.
// 
// If we need to support n format, we'll have to have a floating adjustment rule support this case.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, this comment from &lt;a href=&quot;https://github.com/dotnet/corefx/blob/4b9fff5c022269c7dbb000bd14c10be27400beb2/src/System.Runtime/tests/System/TimeZoneInfoTests.cs#L1512-L1524&quot;&gt;corefx/src/System.Runtime/tests/System/TimeZoneInfoTests.cs&lt;/a&gt; discusses invalid and ambiguous times that are covered in tests:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//    March 26, 2006                            October 29, 2006
// 2AM            3AM                        2AM              3AM
// |      +1 hr     |                        |       -1 hr      |
// | &amp;lt;invalid time&amp;gt; |                        | &amp;lt;ambiguous time&amp;gt; |
//                  *========== DST ========&amp;gt;*

//
// * 00:59:59 Sunday March 26, 2006 in Universal converts to
//   01:59:59 Sunday March 26, 2006 in Europe/Amsterdam (NO DST)
//
// * 01:00:00 Sunday March 26, 2006 in Universal converts to
//   03:00:00 Sunday March 26, 2006 in Europe/Amsterdam (DST)
//
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;stack-layouts&quot;&gt;Stack Layouts&lt;/h2&gt;

&lt;p&gt;To finish off, I wanted to look at ‘stack layouts’ because they seem to be a favourite of the .NET/Mono Runtime Engineers, there’s sooo many examples!&lt;/p&gt;

&lt;p&gt;First-up, &lt;code class=&quot;highlighter-rouge&quot;&gt;x68&lt;/code&gt; from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9d3f264b9ef8b4715017ec615dcb6f9d57e607cc/src/jit/lclvars.cpp#L4309-L4374&quot;&gt;coreclr/src/jit/lclvars.cpp&lt;/a&gt; (you can also see the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e277764916cbb740db199132be81701593820bb0/src/jit/lclvars.cpp#L3574-L3658&quot;&gt;x64&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e277764916cbb740db199132be81701593820bb0/src/jit/lclvars.cpp#L3660-L3744&quot;&gt;ARM&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e277764916cbb740db199132be81701593820bb0/src/jit/lclvars.cpp#L3746-L3835&quot;&gt;ARM64&lt;/a&gt; versions).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; *  The frame is laid out as follows for x86:
 *
 *              ESP frames                
 *
 *      |                       |         
 *      |-----------------------|         
 *      |       incoming        |         
 *      |       arguments       |         
 *      |-----------------------| &amp;lt;---- Virtual '0'         
 *      |    return address     |         
 *      +=======================+
 *      |Callee saved registers |         
 *      |-----------------------|         
 *      |       Temps           |         
 *      |-----------------------|         
 *      |       Variables       |         
 *      |-----------------------| &amp;lt;---- Ambient ESP
 *      |   Arguments for the   |         
 *      ~    next function      ~ 
 *      |                       |         
 *      |       |               |         
 *      |       | Stack grows   |         
 *              | downward                
 *              V                         
 *
 *
 *              EBP frames
 *
 *      |                       |
 *      |-----------------------|
 *      |       incoming        |
 *      |       arguments       |
 *      |-----------------------| &amp;lt;---- Virtual '0'         
 *      |    return address     |         
 *      +=======================+
 *      |    incoming EBP       |
 *      |-----------------------| &amp;lt;---- EBP
 *      |Callee saved registers |         
 *      |-----------------------|         
 *      |   security object     |
 *      |-----------------------|
 *      |     ParamTypeArg      |
 *      |-----------------------|
 *      |  Last-executed-filter |
 *      |-----------------------|
 *      |                       |
 *      ~      Shadow SPs       ~
 *      |                       |
 *      |-----------------------|
 *      |                       |
 *      ~      Variables        ~
 *      |                       |
 *      ~-----------------------|
 *      |       Temps           |
 *      |-----------------------|
 *      |       localloc        |
 *      |-----------------------| &amp;lt;---- Ambient ESP
 *      |   Arguments for the   |
 *      |    next function      ~
 *      |                       |
 *      |       |               |
 *      |       | Stack grows   |
 *              | downward
 *              V
 *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not to be left out, Mono has some nice examples covering &lt;a href=&quot;https://github.com/mono/mono/blob/2019-02/mono/mini/mini-mips.c#L4682-L4705&quot;&gt;MIPS&lt;/a&gt; (below), &lt;a href=&quot;https://github.com/mono/mono/blob/2019-02/mono/mini/mini-ppc.c#L4677-L4692&quot;&gt;PPC&lt;/a&gt; and &lt;a href=&quot;https://github.com/mono/mono/blob/2019-02/mono/mini/mini-arm.c#L6137-L6149&quot;&gt;ARM&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/*
 * Stack frame layout:
 * 
 *   ------------------- sp + cfg-&amp;gt;stack_usage + cfg-&amp;gt;param_area
 *      param area		incoming
 *   ------------------- sp + cfg-&amp;gt;stack_usage + MIPS_STACK_PARAM_OFFSET
 *      a0-a3			incoming
 *   ------------------- sp + cfg-&amp;gt;stack_usage
 *	ra
 *   ------------------- sp + cfg-&amp;gt;stack_usage-4
 *   	spilled regs
 *   ------------------- sp + 
 *   	MonoLMF structure	optional
 *   ------------------- sp + cfg-&amp;gt;arch.lmf_offset
 *   	saved registers		s0-s8
 *   ------------------- sp + cfg-&amp;gt;arch.iregs_offset
 *   	locals
 *   ------------------- sp + cfg-&amp;gt;param_area
 *   	param area		outgoing
 *   ------------------- sp + MIPS_STACK_PARAM_OFFSET
 *   	a0-a3			outgoing
 *   ------------------- sp
 *   	red zone
 */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, there’s another example &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9d3f264b9ef8b4715017ec615dcb6f9d57e607cc/src/vm/dllimportcallback.cpp#L254-L293&quot;&gt;covering &lt;code class=&quot;highlighter-rouge&quot;&gt;[DLLImport]&lt;/code&gt; callbacks&lt;/a&gt; and one more &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9d3f264b9ef8b4715017ec615dcb6f9d57e607cc/src/jit/codegenarm64.cpp#L791-L873&quot;&gt;involving funclet frames in ARM64&lt;/a&gt;, I told you there were lots!!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-rest&quot;&gt;The Rest&lt;/h2&gt;

&lt;p&gt;If you aren’t sick of ‘ASCII Art’ by now, here’s a few more examples for you to look at!!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CoreCLR
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/arm/stubs.cpp#L1934-L1966&quot;&gt;coreclr/stubs.cpp&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9d3f264b9ef8b4715017ec615dcb6f9d57e607cc/src/vm/inlinetracking.h#L191-L203&quot;&gt;coreclr/inlinetracking.h&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9d3f264b9ef8b4715017ec615dcb6f9d57e607cc/src/vm/inlinetracking.h#L248-L260&quot;&gt;coreclr/inlinetracking.h&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9d3f264b9ef8b4715017ec615dcb6f9d57e607cc/src/vm/comcallablewrapper.h#L105-L131&quot;&gt;coreclr/comcallablewrapper.h&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9d3f264b9ef8b4715017ec615dcb6f9d57e607cc/src/vm/comcallablewrapper.cpp#L1986-L2012&quot;&gt;coreclr/comcallablewrapper.cpp&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/4e2d07b5f592627530ee5645fd94325f17ee9487/src/System.Private.CoreLib/shared/System/Runtime/InteropServices/SafeHandle.cs#L36-L46&quot;&gt;coreclr/SafeHandle.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9d3f264b9ef8b4715017ec615dcb6f9d57e607cc/src/gc/gcpriv.h#L375-L398&quot;&gt;coreclr/gcpriv.h&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9d3f264b9ef8b4715017ec615dcb6f9d57e607cc/src/jit/compiler.hpp#L2081-L2104&quot;&gt;coreclr/compiler.hpp&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9d3f264b9ef8b4715017ec615dcb6f9d57e607cc/src/jit/optimizer.cpp#L1004-L1019&quot;&gt;coreclr/optimizer.cpp&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9d3f264b9ef8b4715017ec615dcb6f9d57e607cc/src/jit/codegencommon.cpp#L4858-L4911&quot;&gt;coreclr/codegencommon.cpp&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/c4dca1072d15bdda64c754ad1ea474b1580fa554/src/jit/morph.cpp#L1768-L1785&quot;&gt;coreclr/morph.cpp&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Roslyn
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/blob/Visual-Studio-2017-Version-15.9/src/Compilers/Test/Resources/Core/MetadataTests/Invalid/Signatures/SignatureCycle2.il#L3-L20&quot;&gt;roslyn/SignatureCycle2.il&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/blob/Visual-Studio-2017-Version-15.9/src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberContainerSymbol.cs#L1017-L1022&quot;&gt;roslyn/SourceMemberContainerSymbol.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/blob/Visual-Studio-2017-Version-15.9/src/Compilers/Core/CodeAnalysisTest/RealParserTests.cs#L529-L551&quot;&gt;roslyn/RealParserTests.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/blob/Visual-Studio-2017-Version-15.9/src/Compilers/CSharp/Portable/Compilation/CSharpSemanticModel.cs#L2718-L2759&quot;&gt;roslyn/CSharpSemanticModel.cs&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CoreFX
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corefx/blob/4b9fff5c022269c7dbb000bd14c10be27400beb2/src/Common/src/CoreLib/System/Decimal.DecCalc.cs#L1433-L1453&quot;&gt;corefx/Decimal.DecCalc.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corefx/blob/4b9fff5c022269c7dbb000bd14c10be27400beb2/src/Common/src/CoreLib/System/Number.Grisu3.cs#L964-L991&quot;&gt;corefx/Number.Grisu3.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corefx/blob/4b9fff5c022269c7dbb000bd14c10be27400beb2/src/Common/src/CoreLib/System/Buffers/Binary/Reader.cs#L89-L107&quot;&gt;corefx/Reader.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corefx/blob/4b9fff5c022269c7dbb000bd14c10be27400beb2/src/Common/src/CoreLib/System/Globalization/Calendar.cs#L371-L400&quot;&gt;corefx/Calendar.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corefx/blob/4b9fff5c022269c7dbb000bd14c10be27400beb2/src/Common/src/System/Collections/Generic/LargeArrayBuilder.SpeedOpt.cs#L196-L203&quot;&gt;corefx/LargeArrayBuilder.SpeedOpt.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corefx/blob/4b9fff5c022269c7dbb000bd14c10be27400beb2/src/Common/src/CoreLib/System/Runtime/Intrinsics/Vector128.cs#L610-L625&quot;&gt;corefx/Vector128.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corefx/blob/4b9fff5c022269c7dbb000bd14c10be27400beb2/src/System.Collections/src/System/Collections/Generic/SortedSet.cs#L18-L26&quot;&gt;corefx/SortedSet.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corefx/blob/4b9fff5c022269c7dbb000bd14c10be27400beb2/src/System.Data.Common/src/System/Data/RbTree.cs#L75-L81&quot;&gt;corefx/RbTree.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corefx/blob/4b9fff5c022269c7dbb000bd14c10be27400beb2/src/System.Numerics.Vectors/src/System/Numerics/Matrix4x4.cs#L818-L842&quot;&gt;corefx/Matrix4x4.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corefx/blob/4b9fff5c022269c7dbb000bd14c10be27400beb2/src/System.Reflection.Metadata/src/System/Reflection/Metadata/BlobBuilder.cs#L396-L410&quot;&gt;corefx/BlobBuilder.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corefx/blob/4b9fff5c022269c7dbb000bd14c10be27400beb2/src/System.Runtime.Extensions/src/System/IO/BufferedStream.cs#L909-L918&quot;&gt;corefx/BufferedStream.cs&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;AspNetCore
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/aspnet/AspNetCore/blob/9f1a978230cdd161998815c425bfd2d25e8436b6/src/Servers/Kestrel/Core/src/Internal/Http2/Http2Frame.Data.cs#L6-L14&quot;&gt;AspNetCore/Http2Frame.Data.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/aspnet/AspNetCore/blob/9f1a978230cdd161998815c425bfd2d25e8436b6/src/Servers/Kestrel/Core/src/Internal/Http2/Http2Frame.Ping.cs#L6-L12&quot;&gt;AspNetCore/Http2Frame.Ping.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/aspnet/AspNetCore/blob/9f1a978230cdd161998815c425bfd2d25e8436b6/src/Servers/Kestrel/Core/src/Internal/Http2/Http2Frame.GoAway.cs#L6-L14&quot;&gt;AspNetCore/Http2Frame.GoAway.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/aspnet/AspNetCore/blob/9f1a978230cdd161998815c425bfd2d25e8436b6/src/Servers/Kestrel/Core/src/Internal/Http2/Http2Frame.Priority.cs#L6-L12&quot;&gt;AspNetCore/Http2Frame.Priority.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/aspnet/AspNetCore/blob/9f1a978230cdd161998815c425bfd2d25e8436b6/src/Servers/Kestrel/Core/src/Internal/Http2/Http2Frame.Settings.cs#L6-L13&quot;&gt;AspNetCore/Http2Frame.Settings.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/aspnet/AspNetCore/blob/9f1a978230cdd161998815c425bfd2d25e8436b6/src/Servers/Kestrel/Core/src/Internal/Http2/Http2Frame.RstStream.cs#L6-L10&quot;&gt;AspNetCore/Http2Frame.RstStream.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/aspnet/AspNetCore/blob/9f1a978230cdd161998815c425bfd2d25e8436b6/src/Servers/Kestrel/Core/src/Internal/Http2/Http2Frame.Continuation.cs#L6-L10&quot;&gt;AspNetCore/Http2Frame.Continuation.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/aspnet/AspNetCore/blob/9f1a978230cdd161998815c425bfd2d25e8436b6/src/Servers/Kestrel/Core/src/Internal/Http2/Http2Frame.WindowUpdate.cs#L6-L10&quot;&gt;AspNetCore/Http2Frame.WindowUpdate.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/aspnet/AspNetCore/blob/9f1a978230cdd161998815c425bfd2d25e8436b6/src/Servers/Kestrel/Core/src/Internal/Http2/HPack/HPackDecoder.cs#L26-L71&quot;&gt;AspNetCore/HPackDecoder.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/aspnet/AspNetCore/blob/9f1a978230cdd161998815c425bfd2d25e8436b6/src/Components/Components/test/RenderTreeBuilderTest.cs#L188-L203&quot;&gt;AspNetCore/RenderTreeBuilderTest.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/aspnet/AspNetCore/blob/9f1a978230cdd161998815c425bfd2d25e8436b6/src/Servers/Kestrel/test/FunctionalTests/MaxRequestBufferSizeTests.cs#L25-L45&quot;&gt;AspNetCore/MaxRequestBufferSizeTests.cs&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Mono
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/mono/mono/blob/2019-02/mono/sgen/sgen-qsort.c#L46-L53&quot;&gt;mono/sgen/sgen-qsort.c&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

     
     
     
     
   </content>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='Roslyn' scheme='http://www.mattwarren.org/tags#Roslyn'/>
   
     <category term='CoreFX' scheme='http://www.mattwarren.org/tags#CoreFX'/>
   
     <category term='ASP.NET' scheme='http://www.mattwarren.org/tags#ASP.NET'/>
   
 </entry>
 
 <entry>
   <title>Is C# a low-level language?</title>
   <link href="http://www.mattwarren.org/2019/03/01/Is-CSharp-a-low-level-language/"/>
   <updated>2019-03-01T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2019/03/01/Is-CSharp-a-low-level-language</id>
   <content type="html">
     &lt;p&gt;I’m a massive fan of everything &lt;a href=&quot;http://fabiensanglard.net/&quot;&gt;Fabien Sanglard&lt;/a&gt; does, I love his blog and I’ve read &lt;a href=&quot;http://fabiensanglard.net/gebbdoom/index.html&quot;&gt;both&lt;/a&gt; his &lt;a href=&quot;http://fabiensanglard.net/gebbwolf3d/index.html&quot;&gt;books&lt;/a&gt; cover-to-cover (for more info on his books, check out the recent &lt;a href=&quot;https://hanselminutes.com/666/episode-666-game-engine-black-book-doom-with-fabien-sanglard&quot;&gt;Hansleminutes podcast&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Recently he wrote an excellent post where he &lt;a href=&quot;http://fabiensanglard.net/postcard_pathtracer/index.html&quot;&gt;deciphered a postcard sized raytracer&lt;/a&gt;, un-packing the obfuscated code and providing a fantastic explanation of the maths involved. I really recommend you take the time to read it!&lt;/p&gt;

&lt;p&gt;But it got me thinking, &lt;strong&gt;&lt;em&gt;would it be possible to port that C++ code to C#?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Partly because in my &lt;a href=&quot;https://raygun.com/platform/apm&quot;&gt;day job&lt;/a&gt; I’ve been having to write a fair amount of C++ recently and I’ve realised I’m a bit rusty, so I thought this might help!&lt;/p&gt;

&lt;p&gt;But more significantly, I wanted to get a better insight into the question &lt;strong&gt;is C# a low-level language?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A slightly different, but related question is &lt;em&gt;how suitable is C# for ‘systems programming’?&lt;/em&gt; For more on that I really recommend Joe Duffy’s &lt;a href=&quot;http://joeduffyblog.com/2013/12/27/csharp-for-systems-programming/&quot;&gt;excellent post from 2013&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;line-by-line-port&quot;&gt;Line-by-line port&lt;/h2&gt;

&lt;p&gt;I started by simply porting the &lt;a href=&quot;http://fabiensanglard.net/postcard_pathtracer/formatted_full.html&quot;&gt;un-obfuscated C++ code&lt;/a&gt; line-by-line &lt;a href=&quot;https://gist.github.com/mattwarren/d17a0c356bd6fdb9f596bee6b9a5e63c&quot;&gt;to C#&lt;/a&gt;. Turns out that this was pretty straight forward, I guess the &lt;a href=&quot;https://stackoverflow.com/a/1991356&quot;&gt;story about C# being C++++&lt;/a&gt; is true after all!!&lt;/p&gt;

&lt;p&gt;Let’s look at an example, the main data structure in the code is a ‘vector’, here’s the code side-by-side, C++ on the left and C# on the right:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2019/03/Diff%20-%20C++%20v.%20C%23%20-%20struct%20Vec.png&quot;&gt;&lt;img src=&quot;/images/2019/03/Diff%20-%20C++%20v.%20C%23%20-%20struct%20Vec.png&quot; alt=&quot;Diff - C++ v. C# - struct Vec&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So there’s a few syntax differences, but because .NET lets you define &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/value-types&quot;&gt;your own ‘Value Types’&lt;/a&gt; I was able to get the same functionality. This is significant because treating the ‘vector’ as a &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; means we can get better ‘data locality’ and the .NET Garbage Collector (GC) doesn’t need to be involved as the data will go onto the &lt;em&gt;stack&lt;/em&gt; (probably, yes I know it’s an implementation detail).&lt;/p&gt;

&lt;p&gt;For more info on &lt;code class=&quot;highlighter-rouge&quot;&gt;structs&lt;/code&gt; or ‘value types’ in .NET see:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://tooslowexception.com/heap-vs-stack-value-type-vs-reference-type/&quot;&gt;Heap vs stack, value type vs reference type&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://adamsitnik.com/Value-Types-vs-Reference-Types/&quot;&gt;Value Types vs Reference Types&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jonskeet.uk/csharp/memory.html&quot;&gt;Memory in .NET - what goes where&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/ericlippert/2010/09/30/the-truth-about-value-types/&quot;&gt;The Truth About Value Types&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/ericlippert/2009/04/27/the-stack-is-an-implementation-detail-part-one/&quot;&gt;The Stack Is An Implementation Detail, Part One&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In particular that last post form Eric Lippert contains this helpful quote that makes it clear what ‘value types’ really are:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Surely the most relevant fact about value types is &lt;strong&gt;not the implementation detail of &lt;em&gt;how they are allocated&lt;/em&gt;&lt;/strong&gt;, but rather the &lt;em&gt;by-design semantic meaning&lt;/em&gt; of “value type”, &lt;strong&gt;namely that they are &lt;em&gt;always copied “by value”&lt;/em&gt;&lt;/strong&gt;. If the relevant thing was their allocation details then we’d have called them “heap types” and “stack types”. But that’s not relevant most of the time. Most of the time the relevant thing is their copying and identity semantics.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now lets look at how some other methods look side-by-side (again C++ on the left, C# on the right), first up &lt;code class=&quot;highlighter-rouge&quot;&gt;RayTracing(..)&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2019/03/Diff%20-%20C++%20v.%20C%23%20-%20RayMatching.png&quot;&gt;&lt;img src=&quot;/images/2019/03/Diff%20-%20C++%20v.%20C%23%20-%20RayMatching.png&quot; alt=&quot;Diff - C++ v. C# - RayMatching&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next &lt;code class=&quot;highlighter-rouge&quot;&gt;QueryDatabase(..)&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2019/03/Diff%20-%20C++%20v.%20C%23%20-%20QueryDatabase%20(partial).png&quot;&gt;&lt;img src=&quot;/images/2019/03/Diff%20-%20C++%20v.%20C%23%20-%20QueryDatabase%20(partial).png&quot; alt=&quot;Diff - C++ v. C# - QueryDatabase&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(see &lt;a href=&quot;http://fabiensanglard.net/postcard_pathtracer/&quot;&gt;Fabien’s post&lt;/a&gt; for an explanation of what these 2 functions are doing)&lt;/p&gt;

&lt;p&gt;But the point is that again, C# lets us very easily write C++ code! In this case what helps us out the most is the &lt;code class=&quot;highlighter-rouge&quot;&gt;ref&lt;/code&gt; keyword which lets us pass a &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref&quot;&gt;value by reference&lt;/a&gt;. We’ve been able to use &lt;code class=&quot;highlighter-rouge&quot;&gt;ref&lt;/code&gt; in method calls for quite a while, but recently there’s been a effort to allow &lt;code class=&quot;highlighter-rouge&quot;&gt;ref&lt;/code&gt; in more places:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/ref-returns&quot;&gt;Ref returns and ref locals&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/mazhou/2018/03/02/c-7-series-part-9-ref-structs/&quot;&gt;C# 7 Series, Part 9: ref structs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now &lt;em&gt;sometimes&lt;/em&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;ref&lt;/code&gt; can provide a performance boost because it means that the &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; doesn’t need to be copied, see the benchmarks in &lt;a href=&quot;https://adamsitnik.com/ref-returns-and-ref-locals/#passing-arguments-to-methods-by-reference&quot;&gt;Adam Sitniks post&lt;/a&gt; and &lt;a href=&quot;https://blogs.msdn.microsoft.com/seteplia/2018/04/11/performance-traps-of-ref-locals-and-ref-returns-in-c/&quot;&gt;Performance traps of ref locals and ref returns in C#&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;However what’s most important for this scenario is that it allows us to have the same behaviour in our C# port as the original C++ code. Although I want to point out that ‘Managed References’ as they’re known aren’t exactly the same as ‘pointers’, most notably you can’t do arithmetic on them, for more on this see:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://mustoverride.com/refs-not-ptrs/&quot;&gt;ref returns are not pointers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mustoverride.com/managed-refs-CLR/&quot;&gt;Managed pointers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/ericlippert/2009/02/17/references-are-not-addresses/&quot;&gt;References are not addresses&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;performance&quot;&gt;Performance&lt;/h2&gt;

&lt;p&gt;So, it’s all well and good being able to port the code, but ultimately the performance also matters. Especially in something like a ‘ray tracer’ that can take minutes to run! The C++ code contains a variable called &lt;code class=&quot;highlighter-rouge&quot;&gt;sampleCount&lt;/code&gt; that controls the final quality of the image, with &lt;code class=&quot;highlighter-rouge&quot;&gt;sampleCount = 2&lt;/code&gt; it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2019/03/output-C%23%20-%20sampleCount%20=%202.png&quot;&gt;&lt;img src=&quot;/images/2019/03/output-C%23%20-%20sampleCount%20=%202.png&quot; alt=&quot;output C# - sampleCount = 2&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which clearly isn’t that realistic!&lt;/p&gt;

&lt;p&gt;However once you get to &lt;code class=&quot;highlighter-rouge&quot;&gt;sampleCount = 2048&lt;/code&gt; things look a &lt;em&gt;lot&lt;/em&gt; better:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2019/03/output-C%23%20-%20sampleCount%20=%202048.png&quot;&gt;&lt;img src=&quot;/images/2019/03/output-C%23%20-%20sampleCount%20=%202048.png&quot; alt=&quot;output C# - sampleCount = 2048&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But, running with &lt;code class=&quot;highlighter-rouge&quot;&gt;sampleCount = 2048&lt;/code&gt; means the rendering takes a &lt;strong&gt;long time&lt;/strong&gt;, so all the following results were run with it set to &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;, which means the test runs completed in ~1 minute. Changing &lt;code class=&quot;highlighter-rouge&quot;&gt;sampleCount&lt;/code&gt; only affects the number of iterations of the outermost loop of the code, see &lt;a href=&quot;https://gist.github.com/mattwarren/1580572d9d641147c61caf65c383c3a4&quot;&gt;this gist&lt;/a&gt; for an explanation.&lt;/p&gt;

&lt;h3 id=&quot;results-after-a-naive-line-by-line-port&quot;&gt;Results after a ‘naive’ line-by-line port&lt;/h3&gt;

&lt;p&gt;To be able to give a meaningful side-by-side comparison of the C++ and C# versions I used the &lt;a href=&quot;https://code.google.com/archive/p/time-windows/source/default/source&quot;&gt;time-windows&lt;/a&gt; tool that’s a port of the Unix &lt;code class=&quot;highlighter-rouge&quot;&gt;time&lt;/code&gt; command. My initial results looked this this:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;C++ (VS 2017)&lt;/th&gt;
      &lt;th&gt;.NET Framework (4.7.2)&lt;/th&gt;
      &lt;th&gt;.NET Core (2.2)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Elapsed time (secs)&lt;/td&gt;
      &lt;td&gt;47.40&lt;/td&gt;
      &lt;td&gt;80.14&lt;/td&gt;
      &lt;td&gt;78.02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Kernel time&lt;/td&gt;
      &lt;td&gt;0.14 (0.3%)&lt;/td&gt;
      &lt;td&gt;0.72 (0.9%)&lt;/td&gt;
      &lt;td&gt;0.63 (0.8%)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;User time&lt;/td&gt;
      &lt;td&gt;43.86 (92.5%)&lt;/td&gt;
      &lt;td&gt;73.06 (91.2%)&lt;/td&gt;
      &lt;td&gt;70.66 (90.6%)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;page fault #&lt;/td&gt;
      &lt;td&gt;1,143&lt;/td&gt;
      &lt;td&gt;4,818&lt;/td&gt;
      &lt;td&gt;5,945&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Working set (KB)&lt;/td&gt;
      &lt;td&gt;4,232&lt;/td&gt;
      &lt;td&gt;13,624&lt;/td&gt;
      &lt;td&gt;17,052&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Paged pool (KB)&lt;/td&gt;
      &lt;td&gt;95&lt;/td&gt;
      &lt;td&gt;172&lt;/td&gt;
      &lt;td&gt;154&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Non-paged pool&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Page file size (KB)&lt;/td&gt;
      &lt;td&gt;1,460&lt;/td&gt;
      &lt;td&gt;10,936&lt;/td&gt;
      &lt;td&gt;11,024&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So initially we see that the C# code is quite a bit slower than the C++ version, but it does get better (see below).&lt;/p&gt;

&lt;p&gt;However lets first look at what the .NET JIT is doing for us even with this ‘naive’ line-by-line port. Firstly, it’s doing a nice job of in-lining the smaller ‘helper methods’, we can see this by looking at the output of the brilliant &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=StephanZehetner.InliningAnalyzer&quot;&gt;Inlining Analyzer&lt;/a&gt; tool (green overlay = inlined):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2019/03/Inlining Analyzer - QueryDatabase.png&quot;&gt;&lt;img src=&quot;/images/2019/03/Inlining Analyzer - QueryDatabase.png&quot; alt=&quot;Inlining Analyzer - QueryDatabase&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, it doesn’t inline all methods, for example &lt;code class=&quot;highlighter-rouge&quot;&gt;QueryDatabase(..)&lt;/code&gt; is skipped because of it’s complexity:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2019/03/Inlining Analyzer - RayMarching - with ToolTip.png&quot;&gt;&lt;img src=&quot;/images/2019/03/Inlining Analyzer - RayMarching - with ToolTip.png&quot; alt=&quot;Inlining Analyzer - RayMarching - with ToolTip&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another feature that the .NET Just-In-Time (JIT) compiler provides is  converting specific methods calls into corresponding CPU instructions. We can see this in action with the &lt;code class=&quot;highlighter-rouge&quot;&gt;sqrt&lt;/code&gt; wrapper function, here’s the original C# code (note the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;Math.Sqrt&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// intnv square root&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.0f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here’s the assembly code that the .NET JIT generates, there’s no call to &lt;code class=&quot;highlighter-rouge&quot;&gt;Math.Sqrt&lt;/code&gt; and it makes use of the &lt;code class=&quot;highlighter-rouge&quot;&gt;vsqrtsd&lt;/code&gt; &lt;a href=&quot;https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=vsqrtsd&amp;amp;expand=5236&quot;&gt;CPU instruction&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;; Assembly listing for method Program:sqrtf(float):float
; Emitting BLENDED_CODE for X64 CPU with AVX - Windows
; Tier-1 compilation
; optimized code
; rsp based frame
; partially interruptible
; Final local variable assignments
;
;  V00 arg0         [V00,T00] (  3,  3   )   float  -&amp;gt;  mm0        
;# V01 OutArgs      [V01    ] (  1,  1   )  lclBlk ( 0) [rsp+0x00]   &quot;OutgoingArgSpace&quot;
;
; Lcl frame size = 0

G_M8216_IG01:
       vzeroupper 

G_M8216_IG02:
       vcvtss2sd xmm0, xmm0
       vsqrtsd  xmm0, xmm0
       vcvtsd2ss xmm0, xmm0

G_M8216_IG03:
       ret      

; Total bytes of code 16, prolog size 3 for method Program:sqrtf(float):float
; ============================================================
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(to get this output you need to following &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/building/viewing-jit-dumps.md#useful-complus-variables&quot;&gt;these instructions&lt;/a&gt;, use the &lt;a href=&quot;https://github.com/EgorBo/Disasmo&quot;&gt;‘Disasmo’ VS2019 Add-in&lt;/a&gt; or take a look at &lt;a href=&quot;https://sharplab.io/#v2:EYLgHgbALANALiAhgZwLYB8ACAGABJgRgG4BYAKEwGZ8AmXAYVwG9zc39rMpcBZACgCUzVu1EA3RACdcYXAF5eiOAAsAdAGUAjpLh8C2AaTKjRhAJx8whkWwC+5W0A==&quot;&gt;SharpLab.io&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;These replacements are also known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Intrinsic_function&quot;&gt;‘intrinsics’&lt;/a&gt; and we can see the JIT generating them in the code below. This snippet just shows the mapping for &lt;code class=&quot;highlighter-rouge&quot;&gt;AMD64&lt;/code&gt;, the JIT also targets &lt;code class=&quot;highlighter-rouge&quot;&gt;X86&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ARM&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ARM64&lt;/code&gt;, the full method is &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/jit/importer.cpp#L19144-L19217&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsTargetIntrinsic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CorInfoIntrinsics&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intrinsicId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#if defined(_TARGET_AMD64_) || (defined(_TARGET_X86_) &amp;amp;&amp;amp; !defined(LEGACY_BACKEND))
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intrinsicId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// AMD64/x86 has SSE2 instructions to directly compute sqrt/abs and SSE4.1
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// instructions to directly compute round/ceiling/floor.
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// TODO: Because the x86 backend only targets SSE for floating-point code,
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//       it does not treat Sine, Cosine, or Round as intrinsics (JIT32
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//       implemented those intrinsics as x87 instructions). If this poses
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//       a CQ problem, it may be necessary to change the implementation of
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//       the helper calls to decrease call overhead or switch back to the
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//       x87 instructions. This is tracked by #7097.
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CORINFO_INTRINSIC_Sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CORINFO_INTRINSIC_Abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CORINFO_INTRINSIC_Round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CORINFO_INTRINSIC_Ceiling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CORINFO_INTRINSIC_Floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compSupports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstructionSet_SSE41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, some methods are implemented like this, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;Sqrt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Abs&lt;/code&gt;, but for others the CLR instead uses the C++ runtime functions &lt;a href=&quot;https://en.cppreference.com/w/c/numeric/math/pow&quot;&gt;for instance &lt;code class=&quot;highlighter-rouge&quot;&gt;powf&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This entire process is explained very nicely in &lt;a href=&quot;https://stackoverflow.com/a/8870593&quot;&gt;How is Math.Pow() implemented in .NET Framework?&lt;/a&gt;, but we can also see it in action in the CoreCLR source:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;COMSingle::Pow&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/classlibnative/float/floatsingle.cpp#L205-L212&quot;&gt;implementation&lt;/a&gt;, i.e. the method that’s executed if you call &lt;code class=&quot;highlighter-rouge&quot;&gt;MathF.Pow(..)&lt;/code&gt; from C# code&lt;/li&gt;
  &lt;li&gt;Mapping to &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/pal/inc/pal.h#L4094-L4198&quot;&gt;C runtime method implementations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Cross-platform version of &lt;code class=&quot;highlighter-rouge&quot;&gt;powf&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/pal/src/cruntime/math.cpp#L755-L840&quot;&gt;implementation&lt;/a&gt; that ensures the same behaviour across OSes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;results-after-simple-performance-improvements&quot;&gt;Results after simple performance improvements&lt;/h3&gt;

&lt;p&gt;However, I wanted to see if my ‘naive’ line-by-line port could be improved, after some profiling I made two main changes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Remove in-line array initialisation&lt;/li&gt;
  &lt;li&gt;Switch from &lt;code class=&quot;highlighter-rouge&quot;&gt;Math.XXX(..)&lt;/code&gt; functions to the &lt;code class=&quot;highlighter-rouge&quot;&gt;MathF.XXX()&lt;/code&gt; counterparts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These changes are explained in more depth below&lt;/p&gt;

&lt;h4 id=&quot;remove-in-line-array-initialisation&quot;&gt;Remove in-line array initialisation&lt;/h4&gt;

&lt;p&gt;For more information about why this is necessary see this excellent &lt;a href=&quot;https://stackoverflow.com/a/39106675&quot;&gt;Stack Overflow answer&lt;/a&gt; from &lt;a href=&quot;https://twitter.com/andrey_akinshin?lang=en&quot;&gt;Andrey Akinshin&lt;/a&gt; complete with benchmarks and assembly code! It comes to the following conclusion:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;&lt;em&gt;Does .NET caches hardcoded local arrays?&lt;/em&gt;&lt;/strong&gt; Kind of: the Roslyn compiler put it in the metadata.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;&lt;em&gt;Do we have any overhead in this case?&lt;/em&gt;&lt;/strong&gt; Unfortunately, yes: JIT will copy the array content from the metadata for each invocation; it will work longer than the case with a static array. Runtime also allocates objects and produce memory traffic.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;&lt;em&gt;Should we care about it?&lt;/em&gt;&lt;/strong&gt; It depends. If it’s a hot method and you want to achieve a good level of performance, you should use a static array. If it’s a cold method which doesn’t affect the application performance, you probably should write “good” source code and put the array in the method scope.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can see the change I made &lt;a href=&quot;https://gist.github.com/mattwarren/d17a0c356bd6fdb9f596bee6b9a5e63c/revisions#diff-ab5447b35812d457232030d7d2577458R114&quot;&gt;in this diff&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;using-mathf-functions-instead-of-math&quot;&gt;Using MathF functions instead of Math&lt;/h4&gt;

&lt;p&gt;Secondly and most significantly I got a big perf improvement by making the following changes:&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#if NETSTANDARD2_1 || NETCOREAPP2_0 || NETCOREAPP2_1 || NETCOREAPP2_2 || NETCOREAPP3_0
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// intnv square root&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.0f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MathF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#else
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.0f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As of ‘.NET Standard 2.1’ there are now specific &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; implementations of the common maths functions, located in the &lt;a href=&quot;https://apisof.net/catalog/System.MathF&quot;&gt;System.MathF class&lt;/a&gt;. For more information on this API and it’s implementation see:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corefx/issues/1151&quot;&gt;New API for single-precision math&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/5492/files&quot;&gt;Adding single-precision math functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/7690&quot;&gt;Provide a set of unit tests over the new single-precision math APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/14155&quot;&gt;System.Math and System.MathF should be implemented in managed code, rather than as FCALLs to the C runtime&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/14156&quot;&gt;Moving &lt;code class=&quot;highlighter-rouge&quot;&gt;Math.Abs(double)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Math.Abs(float)&lt;/code&gt; to be implemented in managed code.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/designs/issues/13&quot;&gt;Design and process for adding platform dependent intrinsics to .NET&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After these changes, the C# code is ~10% slower than the C++ version:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;C++ (VS C++ 2017)&lt;/th&gt;
      &lt;th&gt;.NET Framework (4.7.2)&lt;/th&gt;
      &lt;th&gt;.NET Core (2.2) TC OFF&lt;/th&gt;
      &lt;th&gt;.NET Core (2.2) TC ON&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Elapsed time (secs)&lt;/td&gt;
      &lt;td&gt;41.38&lt;/td&gt;
      &lt;td&gt;58.89&lt;/td&gt;
      &lt;td&gt;46.04&lt;/td&gt;
      &lt;td&gt;44.33&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Kernel time&lt;/td&gt;
      &lt;td&gt;0.05 (0.1%)&lt;/td&gt;
      &lt;td&gt;0.06 (0.1%)&lt;/td&gt;
      &lt;td&gt;0.14 (0.3%)&lt;/td&gt;
      &lt;td&gt;0.13 (0.3%)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;User time&lt;/td&gt;
      &lt;td&gt;41.19 (99.5%)&lt;/td&gt;
      &lt;td&gt;58.34 (99.1%)&lt;/td&gt;
      &lt;td&gt;44.72 (97.1%)&lt;/td&gt;
      &lt;td&gt;44.03 (99.3%)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;page fault #&lt;/td&gt;
      &lt;td&gt;1,119&lt;/td&gt;
      &lt;td&gt;4,749&lt;/td&gt;
      &lt;td&gt;5,776&lt;/td&gt;
      &lt;td&gt;5,661&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Working set (KB)&lt;/td&gt;
      &lt;td&gt;4,136&lt;/td&gt;
      &lt;td&gt;13,440&lt;/td&gt;
      &lt;td&gt;16,788&lt;/td&gt;
      &lt;td&gt;16,652&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Paged pool (KB)&lt;/td&gt;
      &lt;td&gt;89&lt;/td&gt;
      &lt;td&gt;172&lt;/td&gt;
      &lt;td&gt;150&lt;/td&gt;
      &lt;td&gt;150&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Non-paged pool&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Page file size (KB)&lt;/td&gt;
      &lt;td&gt;1,428&lt;/td&gt;
      &lt;td&gt;10,904&lt;/td&gt;
      &lt;td&gt;10,960&lt;/td&gt;
      &lt;td&gt;11,044&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;TC = &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/tiered-compilation-preview-in-net-core-2-1/&quot;&gt;Tiered Compilation&lt;/a&gt; (I &lt;em&gt;believe&lt;/em&gt; that it’ll be on by default in .NET Core 3.0)&lt;/p&gt;

&lt;p&gt;For completeness, here’s the results across several runs:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Run&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;C++ (VS C++ 2017)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;.NET Framework (4.7.2)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;.NET Core (2.2) TC OFF&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;.NET Core (2.2) TC ON&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;TestRun-01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;41.38&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;58.89&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;46.04&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;44.33&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TestRun-02&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;41.19&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;57.65&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;46.23&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;45.96&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TestRun-03&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;42.17&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;62.64&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;46.22&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;48.73&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the difference between .NET Core and .NET Framework is due to the lack of the &lt;code class=&quot;highlighter-rouge&quot;&gt;MathF&lt;/code&gt; API in .NET Framework v4.7.2, for more info see &lt;a href=&quot;https://github.com/dotnet/standard/issues/859&quot;&gt;Support .Net Framework (4.8?) for netstandard 2.1&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;further-performance-improvements&quot;&gt;Further performance improvements&lt;/h2&gt;

&lt;p&gt;However I’m sure that others can do better!&lt;/p&gt;

&lt;p&gt;If you’re interested in trying to close the gap the &lt;a href=&quot;https://gist.github.com/mattwarren/d17a0c356bd6fdb9f596bee6b9a5e63c&quot;&gt;C# code is available&lt;/a&gt;. For comparison, you can see the assembly produced by the C++ compiler courtesy of the brilliant &lt;a href=&quot;https://godbolt.org/z/l2QZLY&quot;&gt;Compiler Explorer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, if it helps, here’s the output from the Visual Studio Profiler showing the ‘hot path’ (after the perf improvement described above):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2019/03/Call%20Tree%20(tidied%20up)%20-%20Report20190221-2029-After-MathF-Changes-NetCore.png&quot;&gt;&lt;img src=&quot;/images/2019/03/Call%20Tree%20(tidied%20up)%20-%20Report20190221-2029-After-MathF-Changes-NetCore.png&quot; alt=&quot;Call Tree (tidied up) - Report20190221-2029-After-MathF-Changes-NetCore.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;is-c-a-low-level-language&quot;&gt;Is C# a low-level language?&lt;/h2&gt;

&lt;p&gt;Or more specifically:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;What language features of C#/F#/VB.NET or BCL/Runtime functionality enable ‘low-level’* programming?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;* yes, I know ‘low-level’ is a subjective term 😊&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Any C# developer is going to have a different idea of what ‘low-level’ means, these features would be taken for granted by C++ or Rust programmers.&lt;/p&gt;

&lt;p&gt;Here’s the list that I came up with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://adamsitnik.com/ref-returns-and-ref-locals/&quot;&gt;ref returns and ref locals&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;“tl;dr Pass and return by reference to avoid large struct copying. It’s type and memory safe. It can be even &lt;strong&gt;faster&lt;/strong&gt; than &lt;code class=&quot;highlighter-rouge&quot;&gt;unsafe!&lt;/code&gt;”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/unsafe-code&quot;&gt;Unsafe code in .NET&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;“The core C# language, as defined in the preceding chapters, differs notably from C and C++ in its omission of pointers as a data type. Instead, C# provides references and the ability to create objects that are managed by a garbage collector. This design, coupled with other features, makes C# a much safer language than C or C++.”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tooslowexception.com/managed-pointers-in-net/&quot;&gt;Managed pointers in .NET&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;“There is, however, another pointer type in CLR – a managed pointer. It could be defined as a more general type of reference, which may point to other locations than just the beginning of an object.”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/mazhou/2018/03/25/c-7-series-part-10-spant-and-universal-memory-management/&quot;&gt;C# 7 Series, Part 10: Span&amp;lt;T&amp;gt; and universal memory management&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;“&lt;code class=&quot;highlighter-rouge&quot;&gt;System.Span&amp;lt;T&amp;gt;&lt;/code&gt; is a stack-only type (&lt;code class=&quot;highlighter-rouge&quot;&gt;ref struct&lt;/code&gt;) that wraps all memory access patterns, it is the type for universal contiguous memory access. You can think the implementation of the Span&lt;T&gt; contains a dummy reference and a length, accepting all 3 memory access types.&quot;&lt;/T&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/interop/&quot;&gt;Interoperability (C# Programming Guide)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;“The .NET Framework enables interoperability with unmanaged code through platform invoke services, the &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Runtime.InteropServices&lt;/code&gt; namespace, C++ interoperability, and COM interoperability (COM interop).”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, I know my limitations and so I &lt;a href=&quot;https://twitter.com/matthewwarren/status/1097875987398828032&quot;&gt;asked on twitter&lt;/a&gt; and got &lt;em&gt;a lot&lt;/em&gt; more replies to add to the list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/ben_a_adams/status/1097876408775442432&quot;&gt;Ben Adams&lt;/a&gt; “Platform intrinsics (CPU instruction access)”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/marcgravell/status/1097877192745336837&quot;&gt;Marc Gravell&lt;/a&gt; “SIMD via Vector&lt;T&gt; (which mixes well with Span&lt;T&gt;) is *fairly* low; .NET Core should (soon?) offer direct CPU intrinsics for more explicit usage targeting particular CPU ops&quot;&lt;/T&gt;&lt;/T&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/marcgravell/status/1097878317875761153&quot;&gt;Marc Gravell&lt;/a&gt; “powerful JIT: things like range elision on arrays/spans, and the JIT using per-struct-T rules to remove huge chunks of code that it knows can’t be reached for that T, or on your particular CPU (BitConverter.IsLittleEndian, Vector.IsHardwareAccelerated, etc)”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/vcsjones/status/1097877294864056320&quot;&gt;Kevin Jones&lt;/a&gt; “I would give a special shout-out to the &lt;code class=&quot;highlighter-rouge&quot;&gt;MemoryMarshal&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Unsafe&lt;/code&gt; classes, and probably a few other things in the &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Runtime.CompilerServices&lt;/code&gt; namespace.”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/Pessimizations/status/1097877381296066560&quot;&gt;Theodoros Chatzigiannakis&lt;/a&gt; “You could also include &lt;code class=&quot;highlighter-rouge&quot;&gt;__makeref&lt;/code&gt; and the rest.”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/damageboy/status/1097877247120326658&quot;&gt;damageboy&lt;/a&gt; “Being able to dynamically generate code that fits the expected input exactly, given that the latter will only be known at runtime, and might change periodically?”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/RobertHaken/status/1097880613988851712&quot;&gt;Robert Haken&lt;/a&gt; “dynamic IL emission”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/buybackoff/status/1097885830364966914&quot;&gt;Victor Baybekov&lt;/a&gt; “Stackalloc was not mentioned. Also ability to write raw IL (not dynamic, so save on a delegate call), e.g. to use cached &lt;code class=&quot;highlighter-rouge&quot;&gt;ldftn&lt;/code&gt; and call them via &lt;code class=&quot;highlighter-rouge&quot;&gt;calli&lt;/code&gt;. VS2017 has a proj template that makes this trivial via extern methods + MethodImplOptions.ForwardRef + ilasm.exe rewrite.”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/buybackoff/status/1097887318806093824&quot;&gt;Victor Baybekov&lt;/a&gt; “Also MethodImplOptions.AggressiveInlining “does enable ‘low-level’ programming” in a sense that it allows to write high-level code with many small methods and still control JIT behavior to get optimized result. Otherwise uncomposable 100s LOCs methods with copy-paste…”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/ben_a_adams/status/1097885533508980738&quot;&gt;Ben Adams&lt;/a&gt; “Using the same calling conventions (ABI) as the underlying platform and p/invokes for interop might be more of a thing though?”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/buybackoff/status/1097893756672581632&quot;&gt;Victor Baybekov&lt;/a&gt; “Also since you mentioned #fsharp - it does have &lt;code class=&quot;highlighter-rouge&quot;&gt;inline&lt;/code&gt; keyword that does the job at IL level before JIT, so it was deemed important at the language level. C# lacks this (so far) for lambdas which are always virtual calls and workarounds are often weird (constrained generics).”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/xoofx/status/1097895771142320128&quot;&gt;Alexandre Mutel&lt;/a&gt; “new SIMD intrinsics, Unsafe Utility class/IL post processing (e.g custom, Fody…etc.). For C#8.0, upcoming function pointers…”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/xoofx/status/1097896059236466689&quot;&gt;Alexandre Mutel&lt;/a&gt; “related to IL, F# has support for direct IL within the language for example”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/0omari0/status/1097916897952235520&quot;&gt;OmariO&lt;/a&gt; “BinaryPrimitives. Low-level but safe.” (https://docs.microsoft.com/en-us/dotnet/api/system.buffers.binary.binaryprimitives?view=netcore-3.0)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/kozy_kekyo/status/1097982126190878720&quot;&gt;Kouji (Kozy) Matsui&lt;/a&gt; “How about native inline assembler? It’s difficult for how relation both toolchains and runtime, but can replace current P/Invoke solution and do inlining if we have it.”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/praeclarum/status/1098002275891642368&quot;&gt;Frank A. Krueger&lt;/a&gt; “Ldobj, stobj, initobj, initblk, cpyblk.”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/konradkokosa/status/1098155819340828672&quot;&gt;Konrad Kokosa&lt;/a&gt; “Maybe Thread Local Storage? Fixed Size Buffers? unmanaged constraint and blittable types should be probably mentioned:)”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/sebify/status/1098161110476312582&quot;&gt;Sebastiano Mandalà&lt;/a&gt; “Just my two cents as everything has been said: what about something as simple as struct layout and how padding and memory alignment and order of the fields may affect the cache line performance? It’s something I have to investigate myself too”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/NinoFloris/status/1098433286899146753&quot;&gt;Nino Floris&lt;/a&gt; “Constants embedding via readonlyspan, stackalloc, finalizers, WeakReference, open delegates, MethodImplOptions, MemoryBarriers, TypedReference, varargs, SIMD, Unsafe.AsRef can coerce struct types if layout matches exactly (used for a.o. TaskAwaiter and its &lt;T&gt; version)&quot;&lt;/T&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;So in summary, I would say that C# certainly lets you write code that looks a lot like C++ and in conjunction with the Runtime and Base-Class Libraries it gives you a lot of low-level functionality&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=19280049&quot;&gt;Hacker News&lt;/a&gt;, &lt;a href=&quot;https://old.reddit.com/r/programming/comments/aw4ig7/is_c_a_lowlevel_language/?sort=top&quot;&gt;/r/programming&lt;/a&gt;, &lt;a href=&quot;https://old.reddit.com/r/dotnet/comments/aw4ilf/is_c_a_lowlevel_language/?sort=top&quot;&gt;/r/dotnet&lt;/a&gt; or &lt;a href=&quot;https://old.reddit.com/r/csharp/comments/aw4ij6/is_c_a_lowlevel_language/?sort=top&quot;&gt;/r/csharp&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=7GTpwgsmHgU&quot;&gt;Patterns for high-performance C#.&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/federicolois&quot;&gt;Federico Andres Lois&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/ricom/2005/05/10/performance-quiz-6-chineseenglish-dictionary-reader/&quot;&gt;Performance Quiz #6 — Chinese/English Dictionary reader&lt;/a&gt; (From 2005, 2 Microsoft bloggers have a ‘performance’ battle, C++ v. C#)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/ricom/2005/05/20/performance-quiz-6-conclusion-studying-the-space/&quot;&gt;Performance Quiz #6 — Conclusion, Studying the Space&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/138406&quot;&gt;How much faster is C++ than C#?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/jonathanh/2005/05/20/optimizing-managed-c-vs-native-c-code/&quot;&gt;Optimizing managed C# vs. native C++ code&lt;/a&gt; (2005)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Unity ‘Burst’ Compiler:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.unity3d.com/2019/02/26/on-dots-c-c/&quot;&gt;How Unity is making (a subset of) C# as fast as C++&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://infalliblecode.com/unity-burst-compiler/&quot;&gt;Unity Burst Compiler: Performance Optimization Made Easy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://aras-p.info/blog/2018/03/28/Daily-Pathtracer-Part-3-CSharp-Unity-Burst/&quot;&gt;Daily Pathtracer Part 3: C# &amp;amp; Unity &amp;amp; Burst&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lucasmeijer.com/posts/cpp_unity/&quot;&gt;C++, C# and Unity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=QkM6zEGFhDY&quot;&gt;Deep Dive into the Burst Compiler - Unite LA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

     
     
     
     
   </content>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='C#' scheme='http://www.mattwarren.org/tags#C#'/>
   
 </entry>
 
 <entry>
   <title>&quot;Stack Walking&quot; in the .NET Runtime</title>
   <link href="http://www.mattwarren.org/2019/01/21/Stackwalking-in-the-.NET-Runtime/"/>
   <updated>2019-01-21T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2019/01/21/Stackwalking-in-the-.NET-Runtime</id>
   <content type="html">
     &lt;p&gt;What is ‘stack walking’, well as always the ‘Book of the Runtime’ (BotR) helps us, from the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/stackwalking.md&quot;&gt;relevant page&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The CLR makes heavy use of a technique known as stack walking (or stack crawling). This involves &lt;strong&gt;iterating the sequence of call frames for a particular thread&lt;/strong&gt;, from the most recent (the thread’s current function) back down to the base of the stack.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;The runtime uses stack walks for a number of purposes&lt;/strong&gt;:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;The runtime walks the stacks of all threads &lt;strong&gt;during garbage collection, looking for managed roots&lt;/strong&gt; (local variables holding object references in the frames of managed methods that need to be reported to the GC to keep the objects alive and possibly track their movement if the GC decides to compact the heap).&lt;/li&gt;
    &lt;li&gt;On some platforms the stack walker is used during the &lt;strong&gt;processing of exceptions&lt;/strong&gt; (looking for handlers in the first pass and unwinding the stack in the second).&lt;/li&gt;
    &lt;li&gt;The &lt;strong&gt;debugger uses the functionality&lt;/strong&gt; when generating managed stack traces.&lt;/li&gt;
    &lt;li&gt;Various miscellaneous methods, usually those close to some public managed API, perform a stack walk &lt;strong&gt;to pick up information about their caller&lt;/strong&gt; (such as the method, class or assembly of that caller).&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The rest of this post will explore what ‘Stack Walking’ is, how it works and why so many parts of the runtime need to be involved.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#where-does-the-clr-use-stack-walking&quot;&gt;Where does the CLR use ‘Stack Walking’?&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#common-scenarios&quot;&gt;Common Scenarios&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#debuggingdiagnostics&quot;&gt;Debugging/Diagnostics&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#obscure-scenarios&quot;&gt;Obscure Scenarios&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#stack-crawl-marks&quot;&gt;Stack Crawl Marks&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#exception-handling&quot;&gt;Exception Handling&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-stack-walking-api&quot;&gt;The ‘Stack Walking’ API&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#how-to-use-it&quot;&gt;How to use it&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#how-it-works&quot;&gt;How it works&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#see-it-in-action&quot;&gt;See it ‘in Action’&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#unwinding-native-code&quot;&gt;Unwinding ‘Native’ Code&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#frames&quot;&gt;Frames&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#helper-method-frames&quot;&gt;‘Helper Method’ Frames&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#native-unwind-information&quot;&gt;Native Unwind Information&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#differences-between-windows-and-unix&quot;&gt;Differences between Windows and Unix&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#unwinding-jitted-code&quot;&gt;Unwinding ‘JITted’ Code&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#help-from-the-jit-compiler&quot;&gt;Help from the ‘JIT Compiler’&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#further-reading&quot;&gt;Further Reading&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#stack-unwinding-general&quot;&gt;Stack Unwinding (general)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#stack-unwinding-other-runtimes&quot;&gt;Stack Unwinding (other runtimes)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;where-does-the-clr-use-stack-walking&quot;&gt;Where does the CLR use ‘Stack Walking’?&lt;/h2&gt;

&lt;p&gt;Before we dig into the ‘internals’, let’s take a look at where the runtime utilises ‘stack walking’, below is the full list (as of .NET Core CLR ‘Release 2.2’). All these examples end up calling into the &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread::StackWalkFrames(..)&lt;/code&gt; method &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stackwalk.cpp#L978-L1042&quot;&gt;here&lt;/a&gt; and provide a &lt;code class=&quot;highlighter-rouge&quot;&gt;callback&lt;/code&gt; that is triggered whenever the API encounters a new section of the stack (see &lt;a href=&quot;#how-to-use-it&quot;&gt;How to use it&lt;/a&gt; below for more info).&lt;/p&gt;

&lt;h3 id=&quot;common-scenarios&quot;&gt;Common Scenarios&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Garbage Collection (GC)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ScanStackRoots(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/gcenv.ee.cpp#L71-L151&quot;&gt;here&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/gcenv.ee.common.cpp#L184-L293&quot;&gt;callback&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Exception Handling&lt;/strong&gt; (unwinding)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x86&lt;/code&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;UnwindFrames(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/excep.cpp#L2199-L2232&quot;&gt;here&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/i386/excepx86.cpp#L2718-L3119&quot;&gt;callback&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x64&lt;/code&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;ResetThreadAbortState(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/excep.cpp#L12770-L12868&quot;&gt;here&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/excep.cpp#L12728-L12767&quot;&gt;callback&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Exception Handling&lt;/strong&gt; (resumption):
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ExceptionTracker::FindNonvolatileRegisterPointers(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/exceptionhandling.cpp#L357-L436&quot;&gt;here&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/exceptionhandling.cpp#L249-L354&quot;&gt;callback&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ExceptionTracker::RareFindParentStackFrame(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/exceptionhandling.cpp#L6991-L7031&quot;&gt;here&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/exceptionhandling.cpp#L6924-L6989&quot;&gt;callback&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Threads&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread::IsRunningIn(..)&lt;/code&gt; (AppDomain) &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/threads.cpp#L8402-L8428&quot;&gt;here&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/threads.cpp#L8368-L8396&quot;&gt;callback&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread::DetectHandleILStubsForDebugger(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/threads.cpp#L219-L282&quot;&gt;here&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/threads.cpp#L205-L217&quot;&gt;callback&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Thread Suspension&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread::IsExecutingWithinCer()&lt;/code&gt; (‘Constrained Execution Region’) &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/threadsuspend.cpp#L962-L1006&quot;&gt;here&lt;/a&gt; (&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/threadsuspend.cpp#L831-L960&quot;&gt;wrapper&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/threadsuspend.cpp#L672-L829&quot;&gt;callback&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread::HandledJITCase(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/threadsuspend.cpp#L6853-L6975&quot;&gt;here&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/threadsuspend.cpp#L6130-L6312&quot;&gt;callback&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/threadsuspend.cpp#L6498-L6544&quot;&gt;alternative callback&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;debuggingdiagnostics&quot;&gt;Debugging/Diagnostics&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Debugger&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DebuggerWalkStack(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/debug/ee/frameinfo.cpp#L2061-L2188&quot;&gt;here&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/debug/ee/frameinfo.cpp#L1367-L1874&quot;&gt;callback&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DebuggerWalkStackProc()&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/debug/ee/frameinfo.cpp#L1367-L1874&quot;&gt;here&lt;/a&gt; (called from &lt;code class=&quot;highlighter-rouge&quot;&gt;DebuggerWalkStack(..)&lt;/code&gt;) -&amp;gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/debug/ee/frameinfo.cpp#L952-L1240&quot;&gt;callback&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Managed APIs&lt;/strong&gt; (e.g  &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Diagnostics.StackTrace&lt;/code&gt;)
    &lt;ul&gt;
      &lt;li&gt;Managed code calls via an &lt;code class=&quot;highlighter-rouge&quot;&gt;InternalCall&lt;/code&gt; (C#) &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/mscorlib/src/System/Diagnostics/Stacktrace.cs#L317-L318&quot;&gt;here&lt;/a&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;DebugStackTrace::GetStackFramesInternal(..)&lt;/code&gt; (C++) &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/debugdebugger.cpp#L327-L800&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Before ending up in &lt;code class=&quot;highlighter-rouge&quot;&gt;DebugStackTrace::GetStackFramesHelper(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/debugdebugger.cpp#L852-L956&quot;&gt;here&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/debugdebugger.cpp#L976-L1060&quot;&gt;callback&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DAC (via by SOS)&lt;/strong&gt; - Scan for GC ‘Roots’
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DacStackReferenceWalker::WalkStack&amp;lt;..&amp;gt;(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/debug/daccess/dacimpl.h#L1973-L2022&quot;&gt;here&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/debug/daccess/daccess.cpp#L8466-L8638&quot;&gt;callback&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Profiling API&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ProfToEEInterfaceImpl::ProfilerStackWalkFramesWrapper(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/proftoeeinterfaceimpl.cpp#L7624-L7652&quot;&gt;here&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/proftoeeinterfaceimpl.cpp#L7177-L7286&quot;&gt;callback&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Event Pipe&lt;/strong&gt; (Diagnostics)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EventPipe::WalkManagedStackForThread(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/eventpipe.cpp#L971-L994&quot;&gt;here&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/eventpipe.cpp#L996-L1029&quot;&gt;callback&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CLR prints a Stack Trace&lt;/strong&gt; (to the console/log, DEBUG builds only)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PrintStackTrace()&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/debughelp.cpp#L1015-L1109&quot;&gt;here&lt;/a&gt; (and other functions) -&amp;gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/debughelp.cpp#L881-L1013&quot;&gt;callback&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;obscure-scenarios&quot;&gt;Obscure Scenarios&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Reflection&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RuntimeMethodHandle::GetCurrentMethod(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/reflectioninvocation.cpp#L1487-L1511&quot;&gt;here&lt;/a&gt; (&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/reflectioninvocation.cpp#L1449-L1485&quot;&gt;callback&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Application (App) Domains&lt;/strong&gt; (See ‘Stack Crawl Marks’ below)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SystemDomain::GetCallersMethod(..)&lt;/code&gt;  &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/appdomain.cpp#L3389-L3417&quot;&gt;here&lt;/a&gt; (also &lt;code class=&quot;highlighter-rouge&quot;&gt;GetCallersType(..)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;GetCallersModule(..)&lt;/code&gt;) (&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/appdomain.cpp#L3520-L3664&quot;&gt;callback&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SystemDomain::GetCallersModule(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/appdomain.cpp#L3494-L3518&quot;&gt;here&lt;/a&gt; (&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/appdomain.cpp#L3666-L3686&quot;&gt;callback&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;‘Code Pitching’&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CheckStacksAndPitch()&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/codepitchingmanager.cpp#L446-L501&quot;&gt;here&lt;/a&gt; (&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/codepitchingmanager.cpp#L340-L347&quot;&gt;wrapper&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/codepitchingmanager.cpp#L304-L338&quot;&gt;callback&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Extensible Class Factory&lt;/strong&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;System.Runtime.InteropServices.ExtensibleClassFactory&lt;/code&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RegisterObjectCreationCallback(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/extensibleclassfactory.cpp#L72-L130&quot;&gt;here&lt;/a&gt; (&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/extensibleclassfactory.cpp#L23-L69&quot;&gt;callback&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stack Sampler&lt;/strong&gt; (unused?)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StackSampler::ThreadProc()&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stacksampler.cpp#L264-L331&quot;&gt;here&lt;/a&gt; (&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stacksampler.cpp#L217-L224&quot;&gt;wrapper&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stacksampler.cpp#L226-L262&quot;&gt;callback&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stack-crawl-marks&quot;&gt;Stack Crawl Marks&lt;/h3&gt;

&lt;p&gt;One of the above scenarios deserves a closer look, but firstly why are ‘stack crawl marks’ used, from &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/21629#issuecomment-449225852&quot;&gt;coreclr/issues/#21629 (comment)&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unfortunately, there is a ton of legacy APIs that were added during netstandard2.0 push whose behavior depend on the caller. &lt;strong&gt;The caller is basically passed in as an implicit argument to the API&lt;/strong&gt;. Most of these StackCrawlMarks are there to support these APIs…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So we can see that multiple functions within the CLR itself need to have knowledge of their &lt;strong&gt;caller&lt;/strong&gt;. To understand this some more, let’s look an example, the &lt;code class=&quot;highlighter-rouge&quot;&gt;GetType(string typeName)&lt;/code&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.type.gettype?view=netframework-4.7.2#System_Type_GetType_System_String_&quot;&gt;method&lt;/a&gt;. Here’s the flow from the externally-visible method all the way down to where the work is done, note how a &lt;code class=&quot;highlighter-rouge&quot;&gt;StackCrawlMark&lt;/code&gt; instance is passed through:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Type::GetType(string typeName)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/606c246/src/System.Private.CoreLib/src/System/Type.CoreCLR.cs#L38-L43&quot;&gt;implementation&lt;/a&gt; (Creates &lt;code class=&quot;highlighter-rouge&quot;&gt;StackCrawlMark.LookForMyCaller&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RuntimeType::GetType(.., ref StackCrawlMark stackMark)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/606c246/src/System.Private.CoreLib/src/System/RtType.cs#L1741-L1749&quot;&gt;implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RuntimeType::GetTypeByName(.., ref StackCrawlMark stackMark, ..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/606c246/src/System.Private.CoreLib/src/System/RuntimeHandles.cs#L431-L459&quot;&gt;implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;extern void GetTypeByName(.., ref StackCrawlMark stackMark, ..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/606c246/src/System.Private.CoreLib/src/System/RuntimeHandles.cs#L426-L429&quot;&gt;definition&lt;/a&gt; (call into native code, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;[DllImport(JitHelpers.QCall, ..)]&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RuntimeTypeHandle::GetTypeByName(.., QCall::StackCrawlMarkHandle pStackMark, ..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/606c246/src/vm/runtimehandles.cpp#L1433-L1463&quot;&gt;implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TypeHandle TypeName::GetTypeManaged(.., StackCrawlMark* pStackMark, ..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/606c246/src/vm/typeparse.cpp#L1178-L1271&quot;&gt;implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TypeHandle TypeName::GetTypeWorker(.. , StackCrawlMark* pStackMark, ..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/606c246/src/vm/typeparse.cpp#L1405-L1662&quot;&gt;implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SystemDomain::GetCallersAssembly(StackCrawlMark *stackMark,..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/606c246/src/vm/appdomain.cpp#L3430-L3438&quot;&gt;implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SystemDomain::GetCallersModule(StackCrawlMark* stackMark, ..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/606c246/src/vm/appdomain.cpp#L3394-L3421&quot;&gt;implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SystemDomain::CallersMethodCallbackWithStackMark(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/606c246/src/vm/appdomain.cpp#L3467-L3610&quot;&gt;callback implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition the JIT (via the VM) has to ensure that all relevant methods are available in the call-stack, i.e. they can’t be removed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Prevent in-lining &lt;code class=&quot;highlighter-rouge&quot;&gt;CEEInfo::canInline(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/606c246/src/vm/jitinterface.cpp#L7847-L7854&quot;&gt;implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Prevent removal via a ‘tail call’ &lt;code class=&quot;highlighter-rouge&quot;&gt;CEEInfo::canTailCall(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/606c246/src/vm/jitinterface.cpp#L8321-L8332&quot;&gt;implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, the &lt;code class=&quot;highlighter-rouge&quot;&gt;StackCrawlMark&lt;/code&gt; feature is currently being &lt;em&gt;cleaned&lt;/em&gt; up, so it may look different in the future:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/9342&quot;&gt;Remove NoInlining/StackCrawlMarks from Tasks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/21812&quot;&gt;Remove stack marks from GetSatelliteAssembly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/21054&quot;&gt;Delete unnecessary StackCrawlMarks in RtFieldInfo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/21783&quot;&gt;Avoid passing stack crawl mark unnecessarily deep in the call stack&lt;/a&gt; (the example shown above!!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;exception-handling&quot;&gt;Exception Handling&lt;/h3&gt;

&lt;p&gt;The place that most .NET Developers will run into ‘stack traces’ is when dealing with exceptions. I originally intended to also describe ‘exception handling’ here, but then I opened up &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/exceptionhandling.cpp&quot;&gt;/src/vm/exceptionhandling.cpp&lt;/a&gt; and saw that it contained &lt;strong&gt;over 7,000&lt;/strong&gt; lines of code!! So I decided that it can wait for a future post 😁.&lt;/p&gt;

&lt;p&gt;However, if you want to learn more about the ‘internals’ I really recommend Chris Brumme’s post &lt;a href=&quot;https://blogs.msdn.microsoft.com/cbrumme/2003/10/01/the-exception-model/&quot;&gt;The Exception Model&lt;/a&gt; (2003) which is the definitive guide on the topic (also see his &lt;a href=&quot;https://channel9.msdn.com/Search?term=Christopher%20Brumme&amp;amp;lang-en=true&quot;&gt;Channel9 Videos&lt;/a&gt;) and as always, the ‘BotR’ chapter &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/exceptions.md&quot;&gt;‘What Every (&lt;em&gt;Runtime&lt;/em&gt;) Dev needs to Know About Exceptions in the Runtime’&lt;/a&gt; is well worth a read.&lt;/p&gt;

&lt;p&gt;Also, I recommend talking a look at the slides from the &lt;a href=&quot;https://blog.adamfurmanek.pl/wp-content/uploads/2018/06/Internals_of_exceptions.pdf&quot;&gt;‘Internals of Exceptions’ talk’&lt;/a&gt; and the related post &lt;a href=&quot;https://blog.adamfurmanek.pl/blog/2016/10/01/handling-and-rethrowing-exceptions-in-c/&quot;&gt;.NET Inside Out Part 2 — Handling and rethrowing exceptions in C#&lt;/a&gt; both by &lt;a href=&quot;https://twitter.com/furmanekadam&quot;&gt;Adam Furmanek&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-stack-walking-api&quot;&gt;The ‘Stack Walking’ API&lt;/h2&gt;

&lt;p&gt;Now that we’ve seen &lt;em&gt;where&lt;/em&gt; it’s used, let’s look at the ‘stack walking’ API itself. Firstly, &lt;em&gt;how&lt;/em&gt; is it used?&lt;/p&gt;

&lt;h3 id=&quot;how-to-use-it&quot;&gt;How to use it&lt;/h3&gt;

&lt;p&gt;It’s worth pointing out that the only way you can access it from C#/F#/VB.NET code is via the &lt;code class=&quot;highlighter-rouge&quot;&gt;StackTrace&lt;/code&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.stacktrace?view=netframework-4.7.2&quot;&gt;class&lt;/a&gt;, only the runtime itself can call into &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread::StackWalkFrames(..)&lt;/code&gt; directly. The simplest usage in the runtime is &lt;code class=&quot;highlighter-rouge&quot;&gt;EventPipe::WalkManagedStackForThread(..)&lt;/code&gt; (see &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/eventpipe.cpp#L971-L994&quot;&gt;here&lt;/a&gt;), which is shown below. As you can see it’s as simple as specifying the relevant flags, in this case &lt;code class=&quot;highlighter-rouge&quot;&gt;ALLOW_ASYNC_STACK_WALK | FUNCTIONSONLY | HANDLESKIPPEDFRAMES | ALLOW_INVALID_OBJECTS&lt;/code&gt; and then providing the callback, which in the EventPipe class is the &lt;code class=&quot;highlighter-rouge&quot;&gt;StackWalkCallback&lt;/code&gt; method (&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/eventpipe.cpp#L996-L102&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventPipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WalkManagedStackForThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StackContents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stackContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CONTRACTL&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NOTHROW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GC_NOTRIGGER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MODE_ANY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PRECONDITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pThread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CONTRACTL_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Calling into StackWalkFrames in preemptive mode violates the host contract,
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// but this contract is not used on CoreCLR.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;CONTRACT_VIOLATION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HostViolation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;stackContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;StackWalkAction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swaRet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StackWalkFrames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PSTACKWALKFRAMESCALLBACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StackWalkCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stackContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ALLOW_ASYNC_STACK_WALK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FUNCTIONSONLY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HANDLESKIPPEDFRAMES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALLOW_INVALID_OBJECTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;swaRet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SWA_DONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;swaRet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SWA_CONTINUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;StackWalkFrame(..)&lt;/code&gt; function then does the &lt;em&gt;heavy-lifting&lt;/em&gt; of actually walking the stack, before triggering the callback shown below. In this case it just records the ‘Instruction Pointer’ (IP/CP) and the ‘managed function’, which is an instance of the &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodDesc&lt;/code&gt; obtained via the &lt;code class=&quot;highlighter-rouge&quot;&gt;pCf-&amp;gt;GetFunction()&lt;/code&gt; call:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;StackWalkAction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventPipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StackWalkCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CrawlFrame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pCf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StackContents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CONTRACTL&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NOTHROW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GC_NOTRIGGER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MODE_ANY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PRECONDITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pCf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PRECONDITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CONTRACTL_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Get the IP.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;UINT_PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controlPC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UINT_PTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pCf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetRegisterSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ControlPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controlPC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// This happens for pinvoke stubs on the top of the stack.
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SWA_CONTINUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;_ASSERTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controlPC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Add the IP to the captured stack.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;pData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controlPC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pCf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Continue the stack walk.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SWA_CONTINUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;how-it-works&quot;&gt;How it works&lt;/h3&gt;

&lt;p&gt;Now onto the most interesting part, how to the runtime actually walks the stack. Well, first let’s understand what the stack looks like, from the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/stackwalking.md&quot;&gt;‘BotR’ page&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/01/Stack Description from BotR.png&quot; alt=&quot;Stack Description from BotR&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The main thing to note is that a .NET ‘stack’ can contain 3 types of methods:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Managed&lt;/strong&gt; - this represents code that started off as C#/F#/VB.NET, was turned into IL and then finally compiled to native code by the ‘JIT Compiler’.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unmanaged&lt;/strong&gt; - completely &lt;em&gt;native&lt;/em&gt; code that exists outside of the runtime, i.e. a OS function the runtime calls into or a user call via &lt;code class=&quot;highlighter-rouge&quot;&gt;P/Invoke&lt;/code&gt;. The runtime &lt;em&gt;only&lt;/em&gt; cares about transitions &lt;em&gt;into&lt;/em&gt; or &lt;em&gt;out of&lt;/em&gt; regular unmanaged code, is doesn’t care about the stack frame within it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Runtime Managed&lt;/strong&gt; - still &lt;em&gt;native&lt;/em&gt; code, but this is slightly different because the runtime case more about this code. For example there are quite a few parts of the Base-Class libraries that make use of &lt;code class=&quot;highlighter-rouge&quot;&gt;InternalCall&lt;/code&gt; methods, for more on this see the &lt;a href=&quot;#helper-method-frames&quot;&gt;‘Helper Method’ Frames&lt;/a&gt; section later on.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So the ‘stack walk’ has to deal with these different scenarios as it proceeds. Now let’s look at the ‘code flow’ starting with the entry-point method &lt;code class=&quot;highlighter-rouge&quot;&gt;StackWalkFrames(..)&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread::StackWalkFrames(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stackwalk.cpp#L978-L1042&quot;&gt;here&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;the entry-point function, the type of ‘stack walk’ can be controlled via &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/threads.h#L3302-L3361&quot;&gt;these flags&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread::StackWalkFramesEx(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stackwalk.cpp#L899-L976&quot;&gt;here&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;worker-function that sets up the &lt;code class=&quot;highlighter-rouge&quot;&gt;StackFrameIterator&lt;/code&gt;, via a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;StackFrameIterator::Init(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stackwalk.cpp#L1150-L1274&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StackFrameIterator::Next()&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stackwalk.cpp#L1586-L1621&quot;&gt;here&lt;/a&gt;, then hands off to the primary &lt;em&gt;worker&lt;/em&gt; method &lt;code class=&quot;highlighter-rouge&quot;&gt;StackFrameIterator::NextRaw()&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stackwalk.cpp#L2291-L2761&quot;&gt;here&lt;/a&gt; that does 5 things:
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CheckForSkippedFrames(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stackwalk.cpp#L3009-L3119&quot;&gt;here&lt;/a&gt;, deals with frames that may have been allocated inside a managed stack frame (e.g. an inlined p/invoke call).&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UnwindStackFrame(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/eetwain.cpp#L4162-L4214&quot;&gt;here&lt;/a&gt;, in-turn calls:
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x64&lt;/code&gt;&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread::VirtualUnwindCallFrame(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stackwalk.cpp#L553-L671&quot;&gt;here&lt;/a&gt;, then calls &lt;code class=&quot;highlighter-rouge&quot;&gt;VirtualUnwindNonLeafCallFrame(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stackwalk.cpp#L711-L757&quot;&gt;here&lt;/a&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;VirtualUnwindLeafCallFrame(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stackwalk.cpp#L676-L708&quot;&gt;here&lt;/a&gt;. All of of these functions make use of the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/winnt/nf-winnt-rtllookupfunctionentry&quot;&gt;Windows API function&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;RtlLookupFunctionEntry(..)&lt;/code&gt; to do the actual unwinding.&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x86&lt;/code&gt;&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;::UnwindStackFrame(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/eetwain.cpp#L4012-L4107&quot;&gt;here&lt;/a&gt;, in turn calls &lt;code class=&quot;highlighter-rouge&quot;&gt;UnwindEpilog(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/eetwain.cpp#L3528-L3557&quot;&gt;here&lt;/a&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;UnwindEspFrame(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/eetwain.cpp#L3663-L3721&quot;&gt;here&lt;/a&gt;. Unlike &lt;code class=&quot;highlighter-rouge&quot;&gt;x64&lt;/code&gt;, under &lt;code class=&quot;highlighter-rouge&quot;&gt;x86&lt;/code&gt; all the ‘stack-unwinding’ is done manually, within the CLR code.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PostProcessingForManagedFrames(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stackwalk.cpp#L3193-L3229&quot;&gt;here&lt;/a&gt;, determines if the stack-walk is actually within a &lt;strong&gt;managed method&lt;/strong&gt; rather than a &lt;strong&gt;native frame&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ProcessIp(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stackwalk.cpp#L2786-L2800&quot;&gt;here&lt;/a&gt; has the job of looking up the current &lt;strong&gt;managed method&lt;/strong&gt; (if any) based on the current &lt;strong&gt;instruction pointer&lt;/strong&gt; (IP). It does this by calling into  &lt;code class=&quot;highlighter-rouge&quot;&gt;EECodeInfo::Init(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/jitinterface.cpp#L13948-L13976&quot;&gt;here&lt;/a&gt; and then ends up in one of:
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EEJitManager::JitCodeToMethodInfo(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/codeman.cpp#L3631-L3676&quot;&gt;here&lt;/a&gt;, that uses a very cool looking data structure refereed to as a &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/inc/nibblemapmacros.h#L12-L26&quot;&gt;‘nibble map’&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NativeImageJitManager::JitCodeToMethodInfo(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/codeman.cpp#L5428-L5616&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ReadyToRunJitManager::JitCodeToMethodInfo(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/codeman.cpp#L6875-L6953&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ProcessCurrentFrame(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stackwalk.cpp#L2802-L3007&quot;&gt;here&lt;/a&gt;, does some final house-keeping and tidy-up.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CrawlFrame::GotoNextFrame()&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stackwalk.cpp#L369-L390&quot;&gt;here&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;in-turn calls &lt;code class=&quot;highlighter-rouge&quot;&gt;pFrame-&amp;gt;Next()&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/frames.h#L836-L840&quot;&gt;here&lt;/a&gt; to walk through the ‘linked list’ of frames which drive the ‘stack walk’ (more on these ‘frames’ later)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StackFrameIterator::Filter()&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stackwalk.cpp#L1623-L2289&quot;&gt;here&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;essentially a &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stackwalk.cpp#L1677-L2271&quot;&gt;huge &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt; statement&lt;/a&gt; that handles all the different &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stackwalk.h#L602-L613&quot;&gt;Frame States&lt;/a&gt; and decides whether or not the ‘stack walk’ should continue.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When it gets a valid frame it triggers the callback in &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread::MakeStackwalkerCallback(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stackwalk.cpp#L859-L891&quot;&gt;here&lt;/a&gt; and passes in a pointer to the current &lt;code class=&quot;highlighter-rouge&quot;&gt;CrawlFrame&lt;/code&gt; class &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stackwalk.h#L68-L496&quot;&gt;defined here&lt;/a&gt;, this exposes methods such as &lt;code class=&quot;highlighter-rouge&quot;&gt;IsFrameless()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;GetFunction()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;GetThisPointer()&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;CrawlFrame&lt;/code&gt; actually represents 2 scenarios, based on the current IP:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Native&lt;/strong&gt; code, represented by a &lt;code class=&quot;highlighter-rouge&quot;&gt;Frame&lt;/code&gt; class &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/frames.h#L378-L284&quot;&gt;defined here&lt;/a&gt;, which we’ll discuss more in a moment.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Managed&lt;/strong&gt; code, well technically ‘managed code’ that was JITted to ‘native code’, so more accurately a &lt;strong&gt;managed stack frame&lt;/strong&gt;. In this situation the &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodDesc&lt;/code&gt; class &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/method.hpp#L187-L1879&quot;&gt;defined here&lt;/a&gt; is provided, you can read more about this key CLR data-structure in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/Documentation/botr/method-descriptor.md&quot;&gt;the corresponding BotR chapter&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;see-it-in-action&quot;&gt;See it ‘in Action’&lt;/h3&gt;

&lt;p&gt;Fortunately we’re able to turn on some nice diagnostics in a debug build of the CLR (&lt;code class=&quot;highlighter-rouge&quot;&gt;COMPLUS_LogEnable&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;COMPLUS_LogToFile&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;COMPLUS_LogFacility&lt;/code&gt;). With that in place, given C# code like this:&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Program&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;MethodA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MethodImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodImplOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoInlining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MethodA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;MethodB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MethodImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodImplOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoInlining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MethodB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;MethodC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MethodImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodImplOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoInlining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MethodC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stackTrace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StackTrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fNeedFileInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stackTrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We get the output shown below, in which you can see the ‘stack walking’ process. It starts in &lt;code class=&quot;highlighter-rouge&quot;&gt;InitializeSourceInfo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CaptureStackTrace&lt;/code&gt; which are methods internal to the &lt;code class=&quot;highlighter-rouge&quot;&gt;StackTrace&lt;/code&gt; class (see &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/mscorlib/src/System/Diagnostics/Stacktrace.cs#L351-L407&quot;&gt;here&lt;/a&gt;), before moving up the stack &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodC&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodB&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodA&lt;/code&gt; and then finally stopping in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Main&lt;/code&gt; function. Along the way its does a ‘FILTER’ and ‘CONSIDER’ step before actually unwinding (‘finished unwind for …’):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TID 4740: STACKWALK    starting with partial context
TID 4740: STACKWALK: [000] FILTER  : EXPLICIT : PC= 00000000`00000000  SP= 00000000`00000000  Frame= 00000002`9977cc48  vtbl= 00007ffd`74a105b0 
TID 4740: STACKWALK: [001] CONSIDER: EXPLICIT : PC= 00000000`00000000  SP= 00000000`00000000  Frame= 00000002`9977cc48  vtbl= 00007ffd`74a105b0 
TID 4740: STACKWALK: [001] FILTER  : EXPLICIT : PC= 00000000`00000000  SP= 00000000`00000000  Frame= 00000002`9977cc48  vtbl= 00007ffd`74a105b0 
TID 4740: STACKWALK: [002] CONSIDER: EXPLICIT : PC= 00000000`00000000  SP= 00000000`00000000  Frame= 00000002`9977cdd8  vtbl= 00007ffd`74995220 
TID 4740: STACKWALK    LazyMachState::unwindLazyState(ip:00007FFD7439C45C,sp:000000029977C338)
TID 4740: STACKWALK: [002] CALLBACK: EXPLICIT : PC= 00000000`00000000  SP= 00000000`00000000  Frame= 00000002`9977cdd8  vtbl= 00007ffd`74995220 
TID 4740: STACKWALK    HelperMethodFrame::UpdateRegDisplay cached ip:00007FFD72FE9258, sp:000000029977D300
TID 4740: STACKWALK: [003] CONSIDER: FRAMELESS: PC= 00007ffd`72fe9258  SP= 00000002`9977d300  method=InitializeSourceInfo 
TID 4740: STACKWALK: [003] CALLBACK: FRAMELESS: PC= 00007ffd`72fe9258  SP= 00000002`9977d300  method=InitializeSourceInfo 
TID 4740: STACKWALK: [004] about to unwind for 'InitializeSourceInfo', SP: 00000002`9977d300 , IP: 00007ffd`72fe9258 
TID 4740: STACKWALK: [004] finished unwind for 'InitializeSourceInfo', SP: 00000002`9977d480 , IP: 00007ffd`72eeb671 
TID 4740: STACKWALK: [004] CONSIDER: FRAMELESS: PC= 00007ffd`72eeb671  SP= 00000002`9977d480  method=CaptureStackTrace 
TID 4740: STACKWALK: [004] CALLBACK: FRAMELESS: PC= 00007ffd`72eeb671  SP= 00000002`9977d480  method=CaptureStackTrace 
TID 4740: STACKWALK: [005] about to unwind for 'CaptureStackTrace', SP: 00000002`9977d480 , IP: 00007ffd`72eeb671 
TID 4740: STACKWALK: [005] finished unwind for 'CaptureStackTrace', SP: 00000002`9977d5b0 , IP: 00007ffd`72eeadd0 
TID 4740: STACKWALK: [005] CONSIDER: FRAMELESS: PC= 00007ffd`72eeadd0  SP= 00000002`9977d5b0  method=.ctor 
TID 4740: STACKWALK: [005] CALLBACK: FRAMELESS: PC= 00007ffd`72eeadd0  SP= 00000002`9977d5b0  method=.ctor 
TID 4740: STACKWALK: [006] about to unwind for '.ctor', SP: 00000002`9977d5b0 , IP: 00007ffd`72eeadd0 
TID 4740: STACKWALK: [006] finished unwind for '.ctor', SP: 00000002`9977d5f0 , IP: 00007ffd`14c620d3 
TID 4740: STACKWALK: [006] CONSIDER: FRAMELESS: PC= 00007ffd`14c620d3  SP= 00000002`9977d5f0  method=MethodC 
TID 4740: STACKWALK: [006] CALLBACK: FRAMELESS: PC= 00007ffd`14c620d3  SP= 00000002`9977d5f0  method=MethodC 
TID 4740: STACKWALK: [007] about to unwind for 'MethodC', SP: 00000002`9977d5f0 , IP: 00007ffd`14c620d3 
TID 4740: STACKWALK: [007] finished unwind for 'MethodC', SP: 00000002`9977d630 , IP: 00007ffd`14c62066 
TID 4740: STACKWALK: [007] CONSIDER: FRAMELESS: PC= 00007ffd`14c62066  SP= 00000002`9977d630  method=MethodB 
TID 4740: STACKWALK: [007] CALLBACK: FRAMELESS: PC= 00007ffd`14c62066  SP= 00000002`9977d630  method=MethodB 
TID 4740: STACKWALK: [008] about to unwind for 'MethodB', SP: 00000002`9977d630 , IP: 00007ffd`14c62066 
TID 4740: STACKWALK: [008] finished unwind for 'MethodB', SP: 00000002`9977d660 , IP: 00007ffd`14c62016 
TID 4740: STACKWALK: [008] CONSIDER: FRAMELESS: PC= 00007ffd`14c62016  SP= 00000002`9977d660  method=MethodA 
TID 4740: STACKWALK: [008] CALLBACK: FRAMELESS: PC= 00007ffd`14c62016  SP= 00000002`9977d660  method=MethodA 
TID 4740: STACKWALK: [009] about to unwind for 'MethodA', SP: 00000002`9977d660 , IP: 00007ffd`14c62016 
TID 4740: STACKWALK: [009] finished unwind for 'MethodA', SP: 00000002`9977d690 , IP: 00007ffd`14c61f65 
TID 4740: STACKWALK: [009] CONSIDER: FRAMELESS: PC= 00007ffd`14c61f65  SP= 00000002`9977d690  method=Main 
TID 4740: STACKWALK: [009] CALLBACK: FRAMELESS: PC= 00007ffd`14c61f65  SP= 00000002`9977d690  method=Main 
TID 4740: STACKWALK: [00a] about to unwind for 'Main', SP: 00000002`9977d690 , IP: 00007ffd`14c61f65 
TID 4740: STACKWALK: [00a] finished unwind for 'Main', SP: 00000002`9977d6d0 , IP: 00007ffd`742f9073 
TID 4740: STACKWALK: [00a] FILTER  : NATIVE   : PC= 00007ffd`742f9073  SP= 00000002`9977d6d0 
TID 4740: STACKWALK: [00b] CONSIDER: EXPLICIT : PC= 00007ffd`742f9073  SP= 00000002`9977d6d0  Frame= 00000002`9977de58  vtbl= 00007ffd`74a105b0 
TID 4740: STACKWALK: [00b] FILTER  : EXPLICIT : PC= 00007ffd`742f9073  SP= 00000002`9977d6d0  Frame= 00000002`9977de58  vtbl= 00007ffd`74a105b0 
TID 4740: STACKWALK: [00c] CONSIDER: EXPLICIT : PC= 00007ffd`742f9073  SP= 00000002`9977d6d0  Frame= 00000002`9977e7e0  vtbl= 00007ffd`74a105b0 
TID 4740: STACKWALK: [00c] FILTER  : EXPLICIT : PC= 00007ffd`742f9073  SP= 00000002`9977d6d0  Frame= 00000002`9977e7e0  vtbl= 00007ffd`74a105b0 
TID 4740: STACKWALK: SWA_DONE: reached the end of the stack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To find out more, you can search for these diagnostic message in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stackwalk.cpp&quot;&gt;\vm\stackwalk.cpp&lt;/a&gt;, e.g. in &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread::DebugLogStackWalkInfo(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stackwalk.cpp#L802-L856&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;unwinding-native-code&quot;&gt;Unwinding ‘Native’ Code&lt;/h2&gt;

&lt;p&gt;As explained in &lt;a href=&quot;https://science.raphael.poss.name/go-calling-convention-x86-64.html#aside-exceptions-in-c-c&quot;&gt;this excellent article&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are fundamentally two main ways to implement exception propagation in an ABI (Application Binary Interface):&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;“dynamic registration”, &lt;strong&gt;with frame pointers in each activation record, organized as a linked list&lt;/strong&gt;. This makes stack unwinding fast at the expense of having to set up the frame pointer in each function that calls other functions. This is also simpler to implement.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;“table-driven”, &lt;strong&gt;where the compiler and assembler create data structures alongside the program code to indicate which addresses of code correspond to which sizes of activation records&lt;/strong&gt;. This is called “Call Frame Information” (CFI) data in e.g. the GNU tool chain. When an exception is generated, the data in this table is loaded to determine how to unwind. This makes exception propagation slower but the general case faster.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;It turns out that .NET uses the ‘table-driven’ approach, for the reason explained in the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/stackwalking.md#the-stack-model&quot;&gt;‘BotR’&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The exact definition of a frame varies from platform to platform and &lt;strong&gt;on many platforms there isn’t a hard definition of a frame format that all functions adhere to&lt;/strong&gt; (x86 is an example of this). Instead the compiler is often free to optimize the exact format of frames. On such systems it is not possible to guarantee that a stackwalk will return 100% correct or complete results (for debugging purposes, debug symbols such as pdbs are used to fill in the gaps so that debuggers can generate more accurate stack traces).&lt;/p&gt;

  &lt;p&gt;This is not a problem for the CLR, however, since we do not require a fully generalized stack walk. &lt;strong&gt;Instead we are only interested in those frames that are managed (i.e. represent a managed method) or, to some extent, frames coming from unmanaged code used to implement part of the runtime itself&lt;/strong&gt;. In particular there is no guarantee about fidelity of 3rd party unmanaged frames other than to note where such frames transition into or out of the runtime itself (i.e. one of the frame types we do care about).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;frames&quot;&gt;Frames&lt;/h3&gt;

&lt;p&gt;To enable ‘unwinding’ of native code or more strictly the transitions ‘into’ and ‘out of’ native code, the CLR uses a mechanism of &lt;code class=&quot;highlighter-rouge&quot;&gt;Frames&lt;/code&gt;, which are defined in the source code &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/frames.h#L7-L143&quot;&gt;here&lt;/a&gt;. These frames are arranged into a hierachy and there is one type of &lt;code class=&quot;highlighter-rouge&quot;&gt;Frame&lt;/code&gt; for each scenario, for more info on these individual &lt;code class=&quot;highlighter-rouge&quot;&gt;Frames&lt;/code&gt; take a look at the excellent source-code comments &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/frames.h#L145-L195&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Frame&lt;/strong&gt; (abstract/base class)
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;GCFrame&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;FaultingExceptionFrame&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;HijackFrame&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;ResumableFrame&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;RedirectedThreadFrame&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;InlinedCallFrame&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;HelperMethodFrame&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;HelperMethodFrame_1OBJ&lt;/li&gt;
          &lt;li&gt;HelperMethodFrame_2OBJ&lt;/li&gt;
          &lt;li&gt;HelperMethodFrame_3OBJ&lt;/li&gt;
          &lt;li&gt;HelperMethodFrame_PROTECTOBJ&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;TransitionFrame&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;StubHelperFrame&lt;/li&gt;
          &lt;li&gt;SecureDelegateFrame
            &lt;ul&gt;
              &lt;li&gt;MulticastFrame&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;FramedMethodFrame
            &lt;ul&gt;
              &lt;li&gt;ComPlusMethodFrame&lt;/li&gt;
              &lt;li&gt;PInvokeCalliFrame&lt;/li&gt;
              &lt;li&gt;PrestubMethodFrame&lt;/li&gt;
              &lt;li&gt;StubDispatchFrame&lt;/li&gt;
              &lt;li&gt;ExternalMethodFrame&lt;/li&gt;
              &lt;li&gt;TPMethodFrame&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;UnmanagedToManagedFrame&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;ComMethodFrame
            &lt;ul&gt;
              &lt;li&gt;ComPrestubMethodFrame&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;UMThkCallFrame&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;ContextTransitionFrame&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;TailCallFrame&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;ProtectByRefsFrame&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;ProtectValueClassFrame&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;DebuggerClassInitMarkFrame&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;DebuggerSecurityCodeMarkFrame&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;DebuggerExitFrame&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;DebuggerU2MCatchHandlerFrame&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;FuncEvalFrame&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;ExceptionFilterFrame&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;helper-method-frames&quot;&gt;‘Helper Method’ Frames&lt;/h3&gt;

&lt;p&gt;But to make sense of this, let’s look at one type of &lt;code class=&quot;highlighter-rouge&quot;&gt;Frame&lt;/code&gt;, known as &lt;code class=&quot;highlighter-rouge&quot;&gt;HelperMethodFrame&lt;/code&gt; (above). This is used when .NET code in the runtime calls into C++ code to do the heavy-lifting, often for performance reasons. One example is if you call &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment.GetCommandLineArgs()&lt;/code&gt; you end up &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Environment.cs#L151-L180&quot;&gt;in this code&lt;/a&gt; (C#), but note that it ends up calling an &lt;code class=&quot;highlighter-rouge&quot;&gt;extern&lt;/code&gt; method marked with &lt;code class=&quot;highlighter-rouge&quot;&gt;InternalCall&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;[MethodImplAttribute(MethodImplOptions.InternalCall)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetCommandLineArgsNative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This means that the rest of the method is implemented in the runtime in C++, you can see how the method call is &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/ecalllist.h#L153&quot;&gt;wired up&lt;/a&gt;, before ending up &lt;code class=&quot;highlighter-rouge&quot;&gt;SystemNative::GetCommandLineArgs&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/classlibnative/bcltype/system.cpp#L178-L221&quot;&gt;here&lt;/a&gt;, which is shown below:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;FCIMPL0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SystemNative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetCommandLineArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FCALL_CONTRACT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;PTRARRAYREF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;HELPER_METHOD_FRAME_BEGIN_RET_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;-- 'Helper method Frame' started here
&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Error handling and setup code removed for clarity
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PTRARRAYREF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AllocateObjectArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_pStringClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Copy each argument into new Strings.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;STRINGREF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;STRINGREF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STRINGREF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetDataPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SetObjectReference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OBJECTREF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OBJECTREF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetAppDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;HELPER_METHOD_FRAME_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;-- 'Helper method Frame' ended/closed here
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OBJECTREFToObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FCIMPLEND&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: this code makes heavy use of macros, see &lt;a href=&quot;https://gist.github.com/mattwarren/36e52b3f80a411ca5a6b7211c9f1a3a9&quot;&gt;this gist&lt;/a&gt; for the original code and then the expanded versions (Release and Debug). In addition, if you want more information on these mysterious &lt;code class=&quot;highlighter-rouge&quot;&gt;FCalls&lt;/code&gt; as they are known (and the related &lt;code class=&quot;highlighter-rouge&quot;&gt;QCalls&lt;/code&gt;) see &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/mscorlib.md&quot;&gt;Mscorlib and Calling Into the Runtime&lt;/a&gt; in the ‘BotR’.&lt;/p&gt;

&lt;p&gt;But the main thing to look at in the code sample is the &lt;code class=&quot;highlighter-rouge&quot;&gt;HELPER_METHOD_FRAME_BEGIN_RET_1()&lt;/code&gt; macro, with ultimately installs an instance of the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/frames.h#L1435-L1492&quot;&gt;HelperMethodFrame_1OBJ class&lt;/a&gt;. The macro expands into code like this:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;FrameWithCookie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HelperMethodFrame_1OBJ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__helperframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRAME_ATTR_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OBJECTREF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;__helperframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;-- 'Helper method Frame' pushed
&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CURRENT_THREAD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__helperframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CURRENT_THREAD_AVAILABLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CURRENT_THREAD_AVAILABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__pUnCException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__pUnCEntryFrame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__helperframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__fExceptionCatched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{;&lt;/span&gt;

	  &lt;span class=&quot;c1&quot;&gt;// Original code from SystemNative::GetCommandLineArgs goes in here
&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__pException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{;&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;__pUnCException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__pException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;UnwindAndContinueRethrowHelperInsideCatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__pUnCEntryFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__pUnCException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;__fExceptionCatched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__fExceptionCatched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{;&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;UnwindAndContinueRethrowHelperAfterCatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__pUnCEntryFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__pUnCException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;__helperframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;-- 'Helper method Frame' popped
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the &lt;code class=&quot;highlighter-rouge&quot;&gt;Push()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Pop()&lt;/code&gt; against &lt;code class=&quot;highlighter-rouge&quot;&gt;_helperMethodFrame&lt;/code&gt; that make it available for ‘stack walking’. You can also see the &lt;code class=&quot;highlighter-rouge&quot;&gt;try&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt; block that the CLR puts in place to ensure any exceptions from &lt;em&gt;native&lt;/em&gt; code are turned into &lt;em&gt;managed&lt;/em&gt; exceptions that C#/F#/VB.NET code can handle. If you’re interested the full macro-expansion is available &lt;a href=&quot;https://gist.github.com/mattwarren/36e52b3f80a411ca5a6b7211c9f1a3a9#expanded-code---release---81-loc&quot;&gt;in this gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So in summary, these &lt;code class=&quot;highlighter-rouge&quot;&gt;Frames&lt;/code&gt; are &lt;em&gt;pushed onto&lt;/em&gt; a ‘linked list’ when calling into native code and &lt;em&gt;popped off&lt;/em&gt; the list when returning from native code. This means that are any moment the ‘linked list’ contains all the current or active &lt;code class=&quot;highlighter-rouge&quot;&gt;Frames&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;native-unwind-information&quot;&gt;Native Unwind Information&lt;/h3&gt;

&lt;p&gt;In addition to creating ‘Frames’, the CLR also ensures that the C++ compiler emits ‘unwind info’ for native code. We can see this if we use the &lt;a href=&quot;https://docs.microsoft.com/en-us/cpp/build/reference/dumpbin-reference?view=vs-2017&quot;&gt;DUMPBIN tool&lt;/a&gt; and run &lt;code class=&quot;highlighter-rouge&quot;&gt;dumpbin /UNWINDINFO coreclr.dll&lt;/code&gt;. We get the following output for &lt;code class=&quot;highlighter-rouge&quot;&gt;SystemNative::GetCommandLineArgs(..)&lt;/code&gt; (that we looked at before):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  0002F064 003789B0 00378B7E 004ED1D8  ?GetCommandLineArgs@SystemNative@@SAPEAVObject@@XZ (public: static class Object * __cdecl SystemNative::GetCommandLineArgs(void))
    Unwind version: 1
    Unwind flags: EHANDLER UHANDLER
    Size of prologue: 0x3B
    Count of codes: 13
    Unwind codes:
      29: SAVE_NONVOL, register=r12 offset=0x1C8
      25: SAVE_NONVOL, register=rdi offset=0x1C0
      21: SAVE_NONVOL, register=rsi offset=0x1B8
      1D: SAVE_NONVOL, register=rbx offset=0x1B0
      10: ALLOC_LARGE, size=0x190
      09: PUSH_NONVOL, register=r15
      07: PUSH_NONVOL, register=r14
      05: PUSH_NONVOL, register=r13
    Handler: 00148F14 __GSHandlerCheck_EH
    EH Handler Data: 00415990
    GS Unwind flags: EHandler UHandler
    Cookie Offset: 00000180

  0002F070 00378B7E 00378BB4 004ED26C
    Unwind version: 1
    Unwind flags: EHANDLER UHANDLER
    Size of prologue: 0x0A
    Count of codes: 2
    Unwind codes:
      0A: ALLOC_SMALL, size=0x20
      06: PUSH_NONVOL, register=rbp
    Handler: 0014978C __CxxFrameHandler3
    EH Handler Data: 00415990
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to understand more of what’s going on here I really recommend reading the excellent article &lt;a href=&quot;https://blogs.msdn.microsoft.com/ntdebugging/2010/05/12/x64-manual-stack-reconstruction-and-stack-walking/&quot;&gt;x64 Manual Stack Reconstruction and Stack Walking&lt;/a&gt;. But in essence the ‘unwind info’ describes which registers are used within a method and how big stack is for that method. These pieces of information are enough to tell the runtime how to ‘unwind’ that particular method when walking the stack.&lt;/p&gt;

&lt;h3 id=&quot;differences-between-windows-and-unix&quot;&gt;Differences between Windows and Unix&lt;/h3&gt;

&lt;p&gt;However, to further complicate things, the ‘native code unwinding’ uses a different mechanism for ‘Windows’ v. ‘Unix’, as explained in &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/177#issuecomment-73648128&quot;&gt;coreclr/issues/#177 (comment)&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;strong&gt;Stack walker for managed code&lt;/strong&gt;. JIT will generate regular Windows style unwinding info. We will reuse Windows unwinder code that we currently have checked in for debugger components for unwinding calls in managed code on Linux/Mac. Unfortunately, this work requires changes in the runtime that currently cannot be tested in the CoreCLR repo so it is hard to do this in the public right now. But we are working on fixing that because, as I mentioned at the beginning, our goal is do most work in the public.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Stack walker for native code&lt;/strong&gt;. Here, in addition to everything else, we need to allow GC to unwind native stack of any thread in the current process until it finds a managed frame. Currently we are considering using libunwind (http://www.nongnu.org/libunwind) for unwinding native call stacks. @janvorli did some prototyping/experiments and it seems to do what we need. If you have any experience with this library or have any comments/suggestions please let us know.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;This also shows that there are 2 different ‘unwind’ mechanisms for ‘managed’ or ‘native’ code, we will discuss how the “&lt;em&gt;stack walker for managed code&lt;/em&gt;” works in &lt;a href=&quot;#unwinding-jitted-code&quot;&gt;Unwinding ‘JITted’ Code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is also some more information in &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/177#issuecomment-73803242&quot;&gt;coreclr/issues/#177 (comment)&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;My current work has two parts, as @sergiy-k has already mentioned. The &lt;strong&gt;windows style unwinder that will be used for the jitted code&lt;/strong&gt; and &lt;strong&gt;Unix unwinder for native code&lt;/strong&gt; that uses the libunwind’s low level &lt;code class=&quot;highlighter-rouge&quot;&gt;unw_xxxx&lt;/code&gt; functions like &lt;code class=&quot;highlighter-rouge&quot;&gt;unw_step&lt;/code&gt; etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, for ‘native code’ the runtime uses an OS specific mechanism, i.e. on Unix the &lt;a href=&quot;https://github.com/libunwind/libunwind&quot;&gt;Open Source ‘libunwind’ library&lt;/a&gt; is used. You can see the differences in the code below (from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/amd64/gmsamd64.cpp#L54-L74&quot;&gt;here&lt;/a&gt;), under Windows &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread::VirtualUnwindCallFrame(..)&lt;/code&gt; (&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/stackwalk.cpp#L552-L671&quot;&gt;implementation&lt;/a&gt;) is called, but on Unix (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;FEATURE_PAL&lt;/code&gt;) &lt;code class=&quot;highlighter-rouge&quot;&gt;PAL_VirtualUnwind(..)&lt;/code&gt; (&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/pal/src/exception/seh-unwind.cpp#L249-L349&quot;&gt;implementation&lt;/a&gt;) is called instead:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef FEATURE_PAL
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;pvControlPc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VirtualUnwindCallFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonVolRegPtrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#else // !FEATURE_PAL
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PAL_VirtualUnwind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonVolRegPtrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pvControlPc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetIP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif // !FEATURE_PAL
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before we more on, here are some links to the work that was done to support ‘stack walking’ when .NET Core CLR was &lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2016/06/27/announcing-net-core-1-0/#the-net-core-journey&quot;&gt;ported to Linux&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/8887&quot;&gt;[x86/Linux] Support Simple Exception Catch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/6698&quot;&gt;[ARM/Linux] coreclr fails due to lack of DWARF feature in libunwind #6698&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/259&quot;&gt;Modify the windows amd64 unwinder to work as jitted code unwinder on Uni… #259&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/284&quot;&gt;Refactor libunwind to work on osx #284&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/308&quot;&gt;Reimplement native exception handling for PAL #308&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/commit/6c2c7994f1412e8aa504800c7164de875c350fc1&quot;&gt;Move the windows unwinder code out of the debug folder.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/core/blob/4c4642d548074b3fbfd425541a968aadd75fea99/release-notes/1.0/1.0.0.md#dependencies&quot;&gt;.NET Core Dependencies&lt;/a&gt; (includes ‘libunwind’)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/437&quot;&gt;The sos “ClrStack” command now works&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;unwinding-jitted-code&quot;&gt;Unwinding ‘JITted’ Code&lt;/h2&gt;

&lt;p&gt;Finally, we’re going to look at what happens with ‘managed code’, i.e. code that started off as C#/F#/VB.NET, was turned into IL and then compiled into native code by the ‘JIT Compiler’. This is the code that you generally want to see in your ‘stack trace’, because it’s code you wrote yourself!&lt;/p&gt;

&lt;h3 id=&quot;help-from-the-jit-compiler&quot;&gt;Help from the ‘JIT Compiler’&lt;/h3&gt;

&lt;p&gt;Simply, what happens is that when the code is ‘JITted’, the compiler also emits some extra information, stored via the &lt;code class=&quot;highlighter-rouge&quot;&gt;EECodeInfo&lt;/code&gt; class, which is defined &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/jitinterface.cpp#L13922-L14300&quot;&gt;here&lt;/a&gt;. Also see the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/jit/compiler.h#L7316-L7440&quot;&gt;‘Unwind Info’ section&lt;/a&gt; in the JIT Compiler &amp;lt;-&amp;gt; Runtime interface, note how it features seperate sections for &lt;code class=&quot;highlighter-rouge&quot;&gt;TARGET_ARM&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;TARGET_ARM64&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;TARGET_X86&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TARGET_UNIX&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In addition, in &lt;code class=&quot;highlighter-rouge&quot;&gt;CodeGen::genFnProlog()&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/jit/codegencommon.cpp#L8832-L9299&quot;&gt;here&lt;/a&gt; the JIT emits a function ‘prologue’ that contains several pieces of ‘unwind’ related data. This is also imlemented in &lt;code class=&quot;highlighter-rouge&quot;&gt;CEEJitInfo::allocUnwindInfo(..)&lt;/code&gt; in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/vm/jitinterface.cpp#L11275-L11300&quot;&gt;this piece of code&lt;/a&gt;, which behaves differently for each CPU architecture:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#if defined(_TARGET_X86_)
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Do NOTHING
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#elif defined(_TARGET_AMD64_)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;pUnwindInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNW_FLAG_EHANDLER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNW_FLAG_UHANDLER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pPersonalityRoutine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ALIGN_UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pUnwindInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnwindCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pUnwindInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CountOfUnwindCodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pPersonalityRoutine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecutionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetCLRPersonalityRoutineValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#elif defined(_TARGET_ARM64_)
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LONG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pUnwindInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// X bit
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pPersonalityRoutine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BYTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pUnwindInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALIGN_UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unwindSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pPersonalityRoutine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecutionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetCLRPersonalityRoutineValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#elif defined(_TARGET_ARM_)
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LONG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pUnwindInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// X bit
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pPersonalityRoutine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BYTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pUnwindInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALIGN_UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unwindSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pPersonalityRoutine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessCLRException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also, the JIT has several &lt;code class=&quot;highlighter-rouge&quot;&gt;Compiler::unwindXXX(..)&lt;/code&gt; methods, that are all implemented in per-CPU source files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/jit/unwind.cpp&quot;&gt;/src/jit/unwind.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/jit/unwindarm.cpp&quot;&gt;/src/jit/unwind&lt;strong&gt;arm&lt;/strong&gt;.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/jit/unwindx86.cpp&quot;&gt;/src/jit/unwind&lt;strong&gt;x86&lt;/strong&gt;.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/jit/unwindamd64.cpp&quot;&gt;/src/jit/unwind&lt;strong&gt;amd64&lt;/strong&gt;.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.2/src/jit/unwindarm64.cpp&quot;&gt;src/jit/unwind&lt;strong&gt;arm64&lt;/strong&gt;.cpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fortunately, we can &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/building/viewing-jit-dumps.md#useful-complus-variables&quot;&gt;ask the JIT&lt;/a&gt; to output the unwind info that it emits, however this &lt;em&gt;only works&lt;/em&gt; with a Debug version of the CLR. Given a simple method like this:&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MethodA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;MethodB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;if we call &lt;code class=&quot;highlighter-rouge&quot;&gt;SET COMPlus_JitUnwindDump=MethodA&lt;/code&gt;, we get the following output with 2 ‘Unwind Info’ sections, one for the &lt;code class=&quot;highlighter-rouge&quot;&gt;try&lt;/code&gt; and the other for the &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt; block:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Unwind Info:
  &amp;gt;&amp;gt; Start offset   : 0x000000 (not in unwind data)
  &amp;gt;&amp;gt;   End offset   : 0x00004e (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x07
  CountOfUnwindCodes: 4
  FrameRegister     : none (0)
  FrameOffset       : N/A (no FrameRegister) (Value=0)
  UnwindCodes       :
    CodeOffset: 0x07 UnwindOp: UWOP_ALLOC_SMALL (2)     OpInfo: 11 * 8 + 8 = 96 = 0x60
    CodeOffset: 0x03 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rsi (6)
    CodeOffset: 0x02 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rdi (7)
    CodeOffset: 0x01 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)
Unwind Info:
  &amp;gt;&amp;gt; Start offset   : 0x00004e (not in unwind data)
  &amp;gt;&amp;gt;   End offset   : 0x0000e2 (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x07
  CountOfUnwindCodes: 4
  FrameRegister     : none (0)
  FrameOffset       : N/A (no FrameRegister) (Value=0)
  UnwindCodes       :
    CodeOffset: 0x07 UnwindOp: UWOP_ALLOC_SMALL (2)     OpInfo: 5 * 8 + 8 = 48 = 0x30
    CodeOffset: 0x03 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rsi (6)
    CodeOffset: 0x02 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rdi (7)
    CodeOffset: 0x01 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This ‘unwind info’ is then looked up during a ‘stack walk’ as explained in the &lt;a href=&quot;#how-it-works&quot;&gt;How it works&lt;/a&gt; section above.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;So next time you encounter a ‘stack trace’ remember that a lot of work went into making it possible!!&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;

&lt;p&gt;‘Stack Walking’ or ‘Stack Unwinding’ is a very large topic, so if you want to know more, here are some links to get you started:&lt;/p&gt;

&lt;h3 id=&quot;stack-unwinding-general&quot;&gt;Stack Unwinding (general)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://eli.thegreenplace.net/2011/09/06/stack-frame-layout-on-x86-64/&quot;&gt;Stack frame layout on x86-64&lt;/a&gt; (also has a great list of links at the bottom)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://eli.thegreenplace.net/2011/02/04/where-the-top-of-the-stack-is-on-x86/&quot;&gt;Where the top of the stack is on x86&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://eli.thegreenplace.net/2015/programmatic-access-to-the-call-stack-in-c/&quot;&gt;Programmatic access to the call stack in C++&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://eli.thegreenplace.net/2011/02/07/how-debuggers-work-part-3-debugging-information&quot;&gt;How debuggers work: Part 3 - Debugging information&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.tartanllama.xyz/writing-a-linux-debugger-unwinding/&quot;&gt;Writing a Linux Debugger Part 8: Stack unwinding&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.reverberate.org/2013/05/deep-wizardry-stack-unwinding.html&quot;&gt;Deep Wizardry: Stack Unwinding&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/programming/comments/1ebswy/deep_wizardry_stack_unwinding/&quot;&gt;Deep Wizardry: Stack Unwinding&lt;/a&gt; (/r/programmming)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.corsix.org/content/libunwind-dynamic-code-x86-64&quot;&gt;On libunwind and dynamically generated code on x86-64&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=11477039&quot;&gt;On libunwind and dynamically generated code on x86-64&lt;/a&gt; (HackerNews)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikibooks.org/wiki/X86_Disassembly/Functions_and_Stack_Frames&quot;&gt;x86 Disassembly/Functions and Stack Frames&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/579262/what-is-the-purpose-of-the-ebp-frame-pointer-register&quot;&gt;What is the purpose of the EBP frame pointer register?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.microsoft.co.il/sasha/2011/07/20/manual-stack-walking/&quot;&gt;Manual Stack Walking&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.microsoft.co.il/sasha/2011/08/22/walking-the-stack-without-symbols-and-with-fpo-frame-pointer-omission/&quot;&gt;Walking the Stack Without Symbols and With FPO (Frame Pointer Omission)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cshung.gitbooks.io/how-to-write-a-debuggable-programming-language/content/stack-unwinder.html&quot;&gt;how to write a debuggable programming language - stack unwinding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stack-unwinding-other-runtimes&quot;&gt;Stack Unwinding (other runtimes)&lt;/h3&gt;

&lt;p&gt;In addition, it’s interesting to look at how other runtimes handles this process:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Mono&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.mono-project.com/docs/advanced/runtime/docs/mini-porting/#unwind-info&quot;&gt;Porting the Engine - Unwind Info&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.mono-project.com/docs/advanced/runtime/docs/llvm-backend/#unwind-info&quot;&gt;LLVM Backend - Unwind Info&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.mono-project.com/docs/advanced/runtime/docs/exception-handling/#stack-unwinding-during-exception-handling&quot;&gt;Stack unwinding during exception handling&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/mono/mono/blob/master/mono/mini/unwind.c&quot;&gt;/master/mono/mini/&lt;strong&gt;unwind.c&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/mono/mono/blob/master/mono/utils/mono-stack-unwinding.h&quot;&gt;/master/mono/utils/&lt;strong&gt;mono-stack-unwinding.h&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CoreRT&lt;/strong&gt; (&lt;a href=&quot;/2018/06/07/CoreRT-.NET-Runtime-for-AOT/&quot;&gt;A .NET Runtime for AOT&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/blob/master/Documentation/high-level-engineering-plan.md#runtime&quot;&gt;High-level Engineering Plan - Runtime&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/blob/master/src/Native/Runtime/unix/UnwindHelpers.cpp&quot;&gt;/src/Native/Runtime/unix/&lt;strong&gt;UnwindHelpers.cpp&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/blob/master/src/Native/Runtime/StackFrameIterator.cpp&quot;&gt;/src/Native/Runtime/&lt;strong&gt;StackFrameIterator.cpp&lt;/strong&gt;&lt;/a&gt; (see &lt;code class=&quot;highlighter-rouge&quot;&gt;StackFrameIterator::NextInternal()&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/Native/libunwind&quot;&gt;/src/Native/&lt;strong&gt;libunwind&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Go&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://science.raphael.poss.name/go-calling-convention-x86-64.html#aside-exceptions-in-c-c&quot;&gt;The Go low-level calling convention on x86-64&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/teh-cmc/go-internals/blob/master/chapter1_assembly_primer/README.md#dissecting-main&quot;&gt;Go Internals - Chapter I: A Primer on Go Assembly&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://stackimpact.com/blog/go-profiler-internals/&quot;&gt;Go Profiler Internals&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://golang.org/src/runtime/stack.go&quot;&gt;golang.org/src/runtime/stack.go&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://golang.org/src/runtime/traceback.go?h=gentraceback#L98&quot;&gt;golang.org/src/runtime/traceback.go&lt;/a&gt; (see &lt;code class=&quot;highlighter-rouge&quot;&gt;gentraceback(..)&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://golang.org/src/runtime/symtab.go?h=findfunc#L659&quot;&gt;golang.org/src/runtime/symtab.go&lt;/a&gt; (see &lt;code class=&quot;highlighter-rouge&quot;&gt;findfunc(..)&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-stacks-and-pointers.html&quot;&gt;Language Mechanics On Stacks And Pointers&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://technosophos.com/2014/03/19/generating-stack-traces-in-go.html&quot;&gt;Generating Stack Traces in Go&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Java&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://openjdk.java.net/jeps/259&quot;&gt;JEP 259: Stack-Walking API&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://alvinalexander.com/scala/fp-book/recursion-visual-look-jvm-stack-frames&quot;&gt;A Visual Look at JVM Stacks and Frames&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.artima.com/insidejvm/ed2/jvm8.html&quot;&gt;The Java Virtual Machine - The Java Stack&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-2.html#jvms-2.5.6&quot;&gt;The Structure of the Java Virtual Machine - Native Method Stacks&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://harmony.apache.org/subcomponents/drlvm/developers_guide.html#Stack_Walking&quot;&gt;Stack Walking - Dynamic Runtime Layer Virtual Machine Developer’s Guide&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.67.346&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;A Study of Exception Handling and Its Dynamic Optimization in Java&lt;/a&gt; (pdf)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://books.google.co.uk/books?id=jZG_DQAAQBAJ&amp;amp;lpg=PA125&amp;amp;ots=KwhW3tYXUa&amp;amp;dq=chapter%208%20stack%20unwinding&amp;amp;pg=PA125#v=onepage&amp;amp;q=chapter%208%20stack%20unwinding&amp;amp;f=false&quot;&gt;Chapter 8 of ‘Advanced Design and Implementation of Virtual Machines’&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Rust&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/nomicon/unwinding.html&quot;&gt;Unwinding&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://lucumr.pocoo.org/2014/10/30/dont-panic/&quot;&gt;Don’t Panic! The Hitchhiker’s Guide to Unwinding&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=8537756&quot;&gt;Stack unwinding in Rust&lt;/a&gt; (Hacker News)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1513-less-unwinding.md&quot;&gt;RFC 1513 - Less unwinding&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://internals.rust-lang.org/t/disabling-panic-handling/1834&quot;&gt;Disabling panic! handling&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://rust-lang-nursery.github.io/edition-guide/rust-2018/error-handling-and-panics/controlling-panics-with-std-panic.html&quot;&gt;Controlling panics with std::panic&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/1.3.0/std/rt/unwind/&quot;&gt;Module std::rt::unwind&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

     
     
     
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
 </entry>
 
 <entry>
   <title>Exploring the .NET Core Runtime (in which I set myself a challenge)</title>
   <link href="http://www.mattwarren.org/2018/12/13/Exploring-the-.NET-Core-Runtime/"/>
   <updated>2018-12-13T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2018/12/13/Exploring-the-.NET-Core-Runtime</id>
   <content type="html">
     &lt;p&gt;It seems like this time of year anyone with a blog is doing some sort of ‘advent calendar’, i.e. 24 posts leading up to Christmas. For instance there’s a &lt;a href=&quot;https://sergeytihon.com/2018/10/22/f-advent-calendar-in-english-2018/&quot;&gt;F# one&lt;/a&gt; which inspired a &lt;a href=&quot;https://crosscuttingconcerns.com/The-Second-Annual-C-Advent&quot;&gt;C# one&lt;/a&gt; (&lt;em&gt;C# copying from F#, that never happens&lt;/em&gt; 😉)&lt;/p&gt;

&lt;p&gt;However, that’s a bit of a problem for me, I struggled to write 24 posts &lt;a href=&quot;/postsByYear/#2016-ref&quot;&gt;in my most productive year&lt;/a&gt;, let alone a single month! Also, I mostly blog about &lt;a href=&quot;/tags/#Internals&quot;&gt;‘.NET Internals’&lt;/a&gt;, a subject which doesn’t necessarily lend itself to the more ‘&lt;em&gt;light-hearted&lt;/em&gt;’ posts you get in these ‘advent calendar’ blogs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Until now!&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Recently I’ve been giving a talk titled &lt;strong&gt;from ‘dotnet run’ to ‘hello world’&lt;/strong&gt;, which attempts to explain everything that the .NET Runtime does from the point you launch your application till “Hello World” is printed on the screen:&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/xU98KRbWFvU2SC?startSlide=6&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/mattwarren/from-dotnet-run-to-hello-world&quot; title=&quot;From &amp;#x27;dotnet run&amp;#x27; to &amp;#x27;hello world&amp;#x27;&quot; target=&quot;_blank&quot;&gt;From &amp;#x27;dotnet run&amp;#x27; to &amp;#x27;hello world&amp;#x27;&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;//www.slideshare.net/mattwarren&quot; target=&quot;_blank&quot;&gt;Matt Warren&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;p&gt;But as I was researching and presenting this talk, it made me think about the &lt;em&gt;.NET Runtime&lt;/em&gt; as a whole, &lt;a href=&quot;/2017/03/23/Hitchhikers-Guide-to-the-CoreCLR-Source-Code/#high-level-overview&quot;&gt;&lt;em&gt;what does it contain&lt;/em&gt;&lt;/a&gt; and most importantly &lt;strong&gt;what can you do with it&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this is mostly for &lt;em&gt;informational&lt;/em&gt; purposes, for the &lt;em&gt;recommended way&lt;/em&gt; of achieving the same thing, take a look at this excellent &lt;a href=&quot;https://natemcmaster.com/blog/2017/12/21/netcore-primitives/&quot;&gt;Deep-dive into .NET Core primitives&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/natemcmaster&quot;&gt;Nate McMaster&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In this post I will explore what you can do &lt;strong&gt;using only the code in the &lt;a href=&quot;https://github.com/dotnet/coreclr&quot;&gt;dotnet/coreclr&lt;/a&gt; repository&lt;/strong&gt; and along the way we’ll find out more about how the runtime interacts with the wider &lt;a href=&quot;https://dotnet.microsoft.com/&quot;&gt;.NET Ecosystem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To makes things clearer, there are &lt;strong&gt;3 challenges&lt;/strong&gt; that will need to be solved before a simple “Hello World” application can be run. That’s because in the &lt;a href=&quot;https://github.com/dotnet/coreclr&quot;&gt;dotnet/coreclr&lt;/a&gt; repository there is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;No &lt;strong&gt;compiler&lt;/strong&gt;, that lives in &lt;a href=&quot;https://github.com/dotnet/roslyn/&quot;&gt;dotnet/Roslyn&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;No &lt;strong&gt;Framework Class Library (FCL)&lt;/strong&gt; a.k.a. ‘&lt;a href=&quot;https://github.com/dotnet/corefx&quot;&gt;dotnet/CoreFX&lt;/a&gt;’&lt;/li&gt;
  &lt;li&gt;No &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet run&lt;/code&gt; as it’s implemented in the &lt;a href=&quot;https://github.com/dotnet/cli/tree/release/2.2.2xx/src/dotnet/commands/dotnet-run&quot;&gt;dotnet/CLI&lt;/a&gt; repository&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;building-the-coreclr&quot;&gt;Building the CoreCLR&lt;/h2&gt;

&lt;p&gt;But before we even work through these ‘challenges’, we need to build the CoreCLR itself. Helpfully there is really nice guide available in &lt;a href=&quot;https://github.com/dotnet/coreclr#building-the-repository&quot;&gt;‘Building the Repository’&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The build depends on Git, CMake, Python and of course a C++ compiler.  Once these prerequisites are installed
the build is simply a matter of invoking the ‘build’ script (&lt;code class=&quot;highlighter-rouge&quot;&gt;build.cmd&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sh&lt;/code&gt;) at the base of the repository.&lt;/p&gt;

  &lt;p&gt;The details of installing the components differ depending on the operating system.  See the following pages based on your OS.  There is no cross-building across OS (only for ARM, which is built on X64). You have to be on the particular platform to build that platform.&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/building/windows-instructions.md&quot;&gt;Windows Build Instructions&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/building/linux-instructions.md&quot;&gt;Linux Build Instructions&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/building/osx-instructions.md&quot;&gt;macOS Build Instructions&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/building/freebsd-instructions.md&quot;&gt;FreeBSD Build Instructions&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/building/netbsd-instructions.md&quot;&gt;NetBSD Build Instructions&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you follow these steps successfully, you’ll end up with the following files (at least on Windows, other OSes may produce something slightly different):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/12/CoreCLR Build Artifacts.png&quot; alt=&quot;CoreCLR Build Artifacts&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;no-compiler&quot;&gt;No Compiler&lt;/h2&gt;

&lt;p&gt;First up, how do we get around the fact that we don’t have a compiler? After all we need some way of turing our simple “Hello World” code into a .exe?&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Hello_World&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Program&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Fortunately we do have access to the &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/ilasm&quot;&gt;ILASM tool (IL Assembler)&lt;/a&gt;, which can turn &lt;a href=&quot;https://en.wikipedia.org/wiki/Common_Intermediate_Language&quot;&gt;Common Intermediate Language (CIL)&lt;/a&gt; into an .exe file. But how do we get the correct IL code? Well, one way is to write it from scratch, maybe after reading &lt;a href=&quot;https://amzn.to/2QPpiTY&quot;&gt;Inside NET IL Assembler&lt;/a&gt; and &lt;a href=&quot;https://amzn.to/2Ca34UI&quot;&gt;Expert .NET 2.0 IL Assembler&lt;/a&gt; by Serge Lidin (yes, amazingly, 2 books have been written about IL!)&lt;/p&gt;

&lt;p&gt;Another, much easier way, is to use the amazing &lt;a href=&quot;https://sharplab.io/&quot;&gt;SharpLab.io site&lt;/a&gt; to do it for us! If you paste the C# code from above into it, you’ll &lt;a href=&quot;https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxASwDYB8ACAGAAhwEYBuAWACgqA7CMOKABwgGM4CAJODDAewD6AdT4IMAEyoBvKgTlEATEWIB2WfJmV525QDYiAFgIBZCGhoAKEngDaAXQIQEAcygBKdToKavXkgE4LACJuXj4CETFxAEIgtwotXwBfTwIUyiSgA==&quot;&gt;get the following IL code&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.class private auto ansi '&amp;lt;Module&amp;gt;'
{
} // end of class &amp;lt;Module&amp;gt;

.class private auto ansi beforefieldinit Hello_World.Program
    extends [mscorlib]System.Object
{
    // Methods
    .method private hidebysig static 
        void Main (
            string[] args
        ) cil managed 
    {
        // Method begins at RVA 0x2050
        // Code size 11 (0xb)
        .maxstack 8

        IL_0000: ldstr &quot;Hello World!&quot;
        IL_0005: call void [mscorlib]System.Console::WriteLine(string)
        IL_000a: ret
    } // end of method Program::Main

    .method public hidebysig specialname rtspecialname 
        instance void .ctor () cil managed 
    {
        // Method begins at RVA 0x205c
        // Code size 7 (0x7)
        .maxstack 8

        IL_0000: ldarg.0
        IL_0001: call instance void [mscorlib]System.Object::.ctor()
        IL_0006: ret
    } // end of method Program::.ctor

} // end of class Hello_World.Program
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, if we save this to a file called ‘HelloWorld.il’ and run the cmd &lt;code class=&quot;highlighter-rouge&quot;&gt;ilasm HelloWorld.il /out=HelloWorld.exe&lt;/code&gt;, we get the following output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Microsoft (R) .NET Framework IL Assembler.  Version 4.5.30319.0
Copyright (c) Microsoft Corporation.  All rights reserved.
Assembling 'HelloWorld.il'  to EXE --&amp;gt; 'HelloWorld.exe'
Source file is ANSI

HelloWorld.il(38) : warning : Reference to undeclared extern assembly 'mscorlib'. Attempting autodetect
Assembled method Hello_World.Program::Main
Assembled method Hello_World.Program::.ctor
Creating PE file

Emitting classes:
Class 1:        Hello_World.Program

Emitting fields and methods:
Global
Class 1 Methods: 2;

Emitting events and properties:
Global
Class 1
Writing PE file
Operation completed successfully
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Nice, so part 1 is done, we now have our &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld.exe&lt;/code&gt; file!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;no-base-class-library&quot;&gt;No Base Class Library&lt;/h2&gt;

&lt;p&gt;Well, not exactly, one problem is that &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Console&lt;/code&gt; lives in &lt;a href=&quot;https://github.com/dotnet/corefx/tree/release/2.2/src/System.Console/src/System&quot;&gt;dotnet/corefx&lt;/a&gt;, in there you can see the different files that make up the implementation, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Console.cs&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ConsolePal.Unix.cs&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ConsolePal.Windows.cs&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;Fortunately, the nice CoreCLR developers included a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;Console&lt;/code&gt; implementation in &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Private.CoreLib.dll&lt;/code&gt;, the &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/System.Private.CoreLib&quot;&gt;managed part of the CoreCLR&lt;/a&gt;, which was previously known as &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/release/2.2/src/mscorlib&quot;&gt;‘mscorlib’&lt;/a&gt; (before it &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/17926&quot;&gt;was renamed&lt;/a&gt;). This internal version of &lt;code class=&quot;highlighter-rouge&quot;&gt;Console&lt;/code&gt; is &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/Internal/Console.cs&quot;&gt;pretty small and basic&lt;/a&gt;, but it provides enough for what we need.&lt;/p&gt;

&lt;p&gt;To use this ‘workaround’ we need to edit our &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld.il&lt;/code&gt; to look like this (note the change from &lt;code class=&quot;highlighter-rouge&quot;&gt;mscorlib&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Private.CoreLib&lt;/code&gt;)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.class public auto ansi beforefieldinit C
       extends [System.Private.CoreLib]System.Object
{
    .method public hidebysig static void M () cil managed 
    {
        .entrypoint
        // Code size 11 (0xb)
        .maxstack 8

        IL_0000: ldstr &quot;Hello World!&quot;
        IL_0005: call void [System.Private.CoreLib]Internal.Console::WriteLine(string)
        IL_000a: ret
    } // end of method C::M
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can achieve the same thing with C# code instead of raw IL, by invoking the C# compiler with the following cmd-line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;csc -optimize+ -nostdlib -reference:System.Private.Corelib.dll -out:HelloWorld.exe HelloWorld.cs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;So we’ve completed part 2, we are able to at least print “Hello World” to the screen without using the CoreFX repository!&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now this is a nice little trick, but I wouldn’t ever recommend writing real code like this. Compiling against &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Private.CoreLib&lt;/code&gt; isn’t the right way of doing things. What the compiler normally does is compile against the publicly exposed surface area that lives in &lt;a href=&quot;https://github.com/dotnet/corefx&quot;&gt;dotnet/corefx&lt;/a&gt;, but then at run-time a process called &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/app-domains/type-forwarding-in-the-common-language-runtime&quot;&gt;‘Type-Forwarding’&lt;/a&gt; is used to make that ‘reference’ implementation in CoreFX map to the ‘real’ implementation in the CoreCLR. For more on this entire process see &lt;a href=&quot;https://blog.lextudio.com/the-rough-history-of-referenced-assemblies-7d752d92c18c&quot;&gt;The Rough History of Referenced Assemblies&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, only a &lt;a href=&quot;/2017/03/23/Hitchhikers-Guide-to-the-CoreCLR-Source-Code/#high-level-overview&quot;&gt;small amount of managed code&lt;/a&gt; (i.e. C#) actually exists in the CoreCLR, to show this, the directory tree for &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/System.Private.CoreLib&quot;&gt;/dotnet/coreclr/src/System.Private.CoreLib&lt;/a&gt; is &lt;a href=&quot;https://gist.github.com/mattwarren/6b36567b51e3adca6c1ca684e72b8f6f&quot;&gt;available here&lt;/a&gt; and the tree with all ~1280 .cs files included is &lt;a href=&quot;https://gist.github.com/mattwarren/abc4e194b71e78eb9fa5a550a379a0a1&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a concrete example, if you look in CoreFX, you’ll see that the &lt;a href=&quot;https://github.com/dotnet/corefx/tree/master/src/System.Reflection/src&quot;&gt;System.Reflection implementation&lt;/a&gt; is pretty empty! That’s because it’s a ‘partial facade’ that is eventually &lt;a href=&quot;https://github.com/dotnet/corefx/blob/release/2.2/src/System.Reflection.Emit/src/System.Reflection.Emit.csproj#L19&quot;&gt;‘type-forwarded’ to System.Private.CoreLib&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’re interested, the entire API that is exposed in CoreFX (but actually lives in CoreCLR) is &lt;a href=&quot;https://github.com/dotnet/corefx/blob/master/src/System.Runtime/ref/System.Runtime.cs&quot;&gt;contained in System.Runtime.cs&lt;/a&gt;. But back to our example, here is the code that describes all the &lt;a href=&quot;https://github.com/dotnet/corefx/blob/master/src/System.Runtime/ref/System.Runtime.cs#L3035-L3048&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GetMethod(..)&lt;/code&gt; functions&lt;/a&gt; in the ‘System.Reflection’ API.&lt;/p&gt;

&lt;p&gt;To learn more about ‘type forwarding’, I recommend watching &lt;a href=&quot;https://www.youtube.com/watch?v=vg6nR7hS2lI&quot;&gt;‘.NET Standard - Under the Hood’&lt;/a&gt; (&lt;a href=&quot;https://www.slideshare.net/terrajobst/net-standard-under-the-hood&quot;&gt;slides&lt;/a&gt;) by &lt;a href=&quot;https://twitter.com/terrajobst&quot;&gt;Immo Landwerth&lt;/a&gt; and there is also some more in-depth information in &lt;a href=&quot;https://github.com/dotnet/standard/blob/master/docs/history/evolution-of-design-time-assemblies.md&quot;&gt;‘Evolution of design time assemblies’&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But why is this code split useful&lt;/strong&gt;, from the &lt;a href=&quot;https://github.com/dotnet/corefx#net-core-libraries-corefx&quot;&gt;CoreFX README&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Runtime-specific library code&lt;/strong&gt; (&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/System.Private.CoreLib&quot;&gt;mscorlib&lt;/a&gt;) lives in the CoreCLR repo. It needs to be built and versioned in tandem with the runtime. The rest of CoreFX is &lt;strong&gt;agnostic of runtime-implementation and can be run on any compatible .NET runtime&lt;/strong&gt; (e.g. &lt;a href=&quot;https://github.com/dotnet/corert&quot;&gt;CoreRT&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And from the other point-of-view, in the &lt;a href=&quot;https://github.com/dotnet/coreclr#relationship-with-the-corefx-repository&quot;&gt;CoreCLR README&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;By itself, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Microsoft.NETCore.Runtime.CoreCLR&lt;/code&gt; package is actually not enough to do much. One reason for this is that the CoreCLR package tries to minimize the amount of the class library that it implements. &lt;strong&gt;Only types that have a strong dependency on the internal workings of the runtime are included&lt;/strong&gt; (e.g, &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Object&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;System.String&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Threading.Thread&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Threading.Tasks.Task&lt;/code&gt; and most foundational interfaces).&lt;/p&gt;

  &lt;p&gt;Instead most of the class library is implemented as independent NuGet packages that simply use the .NET Core runtime as a dependency. Many of the most familiar classes (&lt;code class=&quot;highlighter-rouge&quot;&gt;System.Collections&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;System.IO&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Xml&lt;/code&gt; and so on), live in packages defined in the &lt;a href=&quot;https://github.com/dotnet/corefx&quot;&gt;dotnet/corefx&lt;/a&gt; repository.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One &lt;strong&gt;huge benefit&lt;/strong&gt; of this approach is that &lt;a href=&quot;https://www.mono-project.com/&quot;&gt;Mono&lt;/a&gt; can share &lt;a href=&quot;https://mobile.twitter.com/matthewwarren/status/987292012520067072&quot;&gt;large amounts of the CoreFX code&lt;/a&gt;, as shown in this tweet:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;How Mono reuses .NET Core sources for BCL (doesn&amp;#39;t include runtime, tools, etc) according to my calculations 🙂 &lt;a href=&quot;https://t.co/8JCDxqwnNi&quot;&gt;pic.twitter.com/8JCDxqwnNi&lt;/a&gt;&lt;/p&gt;&amp;mdash; Egor Bogatov (@EgorBo) &lt;a href=&quot;https://twitter.com/EgorBo/status/978737460061458432?ref_src=twsrc%5Etfw&quot;&gt;March 27, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;no-launcher&quot;&gt;No Launcher&lt;/h2&gt;

&lt;p&gt;So far we’ve ‘compiled’ our code (well technically ‘assembled’ it) and we’ve been able to access a simple version of &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Console&lt;/code&gt;, but how do we actually run our &lt;code class=&quot;highlighter-rouge&quot;&gt;.exe&lt;/code&gt;? Remember we can’t use the &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet run&lt;/code&gt; command because that lives in the &lt;a href=&quot;https://github.com/dotnet/cli/tree/release/2.2.2xx/src/dotnet/commands/dotnet-run&quot;&gt;dotnet/CLI&lt;/a&gt; repository (and that would be breaking the rules of this &lt;em&gt;slightly contrived&lt;/em&gt; challenge!!).&lt;/p&gt;

&lt;p&gt;Again, fortunately those clever runtime engineers have thought of this exact scenario and they built the very helpful &lt;code class=&quot;highlighter-rouge&quot;&gt;corerun&lt;/code&gt; application. You can read more about in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/workflow/UsingCoreRun.md&quot;&gt;Using corerun To Run .NET Core Application&lt;/a&gt;, but the td;dr is that it will only look for dependencies in the same folder as your .exe.&lt;/p&gt;

&lt;p&gt;So, to complete the challenge, we can now run &lt;code class=&quot;highlighter-rouge&quot;&gt;CoreRun HelloWorld.exe&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# CoreRun HelloWorld.exe
Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Yay, the least impressive demo you’ll see this year!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For more information on how you can ‘host’ the CLR in your application I recommend this excellent tutorial &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/core/tutorials/netcore-hosting&quot;&gt;Write a custom .NET Core host to control the .NET runtime from your native code&lt;/a&gt;. In addition, the docs page on &lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/a51xd4ze(v=vs.100)&quot;&gt;‘Runtime Hosts’&lt;/a&gt; gives a nice overview of the different hosts that are available:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The .NET Framework ships with a number of different runtime hosts, including the hosts listed in the following table.&lt;/p&gt;

  &lt;table&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;Runtime Host&lt;/th&gt;
        &lt;th&gt;Description&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;ASP.NET&lt;/td&gt;
        &lt;td&gt;Loads the runtime into the process that is to handle the Web request. ASP.NET also creates an application domain for each Web application that will run on a Web server.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Microsoft Internet Explorer&lt;/td&gt;
        &lt;td&gt;Creates application domains in which to run managed controls. The .NET Framework supports the download and execution of browser-based controls. The runtime interfaces with the extensibility mechanism of Microsoft Internet Explorer through a mime filter to create application domains in which to run the managed controls. By default, one application domain is created for each Web site.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Shell executables&lt;/td&gt;
        &lt;td&gt;Invokes runtime hosting code to transfer control to the runtime each time an executable is launched from the shell.&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/blockquote&gt;


     
     
     
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
 </entry>
 
 <entry>
   <title>Open Source .NET – 4 years later</title>
   <link href="http://www.mattwarren.org/2018/12/04/Open-Source-.Net-4-years-later"/>
   <updated>2018-12-04T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2018/12/04/Open-Source-.Net-4-years-later.</id>
   <content type="html">
     
&lt;link rel=&quot;stylesheet&quot; href=&quot;/datavis/dotnet-oss.css&quot; /&gt;

&lt;script src=&quot;/datavis/dotnet-oss.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;

&lt;p&gt;A little over 4 years ago Microsoft announced that they were &lt;a href=&quot;http://www.hanselman.com/blog/AnnouncingNET2015NETAsOpenSourceNETOnMacAndLinuxAndVisualStudioCommunity.aspx&quot;&gt;open sourcing large parts of the .NET framework&lt;/a&gt; and as this slide from &lt;a href=&quot;https://www.slideshare.net/jongalloway/net-core-previews-new-features-in-net-core-and-aspnet-core-21-blazor-and-more#8&quot;&gt;New Features in .NET Core and ASP.NET Core 2.1&lt;/a&gt; shows, the community has been contributing in a significant way:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/jongalloway/status/974064785397395456&quot;&gt;&lt;img src=&quot;/images/2018/12/NET Open Source Success.jpg&quot; alt=&quot;.NET Open Source Success&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Side-note&lt;/strong&gt;: This post forms part of an on-going series, if you want to see how things have changed over time you can check out the previous ones:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2017/12/19/Open-Source-.Net-3-years-later?recommended=1&quot;&gt;Open Source .NET – 3 years later&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2016/11/23/open-source-net-2-years-later?recommended=1&quot;&gt;Open Source .NET – 2 years later&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2016/01/15/open-source-net-1-year-later-now-with-aspnet?recommended=1&quot;&gt;Open Source .NET – 1 year later - Now with ASP.NET&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2015/12/08/open-source-net-1-year-later?recommended=1&quot;&gt;Open Source .NET – 1 year later&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;runtime-changes&quot;&gt;Runtime Changes&lt;/h2&gt;

&lt;p&gt;Before I look at the numbers, I just want to take a moment to look at the &lt;strong&gt;significant&lt;/strong&gt; runtime changes that have taken place over the last 4 years. Partly because I really like looking at the &lt;a href=&quot;/tags/#Internals&quot;&gt;‘Internals’ of CoreCLR&lt;/a&gt;, but also because the runtime is the one repository that makes all the others possible, they rely on it!&lt;/p&gt;

&lt;p&gt;To give some context, here’s the slides from a presentation I did called &lt;a href=&quot;https://www.updateconference.net/en/session/from--dotnet-run--to--hello-world--&quot;&gt;‘From ‘dotnet run’ to ‘hello world’&lt;/a&gt;. If you flick through them you’ll see what components make up the CoreCLR code-base and what they do to make your application run.&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/xU98KRbWFvU2SC?startSlide=8&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/mattwarren/from-dotnet-run-to-hello-world&quot; title=&quot;From &amp;#x27;dotnet run&amp;#x27; to &amp;#x27;hello world&amp;#x27;&quot; target=&quot;_blank&quot;&gt;From &amp;#x27;dotnet run&amp;#x27; to &amp;#x27;hello world&amp;#x27;&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;//www.slideshare.net/mattwarren&quot; target=&quot;_blank&quot;&gt;Matt Warren&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;p&gt;So, after a bit of digging through the &lt;a href=&quot;https://github.com/dotnet/coreclr&quot;&gt;19,059 commits&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/issues&quot;&gt;5,790 issues&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/projects&quot;&gt;the 8 projects&lt;/a&gt;, here’s the list of &lt;strong&gt;significant&lt;/strong&gt; changes in the &lt;strong&gt;.NET Core Runtime (CoreCLR)&lt;/strong&gt; over the last few years (if I’ve missed any out, please let me know!!):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/strong&gt; (&lt;a href=&quot;https://msdn.microsoft.com/en-us/magazine/mt814808.aspx?f=255&amp;amp;MSPPError=-2147217396&quot;&gt;more info&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/5851&quot;&gt;Span&amp;#x3C;T&amp;#x3E;&lt;/a&gt; (‘umbrella’ issue for the whole feature)
        &lt;ul&gt;
          &lt;li&gt;Includes change to multiple parts of the runtime, the VM, JIT and GC&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/Microsoft/dotnet/issues/770&quot;&gt;Will .NET Core 2.1’s Span-based APIs be made available on the .NET Framework? If so, when?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Also needed &lt;strong&gt;CoreFX&lt;/strong&gt; work such as &lt;a href=&quot;https://github.com/dotnet/corefx/issues/21281&quot;&gt;Add initial Span/Buffer-based APIs across corefx&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/corefx/issues/21395&quot;&gt;String-like extension methods to ReadOnlySpan&amp;#x3C;char&amp;#x3E; Epic&lt;/a&gt; and &lt;strong&gt;Compiler&lt;/strong&gt; changes, e.g. &lt;a href=&quot;https://github.com/dotnet/csharplang/blob/master/proposals/csharp-7.2/span-safety.md&quot;&gt;Compile time enforcement of safety for ref-like types&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ref-like&lt;/code&gt; like types&lt;/strong&gt; (to support &lt;code class=&quot;highlighter-rouge&quot;&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/csharplang/blob/master/proposals/csharp-7.2/span-safety.md#generalized-ref-like-types-in-source-code&quot;&gt;‘Generalized ref-like types in source code.’&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/15745&quot;&gt;Detect ByRefLike types using attribute&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/18280&quot;&gt;Interpretation of ByRefLikeAttribute in .NET Core 2.1 is a breaking change and a standard violation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/search?utf8=%E2%9C%93&amp;amp;q=IsByRefLike&amp;amp;type=&quot;&gt;Search for ‘IsByRefLike’ in the CoreCLR source code&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tiered Compilation&lt;/strong&gt; (&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2018/08/02/tiered-compilation-preview-in-net-core-2-1/&quot;&gt;more info&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/search?o=asc&amp;amp;p=3&amp;amp;q=tiered+compilation&amp;amp;s=author-date&amp;amp;type=Commits&quot;&gt;Tiered Compilation step 1&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/14612&quot;&gt;profiler changes for tiered compilation&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/17476&quot;&gt;Fix x86 steady state tiered compilation performance&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Also see the more general &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/code-versioning.md&quot;&gt;‘Code Versioning’ design doc&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/19525&quot;&gt;Enable Tiered Compilation by default&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cross-platform&lt;/strong&gt; (Unix, OS X, etc, see list of all &lt;a href=&quot;https://github.com/dotnet/coreclr/labels?utf8=%E2%9C%93&amp;amp;q=os-&quot;&gt;‘os-xxx’ labels&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/170&quot;&gt;Support building mscorlib on UNIX systems&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/177&quot;&gt;Implement stack unwinding and exceptions for Linux&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/453&quot;&gt;Inital build support for FreeBSD&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/827&quot;&gt;Complete FreeBSD bringup&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/117&quot;&gt;Initial Mac OSX Support (PR)&lt;/a&gt; and the &lt;a href=&quot;https://github.com/dotnet/coreclr/pulls?utf8=%E2%9C%93&amp;amp;q=is%3Apr+author%3Akangaroo+is%3Aclosed+OSX&quot;&gt;rest of the work&lt;/a&gt;!!&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://praeclarum.org/2015/02/09/building-and-running-nets-coreclr-on-os-x.html&quot;&gt;Building and Running .NET’s CoreCLR on OS X&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;New CPU Architectures&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/projects/2&quot;&gt;ARM64 Project&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/projects/4&quot;&gt;ARM32 Project&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;List of all issues &lt;a href=&quot;https://github.com/dotnet/coreclr/labels?utf8=%E2%9C%93&amp;amp;q=arch-&quot;&gt;labelled ‘arch-xxx’&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hardware Intrinsics&lt;/strong&gt; (&lt;a href=&quot;https://github.com/dotnet/coreclr/projects/7&quot;&gt;project&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md&quot;&gt;Design Document&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2018/10/10/using-net-hardware-intrinsics-api-to-accelerate-machine-learning-scenarios/&quot;&gt;Using .NET Hardware Intrinsics API to accelerate machine learning scenarios&lt;/a&gt; contains a nice overview of the implementation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Default Interface Methods&lt;/strong&gt; (&lt;a href=&quot;https://github.com/dotnet/coreclr/projects/6&quot;&gt;project&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;Runtime support for the &lt;a href=&quot;https://github.com/dotnet/csharplang/blob/0a4aa03e3767805b85b606f8e58559f089bc9337/proposals/default-interface-methods.md&quot;&gt;default interface methods&lt;/a&gt; C# language feature.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Performance Monitoring&lt;/strong&gt; and &lt;strong&gt;Diagnostics&lt;/strong&gt; (&lt;a href=&quot;https://github.com/dotnet/coreclr/projects/5&quot;&gt;project&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/designs/blob/master/accepted/cross-platform-performance-monitoring.md&quot;&gt;Cross-Platform Performance Monitoring Design&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/coding-guidelines/cross-platform-performance-and-eventing.md&quot;&gt;NET Cross-Plat Performance and Eventing Design&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/1598&quot;&gt;Enable Lttng Logging for CoreClr&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://lttng.org/blog/2018/08/28/bringing-dotnet-perf-analysis-to-linux/&quot;&gt;Bringing .NET application performance analysis to Linux&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ready-to-Run Images&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md&quot;&gt;ReadyToRun Overview&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2018/08/20/bing-com-runs-on-net-core-2-1/&quot;&gt;Bing.com runs on .NET Core 2.1!&lt;/a&gt; (section on ‘ReadyToRun Images’)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LocalGC&lt;/strong&gt; (&lt;a href=&quot;https://github.com/dotnet/coreclr/projects/3&quot;&gt;project&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;See in in action in &lt;a href=&quot;http://tooslowexception.com/tag/garbagecollector/&quot;&gt;Zero Garbage Collector for .NET Core&lt;/a&gt; and the follow-up &lt;a href=&quot;http://tooslowexception.com/zero-garbage-collector-for-net-core-2-1-and-asp-net-core-2-1/&quot;&gt;Zero Garbage Collector for .NET Core 2.1 and ASP.NET Core 2.1&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unloadability&lt;/strong&gt; (&lt;a href=&quot;https://github.com/dotnet/coreclr/projects/9&quot;&gt;project&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;Support for unloading &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/assemblyloadcontext.md&quot;&gt;AssemblyLoadContext&lt;/a&gt; and all assemblies loaded into it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So there’s been quite a few large, fundamental changes to the runtime since it’s been open-sourced.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;repository-activity-over-time&quot;&gt;Repository activity over time&lt;/h2&gt;

&lt;p&gt;But onto the data, first we are going to look at an overview of the &lt;strong&gt;level of activity in each repo&lt;/strong&gt;, by analysing the total number of ‘&lt;strong&gt;Issues&lt;/strong&gt;’ (created) or ‘&lt;strong&gt;Pull Requests&lt;/strong&gt;’ (closed) per month. (&lt;a href=&quot;http://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=0001OR&quot;&gt;Sparklines FTW!!&lt;/a&gt;). If you are interested in &lt;em&gt;how&lt;/em&gt; I got the data, see the previous post &lt;a href=&quot;/2016/11/23/open-source-net-2-years-later#methodology---community-v-microsoft&quot;&gt;because the process is the same&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Numbers in &lt;span style=&quot;color:rgb(0,0,0);font-weight:bold;&quot;&gt;black&lt;/span&gt; are from the most recent month, with the &lt;span style=&quot;color:#d62728;font-weight:bold;&quot;&gt;red&lt;/span&gt; dot showing the lowest and the &lt;span style=&quot;color:#2ca02c;font-weight:bold;&quot;&gt;green&lt;/span&gt; dot the highest previous value. You can toggle between &lt;strong&gt;Issues&lt;/strong&gt; and &lt;strong&gt;Pull Requests&lt;/strong&gt; by clicking on the buttons, hover over individual sparklines to get a tooltip showing the per/month values and click on the project name to take you to the GitHub page for that repository.&lt;/p&gt;

&lt;section class=&quot;press&quot; align=&quot;center&quot;&gt;
  &lt;button id=&quot;btnIssues&quot; class=&quot;active&quot;&gt;Issues&lt;/button&gt;
  &lt;button id=&quot;btnPRs&quot;&gt;Pull Requests&lt;/button&gt;
&lt;/section&gt;

&lt;div id=&quot;textbox&quot; class=&quot;rChartHeader&quot;&gt;
  &lt;!-- The Start/End dates are setup dynamically, once the data is loaded --&gt;
  &lt;p id=&quot;dataStartDate&quot; class=&quot;alignleft&quot;&gt;&lt;/p&gt;
  &lt;p id=&quot;dataEndDate&quot; class=&quot;alignright&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;

&lt;!-- All the sparklines are added to this div --&gt;
&lt;div id=&quot;sparkLines&quot; class=&quot;rChart nvd3&quot;&gt;
&lt;/div&gt;

&lt;p&gt;This data gives a good indication of how healthy different repos are, are they growing over time, or staying the same. You can also see the different levels of activity each repo has and how they compare to other ones.&lt;/p&gt;

&lt;p&gt;Whilst it’s clear that &lt;a href=&quot;https://github.com/microsoft/vscode&quot;&gt;Visual Studio Code&lt;/a&gt; is way ahead of all the other repos (in ‘# of Issues’), it’s interesting to see that some of the .NET-only ones are still pretty large, notably CoreFX (base-class libraries),  Roslyn (compiler) and CoreCLR (runtime).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;overall-participation---community-v-microsoft&quot;&gt;Overall Participation - Community v. Microsoft&lt;/h2&gt;

&lt;p&gt;Next will will look at the &lt;strong&gt;total participation&lt;/strong&gt; from the last 4 years, i.e. &lt;strong&gt;November 2014&lt;/strong&gt; to &lt;strong&gt;November 2018&lt;/strong&gt;. All &lt;em&gt;Pull Requests&lt;/em&gt; and &lt;em&gt;Issues&lt;/em&gt; are treated equally, so a large PR counts the same as one that fixes a speling mistake. Whilst this isn’t ideal it’s the simplest way to get an idea of the &lt;strong&gt;Microsoft/Community split&lt;/strong&gt;. In addition, &lt;em&gt;Community&lt;/em&gt; does include people paid by other companies to work on .NET Projects, for instance &lt;a href=&quot;https://github.com/dotnet/coreclr/search?q=Samsung.com&amp;amp;unscoped_q=Samsung.com&amp;amp;type=Commits&quot;&gt;Samsung Engineers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can hover over the bars to get the actual numbers, rather than percentages.&lt;/p&gt;

&lt;body&gt;
  &lt;div class=&quot;g-chart-issues&quot;&gt;
    &lt;span style=&quot;font-weight:bold;font-size:large;&quot;&gt; Issues: &lt;/span&gt;
    &lt;span style=&quot;color:#9ecae1;font-weight:bold;font-size:large;margin-left:5px;&quot;&gt; Microsoft &lt;/span&gt;
    &lt;span style=&quot;color:#3182bd;font-weight:bold;font-size:large;margin-left:5px;&quot;&gt; Community &lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;g-chart-pull-requests&quot;&gt;
    &lt;span style=&quot;font-weight:bold;font-size:large;&quot;&gt; Pull Requests: &lt;/span&gt;
    &lt;span style=&quot;color:#a1d99b;font-weight:bold;font-size:large;margin-left:5px;&quot;&gt; Microsoft &lt;/span&gt;
    &lt;span style=&quot;color:#31a354;font-weight:bold;font-size:large;margin-left:5px;&quot;&gt; Community &lt;/span&gt;
  &lt;/div&gt;
&lt;/body&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;participation-over-time---community-v-microsoft&quot;&gt;Participation over time - Community v. Microsoft&lt;/h2&gt;

&lt;p&gt;Finally we can see the &lt;strong&gt;‘per-month’&lt;/strong&gt; data from the last 4 years, i.e. &lt;strong&gt;November 2014&lt;/strong&gt; to &lt;strong&gt;November 2018&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can inspect different repos by selecting them from the pull-down list, but be aware that the y-axis on the graphs are re-scaled, so the maximum value will change each time.&lt;/p&gt;

&lt;div id=&quot;issuesGraph&quot;&gt;
  &lt;span style=&quot;font-weight:bold;font-size:larger;margin-left:30px;&quot;&gt; Issues: &lt;/span&gt;
  &lt;span style=&quot;color:#9ecae1;font-weight:bold;font-size:larger;margin-left:5px;&quot;&gt; Microsoft &lt;/span&gt;
  &lt;span style=&quot;color:#3182bd;font-weight:bold;font-size:larger;margin-left:5px;&quot;&gt; Community &lt;/span&gt;
&lt;/div&gt;

&lt;div id=&quot;pullRequestsGraph&quot;&gt;
  &lt;span style=&quot;font-weight:bold;font-size:larger;margin-left:30px;&quot;&gt; Pull Requests: &lt;/span&gt;
  &lt;span style=&quot;color:#a1d99b;font-weight:bold;font-size:larger;margin-left:5px;&quot;&gt; Microsoft &lt;/span&gt;
  &lt;span style=&quot;color:#31a354;font-weight:bold;font-size:larger;margin-left:5px;&quot;&gt; Community &lt;/span&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;It’s clear that the community continues to be invested in the .NET-related, Open Source repositories, contributing significantly and for a sustained period of time. I think this is good for &lt;em&gt;all .NET developers&lt;/em&gt;, whether you contribute to OSS or not, having .NET be a &lt;strong&gt;thriving, Open Source product&lt;/strong&gt; has many benefits!&lt;/p&gt;

     
     
     
     
   </content>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='Analytics' scheme='http://www.mattwarren.org/tags#Analytics'/>
   
     <category term='Open Source' scheme='http://www.mattwarren.org/tags#Open Source'/>
   
     <category term='Roslyn' scheme='http://www.mattwarren.org/tags#Roslyn'/>
   
     <category term='AspNet' scheme='http://www.mattwarren.org/tags#AspNet'/>
   
 </entry>
 
 <entry>
   <title>A History of .NET Runtimes</title>
   <link href="http://www.mattwarren.org/2018/10/02/A-History-of-.NET-Runtimes/"/>
   <updated>2018-10-02T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2018/10/02/A-History-of-.NET-Runtimes</id>
   <content type="html">
     &lt;p&gt;Recently I was fortunate enough to chat with &lt;a href=&quot;https://twitter.com/Chrisdunelm&quot;&gt;Chris Bacon&lt;/a&gt; who wrote &lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere&quot;&gt;DotNetAnywhere&lt;/a&gt; (&lt;a href=&quot;/2017/10/19/DotNetAnywhere-an-Alternative-.NET-Runtime/&quot;&gt;an alternative .NET Runtime&lt;/a&gt;) and I quipped with him:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;.. you’re probably one of only a &lt;strong&gt;select group&lt;/strong&gt;(*) of people who’ve written a .NET runtime, that’s pretty cool!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;* if you exclude people who were paid to work on one, i.e. Microsoft/Mono/Xamarin engineers, it’s a &lt;em&gt;very&lt;/em&gt; select group.&lt;/p&gt;

&lt;p&gt;But it got me thinking, &lt;strong&gt;how many .NET Runtimes are there&lt;/strong&gt;? I put together my own list, then enlisted a crack team of highly-paid researchers, a.k.a my twitter followers:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-cards=&quot;hidden&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/LazyWeb?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#LazyWeb&lt;/a&gt;, fun Friday quiz, how many different .NET Runtimes are there? (that implement ECMA-335 &lt;a href=&quot;https://t.co/76stuYZLrw&quot;&gt;https://t.co/76stuYZLrw&lt;/a&gt;)&lt;br /&gt;- .NET Framework&lt;br /&gt;- .NET Core&lt;br /&gt;- Mono&lt;br /&gt;- Unity&lt;br /&gt;- .NET Compact Framework&lt;br /&gt;- DotNetAnywhere&lt;br /&gt;- Silverlight&lt;br /&gt;What have I missed out?&lt;/p&gt;&amp;mdash; Matt Warren (@matthewwarren) &lt;a href=&quot;https://twitter.com/matthewwarren/status/1040622340739088384?ref_src=twsrc%5Etfw&quot;&gt;September 14, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;For the purposes of this post I’m classifying a ‘&lt;em&gt;.NET Runtime&lt;/em&gt;’ as anything that implements the &lt;a href=&quot;/2018/04/06/Taking-a-look-at-the-ECMA-335-Standard-for-.NET/&quot;&gt;ECMA-335 Standard for .NET&lt;/a&gt; (more info &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/dotnet-standards.md&quot;&gt;here&lt;/a&gt;). I don’t know if there’s a more precise definition or even some way of officially veryifying conformance, but in practise it means that the runtimes can take a &lt;strong&gt;.NET exe/dll produced by any C#/F#/VB.NET compiler and run it&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once I had the list, I made copious use of wikipedia (see the &lt;a href=&quot;#references&quot;&gt;list of ‘References’&lt;/a&gt;) and came up with the following timeline:&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;400&quot; src=&quot;https://time.graphics/embed?v=1&amp;amp;id=132735&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;div&gt;&lt;a style=&quot;font-size: 12px; text-decoration: none;&quot; title=&quot;Timeline maker&quot; href=&quot;https://time.graphics&quot;&gt;Timeline maker&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;(If the interactive timeline isn’t working for you, take a look at &lt;a href=&quot;/images/2018/10/History of .NET Runtimes - Timeline.png&quot;&gt;this version&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If I’ve missed out any runtimes, please let me know!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To make the timeline a bit easier to understand, I put each runtime into one of the following categories:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;font color=&quot;#f56c00&quot; style=&quot;font-weight: bold;&quot;&gt;Microsoft .NET Frameworks&lt;/font&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;font color=&quot;#5b0be9&quot; style=&quot;font-weight: bold;&quot;&gt;Other Microsoft Runtimes&lt;/font&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;font color=&quot;#46cc12&quot; style=&quot;font-weight: bold;&quot;&gt;Mono/Xamarin Runtimes&lt;/font&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;font color=&quot;#e9140b&quot; style=&quot;font-weight: bold;&quot;&gt;'Ahead-of-Time' (AOT) Runtimes&lt;/font&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;font color=&quot;#587934&quot; style=&quot;font-weight: bold;&quot;&gt;Community Projects&lt;/font&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;font color=&quot;#ec1954&quot; style=&quot;font-weight: bold;&quot;&gt;Research Projects&lt;/font&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;The rest of the post will look at the different runtimes in more detail. &lt;em&gt;Why&lt;/em&gt; they were created, &lt;em&gt;What&lt;/em&gt; they can do and &lt;em&gt;How&lt;/em&gt; they compare to each other.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;&lt;font color=&quot;#f56c00&quot; style=&quot;font-weight: bold;&quot;&gt;Microsoft .NET Frameworks&lt;/font&gt;&lt;/h2&gt;

&lt;p&gt;The original ‘.NET Framework’ was started by Microsoft in the late 1990’s and has been going strong ever since. Recently they’ve changed course somewhat with the announcement of &lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2016/06/27/announcing-net-core-1-0/&quot;&gt;.NET Core&lt;/a&gt;, which is ‘&lt;em&gt;open-source&lt;/em&gt;’ and ‘&lt;em&gt;cross-platform&lt;/em&gt;’. In addition, by creating the &lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/&quot;&gt;.NET Standard&lt;/a&gt; they’ve provided a way for different runtimes to remain compatible:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;.NET Standard is for sharing code.&lt;/strong&gt; .NET Standard is a set of APIs that all .NET implementations must provide to conform to the standard. This unifies the .NET implementations and prevents future fragmentation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As an aside, if  you want more information on the ‘History of .NET’, I really recommend &lt;a href=&quot;https://channel9.msdn.com/Blogs/TheChannel9Team/Anders-Hejlsberg-What-brought-about-the-birth-of-the-CLR&quot;&gt;Anders Hejlsberg - What brought about the birth of the CLR?&lt;/a&gt; and this presentation by &lt;a href=&quot;https://twitter.com/richcampbell&quot;&gt;Richard Campbell&lt;/a&gt; who &lt;em&gt;really&lt;/em&gt; knows how to tell a story!&lt;/p&gt;

&lt;iframe width=&quot;711&quot; height=&quot;400&quot; src=&quot;https://www.youtube.com/embed/FFCn_z7dn_A&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;(Also &lt;a href=&quot;https://dotnetrocks.com/?show=1500&quot;&gt;available as a podcast&lt;/a&gt; if you’d prefer and he’s &lt;a href=&quot;https://twitter.com/richcampbell/status/966199852278403072&quot;&gt;working on a book covering the same subject&lt;/a&gt;. If you want to learn more about the history of the entire ‘&lt;em&gt;.NET Ecosystem&lt;/em&gt;’ not just the Runtimes, check out &lt;a href=&quot;http://corefx.strikingly.com/&quot;&gt;‘Legends of .NET’&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;&lt;font color=&quot;#5b0be9&quot; style=&quot;font-weight: bold;&quot;&gt;Other Microsoft Runtimes&lt;/font&gt;&lt;/h2&gt;

&lt;p&gt;But outside of the main &lt;em&gt;general purpose&lt;/em&gt; ‘.NET Framework’, Microsoft have also released other runtimes, designed for specific scenarios.&lt;/p&gt;

&lt;h3&gt;&lt;font color=&quot;#5b0be9&quot; style=&quot;font-weight: bold;&quot;&gt;.NET Compact Framework&lt;/font&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;Compact&lt;/em&gt; (.NET CF) and &lt;em&gt;Micro&lt;/em&gt; (.NET MF) Frameworks were both attempts to provide cut-down runtimes that would run on more constrained devices, for instance &lt;a href=&quot;https://en.wikipedia.org/wiki/.NET_Compact_Framework&quot;&gt;.NET CF&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… is designed to run on resource constrained mobile/embedded devices such as personal digital assistants (PDAs), mobile phones factory controllers, set-top boxes, etc. The .NET Compact Framework uses some of the same class libraries as the full .NET Framework and also a few libraries designed specifically for mobile devices such as .NET Compact Framework controls. However, the libraries are not exact copies of the .NET Framework; they are scaled down to use less space.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;&lt;font color=&quot;#5b0be9&quot; style=&quot;font-weight: bold;&quot;&gt;.NET Micro Framework&lt;/font&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/.NET_Micro_Framework&quot;&gt;.NET MF&lt;/a&gt; is even more constrained:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… for resource-constrained devices with at least 256 KB of flash and 64 KB of random-access memory (RAM). It includes a small version of the .NET Common Language Runtime (CLR) and supports development in C#, Visual Basic .NET, and debugging (in an emulator or on hardware) using Microsoft Visual Studio. NETMF features a subset of the .NET base class libraries (about 70 classes with about 420 methods),.. 
NETMF also features added libraries specific to embedded applications. It is free and open-source software released under Apache License 2.0.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you want to try it out, Scott Hanselman did a nice write-up &lt;a href=&quot;https://www.hanselman.com/blog/TheNETMicroFrameworkHardwareForSoftwarePeople.aspx&quot;&gt;The .NET Micro Framework - Hardware for Software People&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;font color=&quot;#5b0be9&quot; style=&quot;font-weight: bold;&quot;&gt;Silverlight&lt;/font&gt;&lt;/h3&gt;

&lt;p&gt;Although now only in &lt;a href=&quot;https://support.microsoft.com/en-gb/lifecycle/search/12905&quot;&gt;support mode&lt;/a&gt; (or &lt;a href=&quot;https://www.quora.com/Is-SilverLight-dead&quot;&gt;‘dead’&lt;/a&gt;/&lt;a href=&quot;https://www.infragistics.com/community/blogs/b/engineering/posts/the-sunset-of-silverlight&quot;&gt;‘sunsetted’&lt;/a&gt; depending on your POV), it’s interesting to go back to the original announcement and see what &lt;a href=&quot;https://weblogs.asp.net/scottgu/silverlight&quot;&gt;Silverlight was trying to do&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Silverlight is a cross platform, cross browser .NET plug-in that enables designers and developers to build rich media experiences and RIAs for browsers.  The preview builds we released this week currently support Firefox, Safari and IE browsers on both the Mac and Windows.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Back in 2007, Silverlight 1.0 had &lt;a href=&quot;https://weblogs.asp.net/scottgu/silverlight-1-0-released-and-silverlight-for-linux-announced&quot;&gt;the following features&lt;/a&gt; (it even worked on Linux!):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Built-in codec support for playing VC-1 and WMV video, and MP3 and WMA audio within a browser…&lt;/li&gt;
    &lt;li&gt;Silverlight supports the ability to progressively download and play media content from any web-server…&lt;/li&gt;
    &lt;li&gt;Silverlight also optionally supports built-in media streaming…&lt;/li&gt;
    &lt;li&gt;Silverlight enables you to create rich UI and animations, and blend vector graphics with HTML to create compelling content experiences…&lt;/li&gt;
    &lt;li&gt;Silverlight makes it easy to build rich video player interactive experiences…&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;&lt;font color=&quot;#46cc12&quot; style=&quot;font-weight: bold;&quot;&gt;Mono/Xamarin Runtimes&lt;/font&gt;&lt;/h2&gt;

&lt;p&gt;Mono came about when Miguel de Icaza and others explored the possibility of making .NET work on Linux (from &lt;a href=&quot;https://www.mono-project.com/archived/mailpostearlystory/&quot;&gt;Mono early history&lt;/a&gt;):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Who came first is not an important question to me, because Mono to me is a means to an end: a technology to help Linux succeed on the desktop.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.mono-project.com/archived/mailpostearlystory/&quot;&gt;same post&lt;/a&gt; also talks about how it started:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;On the Mono side, the events were approximately like this:&lt;/p&gt;

  &lt;p&gt;As soon as the .NET documents came out in December 2000, I got really interested in the technology, and started where everyone starts: at the byte code interpreter, &lt;strong&gt;but I faced a problem: there was no specification for the metadata though&lt;/strong&gt;.&lt;/p&gt;

  &lt;p&gt;The last modification to the early VM sources was done on January 22 2001, around that time I started posting to the .NET mailing lists asking for the missing information on the metadata file format.&lt;/p&gt;

  &lt;p&gt;…&lt;/p&gt;

  &lt;p&gt;About this time Sam Ruby was pushing at the ECMA committee to get the binary file format published, something that was not part of the original agenda.  I do not know how things developed, but &lt;strong&gt;by April 2001 ECMA had published the file format&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Over time, Mono (now &lt;a href=&quot;https://tirania.org/blog/archive/2011/May-16.html&quot;&gt;Xamarin&lt;/a&gt;) has branched out into wider areas. It runs on &lt;a href=&quot;https://github.com/xamarin/xamarin-android&quot;&gt;Android&lt;/a&gt; and &lt;a href=&quot;https://github.com/xamarin/xamarin-macios&quot;&gt;iOS/Mac&lt;/a&gt; and was acquired by Microsoft in &lt;a href=&quot;https://blogs.microsoft.com/blog/2016/02/24/microsoft-to-acquire-xamarin-and-empower-more-developers-to-build-apps-on-any-device/&quot;&gt;Feb 2016&lt;/a&gt;. In addition Unity &amp;amp; Mono/Xamarim have &lt;a href=&quot;https://tirania.org/blog/archive/2009/Apr-09.html&quot;&gt;long worked together&lt;/a&gt;, to provide &lt;a href=&quot;https://tirania.org/blog/archive/2007/Aug-31-1.html&quot;&gt;C# support in Unity&lt;/a&gt; and Unity is now a &lt;a href=&quot;https://blogs.unity3d.com/2016/04/01/unity-joins-the-net-foundation/&quot;&gt;member of the .NET Foundation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;&lt;font color=&quot;#e9140b&quot; style=&quot;font-weight: bold;&quot;&gt;'Ahead-of-Time' (AOT) Runtimes&lt;/font&gt;&lt;/h2&gt;

&lt;p&gt;I wanted to include AOT runtimes as a seperate category, because traditionally .NET has been &lt;a href=&quot;/2017/12/15/How-does-.NET-JIT-a-method-and-Tiered-Compilation/#how-it-works&quot;&gt;‘Just-in-Time’ Compiled&lt;/a&gt;, but over time more and more ‘Ahead-of-Time’ compilation options have been available.&lt;/p&gt;

&lt;p&gt;As far as I can tell, Mono was the first, with an &lt;a href=&quot;https://tirania.org/blog/archive/2006/Aug-17.html&quot;&gt;‘AOT’ mode since Aug 2006&lt;/a&gt;, but recently, Microsoft have released &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/net-native/&quot;&gt;.NET Native&lt;/a&gt; and are they’re working on &lt;a href=&quot;/2018/06/07/CoreRT-.NET-Runtime-for-AOT/&quot;&gt;CoreRT - A .NET Runtime for AOT&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;&lt;font color=&quot;#587934&quot; style=&quot;font-weight: bold;&quot;&gt;Community Projects&lt;/font&gt;&lt;/h2&gt;

&lt;p&gt;However, not all ‘&lt;em&gt;.NET Runtimes’&lt;/em&gt; were developed by Microsoft, or companies that they later acquired. There are some ‘&lt;em&gt;Community&lt;/em&gt;’ owned ones:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The oldest is &lt;a href=&quot;http://www.gnu.org/software/dotgnu/pnet.html&quot;&gt;DotGNU Portable.NET&lt;/a&gt;, which started at the same time as Mono, with the goal ‘&lt;em&gt;to build a suite of Free Software tools to compile and execute applications for the Common Language Infrastructure (CLI)..&lt;/em&gt;’.&lt;/li&gt;
  &lt;li&gt;Secondly, there is &lt;a href=&quot;/2017/10/19/DotNetAnywhere-an-Alternative-.NET-Runtime/&quot;&gt;DotNetAnywhere&lt;/a&gt;, the work of just one person, &lt;a href=&quot;https://twitter.com/Chrisdunelm&quot;&gt;Chris Bacon&lt;/a&gt;. DotNetAnywhere has the &lt;em&gt;claim to fame&lt;/em&gt; that it provided the &lt;a href=&quot;http://blog.stevensanderson.com/2017/11/05/blazor-on-mono/&quot;&gt;initial runtime&lt;/a&gt; for the Blazor project. However it’s also an excellent resource if you want to look at what makes up a ‘.NET Compatible-Runtime’ and don’t have the time to wade through the millions of lines-of-code that make up the &lt;a href=&quot;https://github.com/dotnet/coreclr/&quot;&gt;CoreCLR&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Next comes &lt;a href=&quot;https://www.gocosmos.org/&quot;&gt;CosmosOS&lt;/a&gt; (&lt;a href=&quot;https://github.com/CosmosOS/Cosmos&quot;&gt;GitHub project&lt;/a&gt;), which is not just a .NET Runtime, but a ‘&lt;em&gt;Managed Operating System&lt;/em&gt;’. If you want to see how it achieves this I recommend reading through the &lt;a href=&quot;https://www.gocosmos.org/faq/&quot;&gt;excellent FAQ&lt;/a&gt; or taking a &lt;a href=&quot;https://github.com/CosmosOS/Cosmos/wiki/Quick-look-under-the-hood&quot;&gt;quick look under the hood&lt;/a&gt;. Another similar effort is &lt;a href=&quot;https://en.wikipedia.org/wiki/SharpOS&quot;&gt;SharpOS&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Finally, I recently stumbled across &lt;a href=&quot;https://web.archive.org/web/20090425073609/http://crossnet.codeplex.com/&quot;&gt;CrossNet&lt;/a&gt;, which takes a different approach, it ‘&lt;em&gt;parses .NET assemblies and generates unmanaged C++ code that can be compiled on any standard C++ compiler.’&lt;/em&gt; Take a look at the &lt;a href=&quot;https://web.archive.org/web/20090426113345/http://crossnet.codeplex.com:80/Wiki/View.aspx?title=overview&quot;&gt;overview docs&lt;/a&gt; and &lt;a href=&quot;https://web.archive.org/web/20090426114553/http://crossnet.codeplex.com:80/Wiki/View.aspx?title=Examples%20of%20generated%20code&quot;&gt;example of generated code&lt;/a&gt; to learn more.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;font color=&quot;#ec1954&quot; style=&quot;font-weight: bold;&quot;&gt;Research Projects&lt;/font&gt;&lt;/h2&gt;

&lt;p&gt;Finally, onto the more esoteric .NET Runtimes. These are the &lt;em&gt;Research Projects&lt;/em&gt; run by Microsoft, with the aim of seeing just how far can you extend a ‘managed runtime’, what can they be used for. Some of this research work has made it’s way back into commercial/shipping .NET Runtimes, for instance &lt;a href=&quot;https://twitter.com/funcofjoe/status/943671450677927936&quot;&gt;Span&amp;lt;T&amp;gt; came from Midori&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Shared_Source_Common_Language_Infrastructure&quot;&gt;&lt;strong&gt;Shared Source Common Language Infrastructure (SSCLI)&lt;/strong&gt;&lt;/a&gt; (a.k.a ‘Rotor):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;is Microsoft’s shared source implementation of the CLI, the core of .NET. Although the SSCLI is not suitable for commercial use due to its license, it does make it possible for programmers to examine the implementation details of many .NET libraries and to create modified CLI versions. Microsoft provides the Shared Source CLI as a reference CLI implementation suitable for educational use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An interesting side-effect of releasing Rotor is that they were also able to release the &lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=52517&quot;&gt;‘Gyro’ Project&lt;/a&gt;, which gives an idea of how &lt;a href=&quot;/2018/03/02/How-generics-were-added-to-.NET/#the-gyro-project---generics-for-rotor&quot;&gt;Generics were added to the .NET Runtime&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Midori_(operating_system)&quot;&gt;&lt;strong&gt;Midori&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Midori was the code name for a managed code operating system being developed by Microsoft with joint effort of Microsoft Research. It had been reported to be a possible commercial implementation of the Singularity operating system, a research project started in 2003 to build a highly dependable operating system in which the &lt;strong&gt;kernel, device drivers, and applications are all written in managed code&lt;/strong&gt;. It was designed for concurrency, and could run a program spread across multiple nodes at once. It also featured a security model that sandboxes applications for increased security. Microsoft had mapped out several possible migration paths from Windows to Midori. The operating system was discontinued some time in 2015, though many of its concepts were rolled into other Microsoft projects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Midori is the project that appears to have led to the most ideas making their way back into the ‘.NET Framework’, you can read more about this in &lt;a href=&quot;https://twitter.com/funcOfJoe&quot;&gt;Joe Duffy’s&lt;/a&gt; excellent series &lt;a href=&quot;http://joeduffyblog.com/2015/11/03/blogging-about-midori/&quot;&gt;Blogging about Midori&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://joeduffyblog.com/2015/11/03/a-tale-of-three-safeties/&quot;&gt;A Tale of Three Safeties&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://joeduffyblog.com/2015/11/10/objects-as-secure-capabilities/&quot;&gt;Objects as Secure Capabilities&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://joeduffyblog.com/2015/11/19/asynchronous-everything/&quot;&gt;Asynchronous Everything&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://joeduffyblog.com/2015/12/19/safe-native-code&quot;&gt;Safe Native Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://joeduffyblog.com/2016/02/07/the-error-model&quot;&gt;The Error Model&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://joeduffyblog.com/2016/04/10/performance-culture&quot;&gt;Performance Culture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://joeduffyblog.com/2016/11/30/15-years-of-concurrency/&quot;&gt;15 Years of Concurrency&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Singularity_(operating_system)&quot;&gt;&lt;strong&gt;Singularity (operating system)&lt;/strong&gt;&lt;/a&gt; (also &lt;a href=&quot;https://archive.codeplex.com/?p=singularity&quot;&gt;Singularity RDK&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Singularity is an experimental operating system (OS) which was built by Microsoft Research between 2003 and 2010. It was designed as a high dependability OS in which the &lt;strong&gt;kernel, device drivers, and application software were all written in managed code&lt;/strong&gt;. Internal security uses type safety instead of hardware memory protection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Last, but not least, there is &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/glossary.md&quot;&gt;&lt;strong&gt;Redhawk&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Codename for experimental minimal managed code runtime that evolved into &lt;a href=&quot;https://github.com/dotnet/corert&quot;&gt;CoreRT&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;Below are the Wikipedia articles I referenced when creating the timeline:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/.NET_Framework&quot;&gt;.NET Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/.NET_Framework_version_history&quot;&gt;.NET Framework version history&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/.NET_Core&quot;&gt;.NET Core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Shared_Source_Common_Language_Infrastructure&quot;&gt;Shared Source Common Language Infrastructure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Mono_(software)&quot;&gt;Mono (software)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Unity_(game_engine)&quot;&gt;Unity (game engine)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Microsoft_Silverlight&quot;&gt;Microsoft Silverlight&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/.NET_Compact_Framework&quot;&gt;.NET Compact Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/.NET_Micro_Framework&quot;&gt;.NET Micro Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Singularity_(operating_system)&quot;&gt;Singularity (operating system)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Midori_(operating_system)&quot;&gt;Midori (operating system)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/DotGNU&quot;&gt;DotGNU Portable.NET&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

     
     
     
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
 </entry>
 
 <entry>
   <title>Fuzzing the .NET JIT Compiler</title>
   <link href="http://www.mattwarren.org/2018/08/28/Fuzzing-the-.NET-JIT-Compiler/"/>
   <updated>2018-08-28T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2018/08/28/Fuzzing-the-.NET-JIT-Compiler</id>
   <content type="html">
     &lt;p&gt;I recently came across the &lt;a href=&quot;https://github.com/jakobbotsch/Fuzzlyn&quot;&gt;excellent ‘Fuzzlyn’ project&lt;/a&gt;, created as part of the &lt;a href=&quot;https://kursuskatalog.au.dk/en/course/82764/language-based-security&quot;&gt;‘Language-Based Security’ course at Aarhus University&lt;/a&gt;. As per the project description Fuzzlyn is a:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… fuzzer which utilizes Roslyn to generate random C# programs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And what is a ‘fuzzer’, from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fuzzing&quot;&gt;Wikipedia page for ‘&lt;em&gt;fuzzing&lt;/em&gt;’&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Fuzzing&lt;/strong&gt; or &lt;strong&gt;fuzz testing&lt;/strong&gt; is an automated software testing technique that involves providing invalid, unexpected, or random data as inputs to a computer program.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or in other words, &lt;strong&gt;a &lt;em&gt;fuzzer&lt;/em&gt; is a program that tries to create &lt;em&gt;source code&lt;/em&gt; that finds &lt;em&gt;bugs&lt;/em&gt; in a compiler&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Massive kudos to the developers behind Fuzzlyn, &lt;a href=&quot;https://twitter.com/jakobbotsch&quot;&gt;Jakob Botsch Nielsen&lt;/a&gt; (who helped answer my questions when writing this post), &lt;a href=&quot;https://twitter.com/Chrizzz42&quot;&gt;Chris Schmidt&lt;/a&gt; and &lt;a href=&quot;https://github.com/JonasSL&quot;&gt; Jonas Larsen&lt;/a&gt;, it’s an impressive project!! (to be clear, I have no link with the project and can’t take any of the credit for it)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;compilation-in-net&quot;&gt;Compilation in .NET&lt;/h2&gt;

&lt;p&gt;But before we dive into ‘Fuzzlyn’ and what it does, we’re going to take a quick look at &lt;strong&gt;‘compilation’ in the .NET Framework&lt;/strong&gt;. When you write C#/VB.NET/F# code (delete as appropriate) and compile it, the compiler converts it into &lt;a href=&quot;https://en.wikipedia.org/wiki/Common_Intermediate_Language&quot;&gt;Intermediate Language (IL)&lt;/a&gt; code. The IL is then stored in a .exe or .dll, which the Common Language Runtime (CLR) reads and executes when your program is actually run. However it’s the job of the &lt;a href=&quot;http://mattwarren.org/2017/12/15/How-does-.NET-JIT-a-method-and-Tiered-Compilation/#how-it-works&quot;&gt;Just-in-Time (JIT) Compiler&lt;/a&gt; to convert the IL code into machine code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why is this relevant?&lt;/strong&gt; Because Fuzzlyn works by comparing the output of a &lt;strong&gt;Debug&lt;/strong&gt; and a &lt;strong&gt;Release&lt;/strong&gt; version of a program and if they are different, there’s a bug! But it turns out that very few optimisations are actually done by the &lt;a href=&quot;https://github.com/dotnet/roslyn&quot;&gt;‘Roslyn’ compiler&lt;/a&gt;, compared to what the JIT does, from Eric Lippert’s excellent post &lt;a href=&quot;https://blogs.msdn.microsoft.com/ericlippert/2009/06/11/what-does-the-optimize-switch-do/&quot;&gt;What does the optimize switch do?&lt;/a&gt; (2009)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The /optimize flag &lt;strong&gt;does not change a huge amount of our emitting and generation logic&lt;/strong&gt;. We try to always generate straightforward, verifiable code and then &lt;strong&gt;rely upon the jitter to do the heavy lifting of optimizations&lt;/strong&gt; when it generates the real machine code. But we will do some simple optimizations with that flag set. For example, with the flag set:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He then goes on to list the 15 things that the C# Compiler will optimise, before finishing with this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;That’s pretty much it. These are very straightforward optimizations; &lt;strong&gt;there’s no inlining of IL, no loop unrolling, no interprocedural analysis&lt;/strong&gt; whatsoever. We let the jitter team worry about optimizing the heck out of the code when it is actually spit into machine code; &lt;strong&gt;that’s the place where you can get real wins&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So in .NET, very few of the techniques that an &lt;a href=&quot;https://en.wikipedia.org/wiki/Optimizing_compiler&quot;&gt;‘Optimising Compiler’&lt;/a&gt; uses are done at &lt;em&gt;compile-time&lt;/em&gt;. They are almost all done at &lt;em&gt;run-time&lt;/em&gt; by the JIT Compiler (leaving aside &lt;a href=&quot;/2018/06/07/CoreRT-.NET-Runtime-for-AOT/&quot;&gt;AOT scenarios for the time being&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;For reference, most of the differences in IL are there to make the code easier to debug, for instance given this C# code:&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The differences in IL are shown below (‘Release’ on the left, ‘Debug’ on the right). As you can see there are a few extra &lt;code class=&quot;highlighter-rouge&quot;&gt;nop&lt;/code&gt; instructions to allow the debugger to ‘step-through’ more locations in the code, plus an extra local variable, which makes it easier/possible to see the value when debugging.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2018/08/Release v Debug - IL Differences.png&quot;&gt;&lt;img src=&quot;/images/2018/08/Release v Debug - IL Differences.png&quot; alt=&quot;Release v Debug - IL Differences&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(click for larger image or you can view the &lt;a href=&quot;https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQBEJinANjASQDsYIFsBjCAgWwAdcIaITYBLAeyIBoYQ3cAHwACABgAEwgIwBuALAAoYQGZJAJnEBhcQG9F4g5NXCALOICyACgCUu/YYdgOSKBQAW4ywDcoCcW1IafyJxIggAd3EAbQBdXXEpbnE1JOUkkwBfa3sHAz0FXIcASGkATksApmsZQxzcjLqGhQygA===&quot;&gt;‘Release’ version&lt;/a&gt; and the &lt;a href=&quot;https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQBEJinANjASQDsYIFsBjCAgWwAdcIaITYBLAeyIBoYQ3c3ACYgA1AB8AAgAYABJICMAbgCwAKEkBmeQCZZAYVkBvdbLPztkgCyyAsgAoAlMdPm3YDkigUAFrPsAblAIsmykNKFEskQQAO6yANoAusayCtyyOhmaGVYAvo6ubmYmasVuAJCKAJz2YUyOSuZFxXktbWp5QA===&quot;&gt;‘Debug’ version&lt;/a&gt; on the excellent &lt;a href=&quot;https://sharplab.io/&quot;&gt;SharpLab&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;For more information on the differences in Release/Debug code-gen see the ‘Release (optimized)’ section in this doc on &lt;a href=&quot;https://github.com/dotnet/roslyn/blob/master/docs/compilers/CSharp/CodeGen%20Differences.md&quot;&gt;CodeGen Differences&lt;/a&gt;. Also, because Roslyn is open-source we can see how this is handled in the code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/search?p=3&amp;amp;q=OptimizationLevel+-path%3Asrc%2FCompilers%2FTest+-path%3Asrc%2FCompilers%2FCSharp%2FTest+-path%3Asrc%2FCompilers%2FVisualBasic%2FTest+-path%3A%2Fsrc%2FEditorFeatures%2FTest+-path%3A%2Fsrc%2FScripting+-path%3A%2Fsrc%2FWorkspaces+-path%3A%2Fsrc%2FExpressionEvaluator+-path%3A%2Fsrc%2FVisualStudio&amp;amp;unscoped_q=OptimizationLevel+-path%3Asrc%2FCompilers%2FTest+-path%3Asrc%2FCompilers%2FCSharp%2FTest+-path%3Asrc%2FCompilers%2FVisualBasic%2FTest+-path%3A%2Fsrc%2FEditorFeatures%2FTest+-path%3A%2Fsrc%2FScripting+-path%3A%2Fsrc%2FWorkspaces+-path%3A%2Fsrc%2FExpressionEvaluator+-path%3A%2Fsrc%2FVisualStudio&quot;&gt;All usages of the ‘OptimizationLevel’ enum&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/search?q=ILEmitStyle+path%3Asrc%2FCompilers%2FCore+path%3Asrc%2FCompilers%2FCSharp+path%3Asrc%2FCompilers%2FVisualBasic&amp;amp;unscoped_q=ILEmitStyle+path%3Asrc%2FCompilers%2FCore+path%3Asrc%2FCompilers%2FCSharp+path%3Asrc%2FCompilers%2FVisualBasic&quot;&gt;All usage of the ‘ILEmitStyle’ enum&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/blob/Visual-Studio-2017-Version-15.7/src/Compilers/CSharp/Portable/CodeGen/CodeGenerator.cs#L88-L117&quot;&gt;In Debug builds, extra ‘sequence points’ are created (as shown above)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/blob/Visual-Studio-2017-Version-15.7/src/Compilers/CSharp/Portable/Lowering/StateMachineRewriter/StateMachineRewriter.cs#L163-L186&quot;&gt;Extra field added to the the async/await ‘State Machine’ in Debug builds&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/blob/Visual-Studio-2017-Version-15.7/src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_TryStatement.cs#L19-L32&quot;&gt;In Release builds, some ‘catch’ blocks are discarded&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/blob/Visual-Studio-2017-Version-15.7/src/Compilers/CSharp/Portable/Lowering/StateMachineRewriter/MethodToStateMachineRewriter.cs#L424-L425&quot;&gt;In Debug builds, hoisted variables aren’t re-used&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/blob/Visual-Studio-2017-Version-15.7/src/Compilers/CSharp/Portable/Symbols/AnonymousTypes/SynthesizedSymbols/AnonymousType.TemplateSymbol.cs#L464&quot;&gt;Extra Attribute is inserted in Debug builds&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;This all means that the ‘Fuzzlyn’ project has actually been finding bugs in the .NET JIT, not in the Roslyn Compiler&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(well, except this one &lt;a href=&quot;https://github.com/dotnet/roslyn/issues/29481&quot;&gt;Finally block belonging to unexecuted try runs anyway&lt;/a&gt;, which was &lt;a href=&quot;https://github.com/dotnet/roslyn/pull/29517&quot;&gt;fixed here&lt;/a&gt;)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;

&lt;p&gt;At the simplest level, Fuzzlyn works by compiling and running a piece of randomly generated code in ‘Debug’ and ‘Release’ versions and comparing the output. If the 2 versions produce different results, then it’s a bug, specifically a bug in the &lt;strong&gt;optimisations&lt;/strong&gt; that the JIT compiler has attempted.&lt;/p&gt;

&lt;p&gt;The .NET JIT, known as ‘RyuJIT’, has several modes. It can produce &lt;strong&gt;fully optimised&lt;/strong&gt; code that has the highest-performance, or in can produce more &lt;strong&gt;‘debug’ friendly&lt;/strong&gt; code that has no optimisations, but is much simpler. You can find out more about the different ‘optimisations’ that RyuJIT performs in this &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-tutorial.md&quot;&gt;excellent tutorial&lt;/a&gt;, in this &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/performance/JitOptimizerTodoAssessment.md&quot;&gt;design doc&lt;/a&gt; or you can search through the code for &lt;a href=&quot;https://github.com/dotnet/coreclr/search?q=compDbgCode&amp;amp;unscoped_q=compDbgCode&quot;&gt;usages of the ‘compDbgCode’ flag&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From a high-level Fuzzlyn goes through the following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Randomly&lt;/strong&gt; generate a C# program&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Check&lt;/strong&gt; if the code produces an error (Debug v. Release)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reduce&lt;/strong&gt; the code to it’s simplest form&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you want to see this in action, I ran Fuzzlyn until it produced a randomly generated program with a bug. You can see the &lt;a href=&quot;https://gist.github.com/mattwarren/2293de54e15da4f54ac557dae09de386#file-fuzzlyn-bad-program-original-cs&quot;&gt;original source&lt;/a&gt; (6,802 LOC) and the &lt;a href=&quot;https://gist.github.com/mattwarren/7bf0fa2b762b906614babc3ecfd06a80#file-fuzzlyn-bad-program-reduced-cs&quot;&gt;reduced version&lt;/a&gt; (28 LOC). What’s interesting is that you can clearly see the buggy line-of-code in the &lt;a href=&quot;https://gist.github.com/mattwarren/2293de54e15da4f54ac557dae09de386#file-fuzzlyn-bad-program-original-cs-L4547&quot;&gt;original code&lt;/a&gt;, before it’s turned into a &lt;a href=&quot;https://gist.github.com/mattwarren/7bf0fa2b762b906614babc3ecfd06a80#file-fuzzlyn-bad-program-reduced-cs-L17&quot;&gt;simplified version&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Generated by Fuzzlyn v1.1 on 2018-08-22 15:19:26&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Seed: 14928117313359926641&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Reduced from 256.3 KiB to 0.4 KiB in 00:01:58&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Debug: Prints 0 line(s)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Release: Prints 1 line(s)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Program&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_33&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_40&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_74&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s_18&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// This comparision is the bug, in Debug it's False, in Release it's True&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// However, '(ushort)(s_18 | 2L)' is 65,535 in Debug *and* Release&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ushort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_18&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s_74&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vr10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_74&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vr10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;random-code-generation&quot;&gt;Random Code Generation&lt;/h3&gt;

&lt;p&gt;Fuzzlyn can’t produce every type of C# program, however it does support quite a few language features, from &lt;a href=&quot;https://github.com/jakobbotsch/Fuzzlyn#supported-constructs&quot;&gt;Supported constructs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fuzzlyn generates only a limited subset of C#. Most importantly, it does not support loops yet. It supports structs and classes, though it does not generate member methods in these. We make no attempt to fully support all kinds of expressions and statements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To see the code for these generators, follow the links below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jakobbotsch/Fuzzlyn/blob/b1391faf9f533d1613c46118d17b7bc2b1af2c3f/Fuzzlyn/CodeGenerator.cs&quot;&gt;CodeGenerator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jakobbotsch/Fuzzlyn/blob/b1391faf9f533d1613c46118d17b7bc2b1af2c3f/Fuzzlyn/LiteralGenerator.cs&quot;&gt;LiteralGenerator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jakobbotsch/Fuzzlyn/blob/master/Fuzzlyn/Methods/FuncGenerator.cs&quot;&gt;FuncGenerator&lt;/a&gt;, with specific generator for a:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/jakobbotsch/Fuzzlyn/blob/b1391faf9f533d1613c46118d17b7bc2b1af2c3f/Fuzzlyn/Methods/FuncGenerator.cs#L124-L162&quot;&gt;‘Statement’&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/jakobbotsch/Fuzzlyn/blob/b1391faf9f533d1613c46118d17b7bc2b1af2c3f/Fuzzlyn/Methods/FuncGenerator.cs#L164-L231&quot;&gt;‘Block’&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/jakobbotsch/Fuzzlyn/blob/b1391faf9f533d1613c46118d17b7bc2b1af2c3f/Fuzzlyn/Methods/FuncGenerator.cs#L233-L341&quot;&gt;‘Assignment’ statement&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/jakobbotsch/Fuzzlyn/blob/b1391faf9f533d1613c46118d17b7bc2b1af2c3f/Fuzzlyn/Methods/FuncGenerator.cs#L343-L355&quot;&gt;‘Call’ statement&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/jakobbotsch/Fuzzlyn/blob/b1391faf9f533d1613c46118d17b7bc2b1af2c3f/Fuzzlyn/Methods/FuncGenerator.cs#L357-L376&quot;&gt;‘If’ statement&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/jakobbotsch/Fuzzlyn/blob/b1391faf9f533d1613c46118d17b7bc2b1af2c3f/Fuzzlyn/Methods/FuncGenerator.cs#L378-L393&quot;&gt;‘Try/Catch’ statement&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jakobbotsch/Fuzzlyn/blob/b1391faf9f533d1613c46118d17b7bc2b1af2c3f/Fuzzlyn/Methods/BinOpTable.cs&quot;&gt;Binary Operation tables&lt;/a&gt;, which are themselves &lt;a href=&quot;https://github.com/jakobbotsch/Fuzzlyn/blob/b1391faf9f533d1613c46118d17b7bc2b1af2c3f/Fuzzlyn.TableGen/Program.cs&quot;&gt;generated using Roslyn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the statements and expressions that are currently supported are &lt;a href=&quot;https://github.com/jakobbotsch/Fuzzlyn/blob/b1391faf9f533d1613c46118d17b7bc2b1af2c3f/Fuzzlyn/Methods/FuncGenerator.cs#L921-L943&quot;&gt;listed here&lt;/a&gt;. Interestingly enough the &lt;em&gt;type&lt;/em&gt; of statement/expression chosen is not completely random, instead that are chosen using &lt;a href=&quot;https://github.com/jakobbotsch/Fuzzlyn/blob/bb4b4753ed3dcdcebec52cedec475010324e7688/Fuzzlyn/FuzzlynOptions.cs#L43-L64&quot;&gt;probability tables&lt;/a&gt;, that look like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProbabilityDistribution&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StatementTypeDist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TableDistribution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatementKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.57&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatementKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatementKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatementKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatementKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TryFinally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatementKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we saw before, the initial program that Fuzzlyn produces is quite large (over 5,000 LOC), so why does it create and execute a very large program?&lt;/p&gt;

&lt;p&gt;Partly because it’s quicker to do this compared to working with lots of smaller programs, i.e. the steps of generation, compilation and starting new processes can be reduced by running large programs.&lt;/p&gt;

&lt;p&gt;In addition, Jakob explained the other reasons:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Empirically, other similar projects have shown that larger programs are better&lt;/strong&gt;. Csmith authors report that most bugs were found with examples of around 80 KB (I don’t remember the exact number). We actually found the same thing in v1.0 – our examples had an average size of 76 KB&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Small programs do not get as many opportunities to generate a lot of patterns&lt;/strong&gt;. For example, it is very unlikely that a small program will have a method taking a &lt;code class=&quot;highlighter-rouge&quot;&gt;byte&lt;/code&gt; parameter and at the same time, a method returning a &lt;code class=&quot;highlighter-rouge&quot;&gt;ref byte&lt;/code&gt; (this pattern has a bug on Linux: &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/19256&quot;&gt;dotnet/coreclr#19256&lt;/a&gt;).&lt;/li&gt;
    &lt;li&gt;We mainly adjusted our probabilities based on how the examples looked. &lt;strong&gt;We strived for the generator to produce code that looked relatively like human code&lt;/strong&gt;. This included going for a wide range of program sizes. By the way, you can run Fuzzlyn with &lt;code class=&quot;highlighter-rouge&quot;&gt;--stats --num-programs=10000&lt;/code&gt; to get a view of the distribution of program sizes – it will output stats for every 500 programs generated.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;checking-for-bugs&quot;&gt;‘Checking’ for bugs&lt;/h3&gt;

&lt;p&gt;To check if the behaviour of 2 samples diverge (in ‘Release’ v ‘Debug’ mode), the tool inserts &lt;a href=&quot;https://github.com/jakobbotsch/Fuzzlyn/blob/master/Fuzzlyn/Execution/ChecksumSite.cs&quot;&gt;checksum-related code&lt;/a&gt; throughout the program. For example here’s a randomly generated method, note the calls to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Checksum(..)&lt;/code&gt; function at the end:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;sbyte&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;M15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;71&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1U&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;var0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;arg0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ushort&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s_rt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Checksum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c_17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s_rt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Checksum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c_18&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s_rt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Checksum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c_19&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s_rt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Checksum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c_20&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s_rt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Checksum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c_21&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s_rt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Checksum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c_22&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The checksums calls allow the execution of a program to be compared between ‘Release’ and ‘Debug’ modes, if a single variable has a different value, at &lt;em&gt;any point during execution&lt;/em&gt;, the checksums will be different.&lt;/p&gt;

&lt;p&gt;It’s also worth pointing out that Roslyn provides in-memory compilation that helps speed up this process because you don’t have to &lt;em&gt;shell-out&lt;/em&gt; to an external process. As &lt;a href=&quot;https://twitter.com/jakobbotsch/status/1004384699840696320&quot;&gt;Jakob explains&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Additionally since we don’t have to start processes for every invocation when we use Roslyn’s in-memory compilation, we can compile and check for interesting behavior &lt;em&gt;super&lt;/em&gt; fast. This allows our reducer to be really simple and dumb, while still giving great results.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;reducing-the-output&quot;&gt;‘Reducing’ the output&lt;/h3&gt;

&lt;p&gt;However, the checksums also help Fuzzlyn ‘Reduce’ the program from the &lt;a href=&quot;https://gist.github.com/mattwarren/2293de54e15da4f54ac557dae09de386#file-fuzzlyn-bad-program-original-cs&quot;&gt;large initial version&lt;/a&gt; to something &lt;a href=&quot;https://gist.github.com/mattwarren/7bf0fa2b762b906614babc3ecfd06a80#file-fuzzlyn-bad-program-reduced-cs&quot;&gt;much more readable&lt;/a&gt;. By using a &lt;a href=&quot;https://github.com/jakobbotsch/Fuzzlyn/blob/b1391faf9f533d1613c46118d17b7bc2b1af2c3f/Fuzzlyn/Reduction/Reducer.cs#L306-L384&quot;&gt;‘binary search’ technique&lt;/a&gt; it can remove a section of code and compare the checksums of the remaining code. If the checksums still differ then the remaining code contains the error/bug and Fuzzlyn can carry on reducing it, otherwise it can be discarded.&lt;/p&gt;

&lt;p&gt;In addition, Fuzzlyn makes good use of the &lt;a href=&quot;https://github.com/dotnet/roslyn/wiki/Roslyn-Overview#syntax-trees&quot;&gt;Roslyn ‘syntax tree’ API&lt;/a&gt; when removing code. For instance the &lt;a href=&quot;https://github.com/jakobbotsch/Fuzzlyn/blob/b1391faf9f533d1613c46118d17b7bc2b1af2c3f/Fuzzlyn/Reduction/CoarseStatementRemover.cs#L11&quot;&gt;CoarseStatementRemover class&lt;/a&gt; makes use of the Roslyn &lt;code class=&quot;highlighter-rouge&quot;&gt;CSharpSyntaxWriter&lt;/code&gt; class, which is &lt;a href=&quot;https://joshvarty.com/2014/08/15/learn-roslyn-now-part-5-csharpsyntaxrewriter/&quot;&gt;designed to allow syntax re-writing&lt;/a&gt; (also see &lt;a href=&quot;https://johnkoerner.com/csharp/using-a-csharp-syntax-rewriter/&quot;&gt;Using a CSharp Syntax Rewriter&lt;/a&gt;).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-results&quot;&gt;The Results&lt;/h2&gt;

&lt;p&gt;What initially drew me to the Fuzzlyn project (aside from the &lt;a href=&quot;https://twitter.com/matthewwarren/status/1004013915876020225&quot;&gt;great name&lt;/a&gt;) was the &lt;a href=&quot;https://twitter.com/matthewwarren/status/1027224393217449986&quot;&gt;impressive results I saw it getting&lt;/a&gt;. As of the end of Aug 2018, they’re reported 22 bugs, of which 11 have already been fixed (kudos to the .NET JIT devs for fixing them so quickly).&lt;/p&gt;

&lt;p&gt;Here’s a list of some of them, taken from the &lt;a href=&quot;https://github.com/jakobbotsch/Fuzzlyn/blob/master/README.md#bugs-reported&quot;&gt;project README&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/18232&quot;&gt;NullReferenceException thrown for multi-dimensional arrays in release&lt;/a&gt; (fixed)&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/18235&quot;&gt;Wrong integer promotion in release&lt;/a&gt; (fixed)&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/18238&quot;&gt;Cast to ushort is dropped in release&lt;/a&gt; (fixed)&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/18259&quot;&gt;Wrong value passed to generic interface method in release&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/issues/27348&quot;&gt;Constant-folding int.MinValue % -1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/18522&quot;&gt;Deterministic program outputs indeterministic results on Linux in release&lt;/a&gt; (fixed)&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/18770&quot;&gt;RyuJIT incorrectly reorders expression containing a CSE, resulting in exception thrown in release&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/18780&quot;&gt;RyuJIT incorrectly narrows value on ARM32/x86 in release&lt;/a&gt; (fixed)&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/18850&quot;&gt;Invalid value numbering when morphing casts that changes signedness after global morph&lt;/a&gt; (fixed)&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/18867&quot;&gt;RyuJIT spills 16 bit value but reloads as 32 bits in ARM32/x86 in release&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/18884&quot;&gt;RyuJIT fails to preserve variable allocated to RCX around shift on x64 in release&lt;/a&gt; (fixed)&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/19243&quot;&gt;RyuJIT: Invalid ordering when assigning ref-return&lt;/a&gt; (fixed)&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/19256&quot;&gt;RyuJIT: Argument written to stack too early on Linux&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/19272&quot;&gt;RyuJIT: Morph forgets about side effects when optimizing casted shift&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/19444&quot;&gt;RyuJIT: By-ref assignment with null leads to runtime crash&lt;/a&gt; (fixed)&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/19558&quot;&gt;RyuJIT: Mishandling of subrange assertion for rewritten call parameter&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/19583&quot;&gt;RyuJIT: Incorrect ordering around Interlocked.Exchange and Interlocked.CompareExchange&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;(for the most up-to-date list see the &lt;a href=&quot;https://github.com/dotnet/coreclr/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue+author%3Ajakobbotsch&quot;&gt;GitHub Issues created by @jakobbotsch&lt;/a&gt;)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;I think that Fuzzlyn is a fantastic project, anything that roots out bugs or undesired behaviour in the JIT is a great benefit to all .NET Developers. If you want a see what the &lt;em&gt;potential&lt;/em&gt; side-effects of JIT bugs can be, take a look at &lt;a href=&quot;https://nickcraver.com/blog/2015/07/27/why-you-should-wait-on-dotnet-46/&quot;&gt;Why you should wait on upgrading to .Net 4.6&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/Nick_Craver&quot;&gt;Nick Craver&lt;/a&gt; (one of the developers at Stack Overflow).&lt;/p&gt;

&lt;p&gt;Now, you could argue that some of the code patterns that Fuzzlyn detects are not ones you’d normally write, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;if (((ushort)(s_18 | 2L) &amp;lt;= s_40[0]))&lt;/code&gt;. But the wider point is that it’s &lt;em&gt;valid C# code&lt;/em&gt;, which isn’t behaving as it should. Also, if you ever wrote this code you’d have a horrible time tracking down the problem because:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Everyone knows that &lt;a href=&quot;https://blog.codinghorror.com/the-first-rule-of-programming-its-always-your-fault/&quot;&gt;The First Rule of Programming: It’s Always Your Fault&lt;/a&gt; or &lt;a href=&quot;https://lingpipe-blog.com/2007/06/27/select-isnt-broken-or-horses-not-zebras/&quot;&gt;“select” Isn’t Broken&lt;/a&gt;, i.e. getting to the point where you’re sure it is the compilers fault could take a while!&lt;/li&gt;
  &lt;li&gt;If you tried to debug it, the problem would go away (Fuzzlyn only finds Debug v. Release differences). At which point you might begin to doubt your sanity!&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=17863554&quot;&gt;Hacker News&lt;/a&gt;, &lt;a href=&quot;https://www.reddit.com/r/dotnet/comments/9b0qeo/fuzzing_the_net_jit_compiler_performance_is_a/&quot;&gt;/r/dotnet&lt;/a&gt; or &lt;a href=&quot;https://www.reddit.com/r/csharp/comments/9b0qq5/fuzzing_the_net_jit_compiler_performance_is_a/&quot;&gt;/r/csharp&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;

&lt;p&gt;Jakob was kind enough to share some additional links with me:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cs.utah.edu/~regehr/papers/pldi11-preprint.pdf&quot;&gt;Finding and Understanding Bugs in C Compilers (Csmith)&lt;/a&gt; (pdf)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cs.utah.edu/~regehr/papers/pldi12-preprint.pdf&quot;&gt;Test-Case Reduction for C Compiler Bugs (C-reduce)&lt;/a&gt; (pdf)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cs.tufts.edu/~nr/cs257/archive/john-hughes/quick.pdf&quot;&gt;QuickCheck: a lightweight tool for random testing of Haskell programs&lt;/a&gt; (pdf)
    &lt;ul&gt;
      &lt;li&gt;This deals with test-case generation for general programs, not for compilers, but still an interesting paper nonetheless. QuickCheck also includes test case reduction, but unfortunately not much about it in their papers.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also I asked him “&lt;em&gt;Is any part of Fuzzlyn based on well known techniques, is it all implemented from scratch, or somewhere in-between&lt;/em&gt;?”&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The state-of-the-art fuzzing techniques are unfortunately not well suited for testing the later stages of compilers (eg. the code output, optimization stages and so on). These techniques are for example symbolic execution, taint tracking, input length exploration, path slicing and more. The problem is that compilers use many intermediate representations, and it is hard to cross reference between what the fuzzer is passing in and what code is being executed at each stage. Even getting something to parse is hard without some kind of knowledge about what the structure needs to be. Fuzzlyn does not these techniques.&lt;/p&gt;

  &lt;p&gt;On the other hand, Fuzzlyn was very inspired by Csmith, which is a similar tool. But most of the code was written from scratch, since there is a big difference in generating C code (Csmith) and C# code. It is much more complicated to generate interesting C code that is free from undefined behavior.&lt;/p&gt;
&lt;/blockquote&gt;

     
     
     
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='JIT-Compiler' scheme='http://www.mattwarren.org/tags#JIT-Compiler'/>
   
 </entry>
 
 <entry>
   <title>Monitoring and Observability in the .NET Runtime</title>
   <link href="http://www.mattwarren.org/2018/08/21/Monitoring-and-Observability-in-the-.NET-Runtime/"/>
   <updated>2018-08-21T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2018/08/21/Monitoring-and-Observability-in-the-.NET-Runtime</id>
   <content type="html">
     &lt;p&gt;.NET is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Managed_code&quot;&gt;&lt;em&gt;managed runtime&lt;/em&gt;&lt;/a&gt;, which means that it provides high-level features that ‘manage’ your program for you, from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/intro-to-clr.md#fundamental-features-of-the-clr&quot;&gt;Introduction to the Common Language Runtime (CLR)&lt;/a&gt; (written in 2007):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The runtime has many features, so it is useful to categorize them as follows:&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;strong&gt;Fundamental features&lt;/strong&gt; – Features that have broad impact on the design of other features.  These include:
      &lt;ol&gt;
        &lt;li&gt;Garbage Collection&lt;/li&gt;
        &lt;li&gt;Memory Safety and Type Safety&lt;/li&gt;
        &lt;li&gt;High level support for programming languages.&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Secondary features&lt;/strong&gt; – Features enabled by the fundamental features that may not be required by many useful programs:
      &lt;ol&gt;
        &lt;li&gt;Program isolation with AppDomains&lt;/li&gt;
        &lt;li&gt;Program Security and sandboxing&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Other Features&lt;/strong&gt; – Features that all runtime environments need but that do not leverage the fundamental features of the CLR.  Instead, they are the result of the desire to create a complete programming environment. Among them are:
      &lt;ol&gt;
        &lt;li&gt;Versioning&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;Debugging/Profiling&lt;/strong&gt;&lt;/li&gt;
        &lt;li&gt;Interoperation&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can see that ‘Debugging/Profiling’, whilst not a Fundamental or Secondary feature, still makes it into the list because of a ‘&lt;em&gt;desire to create a complete programming environment&lt;/em&gt;’.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The rest of this post will look at &lt;em&gt;what&lt;/em&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Application_performance_management&quot;&gt;Monitoring&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Observability&quot;&gt;Observability&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_machine_introspection&quot;&gt;Introspection&lt;/a&gt; features the Core CLR provides, &lt;em&gt;why&lt;/em&gt; they’re useful and &lt;em&gt;how&lt;/em&gt; it provides them.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To make it easier to navigate, the post is split up into 3 main sections (with some ‘extra-reading material’ at the end):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#diagnostics&quot;&gt;Diagnostics&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Perf View&lt;/li&gt;
      &lt;li&gt;Common Infrastructure&lt;/li&gt;
      &lt;li&gt;Future Plans&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#profiling&quot;&gt;Profiling&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;ICorProfiler API&lt;/li&gt;
      &lt;li&gt;Profiling v. Debugging&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#debugging&quot;&gt;Debugging&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;ICorDebug API&lt;/li&gt;
      &lt;li&gt;SOS and the DAC&lt;/li&gt;
      &lt;li&gt;3rd Party Debuggers&lt;/li&gt;
      &lt;li&gt;Memory Dumps&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#further-reading&quot;&gt;Further Reading&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;diagnostics&quot;&gt;Diagnostics&lt;/h2&gt;

&lt;p&gt;Firstly we are going to look at the &lt;strong&gt;diagnostic&lt;/strong&gt; information that the CLR provides, which has traditionally been supplied via &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/etw/about-event-tracing&quot;&gt;‘Event Tracing for Windows’&lt;/a&gt; (ETW).&lt;/p&gt;

&lt;p&gt;There is quite a wide range of events that the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/performance/clr-etw-keywords-and-levels&quot;&gt;CLR provides&lt;/a&gt; related to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Garbage Collection (GC)&lt;/li&gt;
  &lt;li&gt;Just-in-Time (JIT) Compilation&lt;/li&gt;
  &lt;li&gt;Module and AppDomains&lt;/li&gt;
  &lt;li&gt;Threading and Lock Contention&lt;/li&gt;
  &lt;li&gt;and much more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example this is where the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/vm/corhost.cpp#L649&quot;&gt;AppDomain Load event is fired&lt;/a&gt;, this is the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/vm/exceptionhandling.cpp#L203&quot;&gt;Exception Thrown event&lt;/a&gt; and here is the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/vm/gctoclreventsink.cpp#L139-L144&quot;&gt;GC Allocation Tick event&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;perf-view&quot;&gt;Perf View&lt;/h3&gt;

&lt;p&gt;If you want to see the ETW Events coming from your .NET program I recommend using the excellent &lt;a href=&quot;https://github.com/Microsoft/perfview&quot;&gt;PerfView tool&lt;/a&gt; and starting with these &lt;a href=&quot;https://channel9.msdn.com/Series/PerfView-Tutorial&quot;&gt;PerfView Tutorials&lt;/a&gt; or this excellent talk &lt;a href=&quot;https://www.slideshare.net/InfoQ/perfview-the-ultimate-net-performance-tool&quot;&gt;PerfView: The Ultimate .NET Performance Tool&lt;/a&gt;. PerfView is widely regarded because it provides invaluable information, for instance Microsoft Engineers regularly use it for &lt;a href=&quot;https://github.com/dotnet/corefx/issues/28834&quot;&gt;performance investigations&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/08/PerfView - CPU Stacks.jpg&quot; alt=&quot;PerfView - CPU Stacks&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;common-infrastructure&quot;&gt;Common Infrastructure&lt;/h3&gt;

&lt;p&gt;However, in case it wasn’t clear from the name, ETW events are only available on Windows, which doesn’t really fit into the new ‘cross-platform’ world of .NET Core. You can use &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/Documentation/project-docs/linux-performance-tracing.md&quot;&gt;PerfView for Performance Tracing on Linux&lt;/a&gt; (via &lt;a href=&quot;https://lttng.org/&quot;&gt;LTTng&lt;/a&gt;), but that is only the cmd-line collection tool, known as ‘PerfCollect’, the analysis and rich UI (which includes &lt;a href=&quot;https://github.com/Microsoft/perfview/pull/502&quot;&gt;flamegraphs&lt;/a&gt;) is currently Windows only.&lt;/p&gt;

&lt;p&gt;But if you do want to analyse .NET Performance Linux, there are some other approaches:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.microsoft.co.il/sasha/2018/02/06/getting-stacks-for-lttng-events-with-net-core-on-linux/&quot;&gt;Getting Stacks for LTTng Events with .NET Core on Linux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/18465&quot;&gt;Linux performance problem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The 2nd link above discusses the new &lt;strong&gt;‘EventPipe’ infrastructure&lt;/strong&gt; that is being worked on in .NET Core (along with EventSources &amp;amp; EventListeners, can you spot a theme!), you can see its aims in &lt;a href=&quot;https://github.com/dotnet/designs/blob/master/accepted/cross-platform-performance-monitoring.md&quot;&gt;Cross-Platform Performance Monitoring Design&lt;/a&gt;. At a high-level it will provide a single place for the CLR to push ‘events’ related to diagnostics and performance. These ‘events’ will then be routed to one or more loggers which may include ETW, LTTng, and BPF for example, with the exact logger being determined by which OS/Platform the CLR is running on. There is also more background information in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/coding-guidelines/cross-platform-performance-and-eventing.md&quot;&gt;.NET Cross-Plat Performance and Eventing Design&lt;/a&gt; that explains the pros/cons of the different logging technologies.&lt;/p&gt;

&lt;p&gt;All the work being done on ‘Event Pipes’ is being tracked in the &lt;a href=&quot;https://github.com/dotnet/coreclr/projects/5&quot;&gt;‘Performance Monitoring’ project&lt;/a&gt; and the associated &lt;a href=&quot;https://github.com/dotnet/coreclr/search?q=EventPipe&amp;amp;type=Issues&quot;&gt;‘EventPipe’ Issues&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;future-plans&quot;&gt;Future Plans&lt;/h3&gt;

&lt;p&gt;Finally, there are also future plans for a &lt;a href=&quot;https://github.com/dotnet/designs/blob/master/accepted/performance-profiling-controller.md&quot;&gt;Performance Profiling Controller&lt;/a&gt; which has the following goal:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The controller is responsible for control of the profiling infrastructure and exposure of performance data produced by .NET performance diagnostics components in a simple and cross-platform way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The idea is for it to expose the &lt;a href=&quot;https://github.com/dotnet/designs/blob/master/accepted/performance-profiling-controller.md#functionality-exposed-through-controller&quot;&gt;following functionality via a HTTP server&lt;/a&gt;, by pulling all the relevant data from ‘Event Pipes’:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;REST APIs&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Pri 1: Simple Profiling: Profile the runtime for X amount of time and return the trace.&lt;/li&gt;
    &lt;li&gt;Pri 1: Advanced Profiling: Start tracing (along with configuration)&lt;/li&gt;
    &lt;li&gt;Pri 1: Advanced Profiling: Stop tracing (the response to calling this will be the trace itself)&lt;/li&gt;
    &lt;li&gt;Pri 2: Get the statistics associated with all EventCounters or a specified EventCounter.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;strong&gt;Browsable HTML Pages&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Pri 1: Textual representation of all managed code stacks in the process.
      &lt;ul&gt;
        &lt;li&gt;Provides an snapshot overview of what’s currently running for use as a simple diagnostic report.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Pri 2: Display the current state (potentially with history) of EventCounters.
      &lt;ul&gt;
        &lt;li&gt;Provides an overview of the existing counters and their values.&lt;/li&gt;
        &lt;li&gt;OPEN ISSUE: I don’t believe the necessary public APIs are present to enumerate EventCounters.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m excited to see where the ‘Performance Profiling Controller’ (PPC?) goes, I think it’ll be really valuable for .NET to have this built-in to the CLR, it’s something that &lt;a href=&quot;https://github.com/golang/go/wiki/Performance&quot;&gt;other runtimes have&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;profiling&quot;&gt;Profiling&lt;/h2&gt;

&lt;p&gt;Another powerful feature the CLR provides is the &lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms404386(v%3dvs.100)&quot;&gt;Profiling API&lt;/a&gt;, which is (mostly) used by 3rd party tools to hook into the runtime at a very low-level. You can find our more about the API in &lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/bb384493(v%3dvs.100)&quot;&gt;this overview&lt;/a&gt;, but at a high-level, it allows your to wire up callbacks that are triggered when:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GC-related events happen&lt;/li&gt;
  &lt;li&gt;Exceptions are thrown&lt;/li&gt;
  &lt;li&gt;Assemblies are loaded/unloaded&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms230818%28v%3dvs.100%29&quot;&gt;much, much more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/08/profiling-overview.png&quot; alt=&quot;profiling-overview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Image from the BOTR page &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/profiling.md#profiling-api--overview&quot;&gt;Profiling API – Overview&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In addition is has other &lt;strong&gt;very power features&lt;/strong&gt;. Firstly you can &lt;strong&gt;setup hooks that are called every time a .NET method is executed&lt;/strong&gt; whether in the runtime or from users code. These callbacks are known as ‘Enter/Leave’ hooks and there is a &lt;a href=&quot;https://github.com/Microsoft/clr-samples/tree/master/ProfilingAPI/ReJITEnterLeaveHooks&quot;&gt;nice sample&lt;/a&gt; that shows how to use them, however to make them work you need to understand &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/19023&quot;&gt;‘calling conventions’ across different OSes and CPU architectures&lt;/a&gt;, which &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/18977&quot;&gt;isn’t always easy&lt;/a&gt;. Also, as a warning, the Profiling API is a COM component that can only be accessed via C/C++ code, you can’t use it from C#/F#/VB.NET!&lt;/p&gt;

&lt;p&gt;Secondly, the Profiler is able to &lt;strong&gt;re-write the IL code of any .NET method before it is JITted&lt;/strong&gt;, via the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/icorprofilerfunctioncontrol-setilfunctionbody-method&quot;&gt;SetILFunctionBody() API&lt;/a&gt;. This API is hugely powerful and forms the basis of many .NET &lt;a href=&quot;https://stackify.com/application-performance-management-tools/&quot;&gt;APM Tools&lt;/a&gt;, you can learn more about how to use it in my previous post &lt;a href=&quot;/2014/08/14/how-to-mock-sealed-classes-and-static-methods/&quot;&gt;How to mock sealed classes and static methods&lt;/a&gt; and the &lt;a href=&quot;https://github.com/mattwarren/DDD2011_ProfilerDemo/commit/9f804cec8ef11b802e020e648180b436a429833f?w=1&quot;&gt;accompanying code&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;icorprofiler-api&quot;&gt;ICorProfiler API&lt;/h3&gt;

&lt;p&gt;It turns out that the run-time has to perform all sorts of crazy tricks to make the Profiling API work, just look at what went into this PR &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/19054&quot;&gt;Allow rejit on attach&lt;/a&gt; (for more info on ‘ReJIT’ see &lt;a href=&quot;https://blogs.msdn.microsoft.com/davbr/2011/10/12/rejit-a-how-to-guide/&quot;&gt;ReJIT: A How-To Guide&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The overall definition for all the Profiling API interfaces and callbacks is found in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/inc/corprof.idl&quot;&gt;\vm\inc\corprof.idl&lt;/a&gt; (see &lt;a href=&quot;https://en.wikipedia.org/wiki/Interface_description_language&quot;&gt;Interface description language&lt;/a&gt;). But it’s divided into 2 logical parts, one is the &lt;strong&gt;Profiler -&amp;gt; ‘Execution Engine’ (EE)&lt;/strong&gt; interface, known as&lt;code class=&quot;highlighter-rouge&quot;&gt;ICorProfilerInfo&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Declaration of class that implements the ICorProfilerInfo* interfaces, which allow the
// Profiler to communicate with the EE.  This allows the Profiler DLL to get
// access to private EE data structures and other things that should never be exported
// outside of the EE.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which is implemented in the following files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/vm/proftoeeinterfaceimpl.h&quot;&gt;\vm\proftoeeinterfaceimpl.h&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/vm/proftoeeinterfaceimpl.inl&quot;&gt;\vm\proftoeeinterfaceimpl.inl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/vm/proftoeeinterfaceimpl.cpp&quot;&gt;\vm\proftoeeinterfaceimpl.cpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The other main part is the &lt;strong&gt;EE -&amp;gt; Profiler&lt;/strong&gt; callbacks, which are grouped together under the &lt;code class=&quot;highlighter-rouge&quot;&gt;ICorProfilerCallback&lt;/code&gt; interface:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// This module implements wrappers around calling the profiler's 
// ICorProfilerCallaback* interfaces. When code in the EE needs to call the
// profiler, it goes through EEToProfInterfaceImpl to do so.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These callbacks are implemented across the following files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/vm/eetoprofinterfaceimpl.h&quot;&gt;vm\eetoprofinterfaceimpl.h&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/vm/eetoprofinterfaceimpl.inl&quot;&gt;vm\eetoprofinterfaceimpl.inl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/vm/eetoprofinterfaceimpl.cpp&quot;&gt;vm\eetoprofinterfaceimpl.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/vm/eetoprofinterfacewrapper.inl&quot;&gt;vm\eetoprofinterfacewrapper.inl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, it’s worth pointing out that the Profiler APIs might not work across all OSes and CPU-archs that .NET Core runs on, e.g. &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/18977&quot;&gt;ELT call stub issues on Linux&lt;/a&gt;, see &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/Documentation/project-docs/profiling-api-status.md&quot;&gt;Status of CoreCLR Profiler APIs&lt;/a&gt; for more info.&lt;/p&gt;

&lt;h3 id=&quot;profiling-v-debugging&quot;&gt;Profiling v. Debugging&lt;/h3&gt;

&lt;p&gt;As a quick aside, ‘Profiling’ and ‘Debugging’ do have some overlap, so it’s helpful to understand what the different APIs provide &lt;em&gt;in the context of the .NET Runtime&lt;/em&gt;, from &lt;a href=&quot;https://blogs.msdn.microsoft.com/jmstall/2004/10/22/clr-debugging-vs-clr-profiling/&quot;&gt;CLR Debugging vs. CLR Profiling&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/08/Design Differences between CLR Debugging and CLR Profiling.png&quot; alt=&quot;Design Differences between CLR Debugging and CLR Profiling&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;debugging&quot;&gt;Debugging&lt;/h2&gt;

&lt;p&gt;Debugging means different things to different people, for instance I asked on Twitter “&lt;em&gt;what are the ways that you’ve debugged a .NET program&lt;/em&gt;” and got a &lt;a href=&quot;https://mobile.twitter.com/matthewwarren/status/1030444463385178113&quot;&gt;wide range&lt;/a&gt; of &lt;a href=&quot;https://mobile.twitter.com/matthewwarren/status/1030580487969038344&quot;&gt;different responses&lt;/a&gt;, although both sets of responses contain a really good list of tools and techniques, so they’re worth checking out, thanks #LazyWeb!&lt;/p&gt;

&lt;p&gt;But perhaps this quote best sums up what &lt;strong&gt;Debugging really is&lt;/strong&gt; 😊&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Debugging is like being the detective in a crime movie where you are also the murderer.&lt;/p&gt;&amp;mdash; Filipe Fortes (@fortes) &lt;a href=&quot;https://twitter.com/fortes/status/399339918213652480?ref_src=twsrc%5Etfw&quot;&gt;November 10, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;The CLR provides a very extensive range of features related to Debugging, but why does it need to provide these services, the excellent post &lt;a href=&quot;https://blogs.msdn.microsoft.com/jmstall/2004/10/10/why-is-managed-debugging-different-than-native-debugging/&quot;&gt;Why is managed debugging different than native-debugging?&lt;/a&gt; provides 3 reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Native debugging can be abstracted at the hardware level but &lt;strong&gt;managed debugging needs to be abstracted at the IL level&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Managed debugging needs a lot of information &lt;strong&gt;not available until runtime&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;A managed debugger needs to &lt;strong&gt;coordinate with the Garbage Collector (GC)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So to give a decent experience, the CLR &lt;em&gt;has&lt;/em&gt; to provide the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/debugging/&quot;&gt;higher-level debugging API&lt;/a&gt; known as &lt;code class=&quot;highlighter-rouge&quot;&gt;ICorDebug&lt;/code&gt;, which is shown in the image below of a ‘common debugging scenario’ from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/dac-notes.md#marshaling-specifics&quot;&gt;the BOTR&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/08/common debugging scenario.png&quot; alt=&quot;common debugging scenario&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In addition, there is a nice description of how the different parts interact in &lt;a href=&quot;https://blogs.msdn.microsoft.com/jmstall/2004/12/28/how-do-managed-breakpoints-work/&quot;&gt;How do Managed Breakpoints work?&lt;/a&gt;, although the descriptions of &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are the opposite of the diagram above!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Here’s an overview of the pipeline of components:
1) End-user
2) Debugger (such as Visual Studio or MDbg).
3) CLR Debugging Services (which we call &quot;The Right Side&quot;). This is the implementation of ICorDebug (in mscordbi.dll).
---- process boundary between Debugger and Debuggee ----
4) CLR. This is mscorwks.dll. This contains the in-process portion of the debugging services (which we call &quot;The Left Side&quot;) which communicates directly with the RS in stage #3.
5) Debuggee's code (such as end users C# program)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;icordebug-api&quot;&gt;ICorDebug API&lt;/h3&gt;

&lt;p&gt;But how is all this implemented and what are the different components, from &lt;a href=&quot;https://github.com/Microsoft/clrmd/blob/master/Documentation/GettingStarted.md#clr-debugging-a-brief-introduction&quot;&gt;CLR Debugging, a brief introduction&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;All of .Net debugging support is implemented on top of a dll we call “The Dac”. This file (usually named &lt;code class=&quot;highlighter-rouge&quot;&gt;mscordacwks.dll&lt;/code&gt;) is the building block for both our public debugging API (&lt;code class=&quot;highlighter-rouge&quot;&gt;ICorDebug&lt;/code&gt;) as well as the two private debugging APIs: The SOS-Dac API and IXCLR.&lt;/p&gt;

  &lt;p&gt;In a perfect world, everyone would use &lt;code class=&quot;highlighter-rouge&quot;&gt;ICorDebug&lt;/code&gt;, our public debugging API. However a vast majority of features needed by tool developers such as yourself is lacking from &lt;code class=&quot;highlighter-rouge&quot;&gt;ICorDebug&lt;/code&gt;. This is a problem that we are fixing where we can, but these improvements go into CLR v.next, not older versions of CLR. In fact, the &lt;code class=&quot;highlighter-rouge&quot;&gt;ICorDebug&lt;/code&gt; API only added support for crash dump debugging in CLR v4. Anyone debugging CLR v2 crash dumps cannot use &lt;code class=&quot;highlighter-rouge&quot;&gt;ICorDebug&lt;/code&gt; at all!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(for an additional write-up, see &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/ToolBox/SOS/SOSAndICorDebug.md&quot;&gt;SOS &amp;amp; ICorDebug&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;ICorDebug&lt;/code&gt; API is actually split up into multiple interfaces, there are over 70 of them!! I won’t list them all here, but I will show the categories they fall into, for more info see &lt;a href=&quot;https://blogs.msdn.microsoft.com/jmstall/2006/01/04/partition-of-icordebug/&quot;&gt;Partition of ICorDebug&lt;/a&gt; where this list came from, as it goes into much more detail.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Top-level:&lt;/strong&gt; ICorDebug + ICorDebug2 are the top-level interfaces which effectively serve as a collection of ICorDebugProcess objects.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Callbacks:&lt;/strong&gt; Managed debug events are dispatched via methods on a callback object implemented by the debugger&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Process:&lt;/strong&gt; This set of interfaces represents running code and includes the APIs related to eventing.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Code / Type Inspection:&lt;/strong&gt;  Could mostly operate on a static PE image, although there are a few convenience methods for live data.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Execution Control:&lt;/strong&gt; Execution is the ability to “inspect” a thread’s execution. Practically, this means things like placing breakpoints (F9) and doing stepping (F11 step-in, F10 step-over, S+F11 step-out). ICorDebug’s Execution control only operates within managed code.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Threads + Callstacks:&lt;/strong&gt; Callstacks are the backbone of the debugger’s inspection functionality. The following interfaces are related to taking a callstack. ICorDebug only exposes debugging managed code, and thus the stacks traces are managed-only.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Object Inspection:&lt;/strong&gt; Object inspection is the part of the API that lets you see the values of the variables throughout the debuggee.   For each interface, I list the “MVP” method that I think must succinctly conveys the purpose of that interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One other note, as with the Profiling APIs the level of support for the Debugging API varies across OS’s and CPU architectures. For instance, as of Aug 2018 there’s &lt;a href=&quot;https://github.com/dotnet/diagnostics/issues/58#issuecomment-414182115&quot;&gt;“no solution for Linux ARM of managed debugging and diagnostic”&lt;/a&gt;. For more info on ‘Linux’ support in general, see this great post &lt;a href=&quot;https://www.raydbg.com/2018/Debugging-Net-Core-on-Linux-with-LLDB/&quot;&gt;Debugging .NET Core on Linux with LLDB&lt;/a&gt; and check-out the &lt;a href=&quot;https://github.com/dotnet/diagnostics&quot;&gt;Diagnostics repository&lt;/a&gt; from Microsoft that has the goal of making it easier to debug .NET programs on Linux.&lt;/p&gt;

&lt;p&gt;Finally, if you want to see what the &lt;code class=&quot;highlighter-rouge&quot;&gt;ICorDebug&lt;/code&gt; APIs look like in C#, take a look at the &lt;a href=&quot;https://github.com/Microsoft/clrmd/blob/master/src/Microsoft.Diagnostics.Runtime/ICorDebug/ICorDebugWrappers.cs&quot;&gt;wrappers included in CLRMD library&lt;/a&gt;, include all the &lt;a href=&quot;https://github.com/Microsoft/clrmd/blob/c81a592f3041a9ae86f4c09351d8183801e39eed/src/Microsoft.Diagnostics.Runtime/ICorDebug/ICorDebugHelpers.cs&quot;&gt;available callbacks&lt;/a&gt; (CLRMD will be covered in more depth, later on in this post).&lt;/p&gt;

&lt;h3 id=&quot;sos-and-the-dac&quot;&gt;SOS and the DAC&lt;/h3&gt;

&lt;p&gt;The ‘Data Access Component’ (DAC) is discussed in detail in the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/dac-notes.md&quot;&gt;BOTR page&lt;/a&gt;, but in essence it provides ‘out-of-process’ access to the CLR data structures, so that their internal details can be read from &lt;em&gt;another process&lt;/em&gt;. This allows a debugger (via &lt;code class=&quot;highlighter-rouge&quot;&gt;ICorDebug&lt;/code&gt;) or the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension&quot;&gt;‘Son of Strike’ (SOS) extension&lt;/a&gt; to reach into a running instance of the CLR or a memory dump and find things like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;all the running threads&lt;/li&gt;
  &lt;li&gt;what objects are on the managed heap&lt;/li&gt;
  &lt;li&gt;full information about a method, including the machine code&lt;/li&gt;
  &lt;li&gt;the current ‘stack trace’&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Quick aside&lt;/strong&gt;, if you want an explanation of all the strange names and a bit of a ‘.NET History Lesson’ see &lt;a href=&quot;https://stackoverflow.com/questions/21361602/what-the-ee-means-in-sos/21363245#21363245&quot;&gt;this Stack Overflow answer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The full list of &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/building/debugging-instructions.md#sos-commands&quot;&gt;SOS Commands&lt;/a&gt; is quite impressive and using it along-side WinDBG allows you a very low-level insight into what’s going on in your program and the CLR. To see how it’s implemented, lets take a look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;!HeapStat&lt;/code&gt; command that gives you a summary of the size of different Heaps that the .NET GC is using:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/08/SOS-heapstat-cmd.png&quot; alt=&quot;SOS-heapstat-cmd.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(image from &lt;a href=&quot;https://blogs.msdn.microsoft.com/tom/2008/06/30/sos-upcoming-release-has-a-few-new-commands-heapstat/&quot;&gt;SOS: Upcoming release has a few new commands – HeapStat&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Here’s the code flow, showing how SOS and the DAC work together:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;SOS&lt;/strong&gt; The full &lt;code class=&quot;highlighter-rouge&quot;&gt;!HeapStat&lt;/code&gt; command (&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/ToolBox/SOS/Strike/strike.cpp#L4605-L4782&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SOS&lt;/strong&gt; The code in the &lt;code class=&quot;highlighter-rouge&quot;&gt;!HeapStat&lt;/code&gt; command that deals with the ‘Workstation GC’ (&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/ToolBox/SOS/Strike/strike.cpp#L4631-L4667&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SOS&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;GCHeapUsageStats(..)&lt;/code&gt; function that does the heavy-lifting (&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/ToolBox/SOS/Strike/eeheap.cpp#L768-L850&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Shared&lt;/strong&gt; The &lt;code class=&quot;highlighter-rouge&quot;&gt;DacpGcHeapDetails&lt;/code&gt; data structure that contains pointers to the main data in the GC heap, such as segments, card tables and individual generations (&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/dacprivate.h#L690-L722&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DAC&lt;/strong&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;GetGCHeapStaticData&lt;/code&gt; function that fills-out the &lt;code class=&quot;highlighter-rouge&quot;&gt;DacpGcHeapDetails&lt;/code&gt; struct (&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/dacprivate.h#L690-L722&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Shared&lt;/strong&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;DacpHeapSegmentData&lt;/code&gt; data structure that contains details for an individual ‘segment’ with the GC Heap (&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/dacprivate.h#L738-L771&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DAC&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;GetHeapSegmentData(..)&lt;/code&gt; that fills-out the &lt;code class=&quot;highlighter-rouge&quot;&gt;DacpHeapSegmentData&lt;/code&gt; struct (&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/debug/daccess/request.cpp#L2829-L2868&quot;&gt;link&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3rd-party-debuggers&quot;&gt;3rd Party ‘Debuggers’&lt;/h3&gt;

&lt;p&gt;Because Microsoft published the debugging API it allowed 3rd parties to make use of the use of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ICorDebug&lt;/code&gt; interfaces, here’s a list of some that I’ve come across:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Samsung/netcoredbg&quot;&gt;Debugger for .NET Core runtime&lt;/a&gt; from &lt;a href=&quot;https://github.com/Samsung&quot;&gt;Samsung&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;The debugger provides GDB/MI or VSCode debug adapter interface and allows to debug .NET apps under .NET Core runtime.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Probably&lt;/em&gt; written as part of their work of &lt;a href=&quot;https://developer.tizen.org/blog/celebrating-.net-core-2.0-looking-forward-tizen-4.0&quot;&gt;porting .NET Core to their Tizen OS&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/0xd4d/dnSpy&quot;&gt;dnSpy&lt;/a&gt; - “.NET debugger and assembly editor”
    &lt;ul&gt;
      &lt;li&gt;A &lt;a href=&quot;https://github.com/0xd4d/dnSpy#features-see-below-for-more-detail&quot;&gt;&lt;strong&gt;very&lt;/strong&gt; impressive tool&lt;/a&gt;, it’s a ‘debugger’, ‘assembly editor’, ‘hex editor’, ‘decompiler’ and much more!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/mdbg-exe&quot;&gt;MDbg.exe (.NET Framework Command-Line Debugger)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Available as a &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Samples.Debugging.MdbgEngine&quot;&gt;NuGet package&lt;/a&gt; and a &lt;a href=&quot;https://github.com/SymbolSource/Microsoft.Samples.Debugging/tree/master/src&quot;&gt;GitHub repo&lt;/a&gt; or you can &lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=2282&quot;&gt;download is from Microsoft&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;However, at the moment is MDBG doesn’t seem to work with .NET Core, see &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/1145&quot;&gt;Port MDBG to CoreCLR&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/8999&quot;&gt;ETA for porting mdbg to coreclr&lt;/a&gt; for some more information.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.jetbrains.com/dotnet/2017/02/23/rider-eap-18-coreclr-debugging-back-windows/&quot;&gt;JetBrains ‘Rider’&lt;/a&gt; allows .NET Core debugging on Windows
    &lt;ul&gt;
      &lt;li&gt;Although &lt;a href=&quot;https://blog.jetbrains.com/dotnet/2017/02/15/rider-eap-17-nuget-unit-testing-build-debugging/&quot;&gt;there was some controversy&lt;/a&gt; due to licensing issues&lt;/li&gt;
      &lt;li&gt;For more info, see &lt;a href=&quot;https://news.ycombinator.com/item?id=17323911&quot;&gt;this HackerNews thread&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;memory-dumps&quot;&gt;Memory Dumps&lt;/h3&gt;

&lt;p&gt;The final area we are going to look at is ‘memory dumps’, which can be captured from a &lt;em&gt;live&lt;/em&gt; system and analysed off-line. The .NET runtime has always had good support for &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dn342825.aspx?f=255&amp;amp;MSPPError=-2147217396#BKMK_Collect_memory_snapshots&quot;&gt;creating ‘memory dumps’ on Windows&lt;/a&gt; and now that .NET Core is ‘cross-platform’, the are also tools available &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/xplat-minidump-generation.md&quot;&gt;do the same on other OSes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the issues with ‘memory dumps’ is that it can be tricky to get hold of the correct, matching versions of the SOS and DAC files. Fortunately Microsoft have just released the &lt;a href=&quot;https://github.com/dotnet/symstore/tree/master/src/dotnet-symbol&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet symbol&lt;/code&gt; CLI tool&lt;/a&gt; that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;can download all the files needed for debugging (symbols, modules, SOS and DAC for the coreclr module given) for any given core dump, minidump or any supported platform’s file formats like ELF, MachO, Windows DLLs, PDBs and portable PDBs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, if you spend any length of time &lt;strong&gt;analysing ‘memory dumps’&lt;/strong&gt; you really should take a look at the excellent &lt;a href=&quot;https://github.com/Microsoft/clrmd&quot;&gt;CLR MD library&lt;/a&gt; that Microsoft released a few years ago. I’ve &lt;a href=&quot;/2016/09/06/Analysing-.NET-Memory-Dumps-with-CLR-MD/&quot;&gt;previously written about&lt;/a&gt; what you can do with it, but in a nutshell, it allows you to interact with memory dumps via an intuitive C# API, with classes that provide access to the &lt;a href=&quot;https://github.com/Microsoft/clrmd/blob/master/src/Microsoft.Diagnostics.Runtime/ClrHeap.cs#L16&quot;&gt;ClrHeap&lt;/a&gt;, &lt;a href=&quot;https://github.com/Microsoft/clrmd/blob/6735e1012d11c244874fa3ba3af6e73edc0da552/src/Microsoft.Diagnostics.Runtime/GCRoot.cs#L105&quot;&gt;GC Roots&lt;/a&gt;, &lt;a href=&quot;https://github.com/Microsoft/clrmd/blob/master/src/Microsoft.Diagnostics.Runtime/ClrThread.cs#L103&quot;&gt;CLR Threads&lt;/a&gt;, &lt;a href=&quot;https://github.com/Microsoft/clrmd/blob/master/src/Microsoft.Diagnostics.Runtime/ClrThread.cs#L37&quot;&gt;Stack Frames&lt;/a&gt; and &lt;a href=&quot;https://github.com/Microsoft/clrmd/tree/master/src/Samples&quot;&gt;much more&lt;/a&gt;. In fact, aside from the time needed to implemented the work, CLR MD could &lt;a href=&quot;https://github.com/Microsoft/clrmd/issues/33&quot;&gt;implement &lt;em&gt;most&lt;/em&gt; (if not all) of the SOS commands&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But how does it work, from the &lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2013/05/01/net-crash-dump-and-live-process-inspection/&quot;&gt;announcement post&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The ClrMD managed library is a wrapper around CLR internal-only debugging APIs. Although those internal-only APIs are very useful for diagnostics, we do not support them as a public, documented release because they are incredibly difficult to use and tightly coupled with other implementation details of the CLR. ClrMD addresses this problem by providing an easy-to-use managed wrapper around these low-level debugging APIs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By making these APIs available, in an officially supported library, Microsoft have enabled developers to build a &lt;a href=&quot;/2018/06/15/Tools-for-Exploring-.NET-Internals/#tools-based-on-clr-memory-diagnostics-clrmd&quot;&gt;wide range of tools&lt;/a&gt; on top of CLRMD, which is a great result!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;So in summary, the .NET Runtime provides a wide-range of diagnostic, debugging and profiling features that allow a deep-insight into what’s going on inside the CLR.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=17819352&quot;&gt;HackerNews&lt;/a&gt;, &lt;a href=&quot;https://www.reddit.com/r/programming/comments/994119/monitoring_and_observability_in_the_net_runtime/&quot;&gt;/r/programming&lt;/a&gt; or &lt;a href=&quot;https://www.reddit.com/r/csharp/comments/9940cm/monitoring_and_observability_in_the_net_runtime/&quot;&gt;/r/csharp&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h1&gt;

&lt;p&gt;Where appropriate I’ve included additional links that covers the topics discussed in this post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;General&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@copyconstruct/monitoring-and-observability-8417d1952e1c&quot;&gt;Monitoring and Observability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://thenewstack.io/monitoring-and-observability-whats-the-difference-and-why-does-it-matter/&quot;&gt;Monitoring and Observability — What’s the Difference and Why Does It Matter?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;ETW Events and PerfView:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://assets.ctfassets.net/9n3x4rtjlya6/6A7ZxhamzKQI8cq0ikgYYO/d6430a29037100f73c235584ddada75f/Dina_Goldshtein_ETW_-_Monitor_Anything.pdf&quot;&gt;ETW - Monitor Anything, Anytime, Anywhere&lt;/a&gt; (pdf) by &lt;a href=&quot;https://twitter.com/dinagozil?lang=en&quot;&gt;Dina Goldshtein&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ruxcon.org.au/assets/2016/slides/ETW_16_RUXCON_NJR_no_notes.pdf&quot;&gt;Make ETW Great Again&lt;/a&gt; (pdf)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cyberpointllc.com/posts/cp-logging-keystrokes-with-event-tracing-for-windows-etw.html&quot;&gt;Logging Keystrokes with Event Tracing for Windows (ETW)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;PerfView is based on &lt;a href=&quot;https://github.com/Microsoft/perfview/blob/master/documentation/TraceEvent/TraceEventLibrary.md&quot;&gt;Microsoft.Diagnostics.Tracing.TraceEvent&lt;/a&gt;, which means you can easily write code to collect ETW events yourself, for example &lt;a href=&quot;https://github.com/Microsoft/perfview/blob/master/src/TraceEvent/Samples/21_ObserveJitEvents.cs&quot;&gt;‘Observe JIT Events’ sample&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;More info in the &lt;a href=&quot;https://github.com/Microsoft/perfview/blob/master/documentation/TraceEvent/TraceEventProgrammersGuide.md&quot;&gt;TraceEvent Library Programmers Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/windows-performance-tracing.md&quot;&gt;Performance Tracing on Windows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/Documentation/coding-guidelines/EventLogging.md&quot;&gt;CoreClr Event Logging Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2018/10/24/bringing-net-application-performance-analysis-to-linux/&quot;&gt;Bringing .NET application performance analysis to Linux&lt;/a&gt; (introduction on the .NET Blog)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lttng.org/blog/2018/08/28/bringing-dotnet-perf-analysis-to-linux/&quot;&gt;Bringing .NET application performance analysis to Linux&lt;/a&gt; (more detailed post on the LTTng blog)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Profiling API:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Read all of &lt;a href=&quot;https://blogs.msdn.microsoft.com/davbr/&quot;&gt;David Broman’s CLR Profiling API Blog&lt;/a&gt;, seriously if you want to use the Profiling API, this is the place to start!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/Documentation/botr/profiling.md&quot;&gt;BOTR - Profiling&lt;/a&gt; - explains what the ‘Profiling API’ provides, what you can do with it and how to use it.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/Documentation/botr/profilability.md&quot;&gt;BOTR - Profilability&lt;/a&gt; - discusses what needs to be done within the CLR &lt;em&gt;ifself&lt;/em&gt; to make profiling possible.&lt;/li&gt;
  &lt;li&gt;Interesting presentation &lt;a href=&quot;https://dotnetstammtisch.at/slides/003/The-Profiling-API.pdf&quot;&gt;The .NET Profiling API&lt;/a&gt; (pdf)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://yaozhenhua.wordpress.com/2012/05/07/thought-on-managed-code-injection-and-interception/&quot;&gt;Thought(s) on managed code injection and interception&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/rmbyers/2008/10/30/clr-4-0-advancements-in-diagnostics/&quot;&gt;CLR 4.0 advancements in diagnostics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/4382&quot;&gt;Profiling: How to get GC Metrics in-process&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Debugging:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Again, if you ware serious about using the Debugging API, you mist read all of &lt;a href=&quot;https://blogs.msdn.microsoft.com/jmstall&quot;&gt;Mike Stall’s .NET Debugging Blog&lt;/a&gt;, great stuff, including:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/jmstall/2004/12/28/how-do-managed-breakpoints-work/&quot;&gt;How do Managed Breakpoints work?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/jmstall/2005/02/23/debugging-any-net-language/&quot;&gt;Debugging any .Net language&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/jmstall/2004/10/05/how-can-i-use-icordebug/&quot;&gt;How can I use ICorDebug?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/jmstall/2005/11/05/you-cant-debug-yourself/&quot;&gt;You can’t debug yourself&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/jmstall/2005/11/28/tool-to-get-snapshot-of-managed-callstacks/&quot;&gt;Tool to get snapshot of managed callstacks&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/dac-notes.md&quot;&gt;BOTR Data Access Component (DAC) Notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.microsoft.co.il/pavely/2012/04/03/whats-new-in-clr-45-debugging-api/&quot;&gt;What’s New in CLR 4.5 Debugging API?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lowleveldesign.org/2010/10/11/writing-a-net-debugger-part-1-starting-the-debugging-session/&quot;&gt;Writing a .Net Debugger&lt;/a&gt;, &lt;a href=&quot;https://lowleveldesign.org/2010/10/22/writing-a-net-debugger-part-2-handling-events-and-creating-wrappers/&quot;&gt;Part 2&lt;/a&gt;, &lt;a href=&quot;https://lowleveldesign.org/2010/11/08/writing-a-net-debugger-part-3-symbol-and-source-files/&quot;&gt;Part 3&lt;/a&gt; and &lt;a href=&quot;https://lowleveldesign.org/2010/12/01/writing-a-net-debugger-part-4-breakpoints/&quot;&gt;Part 4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tripleemcoder.com/2011/12/10/writing-an-automatic-debugger-in-15-minutes-yes-a-debugger/&quot;&gt;Writing an automatic debugger in 15 minutes (yes, a debugger!)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;PR to &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/18160&quot;&gt;add SOS DumpAsync command&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/8363&quot;&gt;Question: what remaining SOS commands need to be ported to Linux/OS X&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Memory Dumps:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://voneinem-windbg.blogspot.com/2007/03/creating-and-analyzing-minidumps-in-net.html&quot;&gt;Creating and analyzing minidumps in .NET production applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.microsoft.co.il/sasha/2015/08/19/minidumper-smaller-dumps-net-applications/&quot;&gt;Creating Smaller, But Still Usable, Dumps of .NET Applications&lt;/a&gt; and &lt;a href=&quot;http://blogs.microsoft.co.il/sasha/2015/09/30/more-on-minidumper-getting-the-right-memory-pages-for-net-analysis/&quot;&gt;More on - MiniDumper: Getting the Right Memory Pages for .NET Analysis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lowleveldesign.org/2018/02/22/minidumper-a-better-way-to-create-managed-memory-dumps/&quot;&gt;Minidumper – A Better Way to Create Managed Memory Dumps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.debuginfo.com/tools/clrdump.html&quot;&gt;ClrDump is a set of tools that allow to produce small minidumps of managed applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

     
     
     
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
 </entry>
 
 <entry>
   <title>Presentations and Talks covering '.NET Internals'</title>
   <link href="http://www.mattwarren.org/2018/07/12/Presentations-and-Talks-covering-.NET-Internals/"/>
   <updated>2018-07-12T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2018/07/12/Presentations and Talks covering .NET Internals</id>
   <content type="html">
     &lt;p&gt;I’m constantly surprised at just &lt;em&gt;how popular&lt;/em&gt; resources related to ‘.NET Internals’ are, for instance take this tweet and the thread that followed:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-cards=&quot;hidden&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;If you like learning about &amp;#39;.NET Internals&amp;#39; here&amp;#39;s a few talks/presentations I&amp;#39;ve watched that you might also like. First &amp;#39;Writing High Performance Code in .NET&amp;#39; by Bart de Smet &lt;a href=&quot;https://t.co/L5S9BsBlWe&quot;&gt;https://t.co/L5S9BsBlWe&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Warren (@matthewwarren) &lt;a href=&quot;https://twitter.com/matthewwarren/status/1016315333584531456?ref_src=twsrc%5Etfw&quot;&gt;July 9, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;All I’d done was put together a list of Presentations/Talks (based on the criteria below) and people &lt;strong&gt;really seemed to appreciate it&lt;/strong&gt;!!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;criteria&quot;&gt;Criteria&lt;/h2&gt;

&lt;p&gt;To keep things focussed, the talks or presentations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Must explain some aspect of the &lt;strong&gt;‘internals’ of the .NET Runtime&lt;/strong&gt; (CLR)
    &lt;ul&gt;
      &lt;li&gt;i.e. something ‘&lt;em&gt;under-the-hood&lt;/em&gt;’, the more ‘&lt;em&gt;low-level&lt;/em&gt;’ the better!&lt;/li&gt;
      &lt;li&gt;e.g. how the GC works, what the JIT does, how assemblies are structured, how to inspect what’s going on, etc&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Be entertaining and &lt;strong&gt;worth watching&lt;/strong&gt;!
    &lt;ul&gt;
      &lt;li&gt;i.e. worth someone giving up 40-50 mins of their time for&lt;/li&gt;
      &lt;li&gt;this is hard when you’re talking about low-level details, not all speakers manage it!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Needs to be a talk that I’ve &lt;strong&gt;watched myself&lt;/strong&gt; and actually learnt something from
    &lt;ul&gt;
      &lt;li&gt;i.e. I don’t just hope it’s good based on the speaker/topic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Doesn’t have to be unique, fine if it &lt;strong&gt;overlaps with another talk&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;it often helps having two people cover the same idea, from different perspectives&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want more general lists of talks and presentations see &lt;a href=&quot;https://github.com/JanVanRyswyck/awesome-talks&quot;&gt;Awesome talks&lt;/a&gt; and &lt;a href=&quot;https://github.com/adamsitnik/awesome-dot-net-performance#conference-talks&quot;&gt;Awesome .NET Performance&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;list-of-talks&quot;&gt;List of Talks&lt;/h2&gt;

&lt;p&gt;Here’s the complete list of talks, including a few bonus ones that weren’t in the tweet:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#perfview&quot;&gt;&lt;strong&gt;PerfView: The Ultimate .NET Performance Tool&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/goldshtn&quot;&gt;Sasha Goldshtein&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#highperfcode&quot;&gt;&lt;strong&gt;Writing High Performance Code in .NET&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://channel9.msdn.com/Tags/bart+de+smet&quot;&gt;Bart De Smet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stateofperf&quot;&gt;&lt;strong&gt;State of the .NET Performance&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/sitnikadam&quot;&gt;Adam Sitnik&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#benchmarking&quot;&gt;&lt;strong&gt;Let’s talk about microbenchmarking&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/andrey_akinshin&quot;&gt;Andrey Akinshin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#systemprogramming&quot;&gt;&lt;strong&gt;Safe Systems Programming in C# and .NET&lt;/strong&gt;&lt;/a&gt; (&lt;a href=&quot;https://www.infoq.com/news/2016/06/systems-programming-qcon&quot;&gt;summary&lt;/a&gt;) by &lt;a href=&quot;https://twitter.com/funcOfJoe&quot;&gt;Joe Duffy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#flingos&quot;&gt;&lt;strong&gt;FlingOS - Using C# for an OS&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/ednutting&quot;&gt;Ed Nutting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#netgc&quot;&gt;&lt;strong&gt;Maoni Stephens on .NET GC&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://blogs.msdn.microsoft.com/maoni/&quot;&gt;Maoni Stephens&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#netcoreperf&quot;&gt;&lt;strong&gt;What’s new for performance in .NET Core 2.0&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/ben_a_adams&quot;&gt;Ben Adams&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#opensourcehacking&quot;&gt;&lt;strong&gt;Open Source Hacking the CoreCLR&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/geoffnorton&quot;&gt;Geoff Norton&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#netcorexplat&quot;&gt;&lt;strong&gt;.NET Core &amp;amp; Cross Platform&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://github.com/ellismg&quot;&gt;Matt Ellis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#netcoreunix&quot;&gt;&lt;strong&gt;.NET Core on Unix&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://github.com/janvorli&quot;&gt;Jan Vorlicek&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#multithreading&quot;&gt;&lt;strong&gt;Multithreading Deep Dive&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/gfraiteur&quot;&gt;Gael Fraiteur&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#netmemorylego&quot;&gt;&lt;strong&gt;Everything you need to know about .NET memory&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/bcemmett&quot;&gt;Ben Emmett&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I also added these 2 categories:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#channel-9&quot;&gt;&lt;strong&gt;‘Channel 9’ Talks&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;So many great talks featuring the Microsoft Engineers who work on the .NET runtime&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#future&quot;&gt;&lt;strong&gt;Talks I plan to watch (but haven’t yet)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong style=&quot;color:green&quot;&gt;If I’ve missed any out, please let me know in the comments&lt;/strong&gt; (or &lt;a href=&quot;https://twitter.com/matthewwarren/&quot;&gt;on twitter&lt;/a&gt;)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&quot;perfview&quot;&gt;&lt;/span&gt;
&lt;a href=&quot;https://www.infoq.com/presentations/perfview-net&quot;&gt;&lt;strong&gt;PerfView: The Ultimate .NET Performance Tool&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/goldshtn&quot;&gt;Sasha Goldshtein&lt;/a&gt; (&lt;a href=&quot;https://www.slideshare.net/InfoQ/perfview-the-ultimate-net-performance-tool&quot;&gt;slides&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;In fact, just watch all the talks/presentations that Sasha has done, they’re great!! For example &lt;a href=&quot;http://blogs.microsoft.co.il/sasha/2013/11/05/modern-garbage-collection-in-theory-and-practice/&quot;&gt;Modern Garbage Collection in Theory and Practice&lt;/a&gt; and &lt;a href=&quot;https://vimeo.com/131636651&quot;&gt;Making .NET Applications Faster&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This talk is a great ‘how-to’ guide for &lt;a href=&quot;https://github.com/Microsoft/perfview&quot;&gt;PerfView&lt;/a&gt;, what it can do and how to use it (JIT stats, memory allocations, CPU profiling). For more on PerfView see this interview with it’s creator, &lt;a href=&quot;https://channel9.msdn.com/posts/Vance-Morrison-Performance-and-PerfView&quot;&gt;Vance Morrison: Performance and PerfView&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.infoq.com/presentations/perfview-net&quot;&gt;&lt;img src=&quot;/images/2018/07/01 - PerfView - The Ultimate .NET Performance Tool.png&quot; alt=&quot;01 - PerfView - The Ultimate .NET Performance Tool&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&quot;highperfcode&quot;&gt;&lt;/span&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=r738tcIstck&amp;amp;feature=youtu.be&quot;&gt;&lt;strong&gt;Writing High Performance Code in .NET&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://channel9.msdn.com/Tags/bart+de+smet&quot;&gt;Bart De Smet&lt;/a&gt; (he also has a some &lt;a href=&quot;https://www.pluralsight.com/authors/bart-desmet&quot;&gt;Pluralsight Courses&lt;/a&gt; on the same subject)&lt;/p&gt;

&lt;p&gt;Features &lt;a href=&quot;/2016/09/06/Analysing-.NET-Memory-Dumps-with-CLR-MD/&quot;&gt;CLRMD&lt;/a&gt;, WinDBG, ETW Events and PerfView, plus some great ‘real world’ performance issues&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=r738tcIstck&amp;amp;feature=youtu.be&quot;&gt;&lt;img src=&quot;/images/2018/07/03 - Writing High Performance Code in .NET.png&quot; alt=&quot;03 - Writing High Performance Code in .NET&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&quot;stateofperf&quot;&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=dVKUYP_YALg&quot;&gt;&lt;strong&gt;State of the .NET Performance&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/sitnikadam&quot;&gt;Adam Sitnik&lt;/a&gt; (&lt;a href=&quot;https://www.slideshare.net/yuliafast/adam-sitnik-state-of-the-net-performance&quot;&gt;slides&lt;/a&gt;)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;How to write high-perf code that plays nicely with the .NET GC, covering Span&amp;lt;T&amp;gt;, Memory&amp;lt;T&amp;gt; &amp;amp; ValueTask&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=dVKUYP_YALg&quot;&gt;&lt;img src=&quot;/images/2018/07/02 - State of the .NET Performance.png&quot; alt=&quot;02 - State of the .NET Performance&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&quot;benchmarking&quot;&gt;&lt;/span&gt;
&lt;a href=&quot;https://dotnext-helsinki.com/talks/lets-talk-about-microbenchmarking/&quot;&gt;&lt;strong&gt;Let’s talk about microbenchmarking&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/andrey_akinshin&quot;&gt;Andrey Akinshin&lt;/a&gt; (&lt;a href=&quot;https://www.slideshare.net/AndreyAkinshin/lets-talk-about-microbenchmarking&quot;&gt;slides&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Primarily a look at how to benchmark .NET code, but along the way it demonstrates some of the internal behaviour of the JIT compiler (Andrey is the creator of &lt;a href=&quot;https://benchmarkdotnet.org/&quot;&gt;BenchmarkDotNet&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dotnext-helsinki.com/talks/lets-talk-about-microbenchmarking/&quot;&gt;&lt;img src=&quot;/images/2018/07/12 - Let's talk about microbenchmarking.png&quot; alt=&quot;12 - Let's talk about microbenchmarking&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&quot;systemprogramming&quot;&gt;&lt;/span&gt;
&lt;a href=&quot;https://www.infoq.com/presentations/csharp-systems-programming&quot;&gt;&lt;strong&gt;Safe Systems Programming in C# and .NET&lt;/strong&gt;&lt;/a&gt; (&lt;a href=&quot;https://www.infoq.com/news/2016/06/systems-programming-qcon&quot;&gt;summary&lt;/a&gt;) by &lt;a href=&quot;https://twitter.com/funcOfJoe&quot;&gt;Joe Duffy&lt;/a&gt; (&lt;a href=&quot;https://www.slideshare.net/InfoQ/safe-systems-programming-in-c-and-net&quot;&gt;slides&lt;/a&gt; and &lt;a href=&quot;http://joeduffyblog.com/&quot;&gt;blog&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Joe Duffy (worked on the &lt;a href=&quot;http://joeduffyblog.com/2015/11/03/blogging-about-midori/&quot;&gt;Midori project&lt;/a&gt;) shows why C# is a good ‘System Programming’ language, including what low-level features it provides&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.infoq.com/presentations/csharp-systems-programming&quot;&gt;&lt;img src=&quot;/images/2018/07/08%20-%20Safe%20Systems%20Programming%20in%20C%23%20and%20.NET.png&quot; alt=&quot;08 - Safe Systems Programming in C# and .NET&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&quot;flingos&quot;&gt;&lt;/span&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=bnopbNS8Lnw&quot;&gt;&lt;strong&gt;FlingOS - Using C# for an OS&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/ednutting&quot;&gt;Ed Nutting&lt;/a&gt; (&lt;a href=&quot;https://github.com/FlingOS/FlingOS/tree/master/Documentation/Presentations/.NET%20South%20West&quot;&gt;slides&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Shows what you need to do if you want to write and entire OS in C# (!!) The &lt;a href=&quot;http://www.flingos.co.uk/&quot;&gt;FlingOS&lt;/a&gt; project is worth checking out, it’s a great learning resource.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=bnopbNS8Lnw&quot;&gt;&lt;img src=&quot;/images/2018/07/04%20-%20FlingOS%20-%20Using%20C%23%20for%20an%20OS.png&quot; alt=&quot;04 - FlingOS - Using C# for an OS&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&quot;netgc&quot;&gt;&lt;/span&gt;
&lt;a href=&quot;https://channel9.msdn.com/Shows/On-NET/Maoni-Stephens-on-NET-GC&quot;&gt;&lt;strong&gt;Maoni Stephens on .NET GC&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://blogs.msdn.microsoft.com/maoni/&quot;&gt;Maoni Stephens&lt;/a&gt; who is the main (only?) .NET GC developer. In addition &lt;a href=&quot;https://channel9.msdn.com/posts/Maoni-Stephens-CLR-45-Server-Background-GC&quot;&gt;CLR 4.5 Server Background GC&lt;/a&gt; and &lt;a href=&quot;https://channel9.msdn.com/Blogs/Charles/NET-45-in-Practice-Bing&quot;&gt;.NET 4.5 in Practice: Bing&lt;/a&gt; are also worth a watch.&lt;/p&gt;

&lt;p&gt;An in-depth Q&amp;amp;A on how the .NET GC works, why is does what it does and how to use it efficiently&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://channel9.msdn.com/Shows/On-NET/Maoni-Stephens-on-NET-GC&quot;&gt;&lt;img src=&quot;/images/2018/07/07 - Maoni Stephens on .NET GC.png&quot; alt=&quot;07 - Maoni Stephens on .NET GC&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&quot;netcoreperf&quot;&gt;
&lt;a href=&quot;https://www.ageofascent.com/2017/11/05/perfromance-dotnet-core-2-corestart-conference/&quot;&gt;&lt;strong&gt;What’s new for performance in .NET Core 2.0&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/ben_a_adams&quot;&gt;Ben Adams&lt;/a&gt; (&lt;a href=&quot;https://cdn.ageofascent.net/assets/2017/Corestart-Whats-new-performance-dotnet-core-2-0.pdf&quot;&gt;slides&lt;/a&gt;)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Whilst it &lt;em&gt;mostly&lt;/em&gt; focuses on performance, there is some great internal details on how the JIT generates code for ‘de-virtualisation’, ‘exception handling’ and ‘bounds checking’&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=eOdhWTX3Ajk&quot;&gt;&lt;img src=&quot;/images/2018/07/13 - What's new for performance in .NET Core 2.0.png&quot; alt=&quot;13 - What's new for performance in .NET Core 2.0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&quot;opensourcehacking&quot;&gt;&lt;/span&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=iQRVJHab4MM&quot;&gt;&lt;strong&gt;Open Source Hacking the CoreCLR&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/geoffnorton&quot;&gt;Geoff Norton&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Making .NET Core (the CoreCLR) work on OSX was mostly a ‘community contribution’, this talks is a ‘walk-through’ of what it took to make it happen&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;/images/2018/07/09 - Open Source Hacking the CoreCLR.png&quot; alt=&quot;09 - Open Source Hacking the CoreCLR&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&quot;netcorexplat&quot;&gt;&lt;/span&gt;
&lt;a href=&quot;https://channel9.msdn.com/Blogs/dotnet/NET-Foundations-2015-03-04&quot;&gt;&lt;strong&gt;.NET Core &amp;amp; Cross Platform&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://github.com/ellismg&quot;&gt;Matt Ellis&lt;/a&gt;, one of the .NET Runtime Engineers (this one on how made &lt;a href=&quot;https://channel9.msdn.com/Blogs/dotnet/NET-Foundations-2015-02-25&quot;&gt;.NET Core ‘Open Source’&lt;/a&gt; is also worth a watch)&lt;/p&gt;

&lt;p&gt;Discussion of the early work done to make CoreCLR ‘&lt;em&gt;cross-platform&lt;/em&gt;’, including the build setup, ‘Platform Abstraction Layer’ (PAL) and OS differences that had to be accounted for&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://channel9.msdn.com/Blogs/dotnet/NET-Foundations-2015-03-04&quot;&gt;&lt;img src=&quot;/images/2018/07/05 - .NET Core &amp;amp; Cross Platform.png&quot; alt=&quot;05 - .NET Core &amp;amp; Cross Platform&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&quot;netcoreunix&quot;&gt;&lt;/span&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=JNmUz7C1usM&quot;&gt;&lt;strong&gt;.NET Core on Unix&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://github.com/janvorli&quot;&gt;Jan Vorlicek&lt;/a&gt; a .NET Runtime Engineer (&lt;a href=&quot;https://www.slideshare.net/KarelZikmund1/net-meetup-prague-portable-net-core-on-linux-jan-vorlicek&quot;&gt;slides&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This talk discusses which parts of the CLR had to be changed to run on Unix, including exception handling, calling conventions, runtime suspension and the PAL&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=JNmUz7C1usM&quot;&gt;&lt;img src=&quot;/images/2018/07/06 - .NET Core on Unix.png&quot; alt=&quot;06 - .NET Core on Unix&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&quot;multithreading&quot;&gt;&lt;/span&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=z2QYa2RW9c8&quot;&gt;&lt;strong&gt;Multithreading Deep Dive&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/gfraiteur&quot;&gt;Gael Fraiteur&lt;/a&gt; (creator of &lt;a href=&quot;https://www.postsharp.net/&quot;&gt;PostSharp&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Takes a really in-depth look at the CLR memory-model and threading primitives&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=z2QYa2RW9c8&quot;&gt;&lt;img src=&quot;/images/2018/07/10 - Multithreading Deep Dive.png&quot; alt=&quot;10 - Multithreading Deep Dive&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&quot;netmemorylego&quot;&gt;&lt;/span&gt;
&lt;a href=&quot;https://vimeo.com/113632451&quot;&gt;&lt;strong&gt;Everything you need to know about .NET memory&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/bcemmett&quot;&gt;Ben Emmett&lt;/a&gt; (&lt;a href=&quot;https://www.slideshare.net/benemmett/net-memory-management-ndc-london&quot;&gt;slides&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Explains how the .NET GC works using Lego! A very innovative and effective approach!!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://vimeo.com/113632451&quot;&gt;&lt;img src=&quot;/images/2018/07/11 - Everything you need to know about .NET memory.png&quot; alt=&quot;11 - Everything you need to know about .NET memory&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;span id=&quot;channel9&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&quot;channel-9&quot;&gt;Channel 9&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&quot;https://channel9.msdn.com/&quot;&gt;Channel 9&lt;/a&gt; videos recorded by Microsoft deserve their own category, because there’s so much deep, technical information in them. This list is just a selection, including some of my favourites, there are &lt;a href=&quot;https://channel9.msdn.com/Search?term=.net%20clr&amp;amp;lang-en=true&quot;&gt;many, many more available&lt;/a&gt;!!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Blogs/Charles/Ian-Carmichael-The-History-and-Future-of-CLR&quot;&gt;Ian Carmichael: The History and Future of the CLR&lt;/a&gt; (2009)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Shows/Going+Deep/Maoni-Stephens-and-Andrew-Pardoe-CLR-4-Inside-Background-GC&quot;&gt;Maoni Stephens and Andrew Pardoe: CLR 4 Garbage Collector - Inside Background GC&lt;/a&gt; (2009)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Shows/Going+Deep/Vance-Morrison-CLR-Through-the-Years&quot;&gt;Vance Morrison: CLR Through the Years&lt;/a&gt; (2009)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Blogs/Charles/Surupa-Biswas-CLR-4-Resilient-NGen-and-Targeted-Patching&quot;&gt;Surupa Biswas: CLR 4 - Resilient NGen with Targeted Patching&lt;/a&gt; (2009)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Shows/WM_IN/Suzanne-Cook-Developing-the-CLR-Part-I&quot;&gt;Suzanne Cook - Developing the CLR, Part I&lt;/a&gt; (2005)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Blogs/TheChannel9Team/Kit-George-Tour-of-NET-CLR-Base-Class-Library-Team&quot;&gt;Tour of .NET CLR Base Class Library Team&lt;/a&gt; (2005)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Blogs/TheChannel9Team/Christopher-Brumme-The-future-of-CLR-exceptions&quot;&gt;Christopher Brumme - The future of CLR exceptions&lt;/a&gt; (2004)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Blogs/TheChannel9Team/Anders-Hejlsberg-What-brought-about-the-birth-of-the-CLR&quot;&gt;Anders Hejlsberg - What brought about the birth of the CLR?&lt;/a&gt; (2004)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Blogs/TheChannel9Team/Jason-Zander-Discussing-the-architecture-and-quotsecretsquot-of-NET-and-the-CLR&quot;&gt;Jason Zander - Discussing the architecture and secrets of .NET and the CLR&lt;/a&gt; (2004)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Blogs/TheChannel9Team/Brad-Abrams-What-is-missing-from-the-CLR&quot;&gt;Brad Abrams - What is missing from the CLR?&lt;/a&gt; (2004)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Blogs/TheChannel9Team/Christopher-Brumme-Will-there-be-improvements-to-NETs-garbage-collector&quot;&gt;Christopher Brumme – Will there be improvements to .NET’s garbage collector?&lt;/a&gt; (2004)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;span id=&quot;future&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&quot;ones-to-watch&quot;&gt;Ones to watch&lt;/h1&gt;

&lt;p&gt;I can’t recommend these yet, because I haven’t watched them myself! (I can’t break my &lt;em&gt;own&lt;/em&gt; rules!!).&lt;/p&gt;

&lt;p&gt;But they all look really interesting and I will watch them as soon as I get a chance, so I thought they were worth including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kalapos.net/Blog/ShowPost/Udemy-Advanced-DotNet-Course&quot;&gt;C# and .NET - Advanced topics&lt;/a&gt; (££) by &lt;a href=&quot;https://twitter.com/gregkalapos&quot;&gt;Gergely Kalapos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.udemy.com/high-performance-coding-with-net-core-and-csharp/?couponCode=KALPAOSNET-ADVCEDPST&quot;&gt;High Performance Coding with .NET Core and C#&lt;/a&gt; (££) also by &lt;a href=&quot;https://twitter.com/gregkalapos&quot;&gt;Gergely Kalapos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=7GTpwgsmHgU&quot;&gt;Patterns for high-performance C#&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/federicolois&quot;&gt;Federico Andres Lois&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLV281NbnwQaJpaSSOoSI7oPLINjf2Ojak&quot;&gt;Manual memory management in .NET Framework&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/furmanekadam&quot;&gt;Adam Furmanek&lt;/a&gt; (&lt;a href=&quot;https://blog.adamfurmanek.pl/&quot;&gt;blog&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=rWZXjz_nnzs&amp;amp;index=9&amp;amp;list=PL03Lrmd9CiGfprrIjzbjdA2RRShJMzYIM&quot;&gt;Internals of Exceptions&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/furmanekadam&quot;&gt;Adam Furmanek&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/223985297&quot;&gt;Beyond step-by step debugging in Visual Studio&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/TessFerrandez&quot;&gt;Tess Ferrandez&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vimeo.com/68320501&quot;&gt;Hacking .NET(C#) Application: Code of the Hacker&lt;/a&gt; by Jon McCoy&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=jK8jYQ3ZKiI&amp;amp;index=22&amp;amp;list=PL03Lrmd9CiGfprrIjzbjdA2RRShJMzYIM&quot;&gt;So you want to create your own .NET runtime?&lt;/a&gt; (&lt;a href=&quot;https://ndcoslo.com/talk/so-you-want-to-create-your-own-net-runtime/&quot;&gt;abstract&lt;/a&gt;) by &lt;a href=&quot;&quot;&gt;Chris Bacon&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dotnext-piter.ru/2018/spb/talks/5mpiesdyfikoi86s2u0owq/&quot;&gt;Advanced .NET debugging techniques from a real world investigation&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/chnasarre&quot;&gt;Christophe Nasarre&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/KooKiz&quot;&gt;Kevin Gosse&lt;/a&gt; (&lt;a href=&quot;https://www.youtube.com/watch?v=DD3w66Ff8Ms&amp;amp;t=11713s&quot;&gt;recording&lt;/a&gt; and &lt;a href=&quot;https://github.com/chrisnas/SELAConference2018&quot;&gt;slides&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.seladeveloperpractice.com/sessions?selected=13&quot;&gt;Staying Friendly with the GC&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/ayende&quot;&gt;Oren Eini (Ayende Rahien)&lt;/a&gt; (&lt;a href=&quot;https://www.slideshare.net/OrenEini/staying-friendly-with-the-gc-104205724&quot;&gt;slides&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=DD3w66Ff8Ms&quot;&gt;Scratched Metal&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/federicolois&quot;&gt;Federico Andres Lois&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/kekyo/beachhead-implements-new-opcode-on-clr-jit&quot;&gt;Beachhead implements new opcode on CLR JIT&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/kekyo2&quot;&gt;Kouji Matsui&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pyrzyk.net/public-talks/&quot;&gt;Everything what you (don’t) know about structures in .NET&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/lukaszpyrzyk&quot;&gt;Łukasz Pyrzyk&lt;/a&gt; (&lt;a href=&quot;https://pyrzyk.net/structures&quot;&gt;slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;If this post causes you to go off and watch hours and hours of videos, ignoring friends, family and work for the next few weeks, &lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=lQPeThqrjws&quot;&gt;Don’t Blame Me&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

     
     
     
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
 </entry>
 
 <entry>
   <title>.NET JIT and CLR - Joined at the Hip</title>
   <link href="http://www.mattwarren.org/2018/07/05/.NET-JIT-and-CLR-Joined-at-the-Hip/"/>
   <updated>2018-07-05T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2018/07/05/.NET JIT and CLR - Joined at the Hip</id>
   <content type="html">
     
&lt;link rel=&quot;stylesheet&quot; href=&quot;/datavis/treemap-coreclr.css&quot; /&gt;

&lt;script src=&quot;https://d3js.org/d3.v4.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;/datavis/treemap-coreclr.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;

&lt;p&gt;I’ve been &lt;a href=&quot;/2018/03/23/Exploring-the-internals-of-the-.NET-Runtime/&quot;&gt;digging into .NET Internals&lt;/a&gt; for a while now, but never really looked closely at how the ‘&lt;em&gt;Just-in-Time&lt;/em&gt;’ (JIT) compiler works. In my mind, the interaction between the .NET Runtime and the JIT has always looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/07/JIT and EE Interaction - Expected.png&quot; alt=&quot;JIT and EE Interaction - Expected&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nice and straight-forward, the CLR asks the JIT to compile some ‘&lt;em&gt;Intermediate Language&lt;/em&gt;’ (IL) code into machine code and the JIT hands back the bytes when it’s done.&lt;/p&gt;

&lt;p&gt;However, it turns out the interaction is &lt;em&gt;much&lt;/em&gt; more complicated, in reality it looks more like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/07/JIT and EE Interaction - Actual.png&quot; alt=&quot;JIT and EE Interaction&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The JIT and the CLR’s ‘&lt;em&gt;Execution Engine&lt;/em&gt;’ (EE) or ‘&lt;em&gt;Virtual Machine&lt;/em&gt;’ (VM) work closely with one another, they really are &lt;a href=&quot;https://www.merriam-webster.com/dictionary/joined%20at%20the%20hip&quot;&gt;&lt;strong&gt;‘joined at the hip’&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The rest of this post will explore the interaction between the 2 components, how they work together and why they need to.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;the-jit-compiler&quot;&gt;The JIT Compiler&lt;/h3&gt;

&lt;p&gt;As a quick aside, this post will &lt;strong&gt;not&lt;/strong&gt; be talking about the internals of the JIT compiler itself, if you want to find out more about how that works I recommend reading the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md&quot;&gt;fantastic overview in the BOTR&lt;/a&gt; and this &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-tutorial.md&quot;&gt;excellent tutorial&lt;/a&gt;, where this very helpful diagram comes from:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/07/RyuJIT Phases.png&quot; alt=&quot;RyuJIT Phases&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After all that, if you still want more, you can take a look at the ‘JIT’ section in the &lt;a href=&quot;/2017/03/23/Hitchhikers-Guide-to-the-CoreCLR-Source-Code/#jit-just-in-time-compiler&quot;&gt;‘Hitchhikers-Guide-to-the-CoreCLR-Source-Code’&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;components-within-the-clr&quot;&gt;Components within the CLR&lt;/h3&gt;

&lt;p&gt;Before we go any further it’s helpful to discuss how the ‘Common Language Runtime’ (CLR) is actually composed. It’s actually made up of several different components including the VM/EE, JIT, GC and others. The treemap below shows the different areas of the source code, grouped by colour into the top-level sections they fall under. You can clearly see that the VM and JIT dominate as well as ‘mscorlib’ which is the only component written in C#.&lt;/p&gt;

&lt;p&gt;You can hover over an individual box to get more detailed information and can click on the different radio buttons to toggle the sizing (LOC/Files/Commits)&lt;/p&gt;

&lt;div id=&quot;top-level-treemap&quot;&gt;
  &lt;svg width=&quot;800&quot; height=&quot;570&quot;&gt;&lt;/svg&gt;
  &lt;form&gt;
    &lt;span style=&quot;padding-right: 5em&quot;&gt;
      &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;mode&quot; value=&quot;sumByLinesOfCode&quot; checked=&quot;&quot; /&gt;
      Total L.O.C
      &lt;/label&gt;
    &lt;/span&gt;
    &lt;span style=&quot;padding-right: 5em&quot;&gt;
      &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;mode&quot; value=&quot;sumByNumFiles&quot; /&gt;
      # Files
      &lt;/label&gt;
    &lt;/span&gt;
    &lt;span style=&quot;padding-right: 5em&quot;&gt;
      &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;mode&quot; value=&quot;sumByNumCommits&quot; /&gt;
      # Commits
      &lt;/label&gt;
    &lt;/span&gt;
  &lt;/form&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This treemap is from my previous post &lt;a href=&quot;/2017/03/23/Hitchhikers-Guide-to-the-CoreCLR-Source-Code/&quot;&gt;‘Hitchhikers-Guide-to-the-CoreCLR-Source-Code’&lt;/a&gt; which was written over a year ago, so the exact numbers will have changed in the meantime.&lt;/p&gt;

&lt;p&gt;You can also see these ‘components’ or ‘areas’ reflected in the &lt;a href=&quot;https://github.com/dotnet/coreclr/labels?utf8=%E2%9C%93&amp;amp;q=area-&quot;&gt;classification scheme&lt;/a&gt; used for the CoreCLR GitHub issues (one difference is that &lt;code class=&quot;highlighter-rouge&quot;&gt;area-CodeGen&lt;/code&gt; is used instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;JIT&lt;/code&gt;).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-clr-and-the-jit-compiler&quot;&gt;The CLR and the JIT Compiler&lt;/h2&gt;

&lt;p&gt;Onto the main subject, just how do the CLR and the JIT compiler work together to &lt;a href=&quot;/2017/12/15/How-does-.NET-JIT-a-method-and-Tiered-Compilation/#how-it-works&quot;&gt;transform a method from IL to machine code&lt;/a&gt;? As always, the ‘Book of the Runtime’ is a good place to start, from the ‘Execution Environment and External Interface’ section of the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md#execution-environment-and-external-interface&quot;&gt;RyuJIT Overview&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;RyuJIT provides the just in time compilation service for the .NET runtime. The runtime itself is variously called the EE (execution engine), the VM (virtual machine) or simply the CLR (common language runtime). Depending upon the configuration, the EE and JIT may reside in the same or different executable files. RyuJIT implements the JIT side of the JIT/EE interfaces:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ICorJitCompiler&lt;/code&gt; – this is the &lt;strong&gt;interface that the JIT compiler implements&lt;/strong&gt;. This interface is defined in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/inc/corjit.h&quot;&gt;src/inc/corjit.h&lt;/a&gt; and its implementation is in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/ee_il_dll.cpp&quot;&gt;src/jit/ee_il_dll.cpp&lt;/a&gt;. The following are the key methods on this interface:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;compileMethod&lt;/code&gt; is the main entry point for the JIT. The EE passes it a &lt;code class=&quot;highlighter-rouge&quot;&gt;ICorJitInfo&lt;/code&gt; object, and the “info” containing the IL, the method header, and various other useful tidbits. It returns a pointer to the code, its size, and additional GC, EH and (optionally) debug info.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getVersionIdentifier&lt;/code&gt; is the mechanism by which the JIT/EE interface is versioned. There is a single GUID (manually generated) which the JIT and EE must agree on.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getMaxIntrinsicSIMDVectorLength&lt;/code&gt; communicates to the EE the largest SIMD vector length that the JIT can support.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ICorJitInfo&lt;/code&gt; – this is the &lt;strong&gt;interface that the EE implements&lt;/strong&gt;. It has many methods defined on it that allow the JIT to look up metadata tokens, traverse type signatures, compute field and vtable offsets, find method entry points, construct string literals, etc. This bulk of this interface is inherited from &lt;code class=&quot;highlighter-rouge&quot;&gt;ICorDynamicInfo&lt;/code&gt; which is defined in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/inc/corinfo.h&quot;&gt;src/inc/corinfo.h&lt;/a&gt;. The implementation is defined in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/jitinterface.cpp&quot;&gt;src/vm/jitinterface.cpp&lt;/a&gt;.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;So there are 2 main interfaces, &lt;code class=&quot;highlighter-rouge&quot;&gt;ICorJitCompiler&lt;/code&gt; which is implemented by the JIT compiler and allows the EE to control how a method is compiled. Second there is &lt;code class=&quot;highlighter-rouge&quot;&gt;ICorJitInfo&lt;/code&gt; which the EE implements to allow the JIT to request information it needs during compilation.&lt;/p&gt;

&lt;p&gt;Let’s now look at these interfaces in more detail.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;ee--jit-icorjitcompiler&quot;&gt;&lt;strong&gt;EE ➜ JIT&lt;/strong&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/corjit.h#L243-L304&quot;&gt;ICorJitCompiler&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Firstly, we’ll examine &lt;code class=&quot;highlighter-rouge&quot;&gt;ICorJitCompiler&lt;/code&gt;, the interface exposed by the JIT. It’s actually pretty straight-forward and only contains 7 methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CorJitResult __stdcall compileMethod (..)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void clearCache()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BOOL isCacheCleanupRequired()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void ProcessShutdownWork(ICorStaticInfo* info)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void getVersionIdentifier(..)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unsigned getMaxIntrinsicSIMDVectorLength(..)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void setRealJit(..)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of these, the most interesting one is &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/jit/ee_il_dll.cpp#L276-L309&quot;&gt;compileMethod(..)&lt;/a&gt;, which has the following signature:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CorJitResult&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__stdcall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compileMethod&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ICorJitInfo&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;               &lt;span class=&quot;cm&quot;&gt;/* IN */&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CORINFO_METHOD_INFO&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;               &lt;span class=&quot;cm&quot;&gt;/* IN */&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* code:CorJitFlag */&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;cm&quot;&gt;/* IN */&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;BYTE&lt;/span&gt;                        &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nativeEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;cm&quot;&gt;/* OUT */&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt;                       &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nativeSizeOfCode&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* OUT */&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The EE provides the JIT with information about the method it wants compiled (&lt;code class=&quot;highlighter-rouge&quot;&gt;CORINFO_METHOD_INFO&lt;/code&gt;) as well as flags (&lt;code class=&quot;highlighter-rouge&quot;&gt;CorJitFlag&lt;/code&gt;) which control the:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Level of optimisation&lt;/li&gt;
  &lt;li&gt;Whether the code is compiled in &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Release&lt;/code&gt; mode&lt;/li&gt;
  &lt;li&gt;If the code needs to be ‘Profilable’ or support ‘Edit-and-Continue’&lt;/li&gt;
  &lt;li&gt;Alignment of loops, i.e. should they be aligned on byte-boundaries&lt;/li&gt;
  &lt;li&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;SSE3&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;SSE4&lt;/code&gt; should be used&lt;/li&gt;
  &lt;li&gt;and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/corjitflags.h#L24-L183&quot;&gt;many other scenarios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The final parameter is a reference to the &lt;code class=&quot;highlighter-rouge&quot;&gt;ICorJitInfo&lt;/code&gt; interface, which is covered in the next section.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;jit--ee-icorjithost-and-icorjitinfo&quot;&gt;&lt;strong&gt;JIT ➜ EE&lt;/strong&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/corjithost.h#L8-L46&quot;&gt;ICorJitHost&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/corjit.h#L306-L484&quot;&gt;ICorJitInfo&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The APIs that the EE has to implement to work with the JIT are not simple, there are almost 180 functions or callbacks!!&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Interface&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Method Count&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/corjithost.h#L8-L46&quot;&gt;ICorJitHost&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/corjit.h#L306-L484&quot;&gt;ICorJitInfo&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;19&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/corinfo.h#L2886-L3156&quot;&gt;ICorDynamicInfo&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;36&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/corinfo.h#L1971-L2884&quot;&gt;ICorStaticInfo&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;118&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;178&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The links take you to the function ‘definitions’ for a given interface. Alternatively all the methods are listed together &lt;a href=&quot;https://gist.github.com/mattwarren/375c34ed71c37f7e89bb425cf8f0f964&quot;&gt;in this gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ICorJitHost&lt;/code&gt; makes available ‘functionality that would normally be provided by the operating system’, predominantly the ability to allocate the ‘pages’ of memory &lt;a href=&quot;/2017/07/10/Memory-Usage-Inside-the-CLR/#jit-memory-usage&quot;&gt;that the JIT uses during compilation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ICorJitInfo&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;class ICorJitInfo : public ICorDynamicInfo&lt;/code&gt;) contains more specific memory allocation routines, including ones for the ‘GC Info’ data, a ‘method/funclet’s unwind information’, ‘.rdata and .pdata for a method’ and the ‘exception handler blocks’.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ICorDynamicInfo&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;class ICorDynamicInfo : public ICorStaticInfo&lt;/code&gt;) provides data that can change from ‘invocation to invocation’, i.e. the JIT cannot cache the results of these method calls. It includes functions that provide:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Thread Local Storage (TLS) index&lt;/li&gt;
  &lt;li&gt;Function Entry Point (address)&lt;/li&gt;
  &lt;li&gt;EE ‘helper functions’&lt;/li&gt;
  &lt;li&gt;Address of a Field&lt;/li&gt;
  &lt;li&gt;Constructor for a &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/corinfo.h#L2886-L3156&quot;&gt;much more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, &lt;code class=&quot;highlighter-rouge&quot;&gt;ICorStaticInfo&lt;/code&gt;, which is further sub-divided up into more specific interfaces:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Interface&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Method Count&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/corinfo.h#L1980-L2201&quot;&gt;ICorMethodInfo&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;28&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/corinfo.h#L2203-L2270&quot;&gt;ICorModuleInfo&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/corinfo.h#L2272-L2598&quot;&gt;ICorClassInfo&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;49&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/corinfo.h#L2600-L2649&quot;&gt;ICorFieldInfo&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/corinfo.h#L2651-L2712&quot;&gt;ICorDebugInfo&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/corinfo.h#L2731-L2767&quot;&gt;ICorArgInfo&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/corinfo.h#L2769-L2817&quot;&gt;ICorErrorInfo&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/corinfo.h#L2834-L2882&quot;&gt;Diagnostic methods&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/corinfo.h#L2819-L2832&quot;&gt;General methods&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/corinfo.h#L2714-L2729&quot;&gt;Misc methods&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;118&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Because the interface is nicely composed we can easily see what it provides. The bulk of the functions are concerned with information about a &lt;code class=&quot;highlighter-rouge&quot;&gt;module&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;method&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;field&lt;/code&gt;. For instance the JIT can query the class size, GC layout and obtain the address of a field within a class. It can also learn about a method’s signature, find it’s parent class and get ‘exception handling’ information (the full list of methods are available &lt;a href=&quot;https://gist.github.com/mattwarren/375c34ed71c37f7e89bb425cf8f0f964&quot;&gt;in this gist&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;These interfaces and the methods they contain give a nice insight into what information the JIT requests from the runtime and therefore what knowledge it requires when compiling a single method.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now, let’s look at the &lt;em&gt;end-to-end flow&lt;/em&gt; of a couple of these methods and see where they are implemented in the CoreCLR source code.&lt;/p&gt;

&lt;h3 id=&quot;ee--jit-getfunctionentrypoint&quot;&gt;EE ➜ JIT &lt;code class=&quot;highlighter-rouge&quot;&gt;getFunctionEntryPoint(..)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;First we’ll look at a method where the EE provides information to the JIT:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/corinfo.h#L2936-L2942&quot;&gt;/src/inc/corinfo.h&lt;/a&gt; (shared definition)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/jit/lower.cpp#L3148&quot;&gt;/src/jit/lower.cpp&lt;/a&gt; (&lt;strong&gt;method call from the JIT&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/vm/jitinterface.h#L953-L955&quot;&gt;/src/vm/jitinterface.h&lt;/a&gt; (VM definition)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/vm/jitinterface.cpp#L9091-L9142&quot;&gt;/src/vm/jitinterface.cpp&lt;/a&gt; (&lt;strong&gt;implementation in the VM&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/zap/zapinfo.cpp#L1872-L1904&quot;&gt;/src/zap/zapinfo.cpp&lt;/a&gt; (ZAP/NGEN implementation)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/jit/ICorJitInfo_API_wrapper.hpp#L1136-L1144&quot;&gt;/src/jit/ICorJitInfo_API_wrapper.hpp&lt;/a&gt; (wrapper)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/ToolBox/superpmi/superpmi/icorjitinfo.cpp#L1304-L1313&quot;&gt;/src/ToolBox/superpmi/superpmi/icorjitinfo.cpp&lt;/a&gt; (SuperPMI implementation)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jit--ee-reportinliningdecision&quot;&gt;JIT ➜ EE &lt;code class=&quot;highlighter-rouge&quot;&gt;reportInliningDecision()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Next we’ll look at a scenario where the data flows from the JIT back to the EE:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/inc/corinfo.h#L2036-L2042&quot;&gt;/src/inc/corinfo.h&lt;/a&gt; (shared definition)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/jit/inline.cpp#L734&quot;&gt;/src/jit/inline.cpp&lt;/a&gt; (&lt;strong&gt;method call from the JIT&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/vm/jitinterface.h#L700-L703&quot;&gt;/src/vm/jitinterface.h&lt;/a&gt; (VM definition)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/vm/jitinterface.cpp#L7953-L8070&quot;&gt;/src/vm/jitinterface.cpp&lt;/a&gt; (&lt;strong&gt;implementation in the VM&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/zap/zapinfo.cpp#L3610-L3623&quot;&gt;/src/zap/zapinfo.cpp&lt;/a&gt; (ZAP/NGEN implementation)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/jit/ICorJitInfo_API_wrapper.hpp#L61-L69&quot;&gt;/src/jit/ICorJitInfo_API_wrapper.hpp&lt;/a&gt; (wrapper)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.1/src/ToolBox/superpmi/superpmi/icorjitinfo.cpp#L100-L110&quot;&gt;/src/ToolBox/superpmi/superpmi/icorjitinfo.cpp&lt;/a&gt; (SuperPMI implementation)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;superpmi-tool&quot;&gt;SuperPMI tool&lt;/h3&gt;

&lt;p&gt;Finally, I just want to cover the ‘SuperPMI’ tool that showed up in the previous 2 scenarios. What is this tool and what does it do? From the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/glossary.md&quot;&gt;CoreCLR glossary&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;SuperPMI&lt;/strong&gt; - JIT component test framework (super fast JIT testing - it mocks/replays EE in EE-JIT interface)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So in a nutshell it allows JIT development and testing to be de-coupled from the EE, which is useful because we’ve just seen that the 2 components are tightly integrated.&lt;/p&gt;

&lt;p&gt;But how does it work? From the &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/ToolBox/superpmi&quot;&gt;README&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;SuperPMI works in two phases: collection and playback. In the collection phase, the system is configured to collect SuperPMI data. Then, run any set of .NET managed programs. When these managed programs invoke the JIT compiler, &lt;strong&gt;SuperPMI gathers and captures all information passed between the JIT and its .NET host&lt;/strong&gt;. In the playback phase, SuperPMI loads the JIT directly, and causes it to compile all the functions that it previously compiled, but using the collected data to provide answers to various questions that the JIT needs to ask. &lt;strong&gt;The .NET execution engine (EE) is not invoked at all.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This explains why there is a SuperPMI implementation for every method that is part of the JIT &amp;lt;-&amp;gt; EE interface. SuperPMI needs to ‘record’ or ‘collect’ each interaction with the EE and store the information so that it can be ‘played back’ at a later time, when the EE isn’t present.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=17464054&quot;&gt;Hacker News&lt;/a&gt; or &lt;a href=&quot;https://www.reddit.com/r/dotnet/comments/8wbdk1/net_jit_and_clr_joined_at_the_hip/&quot;&gt;/r/dotnet&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h1&gt;

&lt;p&gt;As always, if you’ve read this far, here’s some further information that you might find useful:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Mono EE &amp;lt;-&amp;gt; JIT Interface&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;CoreRT implementation of the JIT/EE Interface (in C#)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/blob/master/src/Native/jitinterface/jitinterface.h&quot;&gt;/src/Native/jitinterface/jitinterface.h&lt;/a&gt; (auto-generated, how?)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/blob/master/src/JitInterface/src/CorInfoImpl.cs&quot;&gt;/src/JitInterface/src/CorInfoImpl.cs&lt;/a&gt; (partial class, the other part is in CoreInfoBase.cs)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/blob/master/src/JitInterface/src/CorInfoBase.cs&quot;&gt;/src/JitInterface/src/CorInfoBase.cs&lt;/a&gt; (auto-generated by ThunkGenerator, using jitinterface.h)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/JitInterface/src/ThunkGenerator&quot;&gt;/src/JitInterface/src/ThunkGenerator&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/blob/master/src/JitInterface/src/ThunkGenerator/ThunkInput.txt&quot;&gt;/src/JitInterface/src/ThunkGenerator/ThunkInput.txt&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

     
     
     
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
     <category term='JIT Compiler' scheme='http://www.mattwarren.org/tags#JIT Compiler'/>
   
 </entry>
 
 <entry>
   <title>Tools for Exploring .NET Internals</title>
   <link href="http://www.mattwarren.org/2018/06/15/Tools-for-Exploring-.NET-Internals/"/>
   <updated>2018-06-15T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2018/06/15/Tools for Exploring .NET Internals</id>
   <content type="html">
     &lt;p&gt;Whether you want to look at what your code is doing ‘&lt;em&gt;under-the-hood&lt;/em&gt;’ or you’re trying to see what the ‘&lt;em&gt;internals&lt;/em&gt;’ of the CLR look like, there is a whole range of tools that can help you out.&lt;/p&gt;

&lt;p&gt;To give ‘&lt;em&gt;credit where credit is due&lt;/em&gt;’, this post is &lt;a href=&quot;https://twitter.com/matthewwarren/status/973940550473797633&quot;&gt;based on a tweet&lt;/a&gt;, so thanks to everyone who contributed to the list and if I’ve &lt;strong&gt;missed out any tools, please let me know in the comments below&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;While you’re here, I’ve also written other posts that look at the ‘internals’ of the .NET Runtime:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2018/03/23/Exploring-the-internals-of-the-.NET-Runtime/?recommended=1&quot;&gt;Exploring the Internals of the .NET Runtime&lt;/a&gt; (a ‘how-to’ guide)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2018/01/22/Resources-for-Learning-about-.NET-Internals/?recommended=1&quot;&gt;Resources for Learning about .NET Internals&lt;/a&gt; (other blogs that cover ‘internals’)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;honourable-mentions&quot;&gt;Honourable Mentions&lt;/h2&gt;

&lt;p&gt;Firstly I’ll start by mentioning that &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/sc65sadd.aspx?f=255&amp;amp;MSPPError=-2147217396&quot;&gt;Visual Studio has a great debugger&lt;/a&gt; and &lt;a href=&quot;https://code.visualstudio.com/docs/editor/debugging&quot;&gt;so does VSCode&lt;/a&gt;. Also there are lots of very good (commercial) &lt;a href=&quot;https://stackoverflow.com/questions/3927/what-are-some-good-net-profilers&quot;&gt;.NET Profilers&lt;/a&gt; and &lt;a href=&quot;https://www.quora.com/What-is-the-best-NET-Application-Server-Monitoring-Tool&quot;&gt;Application Monitoring Tools&lt;/a&gt; available that you should also take a look at. For example I’ve recently been playing around with &lt;a href=&quot;http://www.getcodetrack.com/&quot;&gt;Codetrack&lt;/a&gt; and I’m very impressed by what it can do!&lt;/p&gt;

&lt;p&gt;However, the rest of the post is going to look at some more &lt;strong&gt;single-use tools&lt;/strong&gt; that give a &lt;strong&gt;even deeper insight&lt;/strong&gt; into what is going on. As a added bonus they’re all ‘&lt;strong&gt;open-source&lt;/strong&gt;’, so you can take a look at the code and see how they work!!&lt;/p&gt;

&lt;h3 id=&quot;perfview-by-vance-morrison&quot;&gt;&lt;a href=&quot;https://github.com/Microsoft/perfview&quot;&gt;PerfView&lt;/a&gt; by &lt;a href=&quot;https://blogs.msdn.microsoft.com/vancem/&quot;&gt;Vance Morrison&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;PerfView is simply an excellent tool and is the one that I’ve used most over the years. It uses &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/bb968803%28v=vs.85%29.aspx?f=255&amp;amp;MSPPError=-2147217396&quot;&gt;‘Event Tracing for Windows’ (ETW) Events&lt;/a&gt; to provide a &lt;strong&gt;deep insight into what the CLR is doing&lt;/strong&gt;, as well as allowing you to &lt;strong&gt;profile Memory and CPU usage&lt;/strong&gt;. It does have a fairly steep learning curve, but there are some &lt;a href=&quot;https://channel9.msdn.com/Series/PerfView-Tutorial&quot;&gt;nice tutorials to help you along the way&lt;/a&gt; and it’s absolutely worth the time and effort.&lt;/p&gt;

&lt;p&gt;Also, if you need more proof of how useful it is, Microsoft Engineers themselves use it and many of the recent &lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2018/02/02/net-core-2-1-roadmap/#user-content-build-time-performance&quot;&gt;performance improvements in MSBuild&lt;/a&gt; were carried out after using &lt;a href=&quot;https://github.com/Microsoft/msbuild/search?q=PerfView&amp;amp;type=Issues&quot;&gt;PerfView to find the bottlenecks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;PerfView is built on-top of the &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Diagnostics.Tracing.TraceEvent/&quot;&gt;Microsoft.Diagnostics.Tracing.TraceEvent library&lt;/a&gt; which you can use in your own tools. In addition, since it’s been open-sourced the community has contributed and it has gained some really nice features, &lt;a href=&quot;https://github.com/Microsoft/perfview/pull/502&quot;&gt;including flame-graphs&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2018/06/PerfView Flamegraphs.png&quot;&gt;&lt;img src=&quot;/images/2018/06/PerfView Flamegraphs.png&quot; alt=&quot;PerfView Flamegraphs&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;Click for larger version&lt;/strong&gt;)&lt;/p&gt;

&lt;h3 id=&quot;sharplab-by-andrey-shchekin&quot;&gt;&lt;a href=&quot;https://sharplab.io/&quot;&gt;SharpLab&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/ashmind&quot;&gt;Andrey Shchekin&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;SharpLab started out as a tool for inspecting the IL code emitted by the Roslyn compiler, but has now grown &lt;a href=&quot;https://github.com/ashmind/SharpLab&quot;&gt;into much more&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;SharpLab is a .NET code playground that shows intermediate steps and results of code compilation.
Some language features are thin wrappers on top of other features – e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;using()&lt;/code&gt; becomes &lt;code class=&quot;highlighter-rouge&quot;&gt;try/catch&lt;/code&gt;.
SharpLab allows you to see the code as compiler sees it, and get a better understanding of .NET languages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If supports C#, Visual Basic and F#, but most impressive are the ‘Decompilation/Disassembly’ features:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are currently four targets for decompilation/disassembly:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;C#&lt;/li&gt;
    &lt;li&gt;Visual Basic&lt;/li&gt;
    &lt;li&gt;IL&lt;/li&gt;
    &lt;li&gt;JIT Asm (Native Asm Code)&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s right, it will output the &lt;a href=&quot;https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQBEJinANjASQDsYIFsBjCAgWwAdcIaITYBLAeyIBoYQpkNAD4ABAAwACEQEYA3AFgAUCIDMUgEwSAwhIDeSiYalqRAFgkBZABQBKPQaOOAblAQTSyGBIC8EgKwAdGIKio6OMgCcVh4wNiGOAL5KCUA==&quot;&gt;assembly code&lt;/a&gt; that the .NET JIT generates from your C#:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/06/SharpLab - Assembly Output.png&quot; alt=&quot;SharpLab - Assembly Output&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;object-layout-inspector-by-sergey-teplyakov&quot;&gt;&lt;a href=&quot;https://github.com/SergeyTeplyakov/ObjectLayoutInspector&quot;&gt;Object Layout Inspector&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/STeplyakov&quot;&gt;Sergey Teplyakov&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This tool gives you an insight into the memory layout of your .NET objects, i.e. it will show you how the JITter has &lt;strong&gt;decided to arrange the fields&lt;/strong&gt; within your &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt;. This can be useful when writing high-performance code and it’s helpful to have a tool that does it for us because doing it manually is tricky:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There is no official documentation about fields layout because the CLR authors reserved the right to change it in the future. But knowledge about the layout can be helpful if you’re curious or if you’re working on a performance critical application.&lt;/p&gt;

  &lt;p&gt;How can we inspect the layout? We can look at a raw memory in Visual Studio or use &lt;code class=&quot;highlighter-rouge&quot;&gt;!dumpobj&lt;/code&gt; command in &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension&quot;&gt;SOS Debugging Extension&lt;/a&gt;. These approaches are tedious and boring, so we’ll try to write a tool that will print an object layout at runtime.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From the example in the &lt;a href=&quot;https://github.com/SergeyTeplyakov/ObjectLayoutInspector#inspecting-a-value-type-layout-at-runtime&quot;&gt;GitHub repo&lt;/a&gt;, if you use &lt;code class=&quot;highlighter-rouge&quot;&gt;TypeLayout.Print&amp;lt;NotAlignedStruct&amp;gt;()&lt;/code&gt; with code like this:&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotAlignedStruct&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_byte1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_byte2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_short&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll get the following output, showing exactly how the CLR will layout the &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; in memory, based on it’s padding and optimization rules.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Size: 12. Paddings: 4 (%33 of empty space)
|================================|
|     0: Byte m_byte1 (1 byte)   |
|--------------------------------|
|   1-3: padding (3 bytes)       |
|--------------------------------|
|   4-7: Int32 m_int (4 bytes)   |
|--------------------------------|
|     8: Byte m_byte2 (1 byte)   |
|--------------------------------|
|     9: padding (1 byte)        |
|--------------------------------|
| 10-11: Int16 m_short (2 bytes) |
|================================|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-ultimate-net-experiment-tune-by-konrad-kokosa&quot;&gt;&lt;a href=&quot;http://tooslowexception.com/the-ultimate-net-experiment-project/&quot;&gt;The Ultimate .NET Experiment (TUNE)&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/konradkokosa&quot;&gt;Konrad Kokosa&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;TUNE is a really intriguing tool, as it says on the &lt;a href=&quot;https://github.com/kkokosa/Tune&quot;&gt;GitHub page&lt;/a&gt;, it’s purpose is to help you&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… learn .NET internals and performance tuning by experiments with C# code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can find out more information about what it does &lt;a href=&quot;http://tooslowexception.com/the-ultimate-net-experiment-project/&quot;&gt;in this blog post&lt;/a&gt;, but at a high-level it &lt;a href=&quot;https://github.com/kkokosa/Tune&quot;&gt;works like this&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;write a sample, valid C# script which contains at least one class with public method taking a single string parameter. It will be executed by hitting Run button. This script can contain as many additional methods and classes as you wish. Just remember that first public method from the first public class will be executed (with single parameter taken from the input box below the script). …&lt;/li&gt;
    &lt;li&gt;after clicking Run button, the script will be compiled and executed. Additionally, it will be &lt;strong&gt;decompiled both to IL (Intermediate Language) and assembly code&lt;/strong&gt; in the corresponding tabs.&lt;/li&gt;
    &lt;li&gt;all the time Tune is running (including time during script execution) a graph with GC data is being drawn. It shows information about &lt;strong&gt;generation sizes and GC occurrences&lt;/strong&gt; (illustrated as vertical lines with the number below indicating which generation has been triggered).&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;And looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2018/06/TUNE Screenshot.png&quot;&gt;&lt;img src=&quot;/images/2018/06/TUNE Screenshot.png&quot; alt=&quot;TUNE Screenshot&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;Click for larger version&lt;/strong&gt;)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;tools-based-on-clr-memory-diagnostics-clrmd&quot;&gt;Tools based on CLR Memory Diagnostics (ClrMD)&lt;/h2&gt;

&lt;p&gt;Finally, we’re going to look at a particular category of tools. Since .NET came out you’ve always been able to use &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/getting-started-with-windbg&quot;&gt;WinDBG&lt;/a&gt; and the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension&quot;&gt;SOS Debugging Extension&lt;/a&gt; to get deep into the .NET runtime. However it’s not always the easiest tool to &lt;strong&gt;get started with&lt;/strong&gt; and as this tweet says, it’s not always the most &lt;strong&gt;productive&lt;/strong&gt; way to do things:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Besides how complex it is, the idea is to build better abstractions. Raw debugging at the low level is just usually too unproductive. That to me is the promise of ClrMD, that it lets us build specific extensions to extract quickly the right info&lt;/p&gt;&amp;mdash; Tomas Restrepo (@tomasrestrepo) &lt;a href=&quot;https://twitter.com/tomasrestrepo/status/973924168365498370?ref_src=twsrc%5Etfw&quot;&gt;March 14, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Fortunately Microsoft made the &lt;a href=&quot;/2016/09/06/Analysing-.NET-Memory-Dumps-with-CLR-MD/&quot;&gt;ClrMD library available&lt;/a&gt; (a.k.a &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Diagnostics.Runtime&quot;&gt;Microsoft.Diagnostics.Runtime&lt;/a&gt;), so now anyone can write a tool that analyses &lt;strong&gt;memory dumps&lt;/strong&gt; of .NET programs. You can find out even more info in the &lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2013/05/01/net-crash-dump-and-live-process-inspection/&quot;&gt;official blog post&lt;/a&gt; and I also recommend taking a look at &lt;a href=&quot;https://github.com/JeffCyr/ClrMD.Extensions&quot;&gt;ClrMD.Extensions&lt;/a&gt; that “&lt;em&gt;.. provide integration with LINPad and to make ClrMD even more easy to use&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;I wanted to pull together a list of all the existing tools, so I enlisted &lt;a href=&quot;https://twitter.com/matthewwarren/status/973940550473797633&quot;&gt;twitter to help&lt;/a&gt;. &lt;strong&gt;Note to self&lt;/strong&gt;: careful what you tweet, the WinDBG Product Manager might read your tweets and &lt;a href=&quot;https://twitter.com/aluhrs13/status/973948038380109824&quot;&gt;get a bit upset&lt;/a&gt;!!&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Well this just hurts my feelings :(&lt;/p&gt;&amp;mdash; Andy Luhrs (@aluhrs13) &lt;a href=&quot;https://twitter.com/aluhrs13/status/973948038380109824?ref_src=twsrc%5Etfw&quot;&gt;March 14, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Most of these tools are based on ClrMD because it’s the easiest way to do things, however you can use the &lt;a href=&quot;https://twitter.com/goldshtn/status/973941389791809540&quot;&gt;underlying COM interfaces directly&lt;/a&gt; if you want. Also, it’s worth pointing out that any tool based on ClrMD is &lt;strong&gt;not cross-platform&lt;/strong&gt;, because &lt;a href=&quot;https://twitter.com/goldshtn/status/973942794296406017&quot;&gt;ClrMD itself is Windows-only&lt;/a&gt;. For cross-platform options see &lt;a href=&quot;http://blogs.microsoft.co.il/sasha/2017/02/26/analyzing-a-net-core-core-dump-on-linux/&quot;&gt;Analyzing a .NET Core Core Dump on Linux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, in the interest of balance, there have been lots of recent &lt;a href=&quot;https://blogs.msdn.microsoft.com/windbg/2017/08/28/new-windbg-available-in-preview/&quot;&gt;improvements to WinDBG&lt;/a&gt; and because it’s extensible there have been various efforts to add functionality to it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://labs.criteo.com/2017/09/extending-new-windbg-part-1-buttons-commands/&quot;&gt;Extending the new WinDbg, Part 1 – Buttons and commands&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://labs.criteo.com/2018/01/extending-new-windbg-part-2-tool-windows-command-output/&quot;&gt;Extending the new WinDbg, Part 2 – Tool windows and command output&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://labs.criteo.com/2018/05/extending-new-windbg-part-3-embedding-c-interpreter/&quot;&gt;Extending the new WinDbg, Part 3 – Embedding a C# interpreter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/chrisnas/DebuggingExtensions&quot;&gt;WinDBG extension + UI tool extensions&lt;/a&gt; and &lt;a href=&quot;https://github.com/kevingosse/windbg-extensions&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rodneyviana/netext&quot;&gt;NetExt&lt;/a&gt; a WinDBG application that &lt;a href=&quot;https://blogs.msdn.microsoft.com/rodneyviana/2015/03/10/getting-started-with-netext/&quot;&gt;makes .NET debugging much easier&lt;/a&gt; as compared to the current options: sos or psscor, also see &lt;a href=&quot;https://www.infoq.com/news/2013/11/netext&quot;&gt;this InfoQ article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Having said all that, onto the list&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/ChristophNeumller/large-scale-crash-dump-analysis-with-superdump&quot;&gt;SuperDump&lt;/a&gt; (&lt;a href=&quot;https://github.com/Dynatrace/superdump&quot;&gt;GitHub&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;A service for automated crash-dump analysis (&lt;a href=&quot;https://www.slideshare.net/ChristophNeumller/large-scale-crash-dump-analysis-with-superdump&quot;&gt;presentation&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/goldshtn/msos/wiki&quot;&gt;msos&lt;/a&gt; (&lt;a href=&quot;https://github.com/goldshtn/msos&quot;&gt;GitHub&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;Command-line environment a-la WinDbg for executing SOS commands without having SOS available.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fremag/MemoScope.Net/wiki&quot;&gt;MemoScope.Net&lt;/a&gt; (&lt;a href=&quot;https://github.com/fremag/MemoScope.Net&quot;&gt;GitHub&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;A tool to analyze .Net process memory Can dump an application’s memory in a file and read it later.&lt;/li&gt;
      &lt;li&gt;The dump file contains all data (objects) and threads (state, stack, call stack). MemoScope.Net will analyze the data and help you to find memory leaks and deadlocks&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/0xd4d/dnSpy#dnspy&quot;&gt;dnSpy&lt;/a&gt; (&lt;a href=&quot;https://github.com/0xd4d/dnSpy&quot;&gt;GitHub&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;.NET debugger and assembly editor&lt;/li&gt;
      &lt;li&gt;You can use it to edit and debug assemblies even if you don’t have any source code available!!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aloiskraus.wordpress.com/2017/08/17/memanalyzer-v2-5-released/&quot;&gt;MemAnalyzer&lt;/a&gt; (&lt;a href=&quot;https://github.com/Alois-xx/MemAnalyzer&quot;&gt;GitHub&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;A command line memory analysis tool for managed code.&lt;/li&gt;
      &lt;li&gt;Can show which objects use most space on the managed heap just like &lt;code class=&quot;highlighter-rouge&quot;&gt;!DumpHeap&lt;/code&gt; from Windbg without the need to install and attach a debugger.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mycodingplace.wordpress.com/2016/11/24/dumpminer-ui-tool-for-playing-with-clrmd/&quot;&gt;DumpMiner&lt;/a&gt; (&lt;a href=&quot;https://github.com/dudikeleti/DumpMiner&quot;&gt;GitHub&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;UI tool for playing with ClrMD, with more features &lt;a href=&quot;https://twitter.com/dudi_ke/status/973930633935409153&quot;&gt;coming soon&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://devops.lol/tracecli-a-production-debugging-and-tracing-tool/&quot;&gt;Trace CLI&lt;/a&gt; (&lt;a href=&quot;https://github.com/ruurdk/TraceCLI/&quot;&gt;GitHub&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;A production debugging and tracing tool&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/enkomio/shed&quot;&gt;Shed&lt;/a&gt; (&lt;a href=&quot;https://github.com/enkomio/shed&quot;&gt;GitHub&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;Shed is an application that allow to inspect the .NET runtime of a program in order to extract useful information. It can be used to inspect malicious applications in order to have a first general overview of which information are stored once that the malware is executed. Shed is able to:
        &lt;ul&gt;
          &lt;li&gt;Extract all objects stored in the managed heap&lt;/li&gt;
          &lt;li&gt;Print strings stored in memory&lt;/li&gt;
          &lt;li&gt;Save the snapshot of the heap in a JSON format for post-processing&lt;/li&gt;
          &lt;li&gt;Dump all modules that are loaded in memory&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also find many other tools that &lt;a href=&quot;https://github.com/search?p=2&amp;amp;q=CLRMD&amp;amp;type=Repositories&amp;amp;utf8=%E2%9C%93&quot;&gt;make use of ClrMD&lt;/a&gt;, it was a very good move by Microsoft to make it available.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;other-tools&quot;&gt;Other Tools&lt;/h2&gt;

&lt;p&gt;A few other tools that are also worth mentioning:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.microsoft.com/en-gb/help/2895198/debug-diagnostics-tool-v2-0-is-now-available&quot;&gt;DebugDiag&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;The DebugDiag tool is designed to assist in troubleshooting issues such as hangs, slow performance, memory leaks or memory fragmentation, and crashes in any user-mode process (now with ‘CLRMD Integration’)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.stevestechspot.com/SOSEXANewDebuggingExtensionForManagedCode.aspx&quot;&gt;SOSEX&lt;/a&gt; (might not be &lt;a href=&quot;https://twitter.com/tomasrestrepo/status/974049014244171776&quot;&gt;developed any more&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;… a debugging extension for managed code that begins to alleviate some of my frustrations with SOS&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/downloads/vmmap&quot;&gt;VMMap&lt;/a&gt; from Sysinternals
    &lt;ul&gt;
      &lt;li&gt;VMMap is a process virtual and physical memory analysis utility.&lt;/li&gt;
      &lt;li&gt;I’ve previously used it to look at &lt;a href=&quot;/2017/07/10/Memory-Usage-Inside-the-CLR/&quot;&gt;Memory Usage &lt;em&gt;Inside&lt;/em&gt; the CLR&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=17323911&quot;&gt;Hacker News&lt;/a&gt; or &lt;a href=&quot;https://www.reddit.com/r/programming/comments/8rel9m/tools_for_exploring_net_internals/&quot;&gt;/r/programming&lt;/a&gt;&lt;/p&gt;

     
     
     
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
 </entry>
 
 <entry>
   <title>CoreRT - A .NET Runtime for AOT</title>
   <link href="http://www.mattwarren.org/2018/06/07/CoreRT-.NET-Runtime-for-AOT/"/>
   <updated>2018-06-07T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2018/06/07/CoreRT-.NET-Runtime-for-AOT</id>
   <content type="html">
     &lt;p&gt;Firstly, what exactly is &lt;strong&gt;CoreRT&lt;/strong&gt;? From &lt;a href=&quot;https://github.com/dotnet/corert&quot;&gt;its GitHub repo&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;.. a .NET Core runtime optimized for AOT (ahead of time compilation) scenarios, with the accompanying .NET native compiler toolchain&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The rest of this post will look at what that actually means.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;contents&quot;&gt;Contents&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#existing&quot;&gt;Existing .NET ‘AOT’ Implementations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#highlevel&quot;&gt;High-Level Overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#compiler&quot;&gt;The Compiler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#runtime&quot;&gt;The Runtime&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#helloworld&quot;&gt;‘Hello World’ Program&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#limitations&quot;&gt;Limitations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#furtherreading&quot;&gt;Further Reading&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&quot;existing&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&quot;existing-net-aot-implementations&quot;&gt;Existing .NET ‘AOT’ Implementations&lt;/h1&gt;

&lt;p&gt;However, before we look at what &lt;strong&gt;CoreRT&lt;/strong&gt; is, it’s worth pointing out there are existing .NET ‘Ahead-of-Time’ (AOT) implementations that have been around for a while:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mono&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://tirania.org/blog/archive/2006/Aug-17.html&quot;&gt;Ahead of Time Compilation in Mono&lt;/a&gt; (August 2006)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mono-project.com/docs/advanced/aot/&quot;&gt;Mono Docs - AOT&lt;/a&gt; (also see &lt;a href=&quot;http://www.mono-project.com/docs/advanced/runtime/docs/aot/&quot;&gt;this link&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xamarinhelp.com/xamarin-android-aot-works/&quot;&gt;How Xamarin.Android AOT Works&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/xamarin/ios/internals/architecture#aot&quot;&gt;Xamarin.iOS - Architecture - AOT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;.NET Native&lt;/strong&gt; (Windows 10/UWP apps only, a.k.a &lt;a href=&quot;https://www.zdnet.com/article/microsoft-releases-a-preview-build-of-its-mysterious-project-n/&quot;&gt;‘Project N’&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2014/04/02/announcing-net-native-preview/&quot;&gt;Announcing .NET Native Preview&lt;/a&gt; (April 2014)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2014/05/09/the-net-native-tool-chain/&quot;&gt;The .NET Native Tool-Chain&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/tag/dotnetnative/&quot;&gt;Archive of ‘.NET Native’ Blogs Posts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/net-native/&quot;&gt;Compiling Apps with .NET Native&lt;/a&gt; (docs)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.windows.com/buildingapps/2015/08/20/net-native-what-it-means-for-universal-windows-platform-uwp-developers/&quot;&gt;.NET Native – What it means for Universal Windows Platform (UWP) developers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.microsoft.co.il/sasha/2014/04/28/net-native-performance-internals/&quot;&gt;Introduction to .NET Native&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So if there were existing implementations, why was CoreRT created? The &lt;a href=&quot;https://blogs.msdn.microsoft.com/alphageek/2016/10/13/native-compilation-why-jit-when-you-can-codegen/&quot;&gt;official announcement&lt;/a&gt; gives us some idea:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If we want to shortcut this two-step compilation process and deliver a 100% native application on Windows, Mac, and Linux, we need an alternative to the CLR. The project that is aiming to deliver that solution with an ahead-of-time compilation process is called CoreRT.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The main difference is that CoreRT is designed to support &lt;strong&gt;.NET Core scenarios&lt;/strong&gt;, i.e. &lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2016/09/26/introducing-net-standard/&quot;&gt;.NET Standard&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/corert#platform-support&quot;&gt;cross-platform&lt;/a&gt;, etc.&lt;/p&gt;

&lt;p&gt;Also worth pointing out is that whilst &lt;strong&gt;.NET Native&lt;/strong&gt; is a separate product, they are related and in fact &lt;a href=&quot;https://github.com/dotnet/corert/issues/5780#issuecomment-387103170&quot;&gt;“.NET Native shares many CoreRT parts”&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&quot;highlevel&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&quot;high-level-overview&quot;&gt;High-Level Overview&lt;/h1&gt;

&lt;p&gt;Because all the code is open source, we can very easily identify the main components and understand where the complexity is. Firstly lets look at where the most ‘&lt;strong&gt;lines of code&lt;/strong&gt;’ are:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2018/06/Source Code - LOC in Main Components.png&quot;&gt;&lt;img src=&quot;/images/2018/06/Source Code - LOC in Main Components.png&quot; alt=&quot;Source Code - LOC in Main Components&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We clearly see that the majority of the code is written in C#, with only the &lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/Native&quot;&gt;Native&lt;/a&gt; component written in C++. The largest single component is &lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/System.Private.CoreLib&quot;&gt;System.Private.CoreLib&lt;/a&gt; which is all C# code, although there are other sub-components that contribute to it (‘System.Private.XXX’), such as &lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/System.Private.Interop/src&quot;&gt;System.Private.Interop&lt;/a&gt; (36,547 LOC), &lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/System.Private.TypeLoader&quot;&gt;System.Private.TypeLoader&lt;/a&gt; (30,777) and &lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/System.Private.Reflection.Core/src&quot;&gt;System.Private.Reflection.Core&lt;/a&gt; (24,964). Other significant components are the &lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/ILCompiler&quot;&gt;‘Intermediate Language (IL) Compiler’&lt;/a&gt; and the &lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/Common&quot;&gt;Common code&lt;/a&gt; that is used re-used by everything else.&lt;/p&gt;

&lt;p&gt;All these components are discussed in more detail below.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&quot;compiler&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&quot;the-compiler&quot;&gt;The Compiler&lt;/h1&gt;

&lt;p&gt;So whilst CoreRT is a run-time, it also needs a compiler to put everything together, from &lt;a href=&quot;https://github.com/dotnet/corert/blob/master/Documentation/intro-to-corert.md&quot;&gt;Intro to .NET Native and CoreRT&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/library/dn584397.aspx&quot;&gt;.NET Native&lt;/a&gt; is a native toolchain that compiles &lt;a href=&quot;https://en.wikipedia.org/wiki/Common_Intermediate_Language&quot;&gt;CIL byte code&lt;/a&gt; to machine code (e.g. X64 instructions). By default, .NET Native (for .NET Core, as opposed to UWP) uses RyuJIT as an ahead-of-time (AOT) compiler, the same one that CoreCLR uses as a just-in-time (JIT) compiler. It can also be used with other compilers, such as &lt;a href=&quot;https://github.com/dotnet/llilc&quot;&gt;LLILC&lt;/a&gt;, UTC for UWP apps and &lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/ILCompiler.CppCodeGen/src/CppCodeGen&quot;&gt;IL to CPP&lt;/a&gt; (an IL to textual C++ compiler we have built as a reference prototype).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But what does this actually look like in practice, as they say ‘&lt;em&gt;a picture paints a thousand words&lt;/em&gt;’:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2018/06/CoreRT - compilation process.png&quot;&gt;&lt;img src=&quot;/images/2018/06/CoreRT - compilation process.png&quot; alt=&quot;CoreRT - compilation process&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;Click for larger version&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;To give more detail, the main compilation phases (started from &lt;a href=&quot;https://github.com/dotnet/corert/blob/39f518734c7712241ff332bce6c2f3585b7a5a42/src/ILCompiler/src/Program.cs#L218-L548&quot;&gt;\ILCompiler\src\Program.cs&lt;/a&gt;) are the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Calculate the &lt;strong&gt;reachable modules/types/classes&lt;/strong&gt;, i.e. the &lt;a href=&quot;https://github.com/dotnet/corert/blob/39f518734c7712241ff332bce6c2f3585b7a5a42/src/ILCompiler/src/Program.cs#L315-L393&quot;&gt;‘compilation roots’&lt;/a&gt; using the &lt;a href=&quot;https://github.com/dotnet/corert/blob/b2068273c52ca7392bb5ca3aac4299c007d9a743/src/ILCompiler.Compiler/src/Compiler/ILScanner.cs&quot;&gt;ILScanner.cs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Allow for &lt;strong&gt;reflection&lt;/strong&gt;, via an &lt;a href=&quot;https://github.com/dotnet/corert/blob/39f518734c7712241ff332bce6c2f3585b7a5a42/src/ILCompiler/src/Program.cs#L387-L392&quot;&gt;optional rd.xml file&lt;/a&gt; and generate the &lt;a href=&quot;https://github.com/dotnet/corert/blob/39f518734c7712241ff332bce6c2f3585b7a5a42/src/ILCompiler/src/Program.cs#L417-L456&quot;&gt;necessary metadata&lt;/a&gt; using &lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/ILCompiler.MetadataWriter&quot;&gt;ILCompiler.MetadataWriter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Compile the IL&lt;/strong&gt; using the specific back-end (generic/shared code is in  &lt;a href=&quot;https://github.com/dotnet/corert/blob/master/src/ILCompiler.Compiler/src/Compiler/Compilation.cs&quot;&gt;Compilation.cs&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;RyuJIT &lt;a href=&quot;https://github.com/dotnet/corert/blob/master/src/ILCompiler.Compiler/src/Compiler/RyuJitCompilation.cs&quot;&gt;RyuJitCompilation.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Web Assembly (WASM) &lt;a href=&quot;https://github.com/dotnet/corert/blob/master/src/ILCompiler.WebAssembly/src/Compiler/WebAssemblyCodegenCompilation.cs&quot;&gt;WebAssemblyCodegenCompilation.cs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;C++ Code &lt;a href=&quot;https://github.com/dotnet/corert/blob/master/src/ILCompiler.CppCodeGen/src/Compiler/CppCodegenCompilation.cs&quot;&gt;CppCodegenCompilation.cs&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Finally, &lt;strong&gt;write out&lt;/strong&gt; the &lt;a href=&quot;https://github.com/dotnet/corert/blob/39f518734c7712241ff332bce6c2f3585b7a5a42/src/ILCompiler/src/Program.cs#L488-L499&quot;&gt;compiled methods&lt;/a&gt; using &lt;a href=&quot;https://github.com/dotnet/corert/blob/master/src/ILCompiler.Compiler/src/Compiler/DependencyAnalysis/ObjectWriter.cs&quot;&gt;ObjectWriter&lt;/a&gt; which in turn uses &lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/Native/ObjWriter&quot;&gt;LLVM under-the-hood&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But it’s not just your code that ends up in the final .exe, along the way the CoreRT compiler also generates several ‘helper methods’ to cover the following scenarios:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;IL Code&lt;/strong&gt; (&lt;a href=&quot;https://github.com/dotnet/corert/search?p=2&amp;amp;q=%22public+override+MethodIL+EmitIL%28%29%22&amp;amp;unscoped_q=%22public+override+MethodIL+EmitIL%28%29%22&quot;&gt;via the ‘EmitIL()’ method&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/blob/dfcd12f92c37d7533dcf7a48e9ab16295d84cf31/src/Common/src/TypeSystem/IL/Stubs/DelegateThunks.cs#L108&quot;&gt;Delegates&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/blob/bd7692c6ab69079fdaa543a0964fc0c1ebb17284/src/Common/src/TypeSystem/IL/Stubs/DelegateMarshallingMethodThunk.cs#L226&quot;&gt;P/Invoke Delegates&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/blob/61c403456e3199d4ef5098aa48f43cd79fb7feed/src/Common/src/TypeSystem/Interop/IL/InlineArrayType.cs#L328&quot;&gt;Inlined Array methods&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/blob/61c403456e3199d4ef5098aa48f43cd79fb7feed/src/ILCompiler.Compiler/src/Compiler/CompilerTypeSystemContext.BoxedTypes.cs#L440&quot;&gt;Boxing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/blob/dfcd12f92c37d7533dcf7a48e9ab16295d84cf31/src/Common/src/TypeSystem/IL/Stubs/DynamicInvokeMethodThunk.cs#L293&quot;&gt;Dynamically Invoked methods&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/blob/da332710edc5387a79e298aa97f21e1feac56ceb/src/Common/src/TypeSystem/IL/Stubs/EnumThunks.cs#L80&quot;&gt;Enum GetHashCode()&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/blob/da332710edc5387a79e298aa97f21e1feac56ceb/src/Common/src/TypeSystem/IL/Stubs/AssemblyGetExecutingAssemblyMethodThunk.cs#L58&quot;&gt;Assembly GetExecutingAssembly()&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Assembly Code&lt;/strong&gt; (&lt;a href=&quot;https://github.com/dotnet/corert/search?q=%22override+void+EmitCode%28%22&amp;amp;unscoped_q=%22override+void+EmitCode%28%22&quot;&gt;via the ‘EmitCode()’ method&lt;/a&gt;) (different implementaions for each CPU architecure)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/blob/b68c08e3ce8c7647cd6b8954f625aae4c706bd33/src/ILCompiler.Compiler/src/Compiler/DependencyAnalysis/Target_X64/X64UnboxingStubNode.cs#L11&quot;&gt;Unboxing&lt;/a&gt; (x64)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/blob/5314ca27fbd6ca56c467d710c25e1e614ad5d625/src/ILCompiler.Compiler/src/Compiler/DependencyAnalysis/Target_ARM64/ARM64JumpStubNode.cs#L11&quot;&gt;Jump Stubs&lt;/a&gt; (ARM64)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/blob/1f3d243d7b39c53e6bfb3cc81a25227d1b0dfb2e/src/ILCompiler.Compiler/src/Compiler/DependencyAnalysis/Target_X64/X64ReadyToRunGenericHelperNode.cs#L62&quot;&gt;‘Ready to Run’ Generic helper&lt;/a&gt; (x86)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fortunately the compiler doesn’t blindly include all the code it finds, it is intelligent enough to &lt;a href=&quot;https://github.com/dotnet/corert/issues/5564#issuecomment-375625357&quot;&gt;only include code that’s actually used&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We don’t use ILLinker, but everything gets naturally treeshaken by the compiler itself (we start with compiling &lt;code class=&quot;highlighter-rouge&quot;&gt;Main&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;NativeCallable&lt;/code&gt; exports and continue compiling other methods and generating necessary data structures as we go). If there’s a type or method that is not used, the compiler doesn’t even look at it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&quot;runtime&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&quot;the-runtime&quot;&gt;The Runtime&lt;/h1&gt;

&lt;p&gt;All the user/helper code then sits on-top of the &lt;strong&gt;CoreRT runtime&lt;/strong&gt;, from &lt;a href=&quot;https://github.com/dotnet/corert/blob/master/Documentation/intro-to-corert.md&quot;&gt;Intro to .NET Native and CoreRT&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;CoreRT is the .NET Core runtime that is optimized for AOT scenarios, which .NET Native targets. &lt;strong&gt;This is a refactored and layered runtime&lt;/strong&gt;. The base is a small native execution engine that provides services such as garbage collection(GC). &lt;strong&gt;This is the same GC used in CoreCLR&lt;/strong&gt;. Many other parts of the traditional .NET runtime, such as the type system, are implemented in C#. &lt;strong&gt;We’ve always wanted to implement runtime functionality in C#&lt;/strong&gt;. We now have the infrastructure to do that. In addition, library implementations that were built deep into CoreCLR, have also been cleanly refactored and implemented as C# libraries.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This last point is interesting, why is it advantageous to implement ‘runtime functionality in C#’? Well it turns out that it’s hard to do in an un-managed language because there’s some very subtle and hard-to-track-down ways that you can get it wrong:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Reliability and performance. The C/C++ code has to manually managed. It means that one has to be very careful to report all GC references to the GC. The manually managed code is both very hard to get right and it has performance overhead.&lt;/p&gt;&amp;mdash; Jan Kotas (@JanKotas7) &lt;a href=&quot;https://twitter.com/JanKotas7/status/988622367973720064?ref_src=twsrc%5Etfw&quot;&gt;April 24, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;These are known as ‘GC Holes’ and the BOTR provides &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/coding-guidelines/clr-code-guide.md#2.1&quot;&gt;more detail on them&lt;/a&gt;. The author of that tweet is significant, Jan Kotas has worked on the .NET runtime &lt;a href=&quot;https://channel9.msdn.com/Blogs/funkyonex/Happy-Birthday-NET-with-Jan-Kotas&quot;&gt;for a long time&lt;/a&gt;, if he thinks something is hard, it really is!!&lt;/p&gt;

&lt;h2 id=&quot;runtime-components&quot;&gt;Runtime Components&lt;/h2&gt;

&lt;p&gt;As previously mentioned it’s a &lt;em&gt;layered runtime&lt;/em&gt;, i.e made up of several, distinct components, as explained in &lt;a href=&quot;https://github.com/dotnet/corert/issues/5523#issuecomment-374229675&quot;&gt;this comment&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;At the core of CoreRT, there’s a runtime that provides basic services for the code to run (think: garbage collection, exception handling, stack walking)&lt;/strong&gt;. This runtime is pretty small and mostly depends on C/C++ runtime (even the C++ runtime dependency is not a hard requirement as Jan pointed out - &lt;a href=&quot;https://github.com/dotnet/corert/issues/3564&quot;&gt;#3564&lt;/a&gt;). This code mostly lives in &lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/Native/Runtime&quot;&gt;src/Native/Runtime&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/Native/gc&quot;&gt;src/Native/gc&lt;/a&gt;, and &lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/Runtime.Base&quot;&gt;src/Runtime.Base&lt;/a&gt;. It’s structured so that the places that &lt;em&gt;do require&lt;/em&gt; interacting with the underlying platform (allocating native memory, threading, etc.) go through a platform abstraction layer (PAL). We have a PAL for Windows, Linux, and macOS, but others can be added.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And you can see the &lt;strong&gt;PAL Components&lt;/strong&gt; in the following locations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/Native/Runtime/windows&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/Native/Runtime/unix&quot;&gt;Unix&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;MacOS &lt;a href=&quot;https://github.com/dotnet/corert/search?utf8=%E2%9C%93&amp;amp;q=%23ifdef+__APPLE__&amp;amp;type=&quot;&gt;‘Apple’&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/corert/search?utf8=%E2%9C%93&amp;amp;q=OSX&amp;amp;type=&quot;&gt;‘OSX’&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;c-code-shared-with-coreclr&quot;&gt;C# Code shared with CoreCLR&lt;/h2&gt;

&lt;p&gt;One interesting aspect of the CoreRT runtime is that wherever possible it shares code with the &lt;a href=&quot;https://github.com/dotnet/coreclr&quot;&gt;CoreCLR runtime&lt;/a&gt;, this is part of a larger effort to ensure that wherever possible code is shared across &lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/System.Private.CoreLib/shared&quot;&gt;multiple repositories&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This directory contains the shared sources for System.Private.CoreLib. These are shared between &lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/System.Private.CoreLib/shared&quot;&gt;dotnet/corert&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/mscorlib/shared&quot;&gt;dotnet/coreclr&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/corefx/tree/master/src/Common/src/CoreLib&quot;&gt;dotnet/corefx&lt;/a&gt;.
The sources are synchronized with a mirroring tool that watches for new commits on either side and creates new pull requests (as @dotnet-bot) in the other repository.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Recently there has been a significant amount of work done to moved more and more code over into the ‘shared partition’ to ensure work isn’t duplicated and any fixes are shared across both locations. You can see how this works by looking at the links below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CoreRT
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/search?q=shared+partition&amp;amp;type=Commits&amp;amp;utf8=%E2%9C%93&quot;&gt;‘shared partition’ commits&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/System.Private.CoreLib/src&quot;&gt;Normal System.Private.Corelib&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/System.Private.CoreLib/shared&quot;&gt;Shared System.Private.Corelib&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CoreCLR
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/search?utf8=%E2%9C%93&amp;amp;q=%22shared+partition%22&amp;amp;type=Commits&quot;&gt;‘shared partition’ commits&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/mscorlib/src&quot;&gt;Normal mscorlib&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/mscorlib/shared&quot;&gt;Shared mscorlib&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What this means is that about 2/3 of the C# code in &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Private.CoreLib&lt;/code&gt; is shared with &lt;code class=&quot;highlighter-rouge&quot;&gt;CoreCLR&lt;/code&gt; and only 1/3 is unique to &lt;code class=&quot;highlighter-rouge&quot;&gt;CoreRT&lt;/code&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Group&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;C# LOC (Files)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/System.Private.CoreLib/shared&quot;&gt;shared&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;170,106 (759)&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/System.Private.CoreLib/src&quot;&gt;src&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;96,733 (351)&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;266,839 (1,110)&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;native-code&quot;&gt;Native Code&lt;/h2&gt;

&lt;p&gt;Finally, whilst it is advantageous to write as much code as possible in C#, there are certain components that have to be written in C++, these include the &lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/Native/gc&quot;&gt;&lt;strong&gt;GC&lt;/strong&gt;&lt;/a&gt; (the majority of which is one file, &lt;a href=&quot;https://github.com/dotnet/corert/blob/master/src/Native/gc/gc.cpp&quot;&gt;gc.cpp&lt;/a&gt; which is almost 37,000 LOC!!), the &lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/Native/jitinterface&quot;&gt;&lt;strong&gt;JIT Interface&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/Native/ObjWriter&quot;&gt;&lt;strong&gt;ObjWriter&lt;/strong&gt;&lt;/a&gt; (based on LLVM) and most significantly the &lt;strong&gt;&lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/Native/Runtime&quot;&gt;Core Runtime&lt;/a&gt;&lt;/strong&gt; that contains code for activities like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Threading&lt;/li&gt;
  &lt;li&gt;Stack Frame handling&lt;/li&gt;
  &lt;li&gt;Debugging/Profiling&lt;/li&gt;
  &lt;li&gt;Interfacing to the OS&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/Native/Runtime/arm64&quot;&gt;CPU specific helpers&lt;/a&gt; for:
    &lt;ul&gt;
      &lt;li&gt;Exception handling&lt;/li&gt;
      &lt;li&gt;GC Write Barriers&lt;/li&gt;
      &lt;li&gt;Stubs/Thunks&lt;/li&gt;
      &lt;li&gt;Optimised object allocation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&quot;helloworld&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&quot;hello-world-program&quot;&gt;‘Hello World’ Program&lt;/h1&gt;

&lt;p&gt;One of the first things people asked about CoreRT is “&lt;em&gt;what is the size of a ‘Hello World’ app&lt;/em&gt;” and the answer is ~3.93 MB (if you compile in Release mode), but there is work &lt;a href=&quot;https://github.com/dotnet/corert/issues/5013&quot;&gt;being done to reduce this&lt;/a&gt;. At a ‘high-level’, the .exe that is produced looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2018/06/Exe Components.png&quot;&gt;&lt;img src=&quot;/images/2018/06/Exe Components.png&quot; alt=&quot;Exe Components&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; the different colours correspond to the original format of a component, obviously the output is a single, native, executable file.&lt;/p&gt;

&lt;p&gt;This file comes with a full .NET specific ‘base runtime’ or ‘class libraries’ (‘System.Private.XXX’) so you get a lot of functionality, it is not the &lt;a href=&quot;https://github.com/dotnet/corert/issues/5523#issuecomment-374229675&quot;&gt;absolute bare-minimum app&lt;/a&gt;. Fortunately there is a way to see what a ‘bare-minimum’ runtime would look like by compiling against the &lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/Test.CoreLib&quot;&gt;Test.CoreLib&lt;/a&gt; project included in the CoreRT source. By using this you end up with an .exe that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2018/06/Exe Components.png&quot;&gt;&lt;img src=&quot;/images/2018/06/Exe Components - Reduced CoreLib.png&quot; alt=&quot;Exe Components - Reduced CoreLib&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But it’s so minimal that OOTB you can’t even write ‘Hello World’ to the console as there is no &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Console&lt;/code&gt; type! After a bit of hacking I was able to build a version that did have a working &lt;code class=&quot;highlighter-rouge&quot;&gt;Console&lt;/code&gt; output (if you’re interested, this diff is &lt;a href=&quot;https://gist.github.com/mattwarren/a248782078d15c4ca2999f986ba7eacb#file-corert-test-corelib-changes-diff&quot;&gt;available here&lt;/a&gt;). To make it work I had to include the following components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/a248782078d15c4ca2999f986ba7eacb#gistcomment-2612860&quot;&gt;System.Console&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/a248782078d15c4ca2999f986ba7eacb#gistcomment-2612864&quot;&gt;System.Text.UnicodeEncoding&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/a248782078d15c4ca2999f986ba7eacb#gistcomment-2612862&quot;&gt;String handling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/a248782078d15c4ca2999f986ba7eacb#gistcomment-2612866&quot;&gt;P/Invoke and Marshalling support&lt;/a&gt; (to call an OS function)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So &lt;code class=&quot;highlighter-rouge&quot;&gt;Test.CoreLib&lt;/code&gt; really is a minimal runtime!! But the difference in size is dramatic, it shrinks down to &lt;strong&gt;0.49 MB&lt;/strong&gt; compared to &lt;strong&gt;3.93 MB&lt;/strong&gt; for the fully-featured runtime!&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Type&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Standard (bytes)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Test.CoreLib (bytes)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Difference&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;.data&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;163,840&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;36,864&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;-126,976&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;.managed&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,540,096&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;65,536&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;-1,474,560&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;.pdata&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;147,456&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;20,480&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;-126,976&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;.rdata&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,712,128&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;81,920&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;-1,630,208&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;.reloc&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;98,304&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4,096&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;-94,208&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;.text&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;360,448&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;299,008&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;-61,440&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;rdata&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;98,304&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4,096&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;-94,208&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Total (bytes)&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4,120,576&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;512,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;-3,608,576&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Total (MB)&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3.93&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.49&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;-3.44&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;These data sizes were obtained by using the Microsoft &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/c1h23y6c.aspx&quot;&gt;DUMPBIN tool&lt;/a&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;/DISASM&lt;/code&gt; cmd line switch (&lt;a href=&quot;/data/2018/06/HelloWorld.disasm.zip&quot;&gt;zip file of the full ouput&lt;/a&gt;), which produces the following summary (note: size values are in HEX):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Summary

       28000 .data
      178000 .managed
       24000 .pdata
      1A2000 .rdata
       18000 .reloc
       58000 .text
       18000 rdata
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also contained in the output is the assembly code for a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello World&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HelloWorld_HelloWorld_Program__Main:
  0000000140004C50: 48 8D 0D 19 94 37  lea         rcx,[__Str_Hello_World__E63BA1FD6D43904697343A373ECFB93457121E4B2C51AF97278C431E8EC85545]
                    00
  0000000140004C57: 48 8D 05 DA C5 00  lea         rax,[System_Console_System_Console__WriteLine_12]
                    00
  0000000140004C5E: 48 FF E0           jmp         rax
  0000000140004C61: 90                 nop
  0000000140004C62: 90                 nop
  0000000140004C63: 90                 nop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and if we dig further we can see the code for &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Console.WriteLine(..)&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;System_Console_System_Console__WriteLine_12:
  0000000140011238: 56                 push        rsi
  0000000140011239: 48 83 EC 20        sub         rsp,20h
  000000014001123D: 48 8B F1           mov         rsi,rcx
  0000000140011240: E8 33 AD FF FF     call        System_Console_System_Console__get_Out
  0000000140011245: 48 8B C8           mov         rcx,rax
  0000000140011248: 48 8B D6           mov         rdx,rsi
  000000014001124B: 48 8B 00           mov         rax,qword ptr [rax]
  000000014001124E: 48 8B 40 68        mov         rax,qword ptr [rax+68h]
  0000000140011252: 48 83 C4 20        add         rsp,20h
  0000000140011256: 5E                 pop         rsi
  0000000140011257: 48 FF E0           jmp         rax
  000000014001125A: 90                 nop
  000000014001125B: 90                 nop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&quot;limitations&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&quot;limitations&quot;&gt;Limitations&lt;/h1&gt;

&lt;h2 id=&quot;missing-functionality&quot;&gt;Missing Functionality&lt;/h2&gt;

&lt;p&gt;There have been some people who’ve successfully run &lt;a href=&quot;https://www.youtube.com/watch?v=iaC67CUmEXs&quot;&gt;complex apps using CoreRT&lt;/a&gt;, but, as it stands CoreRT is still an alpha product. At least according to the &lt;a href=&quot;https://dotnet.myget.org/feed/dotnet-core/package/nuget/Microsoft.DotNet.ILCompiler&quot;&gt;NuGet package ‘1.0.0-alpha-26529-02’&lt;/a&gt; that the official samples &lt;a href=&quot;https://github.com/dotnet/corert/tree/master/samples/HelloWorld&quot;&gt;instruct you to use&lt;/a&gt; and I’ve not seen any information about when a full 1.0 Release will be available.&lt;/p&gt;

&lt;p&gt;So there is some functionality that is not yet implemented, e.g. &lt;a href=&quot;https://github.com/dotnet/corert/issues/5780&quot;&gt;F# Support&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/corert/issues/5680&quot;&gt;GC.GetMemoryInfo&lt;/a&gt; or &lt;a href=&quot;https://github.com/dotnet/corert/issues/5587&quot;&gt;canGetCookieForPInvokeCalliSig&lt;/a&gt; (a &lt;code class=&quot;highlighter-rouge&quot;&gt;calli&lt;/code&gt; to a p/invoke). For more information on this I recommend this entertaining presentation on &lt;a href=&quot;https://vimeo.com/262938007&quot;&gt;Building Native Executables from .NET with CoreRT&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/markrendle&quot;&gt;Mark Rendle&lt;/a&gt;. In the 2nd half he chronicles all the issues that he ran into when he was trying to run an ASP.NET app under CoreRT (some of which may well be fixed now).&lt;/p&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/262938007&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;reflection&quot;&gt;Reflection&lt;/h2&gt;

&lt;p&gt;But more fundamentally, because of the nature of AOT compilation, there are 2 main stumbling blocks that you may also run into &lt;strong&gt;Reflection&lt;/strong&gt; and &lt;strong&gt;Runtime Code-Generation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Firstly, if you want to use reflection in your code you need to tell the CoreRT compiler about the types you expect to &lt;em&gt;reflect&lt;/em&gt; over, because by-default it only includes the types it knows about. You can do with by using a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;rd.xml&lt;/code&gt; as &lt;a href=&quot;https://github.com/dotnet/corert/blob/master/samples/WebApi/README.md#using-reflection&quot;&gt;shown here&lt;/a&gt;. Unfortunately this will always require manual intervention for the reasons &lt;a href=&quot;https://github.com/dotnet/corert/issues/5855#issuecomment-392605646&quot;&gt;explained in this issue&lt;/a&gt;. More information is available in this comment &lt;a href=&quot;https://github.com/Microsoft/visualfsharp/issues/4954#issuecomment-390941777&quot;&gt;‘…some details about CoreRT’s restriction on MakeGenericType and MakeGenericMethod’&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To make reflection work the compiler adds the required metadata to the final .exe &lt;a href=&quot;https://github.com/dotnet/corert/issues/2035#issuecomment-298418885&quot;&gt;using this process&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This would reuse the same scheme we already have for the RyuJIT codegen path:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;The compiler generates a blob of bytes that describes the metadata (namespaces, types, their members, their custom attributes, method parameters, etc.). The data is generated as a byte array in the &lt;a href=&quot;https://github.com/dotnet/corert/blob/79affc5f32c390e7f6a0d61b1446360fbad0ae5f/src/ILCompiler.Compiler/src/Compiler/CompilerGeneratedMetadataManager.cs#L62&quot;&gt;ComputeMetadata method&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;The metadata gets embedded as a data blob into the executable image. This is achieved by &lt;a href=&quot;https://github.com/dotnet/corert/blob/79affc5f32c390e7f6a0d61b1446360fbad0ae5f/src/ILCompiler.Compiler/src/Compiler/MetadataManager.cs#L71&quot;&gt;adding the blob&lt;/a&gt; to a “ready to run header”. Ready to run header is a well known data structure that can be located by the code in the framework at runtime.&lt;/li&gt;
    &lt;li&gt;The ready to run header along with the blobs it refers to is emitted into the final executable.&lt;/li&gt;
    &lt;li&gt;At runtime, pointer to the byte array &lt;a href=&quot;https://github.com/dotnet/corert/blob/79affc5f32c390e7f6a0d61b1446360fbad0ae5f/src/System.Private.TypeLoader/src/Internal/Runtime/TypeLoader/ModuleList.cs#L702&quot;&gt;is located using the RhFindBlob API&lt;/a&gt;, and a parser is constructed over the array, to be used by the reflection stack.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;runtime-code-generation&quot;&gt;Runtime Code-Generation&lt;/h2&gt;

&lt;p&gt;In .NET you often use reflection once (because it &lt;a href=&quot;/2016/12/14/Why-is-Reflection-slow/&quot;&gt;can be slow&lt;/a&gt;) followed by &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation&quot;&gt;‘dynamic’ or ‘runtime’ code-generation&lt;/a&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;Reflection.Emit(..)&lt;/code&gt;. This technique is widely using in .NET libraries for Serialisation/Deserialisation, Dependency Injection, Object Mapping and ORM.&lt;/p&gt;

&lt;p&gt;The issue is that ‘runtime’ code generation is &lt;a href=&quot;https://github.com/dotnet/corert/issues/5720#issuecomment-382084927&quot;&gt;problematic in an ‘AOT’ scenario&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ASP.NET dependency injection introduced dependency on Reflection.Emit in &lt;a href=&quot;https://github.com/aspnet/DependencyInjection/pull/630&quot;&gt;aspnet/DependencyInjection#630&lt;/a&gt; unfortunately. It makes it incompatible with CoreRT.&lt;/p&gt;

  &lt;p&gt;We can make it functional in CoreRT AOT environment by introducing IL interpretter (&lt;a href=&quot;https://github.com/dotnet/corert/issues/5011&quot;&gt;#5011&lt;/a&gt;), but it would still perform poorly. The dependency injection framework is using Reflection.Emit on performance critical paths.&lt;/p&gt;

  &lt;p&gt;It would be really up to ASP.NET to provide AOT-friendly flavor that generates all code at build time instead of runtime to make this work well. It would likely help the startup without CoreRT as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m sure this will be solved one way or the other (see &lt;a href=&quot;https://github.com/dotnet/corert/issues/5011&quot;&gt;#5011&lt;/a&gt;), but at the moment it’s still ‘work-in-progress’.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=17261117&quot;&gt;HackerNews&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/dotnet/comments/8pdt98/corert_a_net_runtime_for_aot_performance_is_a/&quot;&gt;/r/dotnet&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&quot;furtherreading&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h1&gt;

&lt;p&gt;If you’ve got this far, here’s some other links that you might be interested in:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/34665026/whats-the-difference-between-net-coreclr-corert-roslyn-and-llilc/35044525#35044525&quot;&gt;What’s the difference between .NET CoreCLR, CoreRT, Roslyn and LLILC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.rendle.io/what-ive-learned-about-dotnet-native/&quot;&gt;What I’ve learned about .NET Native&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Shows/On-NET/Mei-Chin-Tsai--Jan-Kotas-CoreRT--NET-Native&quot;&gt;Channel 9 - CoreRT &amp;amp; .NET Native&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Shows/Going+Deep/Inside-NET-Native&quot;&gt;Channel 9 - Going Deep - Inside .NET Native&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/blob/master/Documentation/how-to-build-and-run-ilcompiler-in-visual-studio.md&quot;&gt;Building ILCompiler in Visual Studio 2017&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/blob/master/Documentation/botr/type-system.md&quot;&gt;Type System Overview (botr)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/blob/master/Documentation/design-docs/typesystem/TypeSystemInterfacesApi.md&quot;&gt;Interfaces API surface on Type System&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xamarinhelp.com/xamarin-android-aot-works/&quot;&gt;How Xamarin.Android AOT Works&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.unity3d.com/2015/05/06/an-introduction-to-ilcpp-internals/&quot;&gt;An introduction to IL2CPP internals&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.microsoft.co.il/sasha/2014/04/28/net-native-performance-internals/&quot;&gt;.NET Native Performance and Internals&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.microsoft.co.il/sasha/2018/02/08/dynamic-tracing-of-net-core-methods/&quot;&gt;Dynamic Tracing of .NET Core Methods&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mono-project.com/docs/advanced/runtime/docs/gsharedvt/&quot;&gt;Generic sharing for valuetypes&lt;/a&gt; (Mono)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ntcore.com/Files/netint_native.htm&quot;&gt;.NET Internals and Native Compiling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

     
     
     
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
     <category term='AOT' scheme='http://www.mattwarren.org/tags#AOT'/>
   
 </entry>
 
 <entry>
   <title>Taking a look at the ECMA-335 Standard for .NET</title>
   <link href="http://www.mattwarren.org/2018/04/06/Taking-a-look-at-the-ECMA-335-Standard-for-.NET/"/>
   <updated>2018-04-06T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2018/04/06/Taking-a-look-at-the-ECMA-335-Standard-for-.NET</id>
   <content type="html">
     &lt;p&gt;It turns out that the .NET Runtime has a &lt;em&gt;technical standard&lt;/em&gt; (or &lt;em&gt;specification&lt;/em&gt;), known by its full name &lt;strong&gt;ECMA-335 - Common Language Infrastructure (CLI)&lt;/strong&gt; (not to be confused with &lt;a href=&quot;https://www.ecma-international.org/publications/standards/Ecma-334.htm&quot;&gt;ECMA-334&lt;/a&gt; which is the &lt;em&gt;‘C# Language Specification’&lt;/em&gt;). The latest update is the &lt;a href=&quot;https://www.ecma-international.org/publications/standards/Ecma-335.htm&quot;&gt;6th edition from June 2012&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The specification or standard was written before &lt;a href=&quot;https://www.microsoft.com/net/learn/get-started/windows&quot;&gt;.NET Core&lt;/a&gt; existed, so only applies to the &lt;a href=&quot;https://www.microsoft.com/net/download/dotnet-framework-runtime&quot;&gt;.NET Framework&lt;/a&gt;, I’d be interested to know if there are any plans for an updated version?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The rest of this post will take a look at the standard, exploring the contents and investigating what we can learn from it (hint: lots of &lt;em&gt;low-level details&lt;/em&gt; and information about .NET &lt;em&gt;internals&lt;/em&gt;)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;why-is-it-useful&quot;&gt;Why is it useful?&lt;/h2&gt;

&lt;p&gt;Having a standard means that different implementations, such as &lt;a href=&quot;http://www.mono-project.com/&quot;&gt;Mono&lt;/a&gt; and &lt;a href=&quot;/2017/10/19/DotNetAnywhere-an-Alternative-.NET-Runtime/&quot;&gt;DotNetAnywhere&lt;/a&gt; can exist, from &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/standard/clr&quot;&gt;Common Language Runtime (CLR)&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Compilers and tools are able to produce output that the common language runtime can consume because the type system, the format of metadata, and the runtime environment (the virtual execution system) &lt;strong&gt;are all defined by a public standard&lt;/strong&gt;, the ECMA Common Language Infrastructure specification. For more information, see &lt;a href=&quot;https://www.visualstudio.com/license-terms/ecma-c-common-language-infrastructure-standards/&quot;&gt;ECMA C# and Common Language Infrastructure Specifications&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and from the CoreCLR documentation on &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/dotnet-standards.md&quot;&gt;.NET Standards&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There was a very early realization by the founders of .NET that they were creating a new programming technology that had broad applicability across operating systems and CPU types and that advanced the state of the art of late 1990s (when the .NET project started at Microsoft) programming language implementation techniques. This led to considering and then pursuing standardization as an important pillar of establishing .NET in the industry.&lt;/p&gt;

  &lt;p&gt;The key addition to the state of the art was support for multiple programming languages with a single language runtime, hence the name &lt;em&gt;Common Language Runtime&lt;/em&gt;. There were many other smaller additions, such as value types, a simple exception model and attributes. Generics and language integrated query were later added to that list.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Looking back, standardization was quite effective, leading to .NET having a strong presence on iOS and Android, with the Unity and Xamarin offerings, both of which use the Mono runtime. The same may end up being true for .NET on Linux.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;The various .NET standards have been made meaningful by the collaboration of multiple companies and industry experts that have served on the working groups that have defined the standards. In addition (and most importantly), the .NET standards have been implemented by multiple commercial (ex: Unity IL2CPP, .NET Native) and open source (ex: Mono) implementors. The presence of multiple implementations proves the point of standardization.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As the last quote points out, the standard is not produced &lt;em&gt;solely&lt;/em&gt; by Microsoft:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/04/Companies and Organizations that Participated.png&quot; alt=&quot;Companies and Organizations that Participated&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is also a nice &lt;a href=&quot;https://en.wikipedia.org/wiki/Common_Language_Infrastructure&quot;&gt;Wikipedia page&lt;/a&gt; that has some additional information.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-is-in-it&quot;&gt;What is in it?&lt;/h2&gt;

&lt;p&gt;At a high-level overview, the specification is divided into the following ‘partitions’ :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;I: Concepts and Architecture&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;A great introduction to the CLR itself, explaining many of the key concepts and components, as well as the rationale behind them&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;II: Metadata Definition and Semantics&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;An explanation of the format of .NET dll/exe files, the different sections within them and how they’re laid out in-memory&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;III: CIL Instruction Set&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;A complete list of all the &lt;em&gt;Intermediate Language (IL)&lt;/em&gt; instructions that the CLR understands, along with a detailed description of what they do and how to use them&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IV: Profiles and Libraries&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Describes the various different ‘Base Class libraries’ that make-up the runtime and how they are grouped into ‘Profiles’&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;V: Binary Formats (Debug Interchange Format)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;An overview of ‘Portable CILDB files’, which give a way for additional &lt;em&gt;debugging information&lt;/em&gt; to be provided&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;VI: Annexes&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Annex A - Introduction&lt;/li&gt;
      &lt;li&gt;Annex B - Sample programs&lt;/li&gt;
      &lt;li&gt;Annex C - CIL assembler implementation&lt;/li&gt;
      &lt;li&gt;Annex D - Class library design guidelines&lt;/li&gt;
      &lt;li&gt;Annex E - Portability considerations&lt;/li&gt;
      &lt;li&gt;Annex F - Imprecise faults&lt;/li&gt;
      &lt;li&gt;Annex G - Parallel library&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But, working your way through the entire specification is a mammoth task, generally I find it useful to just search for a particular word or phrase and locate the parts I need that way. However if you do want to read through one section, I recommend ‘Partition I: Concepts and Architecture’, at just over 100 pages it is much easier to fully digest! This section is a &lt;a href=&quot;/images/2018/04/Partition I - Concepts and Architecture - Outline.png&quot;&gt;very comprehensive overview&lt;/a&gt; of the key concepts and components contained within the CLR and well worth a read.&lt;/p&gt;

&lt;p&gt;Also, I’m convinced that the authors of the spec wanted to &lt;em&gt;help out&lt;/em&gt; any future readers, so to break things up they included lots of very helpful diagrams:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/04/Figure 1 - Type System.png&quot; alt=&quot;Type System.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For more examples see:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/images/2018/04/Arrays - Multi-dimensional v Jagged.png&quot;&gt;Arrays - Multi-dimensional v Jagged&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/images/2018/04/Figure 1 - Relationship between correct and verifiable CIL.png&quot;&gt;Relationship between correct and verifiable CIL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/images/2018/04/High-level view of the CLI file format.png&quot;&gt;High-level view of the CLI file format&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/images/2018/04/Layout information for a class or value type.png&quot;&gt;Layout information for a class or value type&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/images/2018/04/Relationship between boxed and unboxed representations of a value type.png&quot;&gt;Relationship between boxed and unboxed representations of a value type&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/images/2018/04/Roots of the inheritance hierarchies.png&quot;&gt;Roots of the inheritance hierarchies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On top of all that, they also dropped in some &lt;a href=&quot;https://designforhackers.com/blog/comic-sans-hate/&quot;&gt;Comic Sans&lt;/a&gt; 😀, just to make it clear when the text is only ‘&lt;em&gt;informative&lt;/em&gt;’:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/04/Informative Text.png&quot; alt=&quot;Informative Text&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;how-has-it-changed&quot;&gt;How has it changed?&lt;/h2&gt;

&lt;p&gt;The spec has been through &lt;a href=&quot;https://www.ecma-international.org/publications/standards/Ecma-335-arch.htm&quot;&gt;6th editions&lt;/a&gt; and it’s interesting to look at the changes over time:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Edition&lt;/th&gt;
      &lt;th&gt;Release Date&lt;/th&gt;
      &lt;th&gt;CLR Version&lt;/th&gt;
      &lt;th&gt;Significant Changes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;1st&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;December 2001&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;1.0&lt;/strong&gt; (February 2002)&lt;/td&gt;
      &lt;td&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;2nd&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;December 2002&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;1.1&lt;/strong&gt; (April 2003)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;3rd&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;June 2005&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;2.0&lt;/strong&gt; (January 2006)&lt;/td&gt;
      &lt;td&gt;See below &lt;a href=&quot;/data/2018/04/ECMA-335 - 3rd edition - Changes.pdf&quot;&gt;(link)&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;4th&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;June 2006&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;None, revision of 3rd edition &lt;a href=&quot;/data/2018/04/ECMA-335 - 4th edition - Changes.pdf&quot;&gt;(link)&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;5th&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;December 2010&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;4.0&lt;/strong&gt; (April 2010)&lt;/td&gt;
      &lt;td&gt;See below &lt;a href=&quot;/data/2018/04/ECMA-335 - 5th edition - Changes.pdf&quot;&gt;(link)&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;6th&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;June 2012&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;None, revision of 5th edition &lt;a href=&quot;/data/2018/04/ECMA-335 - 6th edition - Changes.pdf&quot;&gt;(link)&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;However, only 2 editions contained &lt;strong&gt;significant&lt;/strong&gt; updates, they are explained in more detail below:&lt;/p&gt;

&lt;h3 id=&quot;3rd-edition-link&quot;&gt;3rd Edition &lt;a href=&quot;/data/2018/04/ECMA-335 - 3rd edition - Changes.pdf&quot;&gt;(link)&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Support for &lt;em&gt;generic&lt;/em&gt; types and methods (see &lt;a href=&quot;/2018/03/02/How-generics-were-added-to-.NET/&quot;&gt;‘How generics were added to .NET’&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;New IL instructions - &lt;code class=&quot;highlighter-rouge&quot;&gt;ldelem&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;stelem&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;unbox.any&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Added the &lt;code class=&quot;highlighter-rouge&quot;&gt;constrained.&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;no.&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;readonly.&lt;/code&gt; IL instruction prefixes&lt;/li&gt;
  &lt;li&gt;Brand new ‘namespaces’ (with corresponding types) - &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Collections.Generics&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Threading.Parallel&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;New types added, including &lt;code class=&quot;highlighter-rouge&quot;&gt;Action&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Nullable&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ThreadStaticAttribute&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5th-edition-link&quot;&gt;5th Edition &lt;a href=&quot;/data/2018/04/ECMA-335 - 6th edition - Changes.pdf&quot;&gt;(link)&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/app-domains/type-forwarding-in-the-common-language-runtime&quot;&gt;Type-forwarding&lt;/a&gt; added&lt;/li&gt;
  &lt;li&gt;Semantics of &lt;a href=&quot;https://blogs.msdn.microsoft.com/ericlippert/2009/12/03/exact-rules-for-variance-validity/&quot;&gt;‘variance’&lt;/a&gt; redefined, became a core feature&lt;/li&gt;
  &lt;li&gt;Multiple types added or updated, including &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Action&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;System.MulticastDelegate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;System.WeakReference&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;System.Math&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Double&lt;/code&gt; modified to better conform to IEEE&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;microsoft-specific-implementation&quot;&gt;Microsoft Specific Implementation&lt;/h2&gt;

&lt;p&gt;Another interesting aspect to look at is the Microsoft specific implementation details and notes. The following links are to pdf documents that are modified versions of the 4th edition:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://download.microsoft.com/download/7/3/3/733AD403-90B2-4064-A81E-01035A7FE13C/MS%20Partition%20I.pdf&quot;&gt;Partition I: Concepts and Architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://download.microsoft.com/download/7/3/3/733AD403-90B2-4064-A81E-01035A7FE13C/MS%20Partition%20II.pdf&quot;&gt;Partition II: Meta Data Definition and Semantics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://download.microsoft.com/download/7/3/3/733AD403-90B2-4064-A81E-01035A7FE13C/MS%20Partition%20III.pdf&quot;&gt;Partition III: CIL Instruction Set&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://download.microsoft.com/download/7/3/3/733AD403-90B2-4064-A81E-01035A7FE13C/MS%20Partition%20IV.pdf&quot;&gt;Partition IV: Profiles and Libraries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://download.microsoft.com/download/7/3/3/733AD403-90B2-4064-A81E-01035A7FE13C/MS%20Partition%20V.pdf&quot;&gt;Partition V: Debug Interchange Format&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://download.microsoft.com/download/7/3/3/733AD403-90B2-4064-A81E-01035A7FE13C/MS%20Partition%20VI.pdf&quot;&gt;Partition VI: Annexes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They all contain multiple occurrences of text like this ‘&lt;em&gt;Implementation Specific (Microsoft)&lt;/em&gt;’:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2018/04/Microsoft Specific Implementation Notes - Partition I.png&quot;&gt;&lt;img src=&quot;/images/2018/04/Microsoft Specific Implementation Notes - Partition I.png&quot; alt=&quot;Microsoft Specific Implementation Notes - Partition I&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;more-information&quot;&gt;More Information&lt;/h2&gt;

&lt;p&gt;Finally, if you want to find out more there’s a book available (affiliate link):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.uk/Common-Language-Infrastructure-Annotated-Standard/dp/0321154932/ref=as_li_ss_il?_encoding=UTF8&amp;amp;pd_rd_i=0321154932&amp;amp;pd_rd_r=B9W686JZFFZHB6G358Y5&amp;amp;pd_rd_w=0luDi&amp;amp;pd_rd_wg=IG2lU&amp;amp;psc=1&amp;amp;refRID=B9W686JZFFZHB6G358Y5&amp;amp;linkCode=li3&amp;amp;tag=mattonsoft-21&amp;amp;linkId=c99e84073532318dbca0d07dc9fcb19b&quot; target=&quot;_blank&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-eu.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=0321154932&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=GB&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=mattonsoft-21&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;https://ir-uk.amazon-adsystem.com/e/ir?t=mattonsoft-21&amp;amp;l=li3&amp;amp;o=2&amp;amp;a=0321154932&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

     
     
     
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
 </entry>
 
 <entry>
   <title>Exploring the internals of the .NET Runtime</title>
   <link href="http://www.mattwarren.org/2018/03/23/Exploring-the-internals-of-the-.NET-Runtime/"/>
   <updated>2018-03-23T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2018/03/23/Exploring-the-internals-of-the-.NET-Runtime</id>
   <content type="html">
     &lt;p&gt;I recently appeared on &lt;a href=&quot;http://herdingcode.com/herding-code-228-matt-warren-on-net-internals-and-open-source-contributions/&quot;&gt;Herding Code&lt;/a&gt; and &lt;a href=&quot;https://stackify.com/developer-things-5-benchmarkdotnet/&quot;&gt;Stackify ‘Developer Things’&lt;/a&gt; podcasts and in both cases, the first question asked was ‘&lt;strong&gt;&lt;em&gt;how do you figure out the internals of the .NET runtime&lt;/em&gt;&lt;/strong&gt;’?&lt;/p&gt;

&lt;p&gt;This post is an attempt to articulate that process, in the hope that it might be useful to others.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Here are my suggested steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#decide&quot;&gt;Decide what you want to investigate&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#double-check&quot;&gt;See if someone else has already figured it out&lt;/a&gt; (optional)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#botr&quot;&gt;Read the ‘Book of the Runtime’&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#build-from-source&quot;&gt;Build from the source&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#debugging&quot;&gt;Debugging&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#verify-net-framework&quot;&gt;Verify against .NET Framework&lt;/a&gt; (optional)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: As with all these types of lists, just because it worked for me &lt;em&gt;doesn’t&lt;/em&gt; mean that it will for everyone. So, ‘&lt;em&gt;your milage may vary&lt;/em&gt;’.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&quot;decide&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;step-one---decide-what-you-want-to-investigate&quot;&gt;Step One - Decide what you want to investigate&lt;/h2&gt;

&lt;p&gt;For me, this means working out &lt;strong&gt;what question I’m trying to answer&lt;/strong&gt;, for example here are some previous posts I’ve written:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2017/01/25/How-do-.NET-delegates-work/&quot;&gt;How do .NET delegates work?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2016/12/14/Why-is-Reflection-slow/&quot;&gt;Why is reflection slow?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2016/10/26/How-does-the-fixed-keyword-work/&quot;&gt;How does the ‘fixed’ keyword work?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(it just goes to show, you don’t always need fancy titles!)&lt;/p&gt;

&lt;p&gt;I put this as ‘Step 1’ because digging into .NET internals isn’t quick or easy work, some of my posts take weeks to research, so I need to have a motivation to keep me going, something to focus on. In addition, the CLR isn’t a small run-time, there’s &lt;em&gt;a lot&lt;/em&gt; in there, so just blindly trying to find your way around it isn’t easy! That’s why having a specific focus helps, looking at one feature or section at a time is more manageable.&lt;/p&gt;

&lt;p&gt;The very first post where I followed this approach was &lt;a href=&quot;/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/&quot;&gt;Strings and the CLR - a Special Relationship&lt;/a&gt;. I’d previously spent some time looking at the &lt;a href=&quot;https://github.com/dotnet/coreclr&quot;&gt;CoreCLR source&lt;/a&gt; and I knew a bit about how &lt;code class=&quot;highlighter-rouge&quot;&gt;Strings&lt;/code&gt; in the CLR worked, but not all the details. During the research of that post I then found more and more areas of the CLR that I didn’t understand and the rest of my blog grew from there (&lt;a href=&quot;/2017/01/25/How-do-.NET-delegates-work/&quot;&gt;delegates&lt;/a&gt;, &lt;a href=&quot;/2017/05/08/Arrays-and-the-CLR-a-Very-Special-Relationship/&quot;&gt;arrays&lt;/a&gt;, &lt;a href=&quot;/2016/10/26/How-does-the-fixed-keyword-work/&quot;&gt;fixed keyword&lt;/a&gt;, &lt;a href=&quot;/2017/06/15/How-the-.NET-Rutime-loads-a-Type/&quot;&gt;type loader&lt;/a&gt;, etc).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt; I think this is generally applicable, if you want to start blogging, but you don’t think you have enough ideas to sustain it, I’d recommend that you &lt;strong&gt;start somewhere and other ideas will follow&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Another tip is to look at &lt;a href=&quot;https://news.ycombinator.com/&quot;&gt;HackerNews&lt;/a&gt; or &lt;a href=&quot;https://www.reddit.com/r/programming/&quot;&gt;/r/programming&lt;/a&gt; for posts about the ‘&lt;em&gt;internals&lt;/em&gt;’ of other runtimes, e.g. Java, Ruby, Python, Go etc, then write the equivalent post about the CLR. One of my most popular posts &lt;a href=&quot;/2017/03/23/Hitchhikers-Guide-to-the-CoreCLR-Source-Code/&quot;&gt;A Hitchhikers Guide to the CoreCLR Source Code&lt;/a&gt; was clearly influenced by &lt;a href=&quot;https://hn.algolia.com/?query=hitchhikers%20guide%20to&amp;amp;sort=byPopularity&amp;amp;prefix=false&amp;amp;page=0&amp;amp;dateRange=all&amp;amp;type=story&quot;&gt;equivalent articles&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Finally, for more help with learning, ‘&lt;em&gt;figuring things out&lt;/em&gt;’ and explaining them to others, I recommend that you read anything by &lt;a href=&quot;https://twitter.com/b0rk&quot;&gt;Julia Evans&lt;/a&gt;. Start with &lt;a href=&quot;https://jvns.ca/blog/2017/03/20/blogging-principles/&quot;&gt;Blogging principles I use&lt;/a&gt; and &lt;a href=&quot;https://jvns.ca/blog/so-you-want-to-be-a-wizard/&quot;&gt;So you want to be a wizard&lt;/a&gt; (also available &lt;a href=&quot;https://twitter.com/b0rk/status/941901614796943361?lang=en&quot;&gt;as a zine&lt;/a&gt;), then work your way through &lt;a href=&quot;https://jvns.ca/&quot;&gt;all the other posts related to blogging or writing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I’ve been hugely influenced, for the better, by Julia’s approach to blogging&lt;/strong&gt;.&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-slide=&quot;7&quot; data-id=&quot;b32f2c13a1644e898379ac77e6ae73fb&quot; data-ratio=&quot;1.49926793557833&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;span id=&quot;double-check&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;step-two---see-if-someone-else-has-already-figured-it-out-optional&quot;&gt;Step Two - See if someone else has already figured it out (optional)&lt;/h2&gt;

&lt;p&gt;I put this in as ‘optional’, because it depends on your motivation. If you are trying to understand .NET internals for &lt;strong&gt;your own education&lt;/strong&gt;, then feel-free to write about whatever you want. If you are trying to do it to &lt;strong&gt;also help others&lt;/strong&gt;, I’d recommend that you first see what’s already been written about the subject. If, once you’ve done that you still think there is something &lt;strong&gt;new or different that you can add&lt;/strong&gt;, then go ahead, but I try not to just re-hash what is already out there.&lt;/p&gt;

&lt;p&gt;To see what’s already been written, you can start with &lt;a href=&quot;/2018/01/22/Resources-for-Learning-about-.NET-Internals/&quot;&gt;Resources for Learning about .NET Internals&lt;/a&gt; or peruse the &lt;a href=&quot;/tags/#Internals&quot;&gt;‘Internals’ tag on this blog&lt;/a&gt;. Another really great resource is all the &lt;a href=&quot;https://stackoverflow.com/users/17034/hans-passant?tab=answers&quot;&gt;answers by Hans Passant&lt;/a&gt; on StackOverflow, he is prolific and amazingly knowledgeable, here’s some examples to get you started:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/8870442/how-is-math-pow-implemented-in-net-framework/8870593#8870593&quot;&gt;How is Math.Pow() implemented in .NET Framework?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/17130382/understanding-garbage-collection-in-net/17131389#17131389&quot;&gt;Understanding garbage collection in .NET&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4043821/performance-differences-between-debug-and-release-builds/4045073#4045073&quot;&gt;Performance differences between debug and release builds&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2056948/net-jit-potential-error/2057228#2057228&quot;&gt;.NET JIT potential error?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/8951836/why-large-object-heap-and-why-do-we-care/8953503#8953503&quot;&gt;Why Large Object Heap and why do we care?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1583050/performance-surprise-with-as-and-nullable-types/3076525#3076525&quot;&gt;Performance surprise with “as” and nullable types&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/28514373/what-is-the-size-of-a-boolean-in-c-does-it-really-take-4-bytes/28515361#28515361&quot;&gt;What is the size of a boolean In C#? Does it really take 4-bytes?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span id=&quot;botr&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;step-three---read-the-book-of-the-runtime&quot;&gt;Step Three - Read the ‘Book of the Runtime’&lt;/h2&gt;

&lt;p&gt;You won’t get far in investigating .NET internals without coming across the &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/Documentation/botr&quot;&gt;‘Book of the Runtime’ (BOTR)&lt;/a&gt; which is an invaluable resource, even &lt;a href=&quot;https://www.hanselman.com/blog/TheBookOfTheRuntimeTheInternalsOfTheNETRuntimeThatYouWontFindInTheDocumentation.aspx&quot;&gt;Scott Hanselman agrees&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;It was written by the .NET engineering team, for the .NET engineering team, as per &lt;a href=&quot;https://news.ycombinator.com/item?id=15358571&quot;&gt;this HackerNews comment&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Having worked for 7 years on the .NET runtime team, I can attest that the BOTR is &lt;strong&gt;the official reference&lt;/strong&gt;. It was created as documentation for the engineering team, by the engineering team. And it was (supposed to be) kept up to date any time a new feature was added or changed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, just a word of warning, this means that it’s an in-depth, non-trivial document and hard to understand when you are first learning about a particular topic. Several of my blog posts have consisted of the following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Read the BOTR chapter on ‘Topic X’&lt;/li&gt;
  &lt;li&gt;Understand about 5% of what I read&lt;/li&gt;
  &lt;li&gt;Go away and learn more (read the source code, read other resources, etc)&lt;/li&gt;
  &lt;li&gt;GOTO ‘Step 1’, understanding more this time!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Related to this, the source code itself is often as helpful as the BOTR due to the extensive comments, for example &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.0.0/src/inc/corinfo.h#L1426-L1514&quot;&gt;this one describing the rules for prestubs&lt;/a&gt; really helped me out. The downside of the source code comments is that they are bit harder to find, whereas the BOTR is all in one place.&lt;/p&gt;

&lt;p&gt;&lt;span id=&quot;build-from-source&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;step-four---build-from-the-source&quot;&gt;Step Four - Build from the source&lt;/h2&gt;

&lt;p&gt;However, at some point, just reading about the internals of the CLR isn’t enough, you actually need to ‘&lt;em&gt;get your hands&lt;/em&gt;’ dirty and see it in action. Now that the Core CLR is open source it’s very easy to &lt;a href=&quot;https://github.com/dotnet/coreclr#building-the-repository&quot;&gt;build it yourself&lt;/a&gt; and then once you’ve done that, there are &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/Documentation/building&quot;&gt;even more docs to help you out&lt;/a&gt; if you are building on different OSes, want to debug, test CoreCLR in conjunction with CoreFX, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But why is building from source useful?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because it lets you build a Debug/Diagnostic version of the runtime that gives you lots of additional information that isn’t available in the Release/Retails builds. For instance you can &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/building/viewing-jit-dumps.md#setting-configuration-variables&quot;&gt;view JIT Dumps&lt;/a&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;COMPlus_JitDump=...&lt;/code&gt;, however this is just one of many &lt;code class=&quot;highlighter-rouge&quot;&gt;COMPlus_XXX&lt;/code&gt; settings you can use, there are &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/clr-configuration-knobs.md&quot;&gt;100’s available&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, even more useful is the ability to turn on diagnostic logging for a particular area of the CLR. For instance, lets imagine that we want to find out more about &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDomains&lt;/code&gt; and how they work under-the-hood, we can use the following &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/clr-configuration-knobs.md#log-configuration-knobs&quot;&gt;logging configuration settings&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SET COMPLUS_LogEnable=1
SET COMPLUS_LogToFile=1
SET COMPLUS_LogFacility=02000000
SET COMPLUS_LogLevel=A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Where &lt;code class=&quot;highlighter-rouge&quot;&gt;LogFacility&lt;/code&gt; is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;LF_APPDOMAIN&lt;/code&gt;, there are many other values you can provide as a HEX bit-mask the full list is available &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/inc/loglf.h&quot;&gt;in the source code&lt;/a&gt;. If you set these variables and then run an app, you will get a log output &lt;a href=&quot;/data/2017/02/COMPLUS-AppDomain.log&quot;&gt;like this one&lt;/a&gt;. Once you have this log you can very easily search around in the code to find where the messages came from, for instance here are all the places that &lt;a href=&quot;https://github.com/dotnet/coreclr/search?utf8=%E2%9C%93&amp;amp;q=LF_APPDOMAIN&amp;amp;type=&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LF_APPDOMAIN&lt;/code&gt; is logged&lt;/a&gt;. This is a great technique to find your way into a section of the CLR that you aren’t familiar with, I’ve used it many times to great effect.&lt;/p&gt;

&lt;p&gt;&lt;span id=&quot;debugging&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;step-five---debugging&quot;&gt;Step Five - Debugging&lt;/h2&gt;

&lt;p&gt;For me, biggest boon of &lt;a href=&quot;/2017/12/19/Open-Source-.Net-3-years-later&quot;&gt;Microsoft open sourcing .NET&lt;/a&gt; is that you can discover so much more about the internals &lt;strong&gt;without&lt;/strong&gt; having to resort to ‘old school’ &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/getting-started-with-windbg&quot;&gt;debugging using WinDBG&lt;/a&gt;. But there still comes a time when it’s useful to step through the code line-by-line to see what’s going on. The added advantage of having the source code is that you can build a copy locally and then debug through that &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/building/debugging-instructions.md&quot;&gt;using Visual Studio&lt;/a&gt; which is slightly easier than WinDBG.&lt;/p&gt;

&lt;p&gt;I always leave debugging to last, as it can be time-consuming and I only find it helpful when I already know where to set a breakpoint, i.e. I already know which part of the code I want to step through. I once tried to blindly step through the source of the CLR &lt;a href=&quot;/2017/02/07/The-68-things-the-CLR-does-before-executing-a-single-line-of-your-code/&quot;&gt;whilst it was starting up&lt;/a&gt; and it was very hard to see what was going on, as I’ve said before the CLR is a complex runtime, there are many things happening, so stepping through lots of code, line-by-line can get tricky.&lt;/p&gt;

&lt;p&gt;&lt;span id=&quot;verify-net-framework&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;step-six---verify-against-net-framework&quot;&gt;Step Six - Verify against .NET Framework&lt;/h2&gt;

&lt;p&gt;I put this final step in because the .NET CLR source &lt;a href=&quot;https://github.com/dotnet/coreclr&quot;&gt;available on GitHub&lt;/a&gt; is the ‘.NET Core’ version of the runtime, which isn’t the same as the full/desktop .NET Framework that’s been around for years. So you may need to verify the behavior matches, if you want to understand the internals ‘&lt;em&gt;as they were&lt;/em&gt;’, not just ‘&lt;em&gt;as they will be&lt;/em&gt;’ going forward. For instance .NET Core has removed the ability to &lt;a href=&quot;https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/porting.md#app-domains&quot;&gt;create App Domains&lt;/a&gt; as a way to provide isolation but interestingly enough the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/appdomain.cpp&quot;&gt;internal class lives on&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;To verify the behaviour, your main option is to &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/getting-started-with-windbg&quot;&gt;debug the CLR using WinDBG&lt;/a&gt;. Beyond that, you can resort to looking at the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/cc749640.aspx&quot;&gt;‘Rotor’ source code&lt;/a&gt; (roughly the same as .NET Framework 2.0), or petition Microsoft the release the .NET Framework Source Code (probably not going to happen)!&lt;/p&gt;

&lt;p&gt;However, low-level internals don’t change all that often, so more often than not the way things behave in the CoreCLR is the same as they’ve always worked.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;

&lt;p&gt;Finally, for your viewing pleasure, here are a few talks related to ‘&lt;em&gt;.NET Internals&lt;/em&gt;’:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=iQRVJHab4MM&quot;&gt;.NET Unboxed 2015 - Geoff Norton - Open Source Hacking the CoreCLR&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=JNmUz7C1usM&quot;&gt;.NET Core on Unix - Jan Vorlicek&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Blogs/dotnet/NET-Foundations-2015-03-04&quot;&gt;.NET Internals 2015-03-04: .NET Core &amp;amp; Cross Platform&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Blogs/dotnet/NET-Foundations-2015-02-25&quot;&gt;.NET Internals 2015-02-25: Open Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://www.reddit.com/r/programming/comments/86opzw/exploring_the_internals_of_the_net_runtime/&quot;&gt;/r/programming&lt;/a&gt; or &lt;a href=&quot;https://www.reddit.com/r/dotnet/comments/86opun/exploring_the_internals_of_the_net_runtime/&quot;&gt;/r/dotnet&lt;/a&gt;&lt;/p&gt;

     
     
     
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
 </entry>
 
 <entry>
   <title>How generics were added to .NET</title>
   <link href="http://www.mattwarren.org/2018/03/02/How-generics-were-added-to-.NET/"/>
   <updated>2018-03-02T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2018/03/02/How-generics-were-added-to-.NET</id>
   <content type="html">
     &lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=16525244&quot;&gt;HackerNews&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/programming/comments/81ih8t/how_generics_were_added_to_net/&quot;&gt;/r/programming&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Before we dive into the technical details, let’s start with a quick history lesson, courtesy of &lt;a href=&quot;https://www.microsoft.com/en-us/research/people/dsyme/&quot;&gt;Don Syme&lt;/a&gt; who worked on adding generics to .NET and then went on to &lt;a href=&quot;http://fsharp.org&quot;&gt;design and implement F#&lt;/a&gt;, which is a pretty impressive set of achievements!!&lt;/p&gt;

&lt;h2 id=&quot;background-and-history&quot;&gt;Background and History&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;1999&lt;/strong&gt; Initial research, design and planning
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dsyme/2011/03/15/netc-generics-history-some-photos-from-feb-1999/&quot;&gt;.NET/C# Generics History: Some Photos From Feb 1999&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;1999&lt;/strong&gt; First ‘white paper’ published
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dsyme/2012/07/05/more-c-net-generics-research-project-history-the-msr-white-paper-from-mid-1999/&quot;&gt;More C#/.NET Generics Research Project History – The MSR white paper&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Components.PostAttachments/00/10/32/72/38/Ext-VOS.pdf&quot;&gt;MSR White Paper: Proposed Extensions to COM+ VOS (Draft)&lt;/a&gt; (&lt;strong&gt;pdf&lt;/strong&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;2001&lt;/strong&gt; C# Language Design Specification created
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dsyme/2012/06/19/some-history-2001-gc-research-project-draft-from-the-msr-cambridge-team/&quot;&gt;Some History: 2001 “GC#” (Generic C#) research project draft&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Components.PostAttachments/00/10/32/17/02/GCSharp-new-v16-12-Dec-2001-redist.pdf&quot;&gt;MSR - .NET Generics Research Project - Generic C# Specification&lt;/a&gt; (&lt;strong&gt;pdf&lt;/strong&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;2001&lt;/strong&gt; Research paper published
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/research/publication/design-and-implementation-of-generics-for-the-net-common-language-runtime/&quot;&gt;Design and Implementation of Generics for the .NET CLR&lt;/a&gt; (&lt;strong&gt;pdf&lt;/strong&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;2004&lt;/strong&gt; Work completed and all bugs fixed
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dsyme/2012/06/26/some-more-netc-generics-research-project-history/&quot;&gt;Some more .NET/C# Generics Research Project History&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Don Syme, &lt;a href=&quot;https://twitter.com/dsyme/status/969928172597858305&quot;&gt;pointed out&lt;/a&gt; another research paper related to .NET generics, &lt;a href=&quot;https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/space2004generics.pdf&quot;&gt;Combining Generics, Precompilation and Sharing Between Software Based Processes&lt;/a&gt; (&lt;strong&gt;pdf&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;To give you an idea of how these events fit into the bigger picture, here are the dates of &lt;a href=&quot;https://en.wikipedia.org/wiki/.NET_Framework&quot;&gt;.NET Framework Releases&lt;/a&gt;, up-to 2.0 which was the first version to have generics:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Version number&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;CLR version&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Release date&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2002-02-13&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2003-04-24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;2.0&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;2.0&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;2005-11-07&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Aside from the historical perspective, what I find most fascinating is just how much the addition of generics in .NET was due to the work done by Microsoft Research, from &lt;a href=&quot;https://blogs.msdn.microsoft.com/dsyme/2011/03/15/netc-generics-history-some-photos-from-feb-1999/&quot;&gt;.NET/C# Generics History&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It was only through the total dedication of Microsoft Research, Cambridge during 1998-2004, to doing &lt;strong&gt;a complete, high quality implementation in both the CLR (including NGEN, debugging, JIT, AppDomains, concurrent loading and many other aspects), and the C# compiler&lt;/strong&gt;, that the project proceeded.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He then goes on to say:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What would the cost of inaction have been? What would the cost of failure have been? &lt;strong&gt;No generics in C# 2.0? No LINQ in C# 3.0? No TPL in C# 4.0? No Async in C# 5.0? No F#?&lt;/strong&gt; Ultimately, an erasure model of generics would have been adopted, as for Java, since the CLR team would never have pursued a in-the-VM generics design without external help.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Wow, C# and .NET would look &lt;strong&gt;very&lt;/strong&gt; different without all these features!!&lt;/p&gt;

&lt;h3 id=&quot;the-gyro-project---generics-for-rotor&quot;&gt;The ‘Gyro’ Project - Generics for Rotor&lt;/h3&gt;

&lt;p&gt;Unfortunately there doesn’t exist a publicly accessible version of the .NET 1.0 and 2.0 source code, so we can’t go back and look at the changes that were made (if I’m wrong, please let me know as I’d love to read it).&lt;/p&gt;

&lt;p&gt;However, we do have the next best thing, the &lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=52517&quot;&gt;‘Gyro’ project&lt;/a&gt; in which the equivalent changes were made to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Shared_Source_Common_Language_Infrastructure&quot;&gt;‘Shared Source Common Language Implementation’&lt;/a&gt; (SSCLI) code base (a.k.a ‘Rotor’). As an aside, if you want to learn more about the Rotor code base I really recommend the excellent book by Ted Neward, which you can &lt;a href=&quot;http://blogs.tedneward.com/post/revisiting-rotor/&quot;&gt;download from his blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Gyro 1.0 was &lt;a href=&quot;http://www.servergeek.com/blogs/mickey/archive/2003_04_27_blog_arc.htm&quot;&gt;released in 2003&lt;/a&gt; which implies that is was created &lt;em&gt;after&lt;/em&gt; the work has been done in the &lt;em&gt;real&lt;/em&gt; .NET Framework source code, I assume that Microsoft Research wanted to publish the ‘Rotor’ implementation so it could be studied more widely. Gyro is also referenced in one Don Syme’s posts, from &lt;a href=&quot;https://blogs.msdn.microsoft.com/dsyme/2012/06/19/some-history-2001-gc-research-project-draft-from-the-msr-cambridge-team/&quot;&gt;Some History: 2001 “GC#” research project draft, from the MSR Cambridge team&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;With Dave Berry’s help we later published a version of the corresponding code as the “Gyro” variant of the “Rotor” CLI implementation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The rest of this post will look at &lt;em&gt;how&lt;/em&gt; generics were implemented in the Rotor source code.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: There are some significant differences between the Rotor source code and the real .NET framework. Most notably the &lt;a href=&quot;https://blogs.msdn.microsoft.com/joelpob/2004/01/21/short-notes-on-the-rotor-jit/&quot;&gt;JIT&lt;/a&gt; and &lt;a href=&quot;https://blogs.msdn.microsoft.com/joelpob/2004/02/26/explanatory-notes-on-rotors-garbage-collector/&quot;&gt;GC&lt;/a&gt; are completely different implementations (due to licensing issues, listen to &lt;a href=&quot;https://www.dotnetrocks.com/?show=360&quot;&gt;DotNetRocks show 360 - Ted Neward and Joel Pobar on Rotor 2.0&lt;/a&gt; for more info). However, the Rotor source does give us an accurate idea about how other &lt;em&gt;core parts&lt;/em&gt; of the CLR are implemented, such as the Type-System, Debugger, AppDomains and the VM itself. It’s interesting to compare the &lt;a href=&quot;https://github.com/SSCLI/sscli20_20060311&quot;&gt;Rotor source&lt;/a&gt; with the current &lt;a href=&quot;/2017/03/23/Hitchhikers-Guide-to-the-CoreCLR-Source-Code/&quot;&gt;CoreCLR source&lt;/a&gt; and see how much of the source code layout and class names have remained the same.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;To make things easier for anyone who wants to follow-along, I created a &lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet&quot;&gt;GitHub repo&lt;/a&gt; that contains the &lt;a href=&quot;https://github.com/SSCLI/sscli_20021101&quot;&gt;Rotor code for .NET 1.0&lt;/a&gt; and then checked in the &lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=52517&quot;&gt;Gyro source code&lt;/a&gt; on top, which means that you can &lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1&quot;&gt;see all the changes in one place&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/03/Gyro changes to implement generics.png&quot; alt=&quot;Gyro changes to implement generics&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first thing you notice in the Gyro source is that all the files contain this particular piece of legalese:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ;    By using this software in any fashion, you are agreeing to be bound by the
 ;    terms of this license.
 ;   
&lt;span class=&quot;gi&quot;&gt;+;    This file contains modifications of the base SSCLI software to support generic
+;    type definitions and generic methods. These modifications are for research
+;    purposes. They do not commit Microsoft to the future support of these or
+;    any similar changes to the SSCLI or the .NET product. -- 31st October, 2002.
+;   
&lt;/span&gt; ;    You must not remove this notice, or any other, from this software.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s funny that they needed to add the line ‘&lt;em&gt;They do not commit Microsoft to the future support of these or any similar changes to the SSCLI or the .NET product&lt;/em&gt;’, even though they were just a few months away from doing just that!!&lt;/p&gt;

&lt;h3 id=&quot;components-directories-with-the-most-changes&quot;&gt;Components (Directories) with the most changes&lt;/h3&gt;

&lt;p&gt;To see where the work was done, lets start with a high-level view, showing the directories with a &lt;strong&gt;significant amount of changes&lt;/strong&gt; (&amp;gt; 1% of the total changes):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git diff --dirstat=lines,1 464bf98 2714cca
   0.1% bcl/
  14.4% csharp/csharp/sccomp/
   9.1% debug/di/
  11.9% debug/ee/
   2.1% debug/inc/
   1.9% debug/shell/
   2.5% fjit/
  21.1% ilasm/
   1.5% ildasm/
   1.2% inc/
   1.4% md/compiler/
  29.9% vm/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;fjit&lt;/code&gt; is the “Fast JIT” compiler, i.e the version released with Rotor, which was significantly different to one available in the full .NET framework.&lt;/p&gt;

&lt;p&gt;The full output from &lt;code class=&quot;highlighter-rouge&quot;&gt;git diff --dirstat=lines,0&lt;/code&gt; is available &lt;a href=&quot;/data/2018/03/dirstat output.txt&quot;&gt;here&lt;/a&gt; and the output from &lt;code class=&quot;highlighter-rouge&quot;&gt;git diff --stat&lt;/code&gt; is &lt;a href=&quot;/data/2018/03/diff stat output.txt&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0.1% bcl/&lt;/code&gt; is included only to show that very little &lt;strong&gt;C# code&lt;/strong&gt; changes were needed, these were &lt;em&gt;mostly&lt;/em&gt; plumbing code to expose the underlying C++ methods and changes to the various &lt;code class=&quot;highlighter-rouge&quot;&gt;ToString()&lt;/code&gt; methods to include &lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-4eff16b228185c6e80fd6325d6994ff9&quot;&gt;generic type information&lt;/a&gt;, e.g. ‘&lt;code class=&quot;highlighter-rouge&quot;&gt;Class[int,double]&lt;/code&gt;’. However there are 2 more significant ones:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bcl/system/reflection/emit/opcodes.cs&lt;/code&gt; (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-cd44d74d6f3263cab42469a039ca2601&quot;&gt;diff&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;Add the additional IL opcode needed to make generics work (this just mirrors the &lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-91e0675d515fc426f84d4e6465ad7f2d&quot;&gt;main change made in core of the runtime&lt;/a&gt;, so that the opcodes available in C# are consistent)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bcl/system/reflection/emit/signaturehelper.cs&lt;/code&gt; (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-e6629d61becf92412984036207cb92f8&quot;&gt;diff&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;Add the ability to parse method &lt;em&gt;metadata&lt;/em&gt; that contains generic related information, such as methods with generic parameters.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;files-with-the-most-changes&quot;&gt;Files with the most changes&lt;/h3&gt;

&lt;p&gt;Next, we’ll take a look at the specific classes/files that had the most changes as this gives us a really good idea about where the complexity was&lt;/p&gt;

&lt;span class=&quot;compactTable&quot;&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Added&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Deleted&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Total Changes&lt;/th&gt;
      &lt;th&gt;File (click to go directly to the diff)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1794&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;323&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1471&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-22234c906bfe132ec494932cf06e3fb1&quot;&gt;debug/di/module.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1418&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;337&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1081&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-0e0d8fff6a020ec70ca77b2cb8b99647&quot;&gt;vm/class.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1335&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;308&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1027&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-fea4cf9500609e43a8069a1dcfa43b71&quot;&gt;vm/jitinterface.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1616&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;888&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;728&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-13c4c633f56c04ff5faf6dce22560847&quot;&gt;debug/ee/debugger.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;741&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;46&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;695&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-aa4f38f96ad3a77d5b09b8a991aa6cb8&quot;&gt;csharp/csharp/sccomp/symmgr.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;693&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;693&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-552abe52e5c106c6362a1a1caea0f132&quot;&gt;vm/genmeth.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;999&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;362&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;637&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-0952232ff4ff9b6e7dd3d0810c526384&quot;&gt;csharp/csharp/sccomp/clsdrec.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;926&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;321&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;605&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-3a12049d560ad4f93e5ce65a316fd978&quot;&gt;csharp/csharp/sccomp/fncbind.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;559&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;559&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-2112a77378a346f28c6a0a3a321e8f87&quot;&gt;vm/typeparse.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;605&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;156&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;449&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-0a485aaa61cb18a87e48fa33a3857dc6&quot;&gt;vm/siginfo.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;417&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;29&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;388&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-7934c88bd9924d3c8cbff690063da3d7&quot;&gt;vm/method.hpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;642&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;255&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;387&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-9f6e7a75bd6b1a7a0cdd5e8035890206&quot;&gt;fjit/fjit.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;379&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;379&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-f74e814e74cc0b7f310d8899dd9572c6&quot;&gt;vm/jitinterfacegen.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3045&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2672&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;373&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-f7f421904f275fdc51213ac75de92119&quot;&gt;ilasm/parseasm.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;465&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;94&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;371&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-003b498fe92dffc37d31bb4e94fc82d4&quot;&gt;vm/class.h&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;515&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;163&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;352&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-7ceae3bfad44ef6e15c1211be9f537a5&quot;&gt;debug/inc/cordb.h&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;339&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;339&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-2a678baf192f81a25eab4bd85ef5bae6&quot;&gt;vm/generics.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;733&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;418&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;315&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-a096d9aee517403abfd5c9171ee7ee9c&quot;&gt;csharp/csharp/sccomp/parser.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;471&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;169&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;302&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-3abe6da78df285aff42ab5932f2dda93&quot;&gt;debug/shell/dshell.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;382&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;88&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;294&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-6ff795bd0261cd4bd627968951cef1f3&quot;&gt;csharp/csharp/sccomp/import.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;/span&gt;

&lt;h2 id=&quot;components-of-the-runtime&quot;&gt;Components of the Runtime&lt;/h2&gt;

&lt;p&gt;Now we’ll look at individual components in more detail so we can get an idea of how different parts of the runtime had to change to accommodate generics.&lt;/p&gt;

&lt;h3 id=&quot;type-system-changes&quot;&gt;Type System changes&lt;/h3&gt;

&lt;p&gt;Not surprisingly the bulk of the changes are in the Virtual Machine (VM) component of the CLR and related to the ‘Type System’. Obviously adding ‘parameterised types’ to a type system that didn’t already have them requires wide-ranging and significant changes, which are shown in the list below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vm/class.cpp&lt;/code&gt; (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-0e0d8fff6a020ec70ca77b2cb8b99647&quot;&gt;diff&lt;/a&gt;
)
    &lt;ul&gt;
      &lt;li&gt;Allow the type system to distinguish between &lt;a href=&quot;https://stackoverflow.com/questions/2173107/what-exactly-is-an-open-generic-type-in-net&quot;&gt;open and closed generic types&lt;/a&gt; and provide APIs to allow working them, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;IsGenericVariable()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;GetGenericTypeDefinition()&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vm/genmeth.cpp&lt;/code&gt; (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-552abe52e5c106c6362a1a1caea0f132&quot;&gt;diff&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;Contains the bulk of the functionality to make ‘generic methods’ possible, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;MyMethod&amp;lt;T, U&amp;gt;(T item, U filter)&lt;/code&gt;, including to work done to enable &lt;a href=&quot;#shared-instantiations&quot;&gt;‘shared instantiation’&lt;/a&gt; of generic methods&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vm/typeparse.cpp&lt;/code&gt; (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-2112a77378a346f28c6a0a3a321e8f87&quot;&gt;diff&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;Changes needed to allow generic types to be looked-up by name, i.e. ‘&lt;code class=&quot;highlighter-rouge&quot;&gt;MyClass[System.Int32]&lt;/code&gt;’&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vm/siginfo.cpp&lt;/code&gt; (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-0a485aaa61cb18a87e48fa33a3857dc6&quot;&gt;diff&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;Adds the ability to work with ‘generic-related’ method signatures&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vm/method.hpp&lt;/code&gt; (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-7934c88bd9924d3c8cbff690063da3d7&quot;&gt;diff&lt;/a&gt;) and &lt;code class=&quot;highlighter-rouge&quot;&gt;vm/method.cpp&lt;/code&gt; (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-c615bd9fa80c05ada3fa2c6aeb3f8f4c&quot;&gt;diff&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;Provides the runtime with generic related methods such as &lt;code class=&quot;highlighter-rouge&quot;&gt;IsGenericMethodDefinition()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;GetNumGenericMethodArgs()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;GetNumGenericClassArgs()&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vm/generics.cpp&lt;/code&gt; (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-2a678baf192f81a25eab4bd85ef5bae6&quot;&gt;diff&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;All the completely new ‘generics’ specific code is in here, mostly related to &lt;a href=&quot;#shared-instantiations&quot;&gt;‘shared instantiation’&lt;/a&gt; which is explained below&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bytecode-or-intermediate-language-il-changes&quot;&gt;Bytecode or ‘Intermediate Language’ (IL) changes&lt;/h3&gt;

&lt;p&gt;The main place that the implementation of generics in the CLR differs from the JVM is that they are &lt;a href=&quot;http://www.jprl.com/Blog/archive/development/2007/Aug-31.html&quot;&gt;‘fully reified’ instead of using ‘type erasure’&lt;/a&gt;, this was possible because the CLR designers were willing to break backwards compatibility, whereas the JVM had been around longer so I assume that this was a much less appealing option. For more discussion on this issue see &lt;a href=&quot;http://beust.com/weblog/2011/07/29/erasure-vs-reification/&quot;&gt;Erasure vs reification&lt;/a&gt; and &lt;a href=&quot;http://gafter.blogspot.co.uk/2006/11/reified-generics-for-java.html&quot;&gt;Reified Generics for Java&lt;/a&gt;. &lt;strong&gt;Update&lt;/strong&gt;: this &lt;a href=&quot;https://news.ycombinator.com/item?id=14584359&quot;&gt;HackerNews discussion&lt;/a&gt; is also worth a read.&lt;/p&gt;

&lt;p&gt;The specific changes made to the .NET Intermediate Language (IL) op-codes can be seen in the &lt;code class=&quot;highlighter-rouge&quot;&gt;inc/opcode.def&lt;/code&gt; (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007?w=1#diff-91e0675d515fc426f84d4e6465ad7f2d&quot;&gt;diff&lt;/a&gt;), in essence the following 3 instructions were added&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.ldelem&quot;&gt;ldelem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.stelem&quot;&gt;stelem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.unbox_any&quot;&gt;unbox.any&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition the &lt;code class=&quot;highlighter-rouge&quot;&gt;IL Assembler&lt;/code&gt; tool (ILASM) needed &lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-f7f421904f275fdc51213ac75de92119&quot;&gt;significant changes&lt;/a&gt; as well as it’s counter part `IL Disassembler (ILDASM) so it could &lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-87680592860bf2d2e2a595434efa0016&quot;&gt;handle the additional instructions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is also a whole section titled ‘Support for Polymorphism in IL’ that explains these changes in greater detail in &lt;a href=&quot;https://www.microsoft.com/en-us/research/wp-content/uploads/2001/01/designandimplementationofgenerics.pdf&quot;&gt;Design and Implementation of Generics for the .NET Common Language Runtime&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;shared-instantiations&quot;&gt;Shared Instantiations&lt;/h3&gt;

&lt;p&gt;From &lt;a href=&quot;https://www.microsoft.com/en-us/research/wp-content/uploads/2001/01/designandimplementationofgenerics.pdf&quot;&gt;Design and Implementation of Generics for the .NET Common Language Runtime&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Two instantiations are compatible if for any parameterized class its
compilation at these instantiations gives rise to identical code and
other execution structures (e.g. field layout and GC tables), apart
from the dictionaries described below in Section 4.4. In particular,
&lt;strong&gt;all reference types are compatible with each other&lt;/strong&gt;, because the
loader and JIT compiler make no distinction for the purposes of
field layout or code generation. On the implementation for the Intel
x86, at least, &lt;strong&gt;primitive types are mutually incompatible&lt;/strong&gt;, even
if they have the same size (floats and ints have different parameter
passing conventions). That leaves &lt;strong&gt;user-defined struct types, which
are compatible if their layout is the same&lt;/strong&gt; with respect to garbage
collection i.e. they share the same pattern of traced pointers&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ClassLoader::NewInstantiation(..)&lt;/code&gt; &lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/blob/master/vm/generics.cpp#L15-L202&quot;&gt;source code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TypeHandle::GetCanonicalFormAsGenericArgument()&lt;/code&gt; &lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/blob/2714ccac6f18f0f6ff885567b90484013b31e007/vm/class.cpp#L428-L490&quot;&gt;source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From a &lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/blob/2714ccac6f18f0f6ff885567b90484013b31e007/vm/typehandle.h#L227-L237&quot;&gt;comment with more info&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// For an generic type instance return the representative within the class of
// all type handles that share code.  For example, 
//    &amp;lt;int&amp;gt; --&amp;gt; &amp;lt;int&amp;gt;,
//    &amp;lt;object&amp;gt; --&amp;gt; &amp;lt;object&amp;gt;,
//    &amp;lt;string&amp;gt; --&amp;gt; &amp;lt;object&amp;gt;,
//    &amp;lt;List&amp;lt;string&amp;gt;&amp;gt; --&amp;gt; &amp;lt;object&amp;gt;,
//    &amp;lt;Struct&amp;lt;string&amp;gt;&amp;gt; --&amp;gt; &amp;lt;Struct&amp;lt;object&amp;gt;&amp;gt;
//
// If the code for the type handle is not shared then return 
// the type handle itself.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In addition, &lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/blob/2714ccac6f18f0f6ff885567b90484013b31e007/vm/genmeth.cpp#L34-L83&quot;&gt;this comment&lt;/a&gt; explains the work that needs to take place to allow shared instantiations when working with &lt;em&gt;generic methods&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: If you want more info on the ‘code-sharing’ that takes places, I recommend reading these 2 posts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/joelpob/2004/11/17/clr-generics-and-code-sharing/&quot;&gt;CLR Generics and code sharing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://web.archive.org/web/20100723221307/http://www.bluebytesoftware.com/blog/2005/03/23/DGUpdateGenericsAndPerformance.aspx&quot;&gt;DG Update: Generics and Performance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://joeduffyblog.com/2011/10/23/on-generics-and-some-of-the-associated-overheads/&quot;&gt;On generics and (some of) the associated overheads&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://yizhang82.me/dotnet-generics-sharing&quot;&gt;Sharing .NET generic code under the hood&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;compiler-and-jit-changes&quot;&gt;Compiler and JIT Changes&lt;/h3&gt;

&lt;p&gt;If seems like almost every part of the compiler had to change to accommodate generics, which is not surprising given that they touch so many parts of the code we write, &lt;code class=&quot;highlighter-rouge&quot;&gt;Types&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Classes&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Methods&lt;/code&gt;. Some of the biggest changes were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;csharp/csharp/sccomp/clsdrec.cpp&lt;/code&gt; - &lt;strong&gt;+999 -363&lt;/strong&gt; - (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-0952232ff4ff9b6e7dd3d0810c526384&quot;&gt;diff&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;csharp/csharp/sccomp/emitter.cpp&lt;/code&gt; - &lt;strong&gt;+347 -127&lt;/strong&gt; - (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-58397e0e022ba5c8e98f1ea59eadefee&quot;&gt;diff&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;csharp/csharp/sccomp/fncbind.cpp&lt;/code&gt; - &lt;strong&gt;+926 -321&lt;/strong&gt; - (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-3a12049d560ad4f93e5ce65a316fd978&quot;&gt;diff&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;csharp/csharp/sccomp/import.cpp&lt;/code&gt; - &lt;strong&gt;+382 - 88&lt;/strong&gt; - (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-6ff795bd0261cd4bd627968951cef1f3&quot;&gt;diff&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;csharp/csharp/sccomp/parser.cpp&lt;/code&gt; - &lt;strong&gt;+733 -418&lt;/strong&gt; - (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-a096d9aee517403abfd5c9171ee7ee9c&quot;&gt;diff&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;csharp/csharp/sccomp/symmgr.cpp&lt;/code&gt; - &lt;strong&gt;+741 -46&lt;/strong&gt; - (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-aa4f38f96ad3a77d5b09b8a991aa6cb8&quot;&gt;diff&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the ‘&lt;em&gt;just-in-time&lt;/em&gt;’ (JIT) compiler extra work was needed because it’s responsible for implementing the additional &lt;a href=&quot;#bytecode-or-intermediate-language-il-changes&quot;&gt;‘IL Instructions’&lt;/a&gt;. The bulk of these changes took place in  &lt;code class=&quot;highlighter-rouge&quot;&gt;fjit.cpp&lt;/code&gt; (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-9f6e7a75bd6b1a7a0cdd5e8035890206&quot;&gt;diff&lt;/a&gt;) and &lt;code class=&quot;highlighter-rouge&quot;&gt;fjitdef.h&lt;/code&gt; (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-ddf200851d7fc0eb14bf1f64403cfae7&quot;&gt;diff&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Finally, a large amount of work was done in &lt;code class=&quot;highlighter-rouge&quot;&gt;vm/jitinterface.cpp&lt;/code&gt; (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-fea4cf9500609e43a8069a1dcfa43b71&quot;&gt;diff&lt;/a&gt;) to enable the JIT to access the extra information it needed to emit code for generic methods.&lt;/p&gt;

&lt;h3 id=&quot;debugger-changes&quot;&gt;Debugger Changes&lt;/h3&gt;

&lt;p&gt;Last, but by no means least, a significant amount of work was done to ensure that the debugger could understand and inspect generics types. It goes to show just how much &lt;em&gt;inside information&lt;/em&gt; a debugger needs to have of the type system in an managed language.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;debug/ee/debugger.cpp&lt;/code&gt; (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-13c4c633f56c04ff5faf6dce22560847&quot;&gt;diff&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;debug/ee/debugger.h&lt;/code&gt; (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-f89efe7b1a060b67715d76a176830017&quot;&gt;diff&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;debug/di/module.cpp&lt;/code&gt; (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-22234c906bfe132ec494932cf06e3fb1&quot;&gt;diff&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;debug/di/rsthread.cpp&lt;/code&gt; (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-a0ed41f780929de1f626f8e7b4354dcb&quot;&gt;diff&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;debug/shell/dshell.cpp&lt;/code&gt; (&lt;a href=&quot;https://github.com/mattwarren/GenericsInDotNet/commit/2714ccac6f18f0f6ff885567b90484013b31e007#diff-3abe6da78df285aff42ab5932f2dda93&quot;&gt;diff&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h1&gt;

&lt;p&gt;If you want even more information about generics in .NET, there are also some very useful design docs available (included in the &lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=52517&quot;&gt;Gyro source code download&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/data/2018/03/csharp.html&quot;&gt;Generics in C#&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/data/2018/03/clrgen-types.html&quot;&gt;Generics in the Common Type System&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/data/2018/03/clrgen-il.html&quot;&gt;IL extensions for generics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download?rep=rep1&amp;amp;type=pdf&amp;amp;doi=10.1.1.124.3911&quot;&gt;Pre-compilation for .NET Generics by Andrew Kennedy &amp;amp; Don Syme&lt;/a&gt; (pdf) is an interesting read&lt;/p&gt;

     
     
     
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
     <category term='Generics' scheme='http://www.mattwarren.org/tags#Generics'/>
   
 </entry>
 
 <entry>
   <title>Resources for Learning about .NET Internals</title>
   <link href="http://www.mattwarren.org/2018/01/22/Resources-for-Learning-about-.NET-Internals/"/>
   <updated>2018-01-22T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2018/01/22/Resources-for-Learning-about-.NET-Internals</id>
   <content type="html">
     &lt;p&gt;It all started with a tweet, which seemed to resonate with people:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;If you like reading my posts on .NET internals, you&amp;#39;ll like all these other blogs. So I&amp;#39;ve put them together in a thread for you!!&lt;/p&gt;&amp;mdash; Matt Warren (@matthewwarren) &lt;a href=&quot;https://twitter.com/matthewwarren/status/951799867038404608?ref_src=twsrc%5Etfw&quot;&gt;January 12, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;The aim was to list blogs that &lt;em&gt;specifically&lt;/em&gt; cover .NET internals at a low-level or to put it another way, blogs that answer the question &lt;strong&gt;how does feature ‘X’ work, under-the-hood&lt;/strong&gt;. The list includes either &lt;em&gt;typical posts&lt;/em&gt; for that blog, or just some of &lt;em&gt;my favourites&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; for a wider list of .NET and performance related blogs see &lt;a href=&quot;https://github.com/adamsitnik/awesome-dot-net-performance#article-series&quot;&gt;Awesome .NET Performance&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/SitnikAdam&quot;&gt;Adam Sitnik&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I &lt;strong&gt;wouldn’t recommend reading through the entire list&lt;/strong&gt;, at least not in one go, your brain will probably melt. Picks some posts/topics that interest you and start with those.&lt;/p&gt;

&lt;p&gt;Finally, bear in mind that some of the posts are over 10 years old, so there’s a chance that things have changed since then (however, in my experience, the low-levels parts of the CLR are more stable). If you want to double-check the latest behaviour, you’re best option is to &lt;a href=&quot;https://github.com/dotnet/coreclr&quot;&gt;read the source&lt;/a&gt;!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;community-or-non-microsoft-blogs&quot;&gt;Community or Non-Microsoft Blogs&lt;/h2&gt;

&lt;p&gt;These blogs are all written by non-Microsoft employees (AFAICT), or if they do work for Microsoft, they don’t work directly on the CLR. If I’ve missed any interesting blogs out, please let me know!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Special mention&lt;/strong&gt; goes to &lt;strong&gt;Sasha Goldshtein&lt;/strong&gt;, he’s been blogging about this &lt;a href=&quot;http://blogs.microsoft.co.il/sasha/tag/netinternals/&quot;&gt;longer than anyone&lt;/a&gt;!!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.microsoft.co.il/sasha&quot;&gt;&lt;strong&gt;All Your Base Are Belong To Us&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/goldshtn&quot;&gt;&lt;strong&gt;Sasha Goldshtein&lt;/strong&gt; (@goldshtn)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://blogs.microsoft.co.il/sasha/2010/07/09/generic-method-dispatch/&quot;&gt;Generic Method Dispatch&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://blogs.microsoft.co.il/sasha/2010/08/25/inspecting-local-root-lifetime/&quot;&gt;Inspecting Local Root Lifetime&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://blogs.microsoft.co.il/sasha/2012/03/15/virtual-method-dispatch-and-object-layout-changes-in-clr-40/&quot;&gt;Virtual Method Dispatch and Object Layout Changes in CLR 4.0&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://blogs.microsoft.co.il/sasha/2012/09/18/runtime-representation-of-genericspart-2/&quot;&gt;Runtime Representation of Generics—Part 2&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://blogs.microsoft.co.il/sasha/2013/04/10/revisiting-value-types-vs-reference-types/&quot;&gt;Revisiting Value Types vs. Reference Types&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/seteplia&quot;&gt;&lt;strong&gt;Dissecting the code&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/STeplyakov&quot;&gt;&lt;strong&gt;Sergey Teplyakov&lt;/strong&gt; (@STeplyakov)&lt;/a&gt; (&lt;strong&gt;M/S&lt;/strong&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/seteplia/2017/01/05/understanding-different-gc-modes-with-concurrency-visualizer/&quot;&gt;Understanding different GC modes with Concurrency Visualizer&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/seteplia/2017/05/09/garbage-collection-and-variable-lifetime-tracking/&quot;&gt;Garbage collection and variable lifetime tracking&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/seteplia/2017/05/26/managed-object-internals-part-1-layout/&quot;&gt;Managed object internals, Part 1. The layout&lt;/a&gt; (Also &lt;a href=&quot;https://blogs.msdn.microsoft.com/seteplia/2017/09/06/managed-object-internals-part-2-object-header-layout-and-the-cost-of-locking/&quot;&gt;part 2&lt;/a&gt;, &lt;a href=&quot;https://blogs.msdn.microsoft.com/seteplia/2017/09/12/managed-object-internals-part-3-the-layout-of-a-managed-array-3/&quot;&gt;part 3&lt;/a&gt; and &lt;a href=&quot;https://blogs.msdn.microsoft.com/seteplia/2017/09/21/managed-object-internals-part-4-fields-layout/&quot;&gt;part 4&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/seteplia/2017/05/17/box-or-not-to-box-that-is-the-question/&quot;&gt;To box or not to Box? That is the question!&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/seteplia/2017/02/01/dissecting-the-new-constraint-in-c-a-perfect-example-of-a-leaky-abstraction/&quot;&gt;Dissecting the new() constraint in C#: a perfect example of a leaky abstraction&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://adamsitnik.com&quot;&gt;&lt;strong&gt;Adam Sitnik - .NET Performance and Reliability&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/SitnikAdam&quot;&gt;&lt;strong&gt;Adam Sitnik&lt;/strong&gt; (@SitnikAdam)&lt;/a&gt; (&lt;strong&gt;M/S&lt;/strong&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://adamsitnik.com/Value-Types-vs-Reference-Types/&quot;&gt;Value Types vs Reference Types&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://adamsitnik.com/Span/&quot;&gt;Span&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://adamsitnik.com/Array-Pool/&quot;&gt;Pooling large arrays with ArrayPool&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://adamsitnik.com/Hardware-Counters-Diagnoser/&quot;&gt;Collecting Hardware Performance Counters with BenchmarkDotNet&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://adamsitnik.com/Disassembly-Diagnoser/&quot;&gt;Disassembling .NET Code with BenchmarkDotNet&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://aakinshin.net/blog&quot;&gt;&lt;strong&gt;Andrey Akinshin’s blog&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/andrey_akinshin&quot;&gt;&lt;strong&gt;Andrey Akinshin&lt;/strong&gt; (@andrey_akinshin)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://aakinshin.net/blog/post/stephen-toub-benchmarks-part1/&quot;&gt;Measuring Performance Improvements in .NET Core with BenchmarkDotNet (Part 1)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://aakinshin.net/blog/post/blittable/&quot;&gt;Blittable types&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://aakinshin.net/blog/post/datetime/&quot;&gt;DateTime under the hood&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://aakinshin.net/blog/post/stopwatch/&quot;&gt;Stopwatch under the hood&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tooslowexception.com/&quot;&gt;&lt;strong&gt;TooSlowException&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/konradkokosa&quot;&gt;&lt;strong&gt;Konrad Kokosa&lt;/strong&gt; (@konradkokosa)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://tooslowexception.com/net-core-compilation-running-debugging/&quot;&gt;.NET Core – compilation, running, debugging&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://tooslowexception.com/how-does-gettype-work/&quot;&gt;How does Object.GetType() really work?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://tooslowexception.com/zero-garbage-collector-for-net-core/&quot;&gt;Zero Garbage Collector for .NET Core&lt;/a&gt; and the follow-up &lt;a href=&quot;http://tooslowexception.com/zero-garbage-collector-for-net-core-2-1-and-asp-net-core-2-1/&quot;&gt;Zero Garbage Collector for .NET Core 2.1 and ASP.NET Core 2.1&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://tooslowexception.com/the-ultimate-net-experiment-project/&quot;&gt;The Ultimate .NET Experiment – open source project&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://marcinjuraszek.com&quot;&gt;&lt;strong&gt;a little bit of programming&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/mmjuraszek&quot;&gt;&lt;strong&gt;Marcin Juraszek&lt;/strong&gt; (@mmjuraszek)&lt;/a&gt; (&lt;strong&gt;M/S&lt;/strong&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://marcinjuraszek.com/2017/10/string-split-and-int-array-allocations.html&quot;&gt;String.Split and int[] allocations&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://marcinjuraszek.com/2017/05/adding-matt-operator-to-roslyn-part-1.html&quot;&gt;Adding Matt operator to Roslyn - Syntax, Lexer and Parser&lt;/a&gt; (&lt;a href=&quot;https://marcinjuraszek.com/2017/05/adding-matt-operator-to-roslyn-part-2.html&quot;&gt;Part 2 - Binder&lt;/a&gt;, &lt;a href=&quot;https://marcinjuraszek.com/2017/06/adding-matt-operator-to-roslyn-part-3.html&quot;&gt;Part 3 - Emitter&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://yizhang82.me&quot;&gt;&lt;strong&gt;yizhang82’s blog&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/yizhang82&quot;&gt;&lt;strong&gt;Yi Zhang&lt;/strong&gt; (@yizhang82)&lt;/a&gt; (&lt;strong&gt;M/S&lt;/strong&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://yizhang82.me/dotnet-generics-sharing&quot;&gt;Sharing .NET generic code under the hood&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://yizhang82.me/value-type-boxing&quot;&gt;C# value type boxing under the hood&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://yizhang82.me/hosting-coreclr&quot;&gt;Embedding CoreCLR in your C/C++ application&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codingsight.com/author/timur-guev/&quot;&gt;&lt;strong&gt;Timur Guev’s posts on {coding}Sight&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/timyrik20&quot;&gt;&lt;strong&gt;Timur Guev&lt;/strong&gt; (@timyrik200)&lt;/a&gt;, also &lt;em&gt;appears&lt;/em&gt; to have his own blog &lt;a href=&quot;http://timyrguev.blogspot.co.uk/&quot;&gt;Math and Programming&lt;/a&gt; (in Russian)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://codingsight.com/the-origin-of-gethashcode-in-net/&quot;&gt;The origin of GetHashCode in .NET&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://codingsight.com/strings-in-dot-net/&quot;&gt;Aspects of Strings in .NET&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://codingsight.com/stringbuilder-the-past-and-the-future/&quot;&gt;StringBuilder: the Past and the Future&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://alexandrnikitin.github.io/blog/&quot;&gt;&lt;strong&gt;The mole is digging&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/nikitin_a_a&quot;&gt;&lt;strong&gt;Alexandr Nikitin&lt;/strong&gt; (@nikitin_a_a)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://alexandrnikitin.github.io/blog/dotnet-generics-under-the-hood/&quot;&gt;.NET Generics under the hood&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://alexandrnikitin.github.io/blog/hoisting-in-net-explained/&quot;&gt;Hoisting in .NET Explained&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://alexandrnikitin.github.io/blog/hoisting-in-net-examples/&quot;&gt;Hoisting in .NET Examples&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mycodingplace.wordpress.com&quot;&gt;&lt;strong&gt;My Coding Place&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/dudi_ke&quot;&gt;&lt;strong&gt;Dudi Keleti&lt;/strong&gt; (@dudi_ke)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://mycodingplace.wordpress.com/2018/01/10/object-header-get-complicated/&quot;&gt;Object header get complicated&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://mycodingplace.wordpress.com/2014/04/22/call-vs-callvirt-instruction/&quot;&gt;IL Call Vs. Callvirt Instruction&lt;/a&gt; (&lt;a href=&quot;https://mycodingplace.wordpress.com/2014/04/24/il-call-vs-callvirt-instruction-part-two/&quot;&gt;Part 2&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://mycodingplace.wordpress.com/2016/11/11/value-type-methods-call-callvirt-constrained-and-hidden-boxing/&quot;&gt;Value type methods – call, callvirt, constrained and hidden boxing&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://xoofx.com/blog/&quot;&gt;&lt;strong&gt;Alexandre Mutel’s blog&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/xoofx&quot;&gt;&lt;strong&gt;Alexandre Mutel&lt;/strong&gt; (@xoofx)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://xoofx.com/blog/2015/10/08/stackalloc-for-class-with-roslyn-and-coreclr/&quot;&gt;A new stackalloc operator for reference types with CoreCLR and Roslyn&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://xoofx.com/blog/2015/09/27/struct-inheritance-in-csharp-with-roslyn-and-coreclr/&quot;&gt;Struct inheritance in C# with CoreCLR and Roslyn&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span id=&quot;Update&quot;&gt;&lt;/span&gt;
&lt;strong&gt;Update:&lt;/strong&gt; I missed out a few blogs and learnt about some new ones:&lt;/p&gt;

&lt;p&gt;Honourable mention goes to &lt;a href=&quot;https://www.codeproject.com/Articles/20481/NET-Type-Internals-From-a-Microsoft-CLR-Perspecti&quot;&gt;.NET Type Internals - From a Microsoft CLR Perspective&lt;/a&gt; on CodeProject, it’s a great article!!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aloiskraus.wordpress.com&quot;&gt;&lt;strong&gt;Performance is everything. But correctness comes first.&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;http://geekswithblogs.net/akraus1/Default.aspx&quot;&gt;&lt;strong&gt;Alois Kraus&lt;/strong&gt;&lt;/a&gt; (also includes some great posts on Windows Internals and Debugging, such as &lt;a href=&quot;https://aloiskraus.wordpress.com/2016/10/03/windows-10-memory-compression-and-more/&quot;&gt;Windows 10 Memory Compression And More&lt;/a&gt; and &lt;a href=&quot;https://aloiskraus.wordpress.com/2016/10/09/how-buffered-io-can-ruin-performance/&quot;&gt;How Buffered IO Can Ruin Performance&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://aloiskraus.wordpress.com/2016/07/18/the-non-contracting-code-contracts/&quot;&gt;The Non Contracting Code Contracts&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://aloiskraus.wordpress.com/2016/07/31/when-known-net-bugs-bite-you/&quot;&gt;When Known .NET Bugs Bite You&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://aloiskraus.wordpress.com/2017/04/23/the-definitive-serialization-performance-guide/&quot;&gt;The Definitive Serialization Performance Guide&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://aloiskraus.wordpress.com/2017/08/17/memanalyzer-v2-5-released/&quot;&gt;MemAnalyzer v2.5 Released&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.barrkel.com&quot;&gt;&lt;strong&gt;Entropy Overload&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://stackoverflow.com/users/3712/barry-kelly&quot;&gt;&lt;strong&gt;Barry Kelly&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://blog.barrkel.com/2006/05/call-vs-callvirt-for-c-non-virtual.html&quot;&gt;Call vs CallVirt for C# non-virtual instance methods&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://blog.barrkel.com/2006/07/covariance-and-contravariance-in-net.html&quot;&gt;Covariance and Contravariance in .NET, Java and C++&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://blog.barrkel.com/2006/07/not-so-lazy-garbage-collector.html&quot;&gt;The not so lazy garbage collector&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://blog.barrkel.com/2009/12/commonly-confused-tidbits-re-net.html&quot;&gt;Commonly Confused Tidbits re .NET Garbage Collector&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.matthewskelton.net&quot;&gt;&lt;strong&gt;Matthew Skelton’s blog&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/matthewpskelton&quot;&gt;&lt;strong&gt;Matthew Skelton&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.matthewskelton.net/2012/01/29/advanced-call-processing-in-the-clr/&quot;&gt;Advanced Call Processing in the CLR&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.matthewskelton.net/2012/01/29/clr-com-interop/&quot;&gt;CLR-COM Interop&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.matthewskelton.net/2012/01/29/clr-contexts/&quot;&gt;CLR Contexts&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.liranchen.com&quot;&gt;&lt;strong&gt;.Net Internals, Debugging, Multithreading - and More!&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;??&quot;&gt;&lt;strong&gt;Liran Chen&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.liranchen.com/2010/08/accurately-measuring-gc-suspensions.html&quot;&gt;Accurately Measuring GC Suspensions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.liranchen.com/2010/07/behind-locals-init-flag.html&quot;&gt;Behind The .locals init Flag&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.liranchen.com/2010/08/brain-teasing-with-strings.html&quot;&gt;Brain Teasing With Strings&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.maartenballiauw.be/&quot;&gt;&lt;strong&gt;Maarten Balliauw {blog}&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/maartenballiauw&quot;&gt;&lt;strong&gt;Maarten Balliauw&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.maartenballiauw.be/post/2017/01/03/exploring-.net-managed-heap-with-clrmd.html&quot;&gt;Exploring .NET managed heap with ClrMD&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.maartenballiauw.be/post/2016/11/15/exploring-memory-allocation-and-strings.html&quot;&gt;Exploring memory allocation and strings&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.maartenballiauw.be/post/2016/10/19/making-net-code-less-allocatey-garbage-collector.html&quot;&gt;Making .NET code less allocatey - Allocations and the Garbage Collector&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tabsoverspaces.com&quot;&gt;&lt;strong&gt;tabs ↹ over ␣ ␣ ␣ spaces&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/cincura_net&quot;&gt;&lt;strong&gt;Jiri Cincura&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.tabsoverspaces.com/233660-are-static-methods-faster-in-execution-compared-to-instance-methods-dotnet/&quot;&gt;Are static methods faster in execution compared to instance methods?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.tabsoverspaces.com/233661-where-are-the-differences-in-execution-speed-of-various-method-types-come-from-dotnet/&quot;&gt;Where are the differences in execution speed of various method types come from?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ntcore.com/articles.php&quot;&gt;&lt;strong&gt;NTCore&lt;/strong&gt;&lt;/a&gt; (also writes on the &lt;a href=&quot;http://cerbero-blog.com/?author=1&quot;&gt;Cerbero Blog&lt;/a&gt;) by &lt;a href=&quot;https://twitter.com/dpistelli&quot;&gt;&lt;strong&gt;Daniel Pistelli&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.ntcore.com/Files/netint_native.htm&quot;&gt;.NET Internals and Native Compiling&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.ntcore.com/files/netint_injection.htm&quot;&gt;.NET Internals and Code Injection&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.ntcore.com/files/dotnetformat.htm&quot;&gt;The .NET File Format&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.abhisheksur.com&quot;&gt;&lt;strong&gt;DOT NET TRICKS&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/abhi2434&quot;&gt;&lt;strong&gt;Abhishek Sur (@abhi2434)&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.abhisheksur.com/2011/03/internals-to-net.html&quot;&gt;Internals to .NET&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.abhisheksur.com/2011/09/internals-of-net-objects-and-use-of-sos.html&quot;&gt;Internals of .NET Objects and Use of SOS&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.abhisheksur.com/2011/07/valuetypes-and-referencetypes-under.html&quot;&gt;ValueTypes and ReferenceTypes : Under the Hood&lt;/a&gt; (&lt;a href=&quot;http://www.abhisheksur.com/2011/07/valuetype-and-referencetype-under-hood.html&quot;&gt;part 2&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.adamfurmanek.pl/&quot;&gt;&lt;strong&gt;Random IT Utensils&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/furmanekadam&quot;&gt;Adam Furmanek&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.adamfurmanek.pl/2016/04/23/custom-memory-allocation-in-c-part-1/&quot;&gt;Custom memory allocation in C# Part 1 — Allocating object on a stack&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.adamfurmanek.pl/2016/07/09/custom-memory-allocation-in-c-part-6/&quot;&gt;Custom memory allocation in C# Part 6 — Memory errors&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.adamfurmanek.pl/2016/05/21/virtual-and-non-virtual-calls-in-c/&quot;&gt;.NET Inside Out Part 1 — Virtual and non-virtual calls in C#&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.adamfurmanek.pl/2017/05/27/how-to-override-sealed-function-in-c-revisited/&quot;&gt;.NET Inside Out Part 4 — How to override sealed function in C# Revisited&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.adamfurmanek.pl/2018/03/24/generating-func-from-bunch-of-bytes-in-c/&quot;&gt;.NET Inside Out Part 7 — Generating Func from a bunch of bytes in C#&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.red-gate.com/simple-talk/author/24200-simon-cooper/&quot;&gt;&lt;strong&gt;Redgate ‘Simple Talk’ posts&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;&quot;&gt;&lt;strong&gt;Simon Cooper&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.red-gate.com/Search/?s=%22Anatomy+of+a+.NET+Assembly%22&amp;amp;t=simpletalk&quot;&gt;Series on ‘&lt;strong&gt;Anatomy of a .NET Assembly&lt;/strong&gt;’&lt;/a&gt; (&lt;a href=&quot;https://www.google.co.uk/search?q=site%3Ahttps%3A%2F%2Fwww.red-gate.com%2Fsimple-talk%2F+%22Anatomy+of+a+.NET+Assembly%22&amp;amp;oq=site%3Ahttps%3A%2F%2Fwww.red-gate.com%2Fsimple-talk%2F+%22Anatomy+of+a+.NET+Assembly%22&quot;&gt;Google search&lt;/a&gt;)
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.red-gate.com/simple-talk/blogs/anatomy-of-a-net-assembly-pe-headers/&quot;&gt;PE Headers&lt;/a&gt; (Intro)&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.red-gate.com/simple-talk/blogs/anatomy-of-a-net-assembly-clr-metadata-1/&quot;&gt;CLR metadata 1&lt;/a&gt;, &lt;a href=&quot;https://www.red-gate.com/simple-talk/blogs/anatomy-of-a-net-assembly-clr-metadata-2/&quot;&gt;Part 2&lt;/a&gt; and &lt;a href=&quot;https://www.red-gate.com/simple-talk/blogs/anatomy-of-a-net-assembly-clr-metadata-3/&quot;&gt;Part 3&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.red-gate.com/simple-talk/blogs/anatomy-of-a-net-assembly-the-dos-stub/&quot;&gt;The DOS stub&lt;/a&gt; and &lt;a href=&quot;https://www.red-gate.com/simple-talk/blogs/anatomy-of-a-net-assembly-the-clr-loader-stub/&quot;&gt;The CLR Loader stub&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.red-gate.com/simple-talk/blogs/anatomy-of-a-net-assembly-methods/&quot;&gt;Methods&lt;/a&gt; and &lt;a href=&quot;https://www.red-gate.com/simple-talk/blogs/anatomy-of-a-net-assembly-type-forwards/&quot;&gt;Type forwards&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.red-gate.com/Search/?s=%22Subterranean+IL%22&amp;amp;t=simpletalk&quot;&gt;Series on ‘&lt;strong&gt;Subterranean IL&lt;/strong&gt;’&lt;/a&gt; (&lt;a href=&quot;https://www.google.co.uk/search?q=site%3Ahttps%3A%2F%2Fwww.red-gate.com%2Fsimple-talk%2F+%22Subterranean+IL%22&amp;amp;oq=site%3Ahttps%3A%2F%2Fwww.red-gate.com%2Fsimple-talk%2F+%22Subterranean+IL%22&quot;&gt;Google search&lt;/a&gt;)
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.red-gate.com/simple-talk/blogs/subterranean-il-introduction/&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.red-gate.com/simple-talk/blogs/subterranean-il-callvirt-and-virtual-methods/&quot;&gt;Callvirt and virtual methods&lt;/a&gt; and &lt;a href=&quot;https://www.red-gate.com/simple-talk/blogs/subterranean-il-callvirt-and-generic-types/&quot;&gt;Callvirt and generic types&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.red-gate.com/simple-talk/blogs/subterranean-il-the-threadlocal-type/&quot;&gt;The ThreadLocal type&lt;/a&gt; and &lt;a href=&quot;https://www.red-gate.com/simple-talk/blogs/subterranean-il-threadlocal-revisited/&quot;&gt;ThreadLocal revisited&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ayende.com&quot;&gt;&lt;strong&gt;Ayende @ Rahien&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/ayende&quot;&gt;&lt;strong&gt;Oren Eini&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://ayende.com/blog/177986/de-virtualization-in-coreclr-part-i&quot;&gt;De-virtualization in CoreCLR - Part I&lt;/a&gt; and &lt;a href=&quot;https://ayende.com/blog/177987/de-virtualization-in-coreclr-part-ii&quot;&gt;Part II&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://ayende.com/blog/174914/debugging-coreclr-applications-in-windbg&quot;&gt;Debugging CoreCLR applications in WinDBG&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://ayende.com/blog/174977/digging-into-the-coreclr-jit-introduction&quot;&gt;Digging into the CoreCLR - JIT Introduction&lt;/a&gt; (by &lt;a href=&quot;https://twitter.com/federicolois&quot;&gt;Federico Andres Lois&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://ayende.com/blog/175009/digging-into-the-coreclr-exceptional-costs-part-i&quot;&gt;Digging into the CoreCLR - Exceptional costs, Part I&lt;/a&gt; and &lt;a href=&quot;https://ayende.com/blog/175010/digging-into-the-coreclr-exceptional-costs-part-ii&quot;&gt;Part II&lt;/a&gt; (by &lt;a href=&quot;https://twitter.com/federicolois&quot;&gt;Federico Andres Lois&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lowleveldesign.org&quot;&gt;&lt;strong&gt;Low Level Design&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/lowleveldesign&quot;&gt;&lt;strong&gt;Sebastian Solnica&lt;/strong&gt;&lt;/a&gt; (he’s also done some &lt;a href=&quot;https://lowleveldesign.org/presentations/&quot;&gt;great presentations&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://lowleveldesign.org/2010/10/11/writing-a-net-debugger-part-1-starting-the-debugging-session/&quot;&gt;Writing a .Net Debugger&lt;/a&gt;, also &lt;a href=&quot;https://lowleveldesign.org/2010/10/22/writing-a-net-debugger-part-2-handling-events-and-creating-wrappers/&quot;&gt;Part 2&lt;/a&gt;, &lt;a href=&quot;https://lowleveldesign.org/2010/11/08/writing-a-net-debugger-part-3-symbol-and-source-files/&quot;&gt;Part 3&lt;/a&gt; and &lt;a href=&quot;https://lowleveldesign.org/2010/12/01/writing-a-net-debugger-part-4-breakpoints/&quot;&gt;Part 4&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://lowleveldesign.org/2018/08/15/randomness-in-net/&quot;&gt;Randomness in .NET&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://lowleveldesign.org/2016/08/23/enumerating-appdomains-in-a-remote-process/&quot;&gt;Enumerating AppDomains in a remote process&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ekasiswanto.wordpress.com/&quot;&gt;&lt;strong&gt;Welcome to the Corner of Excellence&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/surya_rakanta&quot;&gt;&lt;strong&gt;Eka Siswanto&lt;/strong&gt;&lt;/a&gt; now hosted at &lt;a href=&quot;https://excellentcorner.com/&quot;&gt;https://excellentcorner.com/&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://excellentcorner.com/2018/06/21/how-to-perform-precise-breakpoint-on-net-method-in-windbg/&quot;&gt;How to Perform Precise Breakpoint on .NET Method in WinDBG&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://ekasiswanto.wordpress.com/2010/11/15/sos-internals-threads-command/&quot;&gt;SOS Internals – threads Command&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://ekasiswanto.wordpress.com/2010/11/17/sos-internals-dumpdomain-command/&quot;&gt;SOS Internals – DumpDomain Command&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://ekasiswanto.wordpress.com/2010/11/23/sos-internals-dumpmodule-command/&quot;&gt;SOS Internals – DumpModule Command&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.steveniemitz.com&quot;&gt;&lt;strong&gt;Steve’s Tech Blog&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/steveniemitz&quot;&gt;&lt;strong&gt;Steven Niemitz&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://blog.steveniemitz.com/building-a-mixed-mode-stack-walker-part-1/&quot;&gt;Building a mixed-mode stack walker - Part 1&lt;/a&gt; and &lt;a href=&quot;http://blog.steveniemitz.com/building-a-mixed-mode-stack-walker-part-2/&quot;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://blog.steveniemitz.com/implementing-sos-with-spt-part-1-of-n-dumpobj/&quot;&gt;Implementing SOS with SPT - Part 1 of N - &lt;strong&gt;DumpObj&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;http://blog.steveniemitz.com/implementing-sos-with-spt-part-2-of-n-dumpstackobjects/&quot;&gt;Part 2 of N - &lt;strong&gt;DumpStackObjects&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;http://blog.steveniemitz.com/implementing-sos-with-spt-part-3-of-n-dumpmd-ip2md/&quot;&gt;Part 3 of N - &lt;strong&gt;DumpMD &amp;amp; IP2MD&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://blog.steveniemitz.com/threads-cant-be-aborted-while-theyre-running-code-inside-a-catchfinally-block/&quot;&gt;Threads can’t be aborted while they’re running code inside a catch/finally block&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mode19.net/&quot;&gt;&lt;strong&gt;Mode 13h&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/DustinMetzgar&quot;&gt;&lt;strong&gt;Dustin Metzgar&lt;/strong&gt;&lt;/a&gt; (author of &lt;a href=&quot;https://www.manning.com/books/dotnet-core-in-action&quot;&gt;.NET Core in Action&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.mode19.net/posts/clrhostingold/&quot;&gt;Hosting the CLR the &lt;strong&gt;Old&lt;/strong&gt; Way&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.mode19.net/posts/clrhostingright/&quot;&gt;Hosting the CLR the &lt;strong&gt;Right&lt;/strong&gt; Way&lt;/a&gt;
&lt;a href=&quot;http://benbowen.blog&quot;&gt;&lt;strong&gt;Ben Bowen’s Blog&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/Xenoprimate&quot;&gt;&lt;strong&gt;Ben Bowen&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://benbowen.blog/post/fun_with_makeref/&quot;&gt;Fun With __makeref&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://benbowen.blog/post/pinvoke_tips/&quot;&gt;P/Invoke Tips&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://benbowen.blog/post/tale_of_two_casts/#implementation_details&quot;&gt;Postmortems - Tale of Two Casts&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;book-of-the-runtime-botr&quot;&gt;Book of the Runtime (BotR)&lt;/h2&gt;

&lt;p&gt;The BotR deserves it’s own section (thanks to &lt;strong&gt;svick&lt;/strong&gt; to &lt;a href=&quot;http://disq.us/p/1pkmyni&quot;&gt;reminding me about it&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If you haven’t heard of the BotR before, there’s a nice FAQ that &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/botr-faq.md#what-is-the-botr&quot;&gt;explains what it is&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Book of the Runtime is a set of documents that describe components in the CLR and BCL. They are intended to focus more on architecture and invariants and not an annotated description of the codebase.&lt;/p&gt;

  &lt;p&gt;It was originally created within Microsoft in ~2007, including this document. Developers were responsible to document their feature areas. This helped new devs joining the team and also helped share the product architecture across the team.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To find your way around it, I recommend starting with the &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/Documentation/botr#the-book-of-the-runtime&quot;&gt;table of contents&lt;/a&gt; and then diving in.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It’s written for &lt;em&gt;developers working on the CLR&lt;/em&gt;, so it’s not an introductory document. I’d recommend reading some of the other blog posts first, then referring to the BotR once you have the basic knowledge. For instance many of my blog posts started with me reading a chapter from the BotR, not fully understanding it, going away and learning some more, writing up what I found and then pointing people to the relevant BotR page for more information.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;microsoft-engineers&quot;&gt;Microsoft Engineers&lt;/h2&gt;

&lt;p&gt;The blogs below are written by the &lt;em&gt;actual&lt;/em&gt; engineers who worked on, designed or managed various parts of the CLR, so they give a deep insight (again, if I’ve missed any blogs out, please let me know):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/maoni&quot;&gt;&lt;strong&gt;Maoni’s WebLog - CLR Garbage Collector&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://channel9.msdn.com/Shows/On-NET/Maoni-Stephens-on-NET-GC&quot;&gt;&lt;strong&gt;Maoni Stephens&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/maoni/2006/06/07/suspending-and-resuming-threads-for-gc/&quot;&gt;Suspending and resuming threads for GC&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/maoni/2015/07/15/allocating-on-the-stack-or-the-heap/&quot;&gt;Allocating on the stack or the heap?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/maoni/2006/04/19/large-object-heap/&quot;&gt;Large Object Heap&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/cbrumme/&quot;&gt;&lt;strong&gt;cbrumme’s WebLog&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://channel9.msdn.com/Search?term=Christopher%20Brumme#ch9Search&amp;amp;lang-en=en&amp;amp;pubDate=all&quot;&gt;&lt;strong&gt;Christopher Brumme&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/cbrumme/2003/05/17/memory-model/&quot;&gt;Memory Model&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/cbrumme/2003/05/10/value-types/&quot;&gt;Value Types&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/cbrumme/2003/04/25/virtual-and-non-virtual/&quot;&gt;Virtual and non-virtual&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/abhinaba&quot;&gt;&lt;strong&gt;A blog on coding, .NET, .NET Compact Framework and life in general..&lt;/strong&gt;&lt;/a&gt; by &lt;strong&gt;Abhinaba Basu&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/abhinaba/2014/09/29/net-just-in-time-compilation-and-warming-up-your-system/&quot;&gt;.NET Just in Time Compilation and Warming up Your System&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/abhinaba/2008/04/30/trivia-how-does-clr-create-an-outofmemoryexception/&quot;&gt;Trivia: How does CLR create an OutOfMemoryException&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/abhinaba/2009/01/25/back-to-basic-series-on-dynamic-memory-management/&quot;&gt;Back to basic: Series on dynamic memory management&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/joelpob&quot;&gt;&lt;strong&gt;Joel Pobar’s CLR weblog - CLR Program Manager: Reflection, LCG, Generics and the type system..&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://channel9.msdn.com/Events/Speakers/Joel-Pobar&quot;&gt;&lt;strong&gt;Joel Pobar&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/joelpob/2004/07/19/clr-type-system-notes/&quot;&gt;CLR Type System notes&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/joelpob/2004/11/17/clr-generics-and-code-sharing/&quot;&gt;CLR Generics and code sharing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/joelpob/2004/02/26/explanatory-notes-on-rotors-garbage-collector/&quot;&gt;Explanatory notes on Rotor’s Garbage Collector&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/davbr/&quot;&gt;&lt;strong&gt;CLR Profiling API Blog - Info about the Common Language Runtime’s Profiling API&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://channel9.msdn.com/Search?term=David%20Broman#pubDate=all&amp;amp;ch9Search&amp;amp;lang-en=en&quot;&gt;David Broman&lt;/a&gt; (slightly niche, but still worth a read)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/davbr/2007/03/06/creating-an-il-rewriting-profiler/&quot;&gt;Creating an IL-rewriting profiler&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/davbr/2009/09/30/type-forwarding/&quot;&gt;Type Forwarding&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/davbr/2011/10/17/metadata-tokens-run-time-ids-and-type-loading/&quot;&gt;Metadata Tokens, Run-Time IDs, and Type Loading&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/yunjin&quot;&gt;&lt;strong&gt;Yun Jin’s WebLog CLR internals, Rotor code explanation, CLR debugging tips, trivial debugging notes, .NET programming pitfalls&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://social.msdn.microsoft.com/profile/Yun+Jin&quot;&gt;&lt;strong&gt;Yun Jin&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/yunjin/2004/02/09/fcall-and-gc-hole-first-post-about-rotor/&quot;&gt;FCall and GC hole – first post about Rotor&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/yunjin/2005/07/05/special-threads-in-clr/&quot;&gt;Special threads in CLR&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/yunjin/2004/02/21/dangerous-pinvokes-string-modification/&quot;&gt;Dangerous PInvokes – string modification&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/clrcodegeneration&quot;&gt;&lt;strong&gt;JIT, NGen, and other Managed Code Generation Stuff - Details about RyuJIT stuff of all sort..&lt;/strong&gt;&lt;/a&gt; by various
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/clrcodegeneration/2009/08/13/array-bounds-check-elimination-in-the-clr/&quot;&gt;Array Bounds Check Elimination in the CLR&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/clrcodegeneration/2007/11/02/how-are-value-types-implemented-in-the-32-bit-clr-what-has-been-done-to-improve-their-performance/&quot;&gt;How are value types implemented in the 32-bit CLR? What has been done to improve their performance?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/clrcodegeneration/2009/10/21/jit-etw-inlining-event-fail-reasons/&quot;&gt;JIT ETW Inlining Event Fail Reasons&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/clrcodegeneration/2010/04/27/ngen-measuring-working-set-with-vmmap/&quot;&gt;NGen: Measuring Working Set with VMMap&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/carlos&quot;&gt;&lt;strong&gt;Distributed Matters - Troubleshooting issues in technologies available to developers for building distributed applications&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://blogs.msdn.microsoft.com/carlos/author/carcolo/&quot;&gt;&lt;strong&gt;Carlo&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/carlos/2009/11/09/net-generics-and-code-bloat-or-its-lack-thereof/&quot;&gt;.NET Generics and Code Bloat (or its lack thereof)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/carlos/2008/12/10/heap-corruption-a-case-study/&quot;&gt;Heap Corruption: A Case Study&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/carlos/2013/08/23/loading-multiple-clr-runtimes-inproc-sxs-sample-code/&quot;&gt;Loading multiple CLR Runtimes (InProc SxS) – Sample Code&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bartdesmet.net/blogs/bart/archive/2006/09/27/4472.aspx&quot;&gt;&lt;strong&gt;B# .NET Blog - BART DE SMET’S on-line blog (0X2B | ~0X2B, THAT’S THE QUESTION)&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://channel9.msdn.com/Events/Speakers/Bart-De-Smet&quot;&gt;&lt;strong&gt;Bart De Smet&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://bartdesmet.net/blogs/bart/archive/2006/09/27/4472.aspx&quot;&gt;.NET 2.0 string interning inside out&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://bartdesmet.net/blogs/bart/archive/2007/02/19/inlining-yes-it-happens.aspx&quot;&gt;Inlining - yes, it happens&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://bartdesmet.net/blogs/bart/archive/2006/09/07/4395.aspx&quot;&gt;Going Unsafe - An ADDRESSOF Operator in C#&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://bartdesmet.net/blogs/bart/archive/2006/10/03/4491.aspx&quot;&gt;A Beginner’s Guide to Cordbg&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://natemcmaster.com&quot;&gt;Nate McMaster’s blog&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/natemcmaster&quot;&gt;&lt;strong&gt;Nate McMaster&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://natemcmaster.com/blog/2017/12/21/netcore-primitives/&quot;&gt;Deep-dive into .NET Core primitives: deps.json, runtimeconfig.json, and dll’s&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://natemcmaster.com/blog/2018/08/29/netcore-primitives-2/&quot;&gt;Deep-dive into .NET Core primitives, part 2: the shared framework&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://natemcmaster.com/blog/2018/07/25/netcore-plugins/&quot;&gt;.NET Core Plugins&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;books&quot;&gt;Books&lt;/h2&gt;

&lt;p&gt;Finally, if you prefer reading off-line there are some decent books that discuss .NET Internals (Note: all links are Amazon Affiliate links):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2Ba0ytN&quot;&gt;CLR via C#, 4ed by &lt;strong&gt;Jeffrey Richter&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2DcscYY&quot;&gt;Shared Source CLI Essentials Paperback by &lt;strong&gt;David Stutz, Ted Neward, Geoff Shilling&lt;/strong&gt;&lt;/a&gt; Ted (Ted Neward also made a pdf version available to &lt;a href=&quot;http://www.newardassociates.com/files/SSCLI2.pdf&quot;&gt;download from his web site&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2EOFX0e&quot;&gt;Writing High-Performance .NET Code Paperback by &lt;strong&gt;Ben Watson&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;His &lt;a href=&quot;http://www.philosophicalgeek.com&quot;&gt;blog&lt;/a&gt; is also worth reading, e.g. &lt;a href=&quot;http://www.philosophicalgeek.com/2014/09/29/digging-into-net-object-allocation-fundamentals/&quot;&gt;Digging Into .NET Object Allocation Fundamentals&lt;/a&gt; and &lt;a href=&quot;http://www.philosophicalgeek.com/2014/11/20/digging-into-net-loop-performance-bounds-checking-iteration-and-unrolling/&quot;&gt;Digging Into .NET Loop Performance, Bounds-checking, Iteration, and Unrolling&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2Djtplh&quot;&gt;Pro .NET Performance: Optimize Your C# Applications by &lt;strong&gt;Sasha Goldshtein&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the books listed above I own copies of and I’ve read cover-to-cover, they’re fantastic resources.&lt;/p&gt;

&lt;p&gt;I’ve also been recently recommend the 2 books below, they look good and certainly the authors know their stuff, but I haven’t read them yet:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2ERV6Ol&quot;&gt;The Common Language Infrastructure Annotated Standard by &lt;strong&gt;James S. Miller, Susann Ragsdale&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2Dm1yAV&quot;&gt;Essential .NET, Volume I: The Common Language Runtime by &lt;strong&gt;Don Box, Chris Sells&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;*New Release*&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://amzn.to/2PA50Jp&quot;&gt;Pro .NET Memory Management: For Better Code, Performance, and Scalability by &lt;strong&gt;Konrad Kokosa&lt;/strong&gt;&lt;/a&gt; (Nov 2018)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=16212220&quot;&gt;HackerNews&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/programming/comments/7s7rkq/resources_for_learning_about_net_internals/&quot;&gt;/r/programming&lt;/a&gt;&lt;/p&gt;

     
     
     
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
 </entry>
 
 <entry>
   <title>A look back at 2017</title>
   <link href="http://www.mattwarren.org/2017/12/31/A-look-back-at-2017/"/>
   <updated>2017-12-31T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2017/12/31/A-look-back-at-2017</id>
   <content type="html">
     &lt;p&gt;I’ve now been blogging consistently for over 2 years (~2 times per/month) and I decided it was time for my first ‘retrospective’ post.&lt;/p&gt;

&lt;p&gt;&lt;strong style=&quot;color:red&quot;&gt;Warning&lt;/strong&gt; this post contains a large amount of &lt;a href=&quot;https://www.urbandictionary.com/define.php?term=humblebrag&quot;&gt;&lt;strong&gt;humble brags&lt;/strong&gt;&lt;/a&gt;, if you’ve come here to read about &lt;a href=&quot;/tags/#Internals&quot;&gt;‘&lt;em&gt;.NET internals&lt;/em&gt;’&lt;/a&gt; you’d better check back in a few weeks, when normal service will be resumed!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;overall-stats&quot;&gt;Overall Stats&lt;/h2&gt;

&lt;p&gt;Firstly, lets looks at my Google Analytics stats for 2017, showing &lt;strong&gt;Page Views&lt;/strong&gt; and &lt;strong&gt;Sessions&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/12/Blog - Page Views &amp;amp; Sessions - 2017.png&quot;&gt;&lt;img src=&quot;/images/2017/12/Blog - Page Views &amp;amp; Sessions - 2017.png&quot; alt=&quot;Blog - Page Views &amp;amp; Sessions - 2017&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which clearly shows that I took a bit of a break during the summer! But I still managed over 800K page views, mostly because I was fortunate enough to end up on the &lt;a href=&quot;https://hn.algolia.com/?query=mattwarren.org%2F2017&amp;amp;sort=byPopularity&amp;amp;prefix&amp;amp;page=0&amp;amp;dateRange=pastYear&amp;amp;type=story&quot;&gt;front page of HackerNews a few times&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;As a comparison, here’s what ‘2017 v 2016’ looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/12/Blog - Page Views - 2016 v 2017.png&quot;&gt;&lt;img src=&quot;/images/2017/12/Blog - Page Views - 2016 v 2017.png&quot; alt=&quot;Blog - Page Views - 2016 v 2017&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is cool because it shows a nice trend, more people read my blog posts in 2017 than in 2016 (but I have no idea if it will continue in 2018?!)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;most-read-posts&quot;&gt;Most Read Posts&lt;/h2&gt;

&lt;p&gt;Next, here are my &lt;strong&gt;top 10 most read&lt;/strong&gt; posts. Surprising enough my most read post was literally just a list with 68 entries in it!!&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Post&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Page Views&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;/2017/02/07/The-68-things-the-CLR-does-before-executing-a-single-line-of-your-code/&quot;&gt;The 68 things the CLR does before executing a single line of your code&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;101,382&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;/2017/03/23/Hitchhikers-Guide-to-the-CoreCLR-Source-Code/&quot;&gt;A Hitchhikers Guide to the CoreCLR Source Code&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;61,169&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;/2017/11/08/A-DoS-Attack-against-the-C-Compiler/&quot;&gt;A DoS Attack against the C# Compiler&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;50,884&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;/2017/10/12/Analysing-C-code-on-GitHub-with-BigQuery/&quot;&gt;Analysing C# code on GitHub with BigQuery&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;40,165&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;/2017/05/19/Adding-a-new-Bytecode-Instruction-to-the-CLR/&quot;&gt;Adding a new Bytecode Instruction to the CLR&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;39,101&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;/2017/12/19/Open-Source-.Net-3-years-later&quot;&gt;Open Source .NET – 3 years later&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;36,316&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;/2017/01/25/How-do-.NET-delegates-work/&quot;&gt;How do .NET delegates work?&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;36,047&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;/2017/05/25/Lowering-in-the-C-Compiler/&quot;&gt;Lowering in the C# Compiler (and what happens when you misuse it)&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;34,375&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;/2017/06/15/How-the-.NET-Rutime-loads-a-Type/&quot;&gt;How the .NET Runtime loads a Type&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;32,813&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;/2017/10/19/DotNetAnywhere-an-Alternative-.NET-Runtime/&quot;&gt;DotNetAnywhere: An Alternative .NET Runtime&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;26,140&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;traffic-sources&quot;&gt;Traffic Sources&lt;/h2&gt;

&lt;p&gt;I was going to do a write-up on where/how I get my blog traffic, but instead I’d encourage you to read &lt;a href=&quot;https://henrikwarne.com/2017/11/26/6-years-of-thoughts-on-programming&quot;&gt;6 Years of Thoughts on Programming&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/henrikwarne&quot;&gt;Henrik Warne&lt;/a&gt; as his experience &lt;strong&gt;exactly&lt;/strong&gt; matches mine. But in summary, getting onto the front-page of &lt;a href=&quot;http://news.ycombinator.com/&quot;&gt;HackerNews&lt;/a&gt; drives &lt;strong&gt;a lot&lt;/strong&gt; of traffic to your site/blog.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Finally, a big thanks to everyone who has read, commented on or shared my blogs posts, it means a lot!!&lt;/strong&gt;&lt;/p&gt;


     
     
     
     
   </content>
   
 </entry>
 
 <entry>
   <title>Open Source .NET – 3 years later</title>
   <link href="http://www.mattwarren.org/2017/12/19/Open-Source-.Net-3-years-later"/>
   <updated>2017-12-19T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2017/12/19/Open-Source-.Net-3-years-later.</id>
   <content type="html">
     
&lt;link rel=&quot;stylesheet&quot; href=&quot;/datavis/dotnet-oss.css&quot; /&gt;

&lt;script src=&quot;/datavis/dotnet-oss.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;

&lt;p&gt;A little over 3 years ago Microsoft announced that they were &lt;a href=&quot;http://www.hanselman.com/blog/AnnouncingNET2015NETAsOpenSourceNETOnMacAndLinuxAndVisualStudioCommunity.aspx&quot;&gt;open sourcing large parts of the .NET framework&lt;/a&gt; and as &lt;a href=&quot;https://twitter.com/shanselman&quot;&gt;Scott Hanselman&lt;/a&gt; said in his &lt;a href=&quot;https://channel9.msdn.com/Events/Connect/2016/Keynotes-Scott-Guthrie-and-Scott-Hanselman&quot;&gt;Connect 2016 keynote&lt;/a&gt;, the community has been contributing in a significant way:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/poweredbyaltnet/status/798942478195970048&quot;&gt;&lt;img src=&quot;/images/2016/11/Over 60 of the contributions to dotnetcore come from the community.jpg&quot; alt=&quot;Over 60% of the contribution to .NET Core come from the community&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post forms part of an on-going series, if you want to see how things have changed over time you can check out the previous ones:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2016/11/23/open-source-net-2-years-later/?recommended=1&quot;&gt;Open Source .NET – 2 years later&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2016/01/15/open-source-net-1-year-later-now-with-aspnet/?recommended=1&quot;&gt;Open Source .NET – 1 year later - Now with ASP.NET&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2015/12/08/open-source-net-1-year-later/?recommended=1&quot;&gt;Open Source .NET – 1 year later&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, I’ve recently done a talk &lt;a href=&quot;/2017/11/14/Microsoft-and-Open-Source-a-Brave-New-World-CORESTART/&quot;&gt;covering this subject&lt;/a&gt;, the slides are below:&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/bSYyRobLw3jMLq&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/mattwarren/microsoft-open-source-a-brave-new-world-corestart-20&quot; title=&quot;Microsoft &amp;amp; open source a &amp;#x27;brave new world&amp;#x27; - CORESTART 2.0&quot; target=&quot;_blank&quot;&gt;Microsoft &amp;amp; open source a &amp;#x27;brave new world&amp;#x27; - CORESTART 2.0&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/mattwarren&quot; target=&quot;_blank&quot;&gt;Matt Warren&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;historical-perspective&quot;&gt;Historical Perspective&lt;/h3&gt;

&lt;p&gt;Now that we are 3 years down the line, it’s interesting to go back and see what the aims were when it all started. If you want to know more about this, I recommend watching the 2 Channel 9 videos below, made by the Microsoft Engineers involved in the process:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Blogs/dotnet/NET-Foundations-2015-02-25&quot;&gt;.NET Internals 2015-02-25: Open Source&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Blogs/dotnet/NET-Foundations-2015-03-04&quot;&gt;.NET Internals 2015-03-04: .NET Core &amp;amp; Cross Platform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It hasn’t always been plain sailing, it’s fair to say that there have been a few bumps along the way (I guess that’s what happens if you get to see &lt;a href=&quot;https://english.stackexchange.com/questions/120739/a-peek-into-the-sausage-factory&quot;&gt;“how the sausage gets made”&lt;/a&gt;), but I think that we’ve ended up in a good place.&lt;/p&gt;

&lt;p&gt;During the past 3 years there have been a few notable events that I think are worth mentioning:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Samsung developers have made &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/8496#issuecomment-351463875&quot;&gt;significant contributions to the CoreCLR source code&lt;/a&gt;, to support their Tizen OS&lt;/li&gt;
  &lt;li&gt;Microsoft really are developing ‘out in the open’, you can see this by how often &lt;a href=&quot;https://github.com/dotnet/coreclr/search?utf8=%E2%9C%93&amp;amp;q=%22https%3A%2F%2Fgithub.com%2Fdotnet%2Fcoreclr%22+language%3AC%2B%2B+language%3AC%23&amp;amp;type=Code&quot;&gt;GitHub issues are referenced&lt;/a&gt; in the source code&lt;/li&gt;
  &lt;li&gt;We saw the &lt;a href=&quot;https://msdn.microsoft.com/en-us/magazine/mt814808&quot;&gt;new Span&amp;lt;T&amp;gt; apis&lt;/a&gt; move their way through the various repos, &lt;a href=&quot;https://github.com/dotnet/corefxlab/search?q=Span&amp;amp;type=Commits&amp;amp;utf8=%E2%9C%93&quot;&gt;CoreFXLabs&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/search?q=Span&amp;amp;type=Commits&amp;amp;utf8=%E2%9C%93&quot;&gt;CoreCLR&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://github.com/dotnet/roslyn/search?q=Span&amp;amp;type=Commits&amp;amp;utf8=%E2%9C%93&quot;&gt;Roslyn&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://github.com/dotnet/corefx/search?q=Span&amp;amp;type=Commits&amp;amp;utf8=%E2%9C%93&quot;&gt;CoreFX&lt;/a&gt; before turning into a complete feature!&lt;/li&gt;
  &lt;li&gt;There’s been deeper integration between &lt;a href=&quot;https://github.com/dotnet/corefx/issues/25379&quot;&gt;.NET Core and Mono&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Significant Performance Improvements &lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2017/06/07/performance-improvements-in-net-core/&quot;&gt;have been made in .NET Core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;.NET Core and .NET Desktop have &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/9044#issuecomment-274543630&quot;&gt;now sufficiently diverged&lt;/a&gt; (even though they still share code, such as JIT, GC)&lt;/li&gt;
  &lt;li&gt;Microsoft have made a concerted effort to ensure that all their Open Source code can be built &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/14345&quot;&gt;just using other Open Source code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://github.com/dotnet/coreclr/projects/3&quot;&gt;Local GC&lt;/a&gt; effort has been started, aiming to ‘decouple the GC from the rest of the runtime’&lt;/li&gt;
  &lt;li&gt;.NET will be finally getting &lt;a href=&quot;/2017/12/15/How-does-.NET-JIT-a-method-and-Tiered-Compilation/&quot;&gt;Tiered Compilation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;repository-activity-over-time&quot;&gt;Repository activity over time&lt;/h3&gt;

&lt;p&gt;But onto the data, first we are going to look at an overview of the &lt;strong&gt;level of activity in each repo&lt;/strong&gt;, by looking at the total number of ‘&lt;strong&gt;Issues&lt;/strong&gt;’ (created) or ‘&lt;strong&gt;Pull Requests&lt;/strong&gt;’ (closed) per month. (&lt;a href=&quot;http://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=0001OR&quot;&gt;yay sparklines FTW!!&lt;/a&gt;). If you are interested in &lt;em&gt;how&lt;/em&gt; I got the data, see the previous post &lt;a href=&quot;/2016/11/23/open-source-net-2-years-later#methodology---community-v-microsoft&quot;&gt;because the process is the same&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Numbers in &lt;span style=&quot;color:rgb(0,0,0);font-weight:bold;&quot;&gt;black&lt;/span&gt; are from the most recent month, with the &lt;span style=&quot;color:#d62728;font-weight:bold;&quot;&gt;red&lt;/span&gt; dot showing the lowest and the &lt;span style=&quot;color:#2ca02c;font-weight:bold;&quot;&gt;green&lt;/span&gt; dot the highest previous value. You can toggle between &lt;strong&gt;Issues&lt;/strong&gt; and &lt;strong&gt;Pull Requests&lt;/strong&gt; by clicking on the buttons, hover over individual sparklines to get a tooltip showing the per/month values and click on the project name to take you to the GitHub page for that repository.&lt;/p&gt;

&lt;section class=&quot;press&quot; align=&quot;center&quot;&gt;
&lt;!-- &lt;section class=&quot;gradient&quot; align=&quot;center&quot;&gt; --&gt;
  &lt;button id=&quot;btnIssues&quot; class=&quot;active&quot;&gt;Issues&lt;/button&gt;
  &lt;button id=&quot;btnPRs&quot;&gt;Pull Requests&lt;/button&gt;
&lt;/section&gt;

&lt;div id=&quot;textbox&quot; class=&quot;rChartHeader&quot;&gt;
  &lt;!-- The Start/End dates are setup dynamically, once the data is loaded --&gt;
  &lt;p id=&quot;dataStartDate&quot; class=&quot;alignleft&quot;&gt;&lt;/p&gt;
  &lt;p id=&quot;dataEndDate&quot; class=&quot;alignright&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;

&lt;!-- All the sparklines are added to this div --&gt;
&lt;div id=&quot;sparkLines&quot; class=&quot;rChart nvd3&quot;&gt;
&lt;/div&gt;

&lt;p&gt;This data gives a good indication of how healthy different repos are, are they growing over time, or staying the same. You can also see the different levels of activity each repo has and how they compare to other ones.&lt;/p&gt;

&lt;p&gt;Whilst it’s clear that &lt;a href=&quot;https://github.com/microsoft/vscode&quot;&gt;Visual Studio Code&lt;/a&gt; is way ahead of all the other repos in terms of ‘Issues’, it’s interesting to see that the .NET-only ones have the most ‘Pull-Requests’, notably CoreFX (Base Class Libraries), Roslyn (Compiler) and CoreCLR (Runtime).&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;overall-participation---community-v-microsoft&quot;&gt;Overall Participation - Community v. Microsoft&lt;/h3&gt;

&lt;p&gt;Next will will look at the &lt;strong&gt;total participation from the last 3 years&lt;/strong&gt;, i.e. &lt;strong&gt;November 2014&lt;/strong&gt; to &lt;strong&gt;November 2017&lt;/strong&gt;. All Pull Requests are Issues are treated equally, so a large PR counts the same as one that fixes a spelling mistake. Whilst this isn’t ideal it’s the simplest way to get an idea of the &lt;strong&gt;Microsoft/Community split&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can hover over the bars to get the actual numbers, rather than percentages.&lt;/p&gt;

&lt;body&gt;
  &lt;!-- TODO do this in css styles, not inline!! --&gt;
  &lt;div class=&quot;g-chart-issues&quot;&gt;
    &lt;span style=&quot;font-weight:bold;font-size:large;margin-left:150px;&quot;&gt; Issues: &lt;/span&gt;
    &lt;span style=&quot;color:#9ecae1;font-weight:bold;font-size:large;margin-left:5px;&quot;&gt; Microsoft &lt;/span&gt;
    &lt;span style=&quot;color:#3182bd;font-weight:bold;font-size:large;margin-left:5px;&quot;&gt; Community &lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;g-chart-pull-requests&quot;&gt;
    &lt;span style=&quot;font-weight:bold;font-size:large;margin-left:150px;&quot;&gt; Pull Requests: &lt;/span&gt;
    &lt;span style=&quot;color:#a1d99b;font-weight:bold;font-size:large;margin-left:5px;&quot;&gt; Microsoft &lt;/span&gt;
    &lt;span style=&quot;color:#31a354;font-weight:bold;font-size:large;margin-left:5px;&quot;&gt; Community &lt;/span&gt;
  &lt;/div&gt;
&lt;/body&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;participation-over-time---community-v-microsoft&quot;&gt;Participation over time - Community v. Microsoft&lt;/h3&gt;

&lt;p&gt;Finally we can see the ‘per-month’ data from the last 3 years, i.e. &lt;strong&gt;November 2014&lt;/strong&gt; to &lt;strong&gt;November 2017&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can inspect different repos by selecting them from the pull-down list, but be aware that the y-axis on the graphs are re-scaled, so the maximum value will change each time.&lt;/p&gt;

&lt;div id=&quot;issuesGraph&quot;&gt;
  &lt;!-- TODO do this in css styles, not inline!! --&gt;
  &lt;span style=&quot;font-weight:bold;font-size:larger;margin-left:30px;&quot;&gt; Issues: &lt;/span&gt;
  &lt;span style=&quot;color:#9ecae1;font-weight:bold;font-size:larger;margin-left:5px;&quot;&gt; Microsoft &lt;/span&gt;
  &lt;span style=&quot;color:#3182bd;font-weight:bold;font-size:larger;margin-left:5px;&quot;&gt; Community &lt;/span&gt;
  &lt;!-- &lt;form&gt;
    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;mode&quot; value=&quot;stacked&quot; checked&gt; Stacked&lt;/label&gt;
    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;mode&quot; value=&quot;grouped&quot;&gt; Grouped&lt;/label&gt;
  &lt;/form&gt; --&gt;
&lt;/div&gt;

&lt;div id=&quot;pullRequestsGraph&quot;&gt;
  &lt;!-- TODO do this in css styles, not inline!! --&gt;
  &lt;span style=&quot;font-weight:bold;font-size:larger;margin-left:30px;&quot;&gt; Pull Requests: &lt;/span&gt;
  &lt;span style=&quot;color:#a1d99b;font-weight:bold;font-size:larger;margin-left:5px;&quot;&gt; Microsoft &lt;/span&gt;
  &lt;span style=&quot;color:#31a354;font-weight:bold;font-size:larger;margin-left:5px;&quot;&gt; Community &lt;/span&gt;
  &lt;!-- &lt;form&gt;
    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;mode&quot; value=&quot;stacked&quot; checked&gt; Stacked&lt;/label&gt;
    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;mode&quot; value=&quot;grouped&quot;&gt; Grouped&lt;/label&gt;
  &lt;/form&gt; --&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;It’s clear that the community continues to be invested in the .NET-related, Open Source repositories, contributing significantly and for a sustained period of time. I think this is good for &lt;em&gt;all .NET developers&lt;/em&gt;, whether you contribute to OSS or not, having .NET be a &lt;strong&gt;thriving, Open Source product&lt;/strong&gt; has many benefits!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=15998856&quot;&gt;Hacker News&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/programming/comments/7lh19z/open_source_net_3_years_later/&quot;&gt;/r/programming&lt;/a&gt;&lt;/p&gt;

     
     
     
     
   </content>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='Analytics' scheme='http://www.mattwarren.org/tags#Analytics'/>
   
     <category term='Open Source' scheme='http://www.mattwarren.org/tags#Open Source'/>
   
     <category term='Roslyn' scheme='http://www.mattwarren.org/tags#Roslyn'/>
   
     <category term='AspNet' scheme='http://www.mattwarren.org/tags#AspNet'/>
   
 </entry>
 
 <entry>
   <title>A look at the internals of 'Tiered JIT Compilation' in .NET Core</title>
   <link href="http://www.mattwarren.org/2017/12/15/How-does-.NET-JIT-a-method-and-Tiered-Compilation/"/>
   <updated>2017-12-15T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2017/12/15/How-does-.NET-JIT-a-method-and-Tiered-Compilation</id>
   <content type="html">
     &lt;p&gt;The .NET runtime (CLR) has predominantly used a just-in-time (JIT) compiler to convert your executable into machine code (leaving aside &lt;a href=&quot;https://github.com/dotnet/corert/&quot;&gt;ahead-of-time (AOT) scenarios&lt;/a&gt; for the time being), as the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/standard/managed-execution-process&quot;&gt;official Microsoft docs say&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;At execution time, &lt;strong&gt;a just-in-time (JIT) compiler translates the MSIL into native code&lt;/strong&gt;. During this compilation, code must pass a verification process that examines the MSIL and metadata to find out whether the code can be determined to be type safe.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;But how does that process actually work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The same docs &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/standard/managed-execution-process&quot;&gt;give us a bit more info&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JIT compilation takes into account the possibility that some code might never be called during execution. Instead of using time and memory to convert all the MSIL in a PE file to native code, it converts the MSIL as needed during execution and stores the resulting native code in memory so that it is accessible for subsequent calls in the context of that process. The loader &lt;strong&gt;creates and attaches a stub to each method&lt;/strong&gt; in a type when the type is loaded and initialized. When a method is called for the first time, &lt;strong&gt;the stub passes control to the JIT compiler&lt;/strong&gt;, which converts the MSIL for that method into native code and &lt;strong&gt;modifies the stub to point directly to the generated native code&lt;/strong&gt;. Therefore, subsequent calls to the JIT-compiled method go directly to the native code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Simple really!!&lt;/strong&gt; However if you want to know more, the rest of this post will explore this process in detail.&lt;/p&gt;

&lt;p&gt;In addition, we will look at a &lt;strong&gt;new feature that is making its way into the Core CLR&lt;/strong&gt;, called ‘&lt;strong&gt;Tiered Compilation&lt;/strong&gt;’. This is a big change for the CLR, up till now .NET methods have only been JIT compiled once, on their first usage. Tiered compilation is looking to change that, allowing methods to be re-compiled into a more optimised version much like &lt;a href=&quot;http://www.oracle.com/technetwork/java/whitepaper-135217.html&quot;&gt;the Java Hotspot compiler&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;

&lt;p&gt;But before we look at future plans, &lt;strong&gt;how does the current CLR allow the JIT to transform a method from IL to native code&lt;/strong&gt;? Well, they say ‘a pictures speaks a thousand words’&lt;/p&gt;

&lt;h4 id=&quot;before-the-method-is-jited&quot;&gt;&lt;strong&gt;Before the method is JITed&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/12/01 - Before JITing.svg&quot; alt=&quot;Step 1 - Before JITing&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;after-the-method-has-been-jited&quot;&gt;&lt;strong&gt;After the method has been JITed&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/12/02 - After JITing - Normal.svg&quot; alt=&quot;Step 2 - After JITing - Normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The main things to note are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The CLR has put in a ‘precode’ and ‘stub’ to divert the initial method call to the &lt;code class=&quot;highlighter-rouge&quot;&gt;PreStubWorker()&lt;/code&gt; method (which ultimately calls the JIT). These are hand-written assembly code fragments consisting of only a few instructions.&lt;/li&gt;
  &lt;li&gt;Once the method had been JITed into ‘native code’, a stable entry point it created. For the rest of the life-time of the method the CLR guarantees that this won’t change, so the rest of the run-time can depend on it remaining stable.&lt;/li&gt;
  &lt;li&gt;The ‘temporary entry point’ doesn’t go away, it’s still available because there may be other methods that are expecting to call it. However the associated ‘precode fixup’ has been re-written or ‘back patched’ to point to the newly created ‘native code’ instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;PreStubWorker()&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The CLR doesn’t change the address of the &lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt; instruction in the method that called the method being JITted, it only changes the address inside the ‘precode’. But because all method calls in the CLR go via a precode, the 2nd time the newly JITed method is called, the call will end up at the ‘native code’.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For reference, the ‘stable entry point’ is the same memory location as the &lt;code class=&quot;highlighter-rouge&quot;&gt;IntPtr&lt;/code&gt; that is returned when you call the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.runtimemethodhandle.getfunctionpointer%28v=vs.110%29.aspx?f=255&amp;amp;MSPPError=-2147217396&quot;&gt;RuntimeMethodHandle.GetFunctionPointer() method&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to see this process in action for yourself, you can either re-compile the CoreCLR source and add the relevant debug information as I did &lt;strong&gt;or&lt;/strong&gt; just use WinDbg and follow the steps &lt;a href=&quot;https://blogs.msdn.microsoft.com/abhinaba/2014/09/29/net-just-in-time-compilation-and-warming-up-your-system/&quot;&gt;in this excellent blog post&lt;/a&gt; (for more on the same topic see &lt;a href=&quot;https://blog.matthewskelton.net/2012/01/29/advanced-call-processing-in-the-clr/&quot;&gt;‘Advanced Call Processing in the CLR’&lt;/a&gt; and Vance Morrison’s excellent write-up &lt;a href=&quot;https://blogs.msdn.microsoft.com/vancem/2006/03/13/digging-into-interface-calls-in-the-net-framework-stub-based-dispatch/&quot;&gt;‘Digging into interface calls in the .NET Framework: Stub-based dispatch’&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Finally, the different parts of the Core CLR source code that are involved are listed below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.0.0/src/inc/jithelpers.h#L295-L299&quot;&gt;JIT Helpers for ‘PrecodeFixupThunk’&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.0.0/src/vm/i386/asmhelpers.asm#L888-L907&quot;&gt;PrecodeFixupThunk (i386 assembly)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.0.0/src/vm/i386/asmhelpers.asm#L1739-L1769&quot;&gt;ThePreStub (i386 assembly)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.0.0/src/vm/prestub.cpp#L1027-L1140&quot;&gt;PreStubWorker(..)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.0.0/src/vm/prestub.cpp#L1178-L1707&quot;&gt;MethodDesc::DoPrestub(..)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.0.0/src/vm/prestub.cpp#L67-L193&quot;&gt;MethodDesc::DoBackpatch(..)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.0.0/src/vm/method.cpp#L5170-L5189&quot;&gt;MethodDesc::SetStableEntryPointInterlocked(..)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this post isn’t going to look at how the JIT itself works, if you are interested in that take a look as this &lt;a href=&quot;https://github.com/CarolEidt/coreclr/blob/master/Documentation/botr/ryujit-tutorial.md#ryujit-high-level-overview&quot;&gt;excellent overview&lt;/a&gt; written by one of the main developers.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;jit-and-execution-engine-ee-interaction&quot;&gt;JIT and Execution Engine (EE) Interaction&lt;/h3&gt;

&lt;p&gt;The make all this work the JIT and the EE have to work together, to get an idea of what is involved, take a look at this comment describing the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.0.0/src/inc/corinfo.h#L1426-L1514&quot;&gt;rules that determine which type of precode the JIT can use&lt;/a&gt;. All this info is stored in the EE as it’s the only place that has the full knowledge of what a method does, so the JIT has to ask which mode to work in.&lt;/p&gt;

&lt;p&gt;In addition, the JIT has to ask the EE what the address of a functions entry point is, this is done via the following methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.0.0/src/vm/jitinterface.cpp#L8872-L8923&quot;&gt;CEEInfo::getFunctionEntryPoint(..)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Then calls &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.0.0/src/vm/method.cpp#L2218-L2324&quot;&gt;MethodDesc::TryGetMultiCallableAddrOfCode(..)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.0.0/src/vm/jitinterface.cpp#L8925-L8955&quot;&gt;CEEInfo::getFunctionFixedEntryPoint(..)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Then calls &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.0.0/src/vm/method.cpp#L2187-L2209&quot;&gt;MethodDesc::GetMultiCallableAddrOfCode(..)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;precode-and-stubs&quot;&gt;Precode and Stubs&lt;/h3&gt;

&lt;p&gt;There are different types or ‘precode’ available, ‘FIXUP’, ‘REMOTING’ or ‘STUB’, you can see the rules for which one is used in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.0.0/src/vm/method.cpp#L5747-L5773&quot;&gt;MethodDesc::GetPrecodeType()&lt;/a&gt;. In addition, because they are such a low-level mechanism, they are implemented differently across CPU architectures, from a &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.0.0/src/vm/method.hpp#L2023-L2035&quot;&gt;comment in the code&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There two implementation options for temporary entrypoints:&lt;/p&gt;

  &lt;p&gt;(1) Compact entrypoints. They provide as dense entrypoints as possible, but can’t be patched to point to the final code. The call to unjitted method is indirect call via slot.&lt;/p&gt;

  &lt;p&gt;(2) Precodes. The precode will be patched to point to the final code eventually, thus the temporary entrypoint can be embedded in the code. 
The call to unjitted method is direct call to direct jump.&lt;/p&gt;

  &lt;p&gt;We use (1) for x86 and (2) for 64-bit to get the best performance on each platform. For ARM (1) is used.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There’s also a whole lot more information about ‘precode’ available &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/method-descriptor.md#precode&quot;&gt;in the BOTR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, it turns out that you can’t go very far into the internals of the CLR without coming across ‘stubs’ (or ‘trampolines’, ‘thunks’, etc), for instance they’re used in&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://mattwarren.org/2017/01/25/How-do-.NET-delegates-work/#creation-of-the-delegate-invoke-method&quot;&gt;Delegates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/virtual-stub-dispatch.md#stubs&quot;&gt;Virtual Method (Interface) Dispatch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/jump-stubs.md&quot;&gt;Jump Stubs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.0.0/Documentation/botr/clr-abi.md#generics&quot;&gt;Shared Generics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/2.0.0/src/vm/stubmgr.cpp#L1360-L1388&quot;&gt;Dll Import callbacks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;and probably some more I’ve missed!&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;tiered-compilation&quot;&gt;Tiered Compilation&lt;/h2&gt;

&lt;p&gt;Before we go any further I want to point out that &lt;strong&gt;Tiered Compilation&lt;/strong&gt; is very much work-in-progress. As an indication, to get it working you currently have to set an environment variable called &lt;code class=&quot;highlighter-rouge&quot;&gt;COMPLUS_EXPERIMENTAL_TieredCompilation&lt;/code&gt;. It appears that the current work is focussed on the infrastructure to make it possible (i.e. CLR changes), then I assume that there has to be a fair amount of testing and performance analysis before it’s enabled by default.&lt;/p&gt;

&lt;p&gt;If you want to learn about the goals of the feature and how it fits into the wider process of ‘code versioning’, I recommend reading the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/code-versioning.md&quot;&gt;excellent design docs&lt;/a&gt;, including the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/code-versioning.md#future-roadmap-possibilities&quot;&gt;future roadmap possibilities&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To give an indications of what has been involved so far, there has been work going on in the:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Debugger&lt;/strong&gt; (e.g. &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/14427&quot;&gt;Breakpoints aren’t hit if tiered jitting recompiled the method before the debugger was attached&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/14423&quot;&gt;Source line breakpoints stop working when tiered jitting replaces the code&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Profiling APIs&lt;/strong&gt; - e.g. &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/12610&quot;&gt;Tiered jitting: Implement additional profiler APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Diagnostics&lt;/strong&gt; - (all tracked via &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/12612&quot;&gt;Tiered jitting: Design/Implement appropriate diagnostics&lt;/a&gt;, e.g. &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/14947&quot;&gt;Tiered Jitting: Fix IL to native mapping for ETW&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Interpreter&lt;/strong&gt; - &lt;a href=&quot;http://mattwarren.org/2017/03/30/The-.NET-IL-Interpreter/&quot;&gt;yes the CLR has a built-in Interpreter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/search?utf8=%E2%9C%93&amp;amp;q=tiered+compilation&amp;amp;type=&quot;&gt;Many other places&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to follow along you can &lt;a href=&quot;https://github.com/dotnet/coreclr/search?q=tiered+compilation&amp;amp;type=Issues&amp;amp;utf8=%E2%9C%93&quot;&gt;take a look at the related issues/PRs&lt;/a&gt;, here are the main ones to get you started:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/10478&quot;&gt;Tiered Compilation step 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/12193&quot;&gt;WIP - Tiered Jitting Part Deux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pulls?q=is%3Apr+author%3Anoahfalk&quot;&gt;All PRs by Noah Falk&lt;/a&gt; (main Microsoft Developer working on the feature)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is also some nice background information available in &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/4331&quot;&gt;Introduce a tiered JIT&lt;/a&gt; and if you want to understand how it will eventually makes use of changes in the JIT (‘MinOpts’), take a look at &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/performance/JitOptimizerTodoAssessment.md#low-tier-back-off&quot;&gt;Low Tier Back-Off&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/15046&quot;&gt;JIT: enable aggressive inline policy for Tier1&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;history---rejit&quot;&gt;History - ReJIT&lt;/h3&gt;

&lt;p&gt;As an quick historical aside, you have previously been able to get the CLR to &lt;a href=&quot;https://blogs.msdn.microsoft.com/davbr/2011/10/12/rejit-a-how-to-guide/&quot;&gt;re-JIT a method for you&lt;/a&gt;, but it only worked with the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/profiling-overview#profiling_api&quot;&gt;Profiling APIs&lt;/a&gt;, which meant you had to write some C/C++ COM code to make it happen! In addition ReJIT only allowed the method to be re-compiled at the same level, so it wouldn’t ever produce more optimised code. It was mostly meant to help &lt;a href=&quot;https://blogs.msdn.microsoft.com/davbr/2011/10/10/rejit-limitations-in-net-4-5/&quot;&gt;monitoring or profiling tools&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;how-it-works-1&quot;&gt;How it works&lt;/h2&gt;

&lt;p&gt;Finally, how does it work, again lets look at some diagrams. Firstly, as a recap, lets take a look at how things ends up once a method had been JITed, with &lt;strong&gt;tiered compilation turned off&lt;/strong&gt; (the same diagram as above):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/12/02 - After JITing - Normal.svg&quot; alt=&quot;Step 2 - After JITing - Normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, as a comparison, here’s what the same stage looks like with &lt;strong&gt;tiered compilation enabled&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/12/03 - After JITing - Tiered Compilation.svg&quot; alt=&quot;Step 3 - After JITing - Tiered Compilation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The main difference is that tiered compilation has forced the method call to go through another level of indirection, the ‘pre stub’. This is to make it possible to count the number of times the method is called, then once it has hit the threshold (&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/5d91c4d2cc8fe60bad20cdfdf2e5f239bc024061/src/vm/tieredcompilation.cpp#L84&quot;&gt;currently 30&lt;/a&gt;), the ‘pre stub’ is re-written to point to the ‘optimised native code’ instead:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/12/04 - After Tiered Compilation Optimisation.svg&quot; alt=&quot;Step 4 - 04 - After Tiered Compilation Optimisation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that the original ‘native code’ is still available, so if needed the changes can be reverted and the method call can go back to the unoptimised version.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;using-a-counter&quot;&gt;Using a counter&lt;/h3&gt;

&lt;p&gt;We can see a bit more details about the counter in this comments from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/5d91c4d2cc8fe60bad20cdfdf2e5f239bc024061/src/vm/prestub.cpp#L1702-L1715&quot;&gt;prestub.cpp&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cplusplus&quot;&gt;    /***************************   CALL COUNTER    ***********************/
    // If we are counting calls for tiered compilation, leave the prestub
    // in place so that we can continue intercepting method invocations.
    // When the TieredCompilationManager has received enough call notifications
    // for this method only then do we back-patch it.
    BOOL fCanBackpatchPrestub = TRUE;
#ifdef FEATURE_TIERED_COMPILATION
    BOOL fEligibleForTieredCompilation = IsEligibleForTieredCompilation();
    if (fEligibleForTieredCompilation)
    {
        CallCounter * pCallCounter = GetCallCounter();
        fCanBackpatchPrestub = pCallCounter-&amp;gt;OnMethodCalled(this);
    }
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In essence the ‘stub’ calls back into the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/5d91c4d2cc8fe60bad20cdfdf2e5f239bc024061/src/vm/tieredcompilation.cpp&quot;&gt;TieredCompilationManager&lt;/a&gt; until the ‘tiered compilation’ is triggered, once that happens the ‘stub’ is ‘back-patched’ to stop it being called any more.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;why-not-interpreted&quot;&gt;Why not ‘Interpreted’?&lt;/h3&gt;

&lt;p&gt;If you’re wondering why tiered compilation doesn’t have an interpreted mode, you’re not alone, I asked the &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/10478#issuecomment-289394905&quot;&gt;same question&lt;/a&gt; (for more info see &lt;a href=&quot;http://mattwarren.org/2017/03/30/The-.NET-IL-Interpreter/&quot;&gt;my previous post on the .NET Interpreter&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;And the &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/10478#issuecomment-289412414&quot;&gt;answer I got was&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;There’s already an Interpreter available, or is it not considered suitable for production code?&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;Its a fine question, but you guessed correctly - the interpreter is not in good enough shape to run production code as-is. There are also some significant issues if you want debugging and profiling tools to work (which we do). Given enough time and effort it is all solvable, it just isn’t the easiest place to start.&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;How different is the overhead between non-optimised and optimised JITting?&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;On my machine non-optimized jitting used about ~65% of the time that optimized jitting took for similar IL input sizes, but of course I expect results will vary by workload and hardware. Getting this first step checked in should make it easier to collect better measurements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But that’s from a few months ago, maybe &lt;a href=&quot;http://www.mono-project.com/news/2017/11/13/mono-interpreter/&quot;&gt;Mono’s New .NET Interpreter&lt;/a&gt; will change things, &lt;a href=&quot;https://twitter.com/matthewwarren/status/930397571478183937&quot;&gt;who knows&lt;/a&gt;?&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;why-not-llvm&quot;&gt;Why not LLVM?&lt;/h3&gt;

&lt;p&gt;Finally, why aren’t they using a LLVM to compile the code, from &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/4331#issuecomment-313179155&quot;&gt;Introduce a tiered JIT (comment)&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There were (and likely still are) &lt;strong&gt;significant differences in the LLVM support needed for the CLR versus what is needed for Java&lt;/strong&gt;, both in GC and in EH, and in the restrictions one must place on the optimizer. To cite just one example: the CLRs GC currently cannot tolerate managed pointers that point off the end of objects. Java handles this via a base/derived paired reporting mechanism. We’d either need to plumb support for this kind of paired reporting into the CLR or restrict LLVM’s optimizer passes to never create these kinds of pointers. On top of that, the LLILC jit was slow and we weren’t sure ultimately what kind of code quality it might produce.&lt;/p&gt;

  &lt;p&gt;So, figuring out how LLILC might fit into a potential multi-tier approach that did not yet exist seemed (and still seems) premature. &lt;strong&gt;The idea for 
now is to get tiering into the framework and use RyuJit for the second-tier jit&lt;/strong&gt;. As we learn more, we may discover there is indeed room for higher tier jits, or, at least, understand better what else we need to do before such things make sense.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is more background info in &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/4331&quot;&gt;Introduce a tiered JIT&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;One of my favourite side-effects of Microsoft making .NET Open Source and developing out in the open is that we can follow along with work-in-progress features. It’s great being able to download the latest code, try them out and see how they work under-the-hood, yay for OSS!!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=15955505&quot;&gt;Hacker News&lt;/a&gt;&lt;/p&gt;


     
     
     
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
     <category term='JIT Compiler' scheme='http://www.mattwarren.org/tags#JIT Compiler'/>
   
 </entry>
 
 <entry>
   <title>Exploring the BBC micro:bit Software Stack</title>
   <link href="http://www.mattwarren.org/2017/11/28/Exploring-the-BBC-microbit-Software-Stack/"/>
   <updated>2017-11-28T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2017/11/28/Exploring-the-BBC-microbit-Software-Stack</id>
   <content type="html">
     &lt;p&gt;If you grew up in the UK and went to school during the 1980’s or 1990’s there’s a good chance that this picture brings back fond memories:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.classicacorn.freeuk.com/8bit_focus/logo/logo_8.jpg&quot; alt=&quot;BBC Micro and a Turtle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(image courtesy of &lt;a href=&quot;http://www.classicacorn.freeuk.com/&quot;&gt;Classic Acorn&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I’d imagine that for a large amount of computer programmers (currently in their 30’s) the BBC Micro was their first experience of programming. If this applies to you and you want a trip down memory lane, have a read of &lt;a href=&quot;https://www.geeksaresexy.net/2009/10/22/remembering-the-bbc-micro/&quot;&gt;Remembering: The BBC Micro&lt;/a&gt; and &lt;a href=&quot;https://www.retro-kit.co.uk/page.cfm/content/The-BBC-Micro-in-Education/&quot;&gt;The BBC Micro in my education&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Programming the classic &lt;a href=&quot;https://angrytechnician.wordpress.com/2009/07/23/relic/&quot;&gt;Turtle&lt;/a&gt; was done in &lt;a href=&quot;http://www.walkingrandomly.com/?p=13&quot;&gt;Logo&lt;/a&gt;, with code like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FORWARD 100
LEFT 90
FORWARD 100
LEFT 90
FORWARD 100
LEFT 90
FORWARD 100
LEFT 90
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course, once you knew what you were doing, you would re-write it like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;REPEAT 4 [FORWARD 100 LEFT 90]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;bbc-microbit&quot;&gt;BBC micro:bit&lt;/h2&gt;

&lt;p&gt;The original Micro was launched as an education tool, as part of the &lt;a href=&quot;http://www.swansea.ac.uk/library/archive-and-research-collections/hocc/computersandsoftware/earlyhomecomputers/bbcmicro/&quot;&gt;BBC’s Computer Literacy Project&lt;/a&gt; and by most accounts was a big success. As a follow-up, in March 2016 the &lt;a href=&quot;http://www.bbc.co.uk/mediacentre/latestnews/2016/bbc-micro-bit-schools-launch&quot;&gt;micro:bit was launched&lt;/a&gt; as part of the BBC’s ‘Make it Digital’ initiative and 1 million devices were given out to schools and libraries in the UK to ‘help develop a new generation of digital pioneers’ (i.e. get them into programming!)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt;: I love the difference in branding across 30 years, ‘&lt;em&gt;BBC Micro&lt;/em&gt;’ became ‘&lt;em&gt;BBC micro:bit&lt;/em&gt;’ (you must include the colon) and ‘&lt;em&gt;Computer Literacy Project&lt;/em&gt;’ changed to the ‘&lt;em&gt;Make it Digital Initiative&lt;/em&gt;’.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.bbc.co.uk/mediacentre/mediapacks/microbit/specs&quot;&gt;&lt;img src=&quot;/images/2017/11/BBC microbit hardware specification.jpg&quot; alt=&quot;BBC microbit hardware specification&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A few weeks ago I walked into my local library, &lt;a href=&quot;http://microbit.org/en/2017-10-23-libraries/&quot;&gt;picked up a nice starter kit&lt;/a&gt; and then spent a fun few hours watching my son play around with it (I’m worried about how quickly he picked up the basics of programming, I think I might be out of a job in a few years time!!)&lt;/p&gt;

&lt;p&gt;However once he’d gone to bed it was all mine! The result of my ‘playing around’ is this post, in it I will be exploring the &lt;strong&gt;software stack&lt;/strong&gt; that makes up the micro:bit, what’s in it, what it does and how it all fits together.&lt;/p&gt;

&lt;p&gt;If you want to learn about how to program the micro:bit, its hardware or anything else, take a look at this &lt;a href=&quot;https://github.com/carlosperate/awesome-microbit&quot;&gt;excellent list of resources&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Slightly off-topic, but if you enjoy reading &lt;strong&gt;source code&lt;/strong&gt; you might like these other posts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2017/02/07/The-68-things-the-CLR-does-before-executing-a-single-line-of-your-code/?recommended=1&quot;&gt;The 68 things the CLR does before executing a single line of your code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2017/03/23/Hitchhikers-Guide-to-the-CoreCLR-Source-Code/?recommended=1&quot;&gt;A Hitchhikers Guide to the CoreCLR Source Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2017/10/19/DotNetAnywhere-an-Alternative-.NET-Runtime/?recommended=1&quot;&gt;DotNetAnywhere: An Alternative .NET Runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;bbc-microbit-software-stack&quot;&gt;BBC micro:bit Software Stack&lt;/h1&gt;

&lt;p&gt;If we take a &lt;em&gt;high-level&lt;/em&gt; view at the stack, it divides up into 3 discrete &lt;strong&gt;software&lt;/strong&gt; components that all sit on top of the &lt;strong&gt;hardware&lt;/strong&gt; itself:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/11/BBC Microbit Software Stack.png&quot; alt=&quot;BBC Microbit Software Stack.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you would like to build this stack for yourself take a look at the &lt;a href=&quot;https://lancaster-university.github.io/microbit-docs/offline-toolchains&quot;&gt;Building with Yotta guide&lt;/a&gt;. I also found this post describing &lt;a href=&quot;https://hackernoon.com/the-first-video-game-on-the-bbc-micro-bit-probably-4175fab44da8&quot;&gt;The First Video Game on the BBC micro:bit [probably]&lt;/a&gt; very helpful.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;runtimes&quot;&gt;Runtimes&lt;/h2&gt;

&lt;p&gt;There are several high-level &lt;em&gt;runtimes&lt;/em&gt; available, these are useful because they let you write code in a language other than C/C++ or even create programs by &lt;a href=&quot;https://www.microbit.co.uk/blocks/editor&quot;&gt;dragging &lt;em&gt;blocks&lt;/em&gt; around on a screen&lt;/a&gt;. The main ones that I’ve come across are below (see &lt;a href=&quot;https://github.com/carlosperate/awesome-microbit#programming&quot;&gt;‘Programming’&lt;/a&gt; for a full list):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt; via &lt;a href=&quot;https://github.com/bbcmicrobit/micropython/&quot;&gt;MicroPython&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;JavaScript&lt;/strong&gt; with &lt;a href=&quot;https://github.com/Microsoft/pxt-microbit&quot;&gt;Microsoft Programming Experience Toolkit (PXT)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;well actually it’s &lt;a href=&quot;https://makecode.com/language&quot;&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;&lt;/a&gt;, which is good, we wouldn’t want to rot the brains of impressionable young children with the &lt;a href=&quot;https://www.destroyallsoftware.com/talks/wat&quot;&gt;horrors of Javascript - Wat!!&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They both work in a similar way, the users code (Python or TypeScript) is bundled up along with the C/C++ code of the runtime itself and then the entire binary (hex) file is deployed to the micro:bit. When the device starts up, the runtime then looks for the users code at a known location in memory and starts interpreting it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; It turns out that I was wrong about the Microsoft PXT, it actually &lt;a href=&quot;https://makecode.com/language#static-compilation-vs-a-dynamic-vm&quot;&gt;compiles your TypeScript program to native code&lt;/a&gt;, very cool! Interestingly, they did it that way because:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Compared to a typical dynamic JavaScript engine, PXT compiles code statically, giving rise to significant time and space performance improvements:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;user programs are compiled directly to machine code, and are never in any byte-code form that needs to be interpreted; this results in much faster execution than a typical JS interpreter&lt;/li&gt;
    &lt;li&gt;there is no RAM overhead for user-code - all code sits in flash; in a dynamic VM there are usually some data-structures representing code&lt;/li&gt;
    &lt;li&gt;due to lack of boxing for small integers and static class layout the memory consumption for objects is around half the one you get in a dynamic VM (not counting the user-code structures mentioned above)&lt;/li&gt;
    &lt;li&gt;while there is some runtime support code in PXT, it’s typically around 100KB smaller than a dynamic VM, bringing down flash consumption and leaving more space for user code&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;strong&gt;The execution time, RAM and flash consumption of PXT code is as a rule of thumb 2x of compiled C code, making it competitive to write drivers and other user-space libraries.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;memory-layout&quot;&gt;Memory Layout&lt;/h2&gt;

&lt;p&gt;Just before we go onto the other parts of the software stack I want to take a deeper look at the memory layout. This is important because memory is so constrained on the micro:bit, there is &lt;em&gt;only&lt;/em&gt; 16KB of RAM. To put that into perspective, we’ll use the calculation from this StackOverflow question &lt;a href=&quot;https://stackoverflow.com/questions/5999821/how-many-bytes-of-memory-is-a-tweet/5999852#5999852&quot;&gt;How many bytes of memory is a tweet?&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Twitter uses UTF-8 encoded messages. UTF-8 code points can be up to six four octets long, making the maximum message size &lt;strong&gt;140 x 4 = 560 8-bit bytes&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we re-calculate for the newer, longer tweets &lt;strong&gt;280 x 4 = 1,120 bytes&lt;/strong&gt;. So we could only fit &lt;strong&gt;10 tweets&lt;/strong&gt; into the available RAM on the micro:bit (it turns out that only ~11K out of the total 16K is available for general use). Which is why it’s worth using a &lt;a href=&quot;https://github.com/lancaster-university/microbit-dal/issues/323&quot;&gt;custom version of atoi() to save 350 bytes of RAM&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The memory layout is specified by the linker at compile-time using &lt;a href=&quot;https://github.com/lancaster-university/microbit-targets/blob/master/bbc-microbit-classic-gcc-nosd/ld/NRF51822.ld#L6&quot;&gt;NRF51822.ld&lt;/a&gt;, there is a &lt;a href=&quot;/data/2017/11/microbit-samples.map&quot;&gt;sample output available&lt;/a&gt; if you want to take a look. Because it’s done at compile-time you run into build errors such as &lt;a href=&quot;https://github.com/bbcmicrobit/micropython/issues/363&quot;&gt;“region RAM overflowed with stack”&lt;/a&gt; if you configure it incorrectly.&lt;/p&gt;

&lt;p&gt;The table below shows the memory layout from the ‘no SD’ version of a ‘Hello World’ app, i.e. with the maximum amount of RAM available as the Bluetooth (BLE) Soft-Device (SD) support has been removed. By comparison with BLE enabled, you instantly have &lt;a href=&quot;https://github.com/lancaster-university/microbit-targets/blob/master/bbc-microbit-classic-gcc/ld/NRF51822.ld#L6&quot;&gt;8K less RAM available&lt;/a&gt;, so things start to get tight!&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Name&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Start Address&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;End Address&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Size&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Percentage&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;.data&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0x20000000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0x20000098&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;152 bytes&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.93%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;.bss&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0x20000098&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0x20000338&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;672 bytes&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4.10%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Heap (mbed)&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0x20000338&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0x20000b38&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2,048 bytes&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12.50%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Empty&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0x20000b38&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0x20003800&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11,464 bytes&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;69.97%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Stack&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0x20003800&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0x20004000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2,048 bytes&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12.50%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For more info on the column names see the Wikipedia pages for &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_segment&quot;&gt;.data&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/.bss&quot;&gt;.bss&lt;/a&gt; as well as &lt;a href=&quot;https://mcuoneclipse.com/2013/04/14/text-data-and-bss-code-and-data-size-explained/&quot;&gt;text, data and bss: Code and Data Size Explained&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a comparison there is a nice image of the micro:bit RAM Layout &lt;a href=&quot;https://hackernoon.com/the-first-video-game-on-the-bbc-micro-bit-probably-4175fab44da8#5fea&quot;&gt;in this article&lt;/a&gt;. It shows what things look like when running MicroPython and you can clearly see the main Python heap in the centre &lt;a href=&quot;https://github.com/bbcmicrobit/micropython/blob/master/source/microbit/mprun.c#L95-L104&quot;&gt;taking up all the remaining space&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;microbit-dal&quot;&gt;&lt;a href=&quot;https://github.com/lancaster-university/microbit-dal&quot;&gt;microbit-dal&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Sitting in the stack below the high-level runtime is the &lt;em&gt;device abstraction layer&lt;/em&gt; (DAL), created at &lt;a href=&quot;https://github.com/lancaster-university&quot;&gt;Lancaster University&lt;/a&gt; in the UK, it’s made up of 4 main components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/microbit-dal/tree/master/source/core&quot;&gt;&lt;strong&gt;core&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;High-level components, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Device&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Font&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;HeapAllocator&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Listener&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Fiber&lt;/code&gt;, often implemented on-top of 1 or more &lt;code class=&quot;highlighter-rouge&quot;&gt;driver&lt;/code&gt; classes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/microbit-dal/tree/master/source/types&quot;&gt;&lt;strong&gt;types&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Helper types such as &lt;code class=&quot;highlighter-rouge&quot;&gt;ManagedString&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Image&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Event&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;PacketBuffer&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/microbit-dal/tree/master/source/drivers&quot;&gt;&lt;strong&gt;drivers&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;For control of a specific hardware component, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Accelerometer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Button&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Compass&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Display&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Flash&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Serial&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Pin&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/microbit-dal/tree/master/source/bluetooth&quot;&gt;&lt;strong&gt;bluetooth&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;All the code for the &lt;a href=&quot;https://www.kitronik.co.uk/blog/bbc-microbit-bluetooth-low-energy/&quot;&gt;Bluetooth Low Energy&lt;/a&gt; (BLE) stack that is &lt;a href=&quot;https://lancaster-university.github.io/microbit-docs/ble/profile/&quot;&gt;shipped with the micro:bit&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/microbit-dal/tree/master/source/asm&quot;&gt;&lt;strong&gt;asm&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Just 4 functions are implemented in assembly, they are &lt;code class=&quot;highlighter-rouge&quot;&gt;swap_context&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;save_context&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;save_register_context&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;restore_register_context&lt;/code&gt;. As the names suggest, they handle the ‘context switching’ necessary to make the &lt;a href=&quot;https://github.com/lancaster-university/microbit-dal/blob/master/source/core/MicroBitFiber.cpp&quot;&gt;MicroBit Fiber scheduler&lt;/a&gt; work&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The image below shows the distribution of ‘Lines of Code’ (LOC), as you can see the majority of the code is in the &lt;code class=&quot;highlighter-rouge&quot;&gt;drivers&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bluetooth&lt;/code&gt; components.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/11/LocMetricsPie-microbit-dal.png&quot; alt=&quot;LOC Metrics Pie - microbit-dal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In addition to providing nice helper classes for working with the underlying devices, the DAL provides the &lt;code class=&quot;highlighter-rouge&quot;&gt;Fiber&lt;/code&gt; abstraction to allows asynchronous functions to work. This is useful because you can asynchronously display text on the LED display and your code won’t block whilst it’s &lt;em&gt;scrolling&lt;/em&gt; across the screen. In addition the &lt;code class=&quot;highlighter-rouge&quot;&gt;Fiber&lt;/code&gt; class is used to handle the interrupts that signal when the buttons on the micro:bit are pushed. This comment from the code clearly lays out what the &lt;a href=&quot;https://github.com/lancaster-university/microbit-dal/blob/master/source/core/MicroBitFiber.cpp&quot;&gt;Fiber scheduler&lt;/a&gt; does:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This lightweight, &lt;strong&gt;non-preemptive scheduler&lt;/strong&gt; provides a &lt;strong&gt;simple threading mechanism&lt;/strong&gt; for two main purposes:&lt;/p&gt;

  &lt;p&gt;1) To provide a clean abstraction for application languages to use when building async behaviour (callbacks).
 2) To provide ISR decoupling for EventModel events generated in an ISR context.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally the high-level classes &lt;a href=&quot;https://github.com/lancaster-university/microbit/blob/master/source/MicroBit.cpp&quot;&gt;MicroBit.cpp&lt;/a&gt; and &lt;a href=&quot;https://github.com/lancaster-university/microbit/blob/master/inc/MicroBit.h&quot;&gt;MicroBit.h&lt;/a&gt; are housed in the &lt;a href=&quot;https://github.com/lancaster-university/microbit&quot;&gt;microbit repository&lt;/a&gt;. These classes define the API of the MicroBit runtime and setup the default configuration, as shown in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Constructor&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;MicroBit.cpp&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
  * Constructor.
  *
  * Create a representation of a MicroBit device, which includes member variables
  * that represent various device drivers used to control aspects of the micro:bit.
  */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MicroBit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MicroBit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USBTX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USBRX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resetButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MICROBIT_PIN_BUTTON_RESET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i2c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I2C_SDA0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I2C_SCL0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;messageBus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buttonA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MICROBIT_PIN_BUTTON_A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MICROBIT_ID_BUTTON_A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buttonB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MICROBIT_PIN_BUTTON_B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MICROBIT_ID_BUTTON_B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buttonAB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MICROBIT_ID_BUTTON_A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MICROBIT_ID_BUTTON_B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MICROBIT_ID_BUTTON_AB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;accelerometer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i2c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i2c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accelerometer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compassCalibrator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accelerometer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;thermometer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MICROBIT_ID_IO_P0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MICROBIT_ID_IO_P1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MICROBIT_ID_IO_P2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;MICROBIT_ID_IO_P3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MICROBIT_ID_IO_P4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MICROBIT_ID_IO_P5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;MICROBIT_ID_IO_P6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MICROBIT_ID_IO_P7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MICROBIT_ID_IO_P8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;MICROBIT_ID_IO_P9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MICROBIT_ID_IO_P10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MICROBIT_ID_IO_P11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;MICROBIT_ID_IO_P12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MICROBIT_ID_IO_P13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MICROBIT_ID_IO_P14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;MICROBIT_ID_IO_P15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MICROBIT_ID_IO_P16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MICROBIT_ID_IO_P19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;MICROBIT_ID_IO_P20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bleManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;radio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ble&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;mbed-classic&quot;&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic&quot;&gt;mbed-classic&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The software at the bottom of the stack is making use of the &lt;a href=&quot;https://github.com/ARMmbed/mbed-os&quot;&gt;ARM mbed OS&lt;/a&gt; which is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;.. an open-source embedded operating system designed for the “things” in the Internet of Things (IoT). mbed OS includes the features you need to develop a connected product using an ARM Cortex-M microcontroller.&lt;/p&gt;

  &lt;p&gt;mbed OS provides a platform that includes:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Security foundations.&lt;/li&gt;
    &lt;li&gt;Cloud management services.&lt;/li&gt;
    &lt;li&gt;Drivers for sensors, I/O devices and connectivity.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;mbed OS is modular, configurable software that you can customize it to your device and to reduce memory requirements by excluding unused software.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can see this from the layout of it’s source, it’s based around &lt;code class=&quot;highlighter-rouge&quot;&gt;common&lt;/code&gt; components, which can be combined with a &lt;code class=&quot;highlighter-rouge&quot;&gt;hal&lt;/code&gt; (Hardware Abstraction Layers) and a &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; specific to the hardware you are running on.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/tree/master/api&quot;&gt;&lt;strong&gt;api&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/tree/master/common&quot;&gt;&lt;strong&gt;common&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/tree/master/hal&quot;&gt;&lt;strong&gt;hal&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/tree/master/targets&quot;&gt;&lt;strong&gt;targets&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More specifically the micro:bit uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;yotta target bbc-microbit-classic-gcc&lt;/code&gt;, but it can also use &lt;a href=&quot;https://github.com/lancaster-university/microbit-targets&quot;&gt;others targets as needed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For reference, here are the files from the &lt;code class=&quot;highlighter-rouge&quot;&gt;common&lt;/code&gt; section of &lt;code class=&quot;highlighter-rouge&quot;&gt;mbed&lt;/code&gt; that are used by the &lt;code class=&quot;highlighter-rouge&quot;&gt;micro:bit-dal&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/common/board.c&quot;&gt;board.c&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/common/error.c&quot;&gt;error.c&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/common/FileBase.cpp&quot;&gt;FileBase.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/common/FilePath.cpp&quot;&gt;FilePath.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/common/FileSystemLike.cpp&quot;&gt;FileSystemLike.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/common/gpio.c&quot;&gt;gpio.c&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/common/I2C.cpp&quot;&gt;I2C.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/common/InterruptIn.cpp&quot;&gt;InterruptIn.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/common/pinmap_common.c&quot;&gt;pinmap_common.c&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/common/RawSerial.cpp&quot;&gt;RawSerial.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/common/SerialBase.cpp&quot;&gt;SerialBase.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/common/Ticker.cpp&quot;&gt;Ticker.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/common/ticker_api.c&quot;&gt;ticker_api.c&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/common/Timeout.cpp&quot;&gt;Timeout.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/common/Timer.cpp&quot;&gt;Timer.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/common/TimerEvent.cpp&quot;&gt;TimerEvent.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/common/us_ticker_api.c&quot;&gt;us_ticker_api.c&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/common/wait_api.c&quot;&gt;wait_api.c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And here are the hardware specific files, targeting the &lt;code class=&quot;highlighter-rouge&quot;&gt;NORDIC - MCU NRF51822&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/targets/hal/TARGET_NORDIC/TARGET_MCU_NRF51822/analogin_api.c&quot;&gt;analogin_api.c&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/targets/hal/TARGET_NORDIC/TARGET_MCU_NRF51822/gpio_api.c&quot;&gt;gpio_api.c&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/targets/hal/TARGET_NORDIC/TARGET_MCU_NRF51822/gpio_irq_api.c&quot;&gt;gpio_irq_api.c&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/targets/hal/TARGET_NORDIC/TARGET_MCU_NRF51822/i2c_api.c&quot;&gt;i2c_api.c&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/targets/hal/TARGET_NORDIC/TARGET_MCU_NRF51822/pinmap.c&quot;&gt;pinmap.c&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/targets/hal/TARGET_NORDIC/TARGET_MCU_NRF51822/port_api.c&quot;&gt;port_api.c&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/targets/hal/TARGET_NORDIC/TARGET_MCU_NRF51822/pwmout_api.c&quot;&gt;pwmout_api.c&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/targets/cmsis/TARGET_NORDIC/TARGET_MCU_NRF51822/TOOLCHAIN_ARM_STD/sys.cpp&quot;&gt;retarget.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/targets/hal/TARGET_NORDIC/TARGET_MCU_NRF51822/serial_api.c&quot;&gt;serial_api.c&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/targets/cmsis/TARGET_NORDIC/TARGET_MCU_NRF51822/TOOLCHAIN_GCC_ARM/startup_NRF51822.S&quot;&gt;startup_NRF51822.S&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/targets/cmsis/TARGET_NORDIC/TARGET_MCU_NRF51822/system_nrf51.c&quot;&gt;system_nrf51.c&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/targets/hal/TARGET_NORDIC/TARGET_MCU_NRF51822/twi_master.c&quot;&gt;twi_master.c&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/targets/hal/TARGET_NORDIC/TARGET_MCU_NRF51822/us_ticker.c&quot;&gt;us_ticker.c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;end-to-end-or-top-to-bottom&quot;&gt;End-to-end (or top-to-bottom)&lt;/h2&gt;

&lt;p&gt;Finally, lets look a few examples of how the different components within the stack are used in specific scenarios&lt;/p&gt;

&lt;h3 id=&quot;writing-to-the-display&quot;&gt;Writing to the Display&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/microbit-dal&quot;&gt;&lt;strong&gt;microbit-dal&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/microbit-dal/blob/master/source/drivers/MicroBitDisplay.cpp&quot;&gt;MicroBitDisplay.cpp&lt;/a&gt;, handles scrolling, asynchronous updates and other high-level tasks, before handing off to:
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/microbit-dal/blob/master/source/core/MicroBitFont.cpp&quot;&gt;MicroBitFont.cpp&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/microbit-dal/blob/master/source/types/MicroBitImage.cpp&quot;&gt;MicroBitImage.cpp&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/microbit-dal/blob/master/inc/drivers/MicroBitMatrixMaps.h&quot;&gt;MicroBitMatrixMaps.h&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic&quot;&gt;&lt;strong&gt;mbed-classic&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void port_write(port_t *obj, int value)&lt;/code&gt; in &lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/targets/hal/TARGET_NORDIC/TARGET_MCU_NRF51822/port_api.c&quot;&gt;port_api.c&lt;/a&gt; (‘NORDIC NRF51822’ version), via a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;void write(int value)&lt;/code&gt; in &lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/api/PortOut.h&quot;&gt;PortOut.h&lt;/a&gt;, using info from &lt;a href=&quot;https://github.com/lancaster-university/mbed-classic/blob/master/targets/hal/TARGET_NORDIC/TARGET_MCU_NRF51822/TARGET_NRF51_MICROBIT/PinNames.h&quot;&gt;PinNames.h&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;storing-files-on-the-flash-memory&quot;&gt;Storing files on the Flash memory&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/microbit-dal&quot;&gt;&lt;strong&gt;microbit-dal&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Provides the high-level abstractions, such as:&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/microbit-dal/blob/master/source/drivers/MicroBitFileSystem.cpp&quot;&gt;FileSystem&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/microbit-dal/blob/master/source/drivers/MicroBitFile.cpp&quot;&gt;File&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/microbit-dal/blob/master/source/drivers/MicroBitFlash.cpp&quot;&gt;Flash&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lancaster-university/mbed-classic&quot;&gt;&lt;strong&gt;mbed-classic&lt;/strong&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Allows low-level control of the hardware, such as writing to the flash itself either directly or via the SoftDevice (SD) layer&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, this comment from &lt;a href=&quot;https://github.com/lancaster-university/microbit-dal/blob/master/source/drivers/MicroBitStorage.h&quot;&gt;MicroBitStorage.h&lt;/a&gt; gives a nice overview of how the file system is implemented on-top of the raw flash storage:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* The first 8 bytes are reserved for the KeyValueStore struct which gives core
* information such as the number of KeyValuePairs in the store, and whether the
* store has been initialised.
*
* After the KeyValueStore struct, KeyValuePairs are arranged contiguously until
* the end of the block used as persistent storage.
*
* |-------8-------|--------48-------|-----|---------48--------|
* | KeyValueStore | KeyValuePair[0] | ... | KeyValuePair[N-1] |
* |---------------|-----------------|-----|-------------------|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;All-in-all the micro:bit is a very nice piece of kit and hopefully will achieve its goal ‘to help develop a new generation of digital pioneers’. However, it also has a really nice software stack, one that is easy to understand and find your way around.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;

&lt;p&gt;I’ve got nothing to add that isn’t already included in this &lt;a href=&quot;https://github.com/carlosperate/awesome-microbit&quot;&gt;excellent, comprehensive list of resources&lt;/a&gt;, thanks &lt;a href=&quot;https://twitter.com/carlosperate&quot;&gt;Carlos&lt;/a&gt; for putting it together!!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=15806004&quot;&gt;Hacker News&lt;/a&gt; or &lt;a href=&quot;https://www.reddit.com/r/microbit/comments/7g5sgm/exploring_the_bbc_microbit_software_stack/&quot;&gt;/r/microbit&lt;/a&gt;&lt;/p&gt;

     
     
     
     
   </content>
   
     <category term='Open Source' scheme='http://www.mattwarren.org/tags#Open Source'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
     <category term='Hardware' scheme='http://www.mattwarren.org/tags#Hardware'/>
   
 </entry>
 
 <entry>
   <title>Microsoft &amp; Open Source a 'Brave New World' - CORESTART 2.0</title>
   <link href="http://www.mattwarren.org/2017/11/14/Microsoft-and-Open-Source-a-Brave-New-World-CORESTART/"/>
   <updated>2017-11-14T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2017/11/14/Microsoft-and-Open-Source-a-Brave-New-World-CORESTART</id>
   <content type="html">
     &lt;p&gt;Recently I was fortunate enough to be invited to the &lt;a href=&quot;https://www.corestart.cz/#page-speeches&quot;&gt;CORESTART 2.0 conference&lt;/a&gt; to give a talk on &lt;a href=&quot;https://www.corestart.cz/#page-speeches&quot;&gt;Microsoft &amp;amp; Open Source a ‘Brave New World’&lt;/a&gt;. It was a great conference, well organised by &lt;a href=&quot;https://twitter.com/hercegtomas&quot;&gt;Tomáš Herceg&lt;/a&gt; and the teams from &lt;a href=&quot;https://www.dotnetcollege.cz/&quot;&gt;.NET College&lt;/a&gt; and &lt;a href=&quot;https://www.riganti.cz/en&quot;&gt;Riganti&lt;/a&gt; and I had a great time.&lt;/p&gt;

&lt;p&gt;I encourage you to attend &lt;a href=&quot;http://www.updateconference.net/&quot;&gt;next years ‘Update’ conference&lt;/a&gt; if you can and as bonus you’ll get to see the sights of Prague! Including the &lt;a href=&quot;https://en.wikipedia.org/wiki/Head_of_Franz_Kafka&quot;&gt;Head of Franz Kafka&lt;/a&gt; as well as the amazing buildings, castles and bridges that all the guide-books will tell you about!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/11/Head of Franz Kafka.jpeg&quot;&gt;&lt;img src=&quot;/images/2017/11/Head of Franz Kafka.jpeg&quot; alt=&quot;Head of Franz Kafka&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve not been ‘invited’ to speak at a conference before, so I wasn’t sure what to expect, but there was a great audience and they seemed happy to learn about the Open Source projects that Microsoft are running and what is being done to encourage us (the ‘Community’) to contribute.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/11/Speaking at CORESTART 2.0.jpg&quot;&gt;&lt;img src=&quot;/images/2017/11/Speaking at CORESTART 2.0.jpg&quot; alt=&quot;Speaking at CORESTART 2.0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The slides for my talk are embedded below and you can also ‘watch’ the &lt;a href=&quot;https://www.youtube.com/watch?v=garlskQb8BU&quot;&gt;entire recording&lt;/a&gt; (audio and slides only, no video).&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/bSYyRobLw3jMLq&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;

&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/mattwarren/microsoft-open-source-a-brave-new-world-corestart-20&quot; title=&quot;Microsoft &amp;amp; open source a &amp;#x27;brave new world&amp;#x27; - CORESTART 2.0&quot; target=&quot;_blank&quot;&gt;Microsoft &amp;amp; open source a &amp;#x27;brave new world&amp;#x27; - CORESTART 2.0&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/mattwarren&quot; target=&quot;_blank&quot;&gt;Matt Warren&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;talk-outline&quot;&gt;Talk Outline&lt;/h1&gt;

&lt;p&gt;But if you don’t fancy sitting through the whole thing, you can read the summary below and jump straight to the relevant parts&lt;/p&gt;

&lt;h2 id=&quot;before&quot;&gt;Before&lt;/h2&gt;

&lt;p&gt;[&lt;a href=&quot;https://www.slideshare.net/mattwarren/microsoft-open-source-a-brave-new-world-corestart-20/3&quot;&gt;jump to slide&lt;/a&gt;] [&lt;a href=&quot;https://www.youtube.com/watch?v=garlskQb8BU&amp;amp;t=153&quot;&gt;direct video link&lt;/a&gt;]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Wait, didn’t that happen before?&lt;/strong&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=garlskQb8BU&amp;amp;t=300&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;.NET goes ‘Open Source’ and onto Hacker News&lt;/strong&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=garlskQb8BU&amp;amp;t=478&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;What did they Open Source?&lt;/strong&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=garlskQb8BU&amp;amp;t=570&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CoreFX, CoreCLR, CoreFX Labs, Roslyn&lt;/strong&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=garlskQb8BU&amp;amp;t=804&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TypeScript, VS Code and Kestrel&lt;/strong&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=garlskQb8BU&amp;amp;t=1256&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;during&quot;&gt;During&lt;/h2&gt;

&lt;p&gt;[&lt;a href=&quot;https://www.slideshare.net/mattwarren/microsoft-open-source-a-brave-new-world-corestart-20/19&quot;&gt;jump to slide&lt;/a&gt;] [&lt;a href=&quot;https://www.youtube.com/watch?v=garlskQb8BU&amp;amp;t=1470&quot;&gt;direct video link&lt;/a&gt;]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;First PR&lt;/strong&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=garlskQb8BU&amp;amp;t=1475&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Comedy PRs&lt;/strong&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=garlskQb8BU&amp;amp;t=1577&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Good&lt;/strong&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=garlskQb8BU&amp;amp;t=1651&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bad&lt;/strong&gt; (‘we got to see how the sausage was made’) &lt;a href=&quot;https://www.youtube.com/watch?v=garlskQb8BU&amp;amp;t=1981&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ugly&lt;/strong&gt; &lt;a href=&quot;https://youtu.be/garlskQb8BU?t=2274&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;after&quot;&gt;After&lt;/h2&gt;

&lt;p&gt;[&lt;a href=&quot;https://www.slideshare.net/mattwarren/microsoft-open-source-a-brave-new-world-corestart-20/26&quot;&gt;jump to slide&lt;/a&gt;] [&lt;a href=&quot;https://youtu.be/garlskQb8BU?t=2381&quot;&gt;direct video link&lt;/a&gt;]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Do .NET Developers Care?&lt;/strong&gt; &lt;a href=&quot;https://youtu.be/garlskQb8BU?t=2384&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Microsoft the organisation on GitHub&lt;/strong&gt; &lt;a href=&quot;https://youtu.be/garlskQb8BU?t=2410&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Over 60% of Contributions to .NET Core come from the Community&lt;/strong&gt; &lt;a href=&quot;https://youtu.be/garlskQb8BU?t=2449&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Are Microsoft telling the Truth?&lt;/strong&gt; &lt;a href=&quot;https://youtu.be/garlskQb8BU?t=2469&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Analysis of GitHub Repositories - ‘Community v. Microsoft’&lt;/strong&gt; &lt;a href=&quot;https://youtu.be/garlskQb8BU?t=2540&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Issues Opened&lt;/strong&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=garlskQb8BU&amp;amp;t=2600&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Pull Requests Created&lt;/strong&gt; &lt;a href=&quot;https://youtu.be/garlskQb8BU?t=2654&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Do .NET Developers Care? - Conclusions&lt;/strong&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=garlskQb8BU&amp;amp;t=2710&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-now&quot;&gt;What Now?&lt;/h2&gt;

&lt;p&gt;[&lt;a href=&quot;https://www.slideshare.net/mattwarren/microsoft-open-source-a-brave-new-world-corestart-20/37&quot;&gt;jump to slide&lt;/a&gt;] [&lt;a href=&quot;https://youtu.be/garlskQb8BU?t=2741&quot;&gt;direct video link&lt;/a&gt;]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;How do I Contribute?&lt;/strong&gt; &lt;a href=&quot;https://youtu.be/garlskQb8BU?t=2745&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Domino Chain Reaction&lt;/strong&gt; &lt;a href=&quot;https://youtu.be/garlskQb8BU?t=2868&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;First CoreFX PR by Ben Adams&lt;/strong&gt; &lt;a href=&quot;https://youtu.be/garlskQb8BU?t=2918&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;First CoreCLR PR by Ben Adams&lt;/strong&gt; &lt;a href=&quot;https://youtu.be/garlskQb8BU?t=2944&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;My main Contributions to the CoreCLR&lt;/strong&gt; &lt;a href=&quot;https://youtu.be/garlskQb8BU?t=2967&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Will I get told to RTM?&lt;/strong&gt; &lt;a href=&quot;https://youtu.be/garlskQb8BU?t=3037&quot;&gt;direct link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;domino-chain-reaction&quot;&gt;Domino Chain Reaction&lt;/h2&gt;

&lt;p&gt;Finally, if you’re wondering what the section on ‘Domino Chain Reaction’ is all about, you’ll have to listen to that &lt;a href=&quot;https://youtu.be/garlskQb8BU?t=2868&quot;&gt;part of the talk&lt;/a&gt;, but the video itself is embedded below:&lt;/p&gt;

&lt;iframe width=&quot;754&quot; height=&quot;420&quot; src=&quot;https://www.youtube.com/embed/y97rBdSYbkg&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;(Based on &lt;strong&gt;actual&lt;/strong&gt; research, see &lt;a href=&quot;https://www.technologyreview.com/s/509641/the-curious-mathematics-of-domino-chain-reactions/&quot;&gt;The Curious Mathematics of Domino Chain Reactions&lt;/a&gt;)&lt;/p&gt;

     
     
     
     
   </content>
   
     <category term='Open Source' scheme='http://www.mattwarren.org/tags#Open Source'/>
   
     <category term='Speaking' scheme='http://www.mattwarren.org/tags#Speaking'/>
   
 </entry>
 
 <entry>
   <title>A DoS Attack against the C# Compiler</title>
   <link href="http://www.mattwarren.org/2017/11/08/A-DoS-Attack-against-the-C-Compiler/"/>
   <updated>2017-11-08T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2017/11/08/A-DoS-Attack-against-the-C#-Compiler</id>
   <content type="html">
     &lt;p&gt;Generics in C# are certainly very useful and I find it amazing that &lt;a href=&quot;https://blogs.msdn.microsoft.com/dsyme/2011/03/15/netc-generics-history-some-photos-from-feb-1999/&quot;&gt;we almost didn’t get them&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What would the cost of inaction have been? What would the cost of failure have been? No generics in C# 2.0? No LINQ in C# 3.0? No TPL in C# 4.0? No Async in C# 5.0? No F#? Ultimately, an erasure model of generics would have been adopted, as for Java, since the CLR team would never have pursued a in-the-VM generics design without external help.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So a big thanks is due to &lt;a href=&quot;https://www.microsoft.com/en-us/research/people/dsyme/&quot;&gt;Don Syme&lt;/a&gt; and the rest of the team at Microsoft Research in Cambridge!&lt;/p&gt;

&lt;p&gt;But as well as being useful, I also find some usages of generics mind-bending, for instance I’m still not sure what this code &lt;em&gt;actually&lt;/em&gt; means or how to explain it in words:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Blah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Blah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As always, reading an Eric Lippert post &lt;a href=&quot;https://blogs.msdn.microsoft.com/ericlippert/2011/02/03/curiouser-and-curiouser/&quot;&gt;helps a lot&lt;/a&gt;, but even he recommends against using this specific ‘circular’ pattern.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Recently I spoke at the &lt;a href=&quot;https://www.corestart.cz/&quot;&gt;CORESTART 2.0&lt;/a&gt; conference in Prague, giving a talk on &lt;a href=&quot;https://www.corestart.cz/#page-speeches&quot;&gt;‘Microsoft and Open-Source – A ‘Brave New World’&lt;/a&gt;. Whilst I was there I met the very knowledgeable &lt;a href=&quot;https://twitter.com/cincura_net&quot;&gt;Jiri Cincura&lt;/a&gt;, who blogs at &lt;a href=&quot;https://www.tabsoverspaces.com/&quot;&gt;tabs ↹ over ␣ ␣ ␣ spaces&lt;/a&gt;. He was giving a great talk on ‘C# 7.1 and 7.2 features’, but also shared with me an excellent code snippet that he called ‘Crazy Class’:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Inner&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;He said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;this is the class that takes crazy amount of time to compile. You can add more &lt;code class=&quot;highlighter-rouge&quot;&gt;Inner.Inner.Inner...&lt;/code&gt; to make it even longer (and also generic parameters).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After a big of digging around I found that someone else had noticed this, see the StackOverflow question &lt;a href=&quot;https://stackoverflow.com/questions/14177225/why-does-field-declaration-with-duplicated-nested-type-in-generic-class-results/14178014&quot;&gt;Why does field declaration with duplicated nested type in generic class results in huge source code increase?&lt;/a&gt; Helpfully the ‘accepted answer’ explains what is going on:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When you combine these two, the way you have done, something interesting happens. The type &lt;code class=&quot;highlighter-rouge&quot;&gt;Outer&amp;lt;T&amp;gt;.Inner&lt;/code&gt; is not the same type as &lt;code class=&quot;highlighter-rouge&quot;&gt;Outer&amp;lt;T&amp;gt;.Inner.Inner&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Outer&amp;lt;T&amp;gt;.Inner&lt;/code&gt; is a subclass of &lt;code class=&quot;highlighter-rouge&quot;&gt;Outer&amp;lt;Outer&amp;lt;T&amp;gt;.Inner&amp;gt;&lt;/code&gt; while &lt;code class=&quot;highlighter-rouge&quot;&gt;Outer&amp;lt;T&amp;gt;.Inner.Inner&lt;/code&gt; is a subclass of &lt;code class=&quot;highlighter-rouge&quot;&gt;Outer&amp;lt;Outer&amp;lt;Outer&amp;lt;T&amp;gt;.Inner&amp;gt;.Inner&amp;gt;&lt;/code&gt;, which we established before as being different from &lt;code class=&quot;highlighter-rouge&quot;&gt;Outer&amp;lt;T&amp;gt;.Inner&lt;/code&gt;. So &lt;code class=&quot;highlighter-rouge&quot;&gt;Outer&amp;lt;T&amp;gt;.Inner.Inner&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Outer&amp;lt;T&amp;gt;.Inner&lt;/code&gt; &lt;strong&gt;are referring to different types&lt;/strong&gt;.&lt;/p&gt;

  &lt;p&gt;When generating IL, the compiler always uses fully qualified names for types. You have cleverly found a way to refer to types with names whose lengths that grow at &lt;strong&gt;exponential rates&lt;/strong&gt;. That is why as you increase the generic arity of &lt;code class=&quot;highlighter-rouge&quot;&gt;Outer&lt;/code&gt; or add additional levels &lt;code class=&quot;highlighter-rouge&quot;&gt;.Y&lt;/code&gt; to the field &lt;code class=&quot;highlighter-rouge&quot;&gt;field&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;Inner&lt;/code&gt; the output IL size and compile time grow so quickly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Clear? Good!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You probably have to be Jon Skeet, Eric Lippert or a member of the &lt;a href=&quot;https://github.com/dotnet/csharplang/blob/057c1fde486803b9e7d33df70dcb84fefa6c89b1/meetings/2015/LDM-2015-01-21.md#design-team&quot;&gt;C# Language Design Team&lt;/a&gt; (yay, ‘Matt Warren’) to really understand what’s going on here, but that doesn’t stop the rest of us having fun with the code!!&lt;/p&gt;

&lt;p&gt;&lt;strong style=&quot;color:red&quot;&gt;I can’t think of any reason why you’d actually want to write code like this, so please don’t!! (or at least if you do, don’t blame me!!)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For a simple idea of what’s actually happening, lets take this code (with only 2 ‘Levels’):&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Inner&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The ‘decompiled’ version actually looks like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Inner&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                        &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                        &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                        &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                        &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                        &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wow, no wonder things go wrong quickly!!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;exponential-growth&quot;&gt;Exponential Growth&lt;/h3&gt;

&lt;p&gt;Firstly let’s check the claim of &lt;strong&gt;exponential growth&lt;/strong&gt;, if you don’t remember your &lt;a href=&quot;https://en.wikipedia.org/wiki/Big_O_notation&quot;&gt;Big O notation&lt;/a&gt; you can also think of this as &lt;code class=&quot;highlighter-rouge&quot;&gt;O(very, very bad)&lt;/code&gt;!!&lt;/p&gt;

&lt;p&gt;To test this out, I’m going to compile the code above, but vary the ‘level’ each time by adding a new &lt;code class=&quot;highlighter-rouge&quot;&gt;.Inner&lt;/code&gt;, so ‘Level 5’ looks like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;‘Level 6’ like this, and so on&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We then get the following results:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Level&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Compile Time (secs)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Working set (KB)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Binary Size (Bytes)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.15&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;54,288&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;135,680&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.22&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;59,500&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;788,992&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2.00&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;70,728&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4,707,840&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6.43&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;121,852&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;28,222,464&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;33.23&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;405,472&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;169,310,208&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;202.10&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2,141,272&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;CRASH&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If we look at these results in graphical form, it’s very obvious what’s going on&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/11/Crazy Class - Compile Time.png&quot;&gt;&lt;img src=&quot;/images/2017/11/Crazy Class - Compile Time.png&quot; alt=&quot;Crazy Class - Compile Time&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/11/Crazy Class - Working Set.png&quot;&gt;&lt;img src=&quot;/images/2017/11/Crazy Class - Working Set.png&quot; alt=&quot;Crazy Class - Working Set&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/11/Crazy Class - Binary Size.png&quot;&gt;&lt;img src=&quot;/images/2017/11/Crazy Class - Binary Size.png&quot; alt=&quot;Crazy Class - Binary Size&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(the dotted lines are a ‘best fit’ trend-line and they are exponential)&lt;/p&gt;

&lt;p&gt;If I compile the code with &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet build&lt;/code&gt; (version 2.0.0), things go really wrong at ‘Level 10’ and the compiler throws an error (&lt;a href=&quot;https://gist.github.com/mattwarren/d6fd747792cf1e98cba4679bf1398041&quot;&gt;full stack trace&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentOutOfRangeException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Specified&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;was&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which looks similar to &lt;a href=&quot;https://github.com/Microsoft/visualfsharp/issues/3866&quot;&gt;Internal compiler error when creating Portable PDB files #3866&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However your mileage may vary, when I ran the code in Visual Studio 2015 it threw an &lt;code class=&quot;highlighter-rouge&quot;&gt;OutOfMemoryException&lt;/code&gt; instead and then promptly restarted itself!! I assume this is because &lt;a href=&quot;https://blogs.msdn.microsoft.com/ricom/2009/06/10/visual-studio-why-is-there-no-64-bit-version-yet/&quot;&gt;VS is a 32-bit application&lt;/a&gt; and it runs out of memory before it can go really wrong!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;mono-compiler&quot;&gt;Mono Compiler&lt;/h3&gt;

&lt;p&gt;As a comparison, here are the results from the &lt;a href=&quot;https://github.com/mono/&quot;&gt;Mono compiler&lt;/a&gt;, thanks to &lt;a href=&quot;https://twitter.com/EgorBo&quot;&gt;Egor Bogatov&lt;/a&gt; for putting them together.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Level&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Compile Time (secs)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Memory Usage (Bytes)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.480&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;134,144&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.502&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;786,944&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.745&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4,706,304&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2.053&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;28,220,928&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10.134&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;169,308,672&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;57.307&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,015,835,136&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;At ‘Level 10’ it &lt;a href=&quot;https://twitter.com/EgorBo/status/928388080519741445&quot;&gt;produced a 968.78 Mb binary&lt;/a&gt;!!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/11/Mono Compiler - Level 10.jpg&quot;&gt;&lt;img src=&quot;/images/2017/11/Mono Compiler - Level 10.jpg&quot; alt=&quot;Mono Compiler - Level 10&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;profiling-the-compiler&quot;&gt;Profiling the Compiler&lt;/h3&gt;

&lt;p&gt;Finally, I want to look at just where the compiler is spending all it’s time. From the results above we saw that it was taking &lt;strong&gt;over 3 minutes&lt;/strong&gt; to compile a simple program, with a peak memory usage of &lt;strong&gt;2.14 GB&lt;/strong&gt;, so what was it actually doing??&lt;/p&gt;

&lt;p&gt;Well clearly there’s lots of &lt;code class=&quot;highlighter-rouge&quot;&gt;Types&lt;/code&gt; involved and the Compiler seems happy for you to write this code, so I guess it needs to figure it all out. Once it’s done that, it then needs to write all this &lt;code class=&quot;highlighter-rouge&quot;&gt;Type&lt;/code&gt; metadata out to a .dll or .exe, which can be &lt;strong&gt;100’s of MB&lt;/strong&gt; in size.&lt;/p&gt;

&lt;p&gt;At a high-level the profiling summary produce by VS looks like this (click for full-size image):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/11/Profiling Report.png&quot;&gt;&lt;img src=&quot;/images/2017/11/Profiling Report.png&quot; alt=&quot;Profiling Report&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However if we take a bit of a close look, we can see the ‘hot-path’ is inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;SerializeTypeReference(..)&lt;/code&gt; method in &lt;a href=&quot;https://github.com/dotnet/roslyn/blob/master/src/Compilers/Core/Portable/PEWriter/MetadataWriter.cs#L3788-L3810&quot;&gt;Compilers/Core/Portable/PEWriter/MetadataWriter.cs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/11/Profiling - Hot Path.png&quot;&gt;&lt;img src=&quot;/images/2017/11/Profiling - Hot Path.png&quot; alt=&quot;Profiling - Hot Path&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;I’m a bit torn about this, it is clearly an ‘abuse’ of generics!!&lt;/p&gt;

&lt;p&gt;In some ways I think that it &lt;strong&gt;shouldn’t&lt;/strong&gt; be fixed, it seems better that the compiler encourages you to &lt;strong&gt;not&lt;/strong&gt; write code like this, rather than making is possible!!&lt;/p&gt;

&lt;p&gt;&lt;strong style=&quot;color:red&quot;&gt;So if it takes 3 mins to compile your code, allocates 2GB of memory and then crashes, take that as a warning!!&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=15654970&quot;&gt;Hacker News&lt;/a&gt;, &lt;a href=&quot;https://www.reddit.com/r/programming/comments/7bn21r/a_dos_attack_against_the_c_compiler_performance/&quot;&gt;/r/programming&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/csharp/comments/7bn206/a_dos_attack_against_the_c_compiler_performance/&quot;&gt;/r/csharp&lt;/a&gt;&lt;/p&gt;


     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2017/11/08/A-DoS-Attack-against-the-C-Compiler/&quot;&gt;A DoS Attack against the C# Compiler&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='C#' scheme='http://www.mattwarren.org/tags#C#'/>
   
     <category term='Open Source' scheme='http://www.mattwarren.org/tags#Open Source'/>
   
     <category term='Roslyn' scheme='http://www.mattwarren.org/tags#Roslyn'/>
   
 </entry>
 
 <entry>
   <title>DotNetAnywhere: An Alternative .NET Runtime</title>
   <link href="http://www.mattwarren.org/2017/10/19/DotNetAnywhere-an-Alternative-.NET-Runtime/"/>
   <updated>2017-10-19T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2017/10/19/DotNetAnywhere-an-Alternative-.NET-Runtime</id>
   <content type="html">
     &lt;p&gt;Recently I was listening to the excellent &lt;a href=&quot;https://www.dotnetrocks.com/&quot;&gt;DotNetRocks podcast&lt;/a&gt; and they had &lt;a href=&quot;https://twitter.com/stevensanderson&quot;&gt;Steven Sanderson&lt;/a&gt; (of &lt;a href=&quot;http://knockoutjs.com/&quot;&gt;Knockout.js fame&lt;/a&gt;) talking about &lt;a href=&quot;https://www.dotnetrocks.com/?show=1455&quot;&gt;‘WebAssembly and Blazor’&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In case you haven’t heard about it, &lt;a href=&quot;https://github.com/SteveSanderson/Blazor&quot;&gt;Blazor&lt;/a&gt; is an attempt to bring .NET to the browser, using the magic of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly&quot;&gt;WebAssembly&lt;/a&gt;. If you want more info, Scott Hanselmen has done a &lt;a href=&quot;https://www.hanselman.com/blog/NETAndWebAssemblyIsThisTheFutureOfTheFrontend.aspx&quot;&gt;nice write-up of the various .NET/WebAssembly projects&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, as much as the mention of WebAssembly was pretty cool, what interested me even more how Blazor was using &lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere&quot;&gt;DotNetAnywhere&lt;/a&gt; as the underlying .NET runtime. This post will look at what DotNetAnywhere is, what you can do with it and how it compares to the full .NET framework.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;dotnetanywhere&quot;&gt;DotNetAnywhere&lt;/h1&gt;

&lt;p&gt;Firstly it’s worth pointing out that DotNetAnywhere (DNA) is designed to be a fully compliant .NET runtime, which means that it can run .NET dlls/exes that have been compiled to run against the full framework. On top of that (at least in theory) it &lt;strong&gt;supports&lt;/strong&gt; all the following &lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere#supported-net-runtime-features&quot;&gt;.NET runtime features&lt;/a&gt;, which is a pretty impressive list!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Generics&lt;/li&gt;
    &lt;li&gt;Garbage collection and finalization&lt;/li&gt;
    &lt;li&gt;Weak references&lt;/li&gt;
    &lt;li&gt;Full exception handling - try/catch/finally&lt;/li&gt;
    &lt;li&gt;PInvoke&lt;/li&gt;
    &lt;li&gt;Interfaces&lt;/li&gt;
    &lt;li&gt;Delegates&lt;/li&gt;
    &lt;li&gt;Events&lt;/li&gt;
    &lt;li&gt;Nullable types&lt;/li&gt;
    &lt;li&gt;Single-dimensional arrays&lt;/li&gt;
    &lt;li&gt;Multi-threading&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;In addition there is some &lt;strong&gt;partial support&lt;/strong&gt; for &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/reflection&quot;&gt;Reflection&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Very limited read-only reflection
      &lt;ul&gt;
        &lt;li&gt;typeof(), .GetType(), Type.Name, Type.Namespace, Type.IsEnum(), &amp;lt;object&amp;gt;.ToString() only&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, there are a few features that are currently &lt;strong&gt;unsupported&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Attributes&lt;/li&gt;
    &lt;li&gt;Most reflection&lt;/li&gt;
    &lt;li&gt;Multi-dimensional arrays&lt;/li&gt;
    &lt;li&gt;Unsafe code&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are &lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/issues?q=is%3Aissue+is%3Aclosed&quot;&gt;various bugs or missing functionality&lt;/a&gt; that might prevent your code running under DotNetAnywhere, however several of these have been &lt;a href=&quot;https://github.com/SteveSanderson/Blazor/pulls?utf8=%E2%9C%93&amp;amp;q=is%3Apr&quot;&gt;fixed since Blazor came along&lt;/a&gt;, so it’s worth checking against the Blazor version of DotNetAnywhere.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At this point in time the original DotNetAnywhere repo is &lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere#this-project-is-inactive-no-issues-or-prs-will-be-dealt-with&quot;&gt;no longer active&lt;/a&gt; (the last sustained activity was in Jan 2012), so it seems that any future development or bugs fixes will likely happen in the Blazor repo. If you have ever fixed something in DotNetAnywhere, consider sending a P.R there, to help the effort.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; In addition there are other forks with various bug fixes and enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ncave/dotnet-js&quot;&gt;https://github.com/ncave/dotnet-js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/memsom/dna&quot;&gt;https://github.com/memsom/dna&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;source-code-layout&quot;&gt;Source Code Layout&lt;/h2&gt;

&lt;p&gt;What I find most impressive about the DotNetAnywhere runtime is that it was &lt;strong&gt;developed by one person&lt;/strong&gt; and is &lt;strong&gt;less that 40,000 lines of code&lt;/strong&gt;!! For a comparison the .NET framework Garbage Collector is &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/gc/gc.cpp&quot;&gt;almost 37,000 lines on it’s own&lt;/a&gt; (more info available in my previous post &lt;a href=&quot;/2017/03/23/Hitchhikers-Guide-to-the-CoreCLR-Source-Code/#overall-stats&quot;&gt;A Hitchhikers Guide to the CoreCLR Source Code&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong style=&quot;color:green&quot;&gt;This makes DotNetAnywhere an ideal learning resource!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Firstly, lets take a look at the Top-10 largest source files, to see where the complexity is:&lt;/p&gt;

&lt;h3 id=&quot;native-code---17710-lines-in-total&quot;&gt;Native Code - &lt;strong&gt;17,710&lt;/strong&gt; lines in total&lt;/h3&gt;

&lt;span class=&quot;compactTable&quot;&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;LOC&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;File&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3,164&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/tree/master/dna/JIT_Execute.c&quot;&gt;JIT_Execute.c&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,778&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/tree/master/dna/JIT.c&quot;&gt;JIT.c&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,109&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/tree/master/dna/PInvoke_CaseCode.h&quot;&gt;PInvoke_CaseCode.h&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;630&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/tree/master/dna/Heap.c&quot;&gt;Heap.c&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;618&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/tree/master/dna/MetaData.c&quot;&gt;MetaData.c&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;563&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/tree/master/dna/MetaDataTables.h&quot;&gt;MetaDataTables.h&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;517&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/tree/master/dna/Type.c&quot;&gt;Type.c&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;491&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/tree/master/dna/MetaData_Fill.c&quot;&gt;MetaData_Fill.c&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;467&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/tree/master/dna/MetaData_Search.c&quot;&gt;MetaData_Search.c&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;452&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/tree/master/dna/JIT_OpCodes.h&quot;&gt;JIT_OpCodes.h&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;/span&gt;

&lt;h3 id=&quot;managed-code---28783-lines-in-total&quot;&gt;Managed Code - &lt;strong&gt;28,783&lt;/strong&gt; lines in total&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;LOC&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;File&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2393&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/corlib/System.Globalization/CalendricalCalculations.cs&quot;&gt;corlib/System.Globalization/CalendricalCalculations.cs&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2314&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/corlib/System/NumberFormatter.cs&quot;&gt;corlib/System/NumberFormatter.cs&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1582&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/System.Drawing/System.Drawing/Pens.cs&quot;&gt;System.Drawing/System.Drawing/Pens.cs&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1443&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/System.Drawing/System.Drawing/Brushes.cs&quot;&gt;System.Drawing/System.Drawing/Brushes.cs&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1405&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/System.Core/System.Linq/Enumerable.cs&quot;&gt;System.Core/System.Linq/Enumerable.cs&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;745&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/corlib/System/DateTime.cs&quot;&gt;corlib/System/DateTime.cs&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;693&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/corlib/System.IO/Path.cs&quot;&gt;corlib/System.IO/Path.cs&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;632&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/corlib/System.Collections.Generic/Dictionary.cs&quot;&gt;corlib/System.Collections.Generic/Dictionary.cs&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;598&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/corlib/System/String.cs&quot;&gt;corlib/System/String.cs&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;467&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/corlib/System.Text/StringBuilder.cs&quot;&gt;corlib/System.Text/StringBuilder.cs&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;main-areas-of-functionality&quot;&gt;Main areas of functionality&lt;/h2&gt;

&lt;p&gt;Next, lets look at the key components in DotNetAnywhere as this gives us a really good idea about what you need to implement a .NET compatible runtime. Along the way, we will also see how they differ from the implementation found in Microsoft’s .NET Framework.&lt;/p&gt;

&lt;h3 id=&quot;reading-net-dlls&quot;&gt;Reading .NET dlls&lt;/h3&gt;

&lt;p&gt;The first thing DotNetAnywhere has to do is read/understand/parse the .NET &lt;em&gt;Metadata and Code&lt;/em&gt; that’s contained in a .dll/.exe. This all takes place in &lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/dna/MetaData.c&quot;&gt;MetaData.c&lt;/a&gt;, primarily within the &lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/dna/MetaData.c#L302-L484&quot;&gt;LoadSingleTable(..)&lt;/a&gt; function. By adding some debugging code, I was able to get a  summary of all the different types of &lt;em&gt;Metadata&lt;/em&gt; that are read in from a typical .NET dll, it’s quite an interesting list:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MetaData contains     1 Assemblies (MD_TABLE_ASSEMBLY)
MetaData contains     1 Assembly References (MD_TABLE_ASSEMBLYREF)
MetaData contains     0 Module References (MD_TABLE_MODULEREF)

MetaData contains    40 Type References (MD_TABLE_TYPEREF)
MetaData contains    13 Type Definitions (MD_TABLE_TYPEDEF)
MetaData contains    14 Type Specifications (MD_TABLE_TYPESPEC)
MetaData contains     5 Nested Classes (MD_TABLE_NESTEDCLASS)

MetaData contains    11 Field Definitions (MD_TABLE_FIELDDEF)
MetaData contains     0 Field RVA's (MD_TABLE_FIELDRVA)
MetaData contains     2 Propeties (MD_TABLE_PROPERTY)
MetaData contains    59 Member References (MD_TABLE_MEMBERREF)
MetaData contains     2 Constants (MD_TABLE_CONSTANT)

MetaData contains    35 Method Definitions (MD_TABLE_METHODDEF)
MetaData contains     5 Method Specifications (MD_TABLE_METHODSPEC)
MetaData contains     4 Method Semantics (MD_TABLE_PROPERTY)
MetaData contains     0 Method Implementations (MD_TABLE_METHODIMPL)
MetaData contains    22 Parameters (MD_TABLE_PARAM)

MetaData contains     2 Interface Implementations (MD_TABLE_INTERFACEIMPL)
MetaData contains     0 Implementation Maps? (MD_TABLE_IMPLMAP)

MetaData contains     2 Generic Parameters (MD_TABLE_GENERICPARAM)
MetaData contains     1 Generic Parameter Constraints (MD_TABLE_GENERICPARAMCONSTRAINT)

MetaData contains    22 Custom Attributes (MD_TABLE_CUSTOMATTRIBUTE)
MetaData contains     0 Security Info Items? (MD_TABLE_DECLSECURITY)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For more information on the &lt;em&gt;Metadata&lt;/em&gt; see &lt;a href=&quot;https://iobservable.net/blog/2013/05/12/introduction-to-clr-metadata/&quot;&gt;Introduction to CLR metadata&lt;/a&gt;, &lt;a href=&quot;https://www.red-gate.com/simple-talk/blogs/anatomy-of-a-net-assembly-pe-headers/&quot;&gt;Anatomy of a .NET Assembly – PE Headers&lt;/a&gt; and the &lt;a href=&quot;https://www.visualstudio.com/license-terms/ecma-c-common-language-infrastructure-standards/&quot;&gt;ECMA specification itself&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;executing-net-il&quot;&gt;Executing .NET IL&lt;/h3&gt;

&lt;p&gt;Another large piece of functionality within DotNetAnywhere is the ‘Just-in-Time’ Compiler (JIT), i.e. the code that is responsible for executing the IL, this takes place initially in &lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/dna/JIT_Execute.c&quot;&gt;JIT_Execute.c&lt;/a&gt; and then &lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/dna/JIT.c&quot;&gt;JIT.c&lt;/a&gt;. The main ‘execution loop’ is in the &lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/dna/JIT.c#L232-L1606&quot;&gt;JITit(..) function&lt;/a&gt; which contains an impressive 1,374 lines of code and over 200 &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; statements within a single &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt;!!&lt;/p&gt;

&lt;p&gt;Taking a higher level view, the overall process that it goes through looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/10/NET IL - DNA JIT Op-Codes.png&quot;&gt;&lt;img src=&quot;/images/2017/10/NET IL - DNA JIT Op-Codes.png&quot; alt=&quot;NET IL -&amp;gt; DNA JIT Op-Codes&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Where the .NET IL Op-Codes (&lt;code class=&quot;highlighter-rouge&quot;&gt;CIL_XXX&lt;/code&gt;) are defined in &lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/dna/CIL_OpCodes.h&quot;&gt;CIL_OpCodes.h&lt;/a&gt; and the DotNetAnywhere JIT Op-Codes (&lt;code class=&quot;highlighter-rouge&quot;&gt;JIT_XXX&lt;/code&gt;) are defined in &lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/dna/JIT_OpCodes.h&quot;&gt;JIT_OpCodes.h&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Interesting enough, the JIT is the only place in DotNetAnywhere that &lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/dna/JIT_Execute.c#L184-L204&quot;&gt;uses assembly code&lt;/a&gt; and even then it’s only for &lt;code class=&quot;highlighter-rouge&quot;&gt;win32&lt;/code&gt;. It is used to allow a ‘jump’ or a &lt;code class=&quot;highlighter-rouge&quot;&gt;goto&lt;/code&gt; to labels in the C source code, so as IL instructions are executed it never actually leaves the &lt;code class=&quot;highlighter-rouge&quot;&gt;JITit(..)&lt;/code&gt; function, control is just moved around without having to make a full method call.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#ifdef __GNUC__
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define GET_LABEL(var, label) var = &amp;amp;&amp;amp;label
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define GO_NEXT() goto **(void**)(pCurOp++)
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#else
#ifdef WIN32
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define GET_LABEL(var, label) \
	{ __asm mov edi, label \
	__asm mov var, edi }
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define GO_NEXT() \
	{ __asm mov edi, pCurOp \
	__asm add edi, 4 \
	__asm mov pCurOp, edi \
	__asm jmp DWORD PTR [edi - 4] }
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong style=&quot;color:orange&quot;&gt;Differences with the .NET Framework&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the full .NET framework all IL code is turned into machine code by the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-tutorial.md&quot;&gt;Just-in-Time Compiler (JIT)&lt;/a&gt; before being executed by the CPU.&lt;/p&gt;

&lt;p&gt;However as we’ve already seen, DotNetAnywhere ‘interprets’ the IL, instruction-by-instruction and even through it’s done in a file called &lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/dna/JIT.c&quot;&gt;JIT.c&lt;/a&gt; &lt;strong&gt;no machine code&lt;/strong&gt; is emitted, so the naming seems strange!?&lt;/p&gt;

&lt;p&gt;Maybe it’s just a difference of perspective, but it’s not clear to me at what point you move from ‘interpreting’ code to ‘JITting’ it, even after reading the following links I’m not sure!! (can someone enlighten me?)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2426091/what-are-the-differences-between-a-just-in-time-compiler-and-an-interpreter&quot;&gt;What are the differences between a Just-in-Time-Compiler and an Interpreter?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/246094/understanding-the-differences-traditional-interpreter-jit-compiler-jit-interp&quot;&gt;Understanding the differences: traditional interpreter, JIT compiler, JIT interpreter and AOT compiler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3718024/jit-vs-interpreters&quot;&gt;JIT vs Interpreters&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.quora.com/Why-do-we-call-it-JIT-compiler-and-not-JIT-interpreter-to-refer-to-the-thing-that-converts-the-Java-bytecode-to-the-machine-code&quot;&gt;Why do we call it “JIT compiler” and not “JIT interpreter” to refer to the thing that converts the Java bytecode to the machine code?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/cd/E13150_01/jrockit_jvm/jrockit/geninfo/diagnos/underst_jit.html&quot;&gt;Understanding JIT Compilation and Optimizations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;garbage-collector&quot;&gt;Garbage Collector&lt;/h3&gt;

&lt;p&gt;All the code for the DotNetAnywhere Garbage Collector (GC) is contained in &lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/dna/Heap.c&quot;&gt;Heap.c&lt;/a&gt; and is a very readable 600 lines of code. To give you an overview of what it does, here is the list of functions that it exposes:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Heap_Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Heap_SetRoots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tHeapRoots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pHeapRoots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pRoots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizeInBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Heap_UnmarkFinalizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAP_PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heapPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Heap_GarbageCollect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;U32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Heap_NumCollections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;U32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Heap_GetTotalMemory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;HEAP_PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Heap_Alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tMD_TypeDef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pTypeDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HEAP_PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Heap_AllocType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tMD_TypeDef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pTypeDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Heap_MakeUndeletable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAP_PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heapEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Heap_MakeDeletable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAP_PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heapEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tMD_TypeDef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Heap_GetType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAP_PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heapEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;HEAP_PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Heap_Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tMD_TypeDef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pMem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HEAP_PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Heap_Clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAP_PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;U32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Heap_SyncTryEnter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAP_PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;U32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Heap_SyncExit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAP_PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;HEAP_PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Heap_SetWeakRefTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAP_PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HEAP_PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weakRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HEAP_PTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Heap_GetWeakRefAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAP_PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Heap_RemovedWeakRefTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAP_PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong style=&quot;color:orange&quot;&gt;Differences with the .NET Framework&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;However, like the JIT/Interpreter, the GC has some fundamental differences when compared to the .NET Framework&lt;/p&gt;

&lt;h4 id=&quot;conservative-garbage-collection&quot;&gt;&lt;strong&gt;Conservative Garbage Collection&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Firstly DotNetAnywhere implements what is knows as a &lt;a href=&quot;https://stackoverflow.com/questions/7629446/conservative-garbage-collector&quot;&gt;&lt;em&gt;Conservative&lt;/em&gt; GC&lt;/a&gt;. In simple terms this means that is does not know (for sure) which areas of memory are actually references/pointers to objects and which are just a random number (that looks like a memory address). In the Microsoft .NET Framework the JIT calculates this information and stores it in the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/inc/gcinfo.h&quot;&gt;GCInfo structure&lt;/a&gt; so the GC can make use of it. But DotNetAnywhere doesn’t do this.&lt;/p&gt;

&lt;p&gt;Instead, during the &lt;code class=&quot;highlighter-rouge&quot;&gt;Mark&lt;/code&gt; phase the GC &lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/dna/Heap.c#L278-L345&quot;&gt;gets all the available ‘roots’&lt;/a&gt;, but it will consider all memory addresses within an object as ‘potential’ references (hence it is ‘&lt;em&gt;conservative&lt;/em&gt;’). It then has to lookup each possible reference, to see if it really points to an ‘object reference’. It does this by keeping track of all memory/heap references in a &lt;a href=&quot;http://www.eternallyconfuzzled.com/tuts/datastructures/jsw_tut_andersson.aspx&quot;&gt;balanced binary search tree&lt;/a&gt; (ordered by memory address), which looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/10/Binary Tree with Pointers into the Heap.png&quot;&gt;&lt;img src=&quot;/images/2017/10/Binary Tree with Pointers into the Heap.png&quot; alt=&quot;Binary Tree with Pointers into the Heap&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, this means that all objects references have to be stored in the binary tree when they are allocated, which adds some overhead to allocation. In addition extra memory is needed, 20 bytes per heap entry. We can see this by looking at the &lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/dna/Heap.c#L58-L83&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tHeapEntry&lt;/code&gt; data structure&lt;/a&gt; (all pointers are 4 bytes, &lt;code class=&quot;highlighter-rouge&quot;&gt;U8&lt;/code&gt; = 1 byte and &lt;code class=&quot;highlighter-rouge&quot;&gt;padding&lt;/code&gt; is ignored), &lt;code class=&quot;highlighter-rouge&quot;&gt;tHeapEntry *pLink[2]&lt;/code&gt; is the extra data that is needed just to enable the binary tree lookup.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tHeapEntry_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Left/right links in the heap binary tree
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tHeapEntry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// The 'level' of this node. Leaf nodes have lowest level
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;U8&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Used to mark that this node is still in use.
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// If this is set to 0xff, then this heap entry is undeletable.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;U8&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Set to 1 if the Finalizer needs to be run.
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Set to 2 if this has been added to the Finalizer queue
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Set to 0 when the Finalizer has been run (or there is no Finalizer in the first place)
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Only set on types that have a Finalizer
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;U8&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;needToFinalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// unused
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;U8&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// The type in this heap entry
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tMD_TypeDef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pTypeDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Used for locking sync, and tracking WeakReference that point to this object
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tSync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// The user memory
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;U8&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But why does DotNetAnywhere work like this? Fortunately &lt;a href=&quot;https://github.com/chrisdunelm&quot;&gt;Chris Bacon&lt;/a&gt; the author of DotNetAnywhere &lt;a href=&quot;https://github.com/SteveSanderson/Blazor/pull/7#discussion_r136719427&quot;&gt;explains&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mind you, the whole heap code really needs a rewrite to reduce per-object memory overhead, and to remove the need for the binary tree of allocations. Not really thinking of a generational GC, that would probably add to much code. This was something I vaguely intended to do, but never got around to.
&lt;strong&gt;The current heap code was just the simplest thing to get GC working quickly.&lt;/strong&gt; The very initial implementation did no GC at all. It was beautifully fast, but ran out of memory rather too quickly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For more info on ‘Conservative’ and ‘Precise’ GCs see:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Tracing_garbage_collection#Precise_vs._conservative_and_internal_pointers&quot;&gt;Precise vs. conservative and internal pointers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/5096088/how-does-the-net-clr-distinguish-between-managed-from-unmanaged-pointers/5096824#5096824&quot;&gt;How does the .NET CLR distinguish between Managed from Unmanaged Pointers?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;gc-only-does-mark-sweep-it-doesnt-compact&quot;&gt;&lt;strong&gt;GC only does ‘Mark-Sweep’, it doesn’t Compact&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Another area in which the GC behaviour differs is that it doesn’t do any &lt;strong&gt;Compaction&lt;/strong&gt; of memory after it’s cleaned up, as Steve Sanderson found out when &lt;a href=&quot;https://github.com/SteveSanderson/Blazor/blob/master/src/Blazor.Runtime/Interop/ManagedGCHandle.cs#L40-L43&quot;&gt;working on Blazor&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;.. During server-side execution we don’t actually need to pin anything, because there’s no interop outside .NET. During client-side execution, everything is (in effect) pinned regardless, &lt;strong&gt;because DNA’s GC only does mark-sweep - it doesn’t have any compaction phase&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In addition, when an object is allocated DotNetAnywhere just makes a call to &lt;a href=&quot;http://www.cplusplus.com/reference/cstdlib/malloc/&quot;&gt;malloc()&lt;/a&gt;, see the code that does this is in the &lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/dna/Heap.c#L468&quot;&gt;Heap_Alloc(..) function&lt;/a&gt;. So there is no concept of &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/garbage-collection.md#physical-representation-of-the-managed-heap&quot;&gt;‘Generations’ or ‘Segments’&lt;/a&gt; that you have in the .NET Framework GC, i.e. no ‘Gen 0’, ‘Gen 1’, or ‘Large Object Heap’.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;threading-model&quot;&gt;Threading Model&lt;/h3&gt;

&lt;p&gt;Finally, lets take a look at the threading model, which is fundamentally different from the one found in the .NET Framework.&lt;/p&gt;

&lt;p&gt;&lt;strong style=&quot;color:orange&quot;&gt;Differences with the .NET Framework&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Whilst DotNetAnywhere will happily create new threads and execute them for you, it’s only providing the illusion of true multi-threading. In reality it only runs on &lt;strong&gt;one thread&lt;/strong&gt;, but &lt;strong&gt;context switches&lt;/strong&gt; between the different threads that your program creates:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/10/Thread Usage Explanation.png&quot;&gt;&lt;img src=&quot;/images/2017/10/Thread Usage Explanation.png&quot; alt=&quot;Thread Usage Explanation&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see this in action in the code below, (from the &lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/dna/Thread.c#L112-L236&quot;&gt;Thread_Execute() function&lt;/a&gt;), note the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;JIT_Execute(..)&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;numInst&lt;/code&gt; set to &lt;code class=&quot;highlighter-rouge&quot;&gt;100&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;U32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minSleepTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;I32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadExitValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JIT_Execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;An interesting side-effect is that the threading code in the DotNetAnywhere &lt;code class=&quot;highlighter-rouge&quot;&gt;corlib&lt;/code&gt; implementation is really simple. For instance the &lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/dna/System.Threading.Interlocked.c#L26-L37&quot;&gt;internal implementation&lt;/a&gt; of the &lt;a href=&quot;https://github.com/chrisdunelm/DotNetAnywhere/blob/master/corlib/System.Threading/Interlocked.cs#L28&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Interlocked.CompareExchange()&lt;/code&gt; function&lt;/a&gt; looks like the following, note the lack of synchronisation that you would normally expect:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tAsyncCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;System_Threading_Interlocked_CompareExchange_Int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pThis_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pReturnValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;U32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pLoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERNALCALL_PARAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;U32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERNALCALL_PARAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;U32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERNALCALL_PARAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pReturnValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pLoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pLoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pLoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;benchmarks&quot;&gt;Benchmarks&lt;/h2&gt;

&lt;p&gt;As a simple test, I ran some benchmarks from &lt;a href=&quot;http://benchmarksgame.alioth.debian.org/u64q/binarytrees.html&quot;&gt;The Computer Language Benchmarks Game - binary-trees&lt;/a&gt;, using the &lt;a href=&quot;http://benchmarksgame.alioth.debian.org/u64q/program.php?test=binarytrees&amp;amp;lang=csharpcore&amp;amp;id=1&quot;&gt;simplest C# version&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: DotNetAnywhere was designed to run on low-memory devices, so it was not meant to have the same performance as the full .NET Framework. Please bear that in mind when looking at the results!!&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;net-framework-461---036-seconds&quot;&gt;.NET Framework, 4.6.1 - 0.36 seconds&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Invoked=TestApp.exe 15
stretch tree of depth 16         check: 131071
32768    trees of depth 4        check: 1015808
8192     trees of depth 6        check: 1040384
2048     trees of depth 8        check: 1046528
512      trees of depth 10       check: 1048064
128      trees of depth 12       check: 1048448
32       trees of depth 14       check: 1048544
long lived tree of depth 15      check: 65535

Exit code      : 0
Elapsed time   : 0.36
Kernel time    : 0.06 (17.2%)
User time      : 0.16 (43.1%)
page fault #   : 6604
Working set    : 25720 KB
Paged pool     : 187 KB
Non-paged pool : 24 KB
Page file size : 31160 KB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;dotnetanywhere---5439-seconds&quot;&gt;DotNetAnywhere - 54.39 seconds&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Invoked=dna TestApp.exe 15
stretch tree of depth 16         check: 131071
32768    trees of depth 4        check: 1015808
8192     trees of depth 6        check: 1040384
2048     trees of depth 8        check: 1046528
512      trees of depth 10       check: 1048064
128      trees of depth 12       check: 1048448
32       trees of depth 14       check: 1048544
long lived tree of depth 15      check: 65535

Total execution time = 54288.33 ms
Total GC time = 36857.03 ms
Exit code      : 0
Elapsed time   : 54.39
Kernel time    : 0.02 (0.0%)
User time      : 54.15 (99.6%)
page fault #   : 5699
Working set    : 15548 KB
Paged pool     : 105 KB
Non-paged pool : 8 KB
Page file size : 13144 KB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So clearly DotNetAnywhere doesn’t work as fast in this benchmark (0.36 seconds v 54 seconds). However if we look at other benchmarks from the same site, it performs a lot better. It seems that DotNetAnywhere has a significant overhead when allocating objects (a &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;), which is less obvious when using &lt;code class=&quot;highlighter-rouge&quot;&gt;structs&lt;/code&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;&lt;a href=&quot;http://benchmarksgame.alioth.debian.org/u64q/program.php?test=binarytrees&amp;amp;lang=csharpcore&amp;amp;id=1&quot;&gt;Benchmark 1&lt;/a&gt; (using &lt;code class=&quot;highlighter-rouge&quot;&gt;classes&lt;/code&gt;)&lt;/th&gt;
      &lt;th&gt;&lt;a href=&quot;http://benchmarksgame.alioth.debian.org/u64q/program.php?test=binarytrees&amp;amp;lang=csharpcore&amp;amp;id=2&quot;&gt;Benchmark 2&lt;/a&gt; (using &lt;code class=&quot;highlighter-rouge&quot;&gt;structs&lt;/code&gt;)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Elapsed Time (secs)&lt;/td&gt;
      &lt;td&gt;3.1&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GC Collections&lt;/td&gt;
      &lt;td&gt;96&lt;/td&gt;
      &lt;td&gt;67&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Total GC time (msecs)&lt;/td&gt;
      &lt;td&gt;983.59&lt;/td&gt;
      &lt;td&gt;439.73&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Finally, I really want to thank &lt;a href=&quot;https://github.com/chrisdunelm&quot;&gt;Chris Bacon&lt;/a&gt;, DotNetAnywhere is a great code base and gives a fantastic insight into what needs to happen for a .NET runtime to work.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=15514519&quot;&gt;Hacker News&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/programming/comments/77frgh/dotnetanywhere_an_alternative_net_runtime/&quot;&gt;/r/programming&lt;/a&gt;&lt;/p&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2017/10/19/DotNetAnywhere-an-Alternative-.NET-Runtime/&quot;&gt;DotNetAnywhere: An Alternative .NET Runtime&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
 </entry>
 
 <entry>
   <title>Analysing C# code on GitHub with BigQuery</title>
   <link href="http://www.mattwarren.org/2017/10/12/Analysing-C-code-on-GitHub-with-BigQuery/"/>
   <updated>2017-10-12T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2017/10/12/Analysing-C#-code-on-GitHub-with-BigQuery</id>
   <content type="html">
     &lt;p&gt;Just over a year ago Google made all the &lt;a href=&quot;https://medium.com/google-cloud/github-on-bigquery-analyze-all-the-code-b3576fd2b150&quot;&gt;open source code on GitHub available for querying&lt;/a&gt; within BigQuery and as if that wasn’t enough &lt;a href=&quot;https://cloud.google.com/blog/big-data/2017/01/how-to-run-a-terabyte-of-google-bigquery-queries-each-month-without-a-credit-card&quot;&gt;you can run a terabyte of queries each month for free&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;So in this post I am going to be looking at all the &lt;strong&gt;C#&lt;/strong&gt; source code on GitHub and what we can find out from it. Handily a smaller, C# only, dataset has been made available (in BigQuery you are charged per byte read), called &lt;a href=&quot;https://bigquery.cloud.google.com/table/fh-bigquery:github_extracts.contents_net_cs&quot;&gt;fh-bigquery:github_extracts.contents_net_cs&lt;/a&gt; and has&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;5,885,933&lt;/strong&gt; unique ‘.cs’ files&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;792,166,632&lt;/strong&gt; lines of code (LOC)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;37.17 GB&lt;/strong&gt; of data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Which is a pretty comprehensive set of C# source code!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The rest of this post will &lt;em&gt;attempt&lt;/em&gt; to answer the following questions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#tabs-or-spaces&quot;&gt;Tabs or Spaces?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#regions-should-be-banned-or-okay-in-some-cases&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;regions&lt;/code&gt;: ‘should be banned’ or ‘okay in some cases’?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#kr-or-allman-where-do-c-devs-like-to-put-their-braces&quot;&gt;‘K&amp;amp;R’ or ‘Allman’, where do C# devs like to put their braces?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#do-c-developers-like-writing-functional-code&quot;&gt;Do C# developers like writing functional code?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then moving onto some less controversial C# topics:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#which-using-statements-are-most-widely-used&quot;&gt;Which &lt;code class=&quot;highlighter-rouge&quot;&gt;using&lt;/code&gt; statements are most widely used?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-nuget-packages-are-most-often-included-in-a-net-project&quot;&gt;What NuGet packages are most often included in a .NET project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-many-lines-of-code-loc-are-in-a-typical-c-file&quot;&gt;How many lines of code (LOC) are in a typical C# file?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-the-most-widely-thrown-exception&quot;&gt;What is the most widely thrown &lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#asyncawait-all-the-things-or-not&quot;&gt;‘async/await all the things’ or not?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#do-c-developers-like-using-the-var-keyword&quot;&gt;Do C# developers like using the &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; keyword?&lt;/a&gt; (&lt;strong&gt;Updated&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before we end up looking at repositories, not just individual C# files:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-the-most-popular-repository-with-c-code-in-it&quot;&gt;What is the most popular repository with C# code in it?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#just-how-many-files-should-you-have-in-a-repository&quot;&gt;Just how many files should you have in a repository?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-are-the-most-popular-c-class-names&quot;&gt;What are the most popular C# &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; names?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#foocs-programcs-or-something-else-whats-the-most-common-file-name&quot;&gt;‘Foo.cs’, ‘Program.cs’ or something else, what’s the most common file name?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you want to try the queries for yourself (or find my mistakes), all of them are available in &lt;a href=&quot;https://gist.github.com/mattwarren/42100ffe488bce5d48be22b59124b752&quot;&gt;this gist&lt;/a&gt;. There’s a good chance that my regular expressions miss out some edge-cases, after all &lt;a href=&quot;https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/&quot;&gt;Regular Expressions: Now You Have Two Problems&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;tabs-or-spaces&quot;&gt;Tabs or Spaces?&lt;/h2&gt;

&lt;p&gt;In the entire data-set there are 5,885,933 files, but here we only include ones that have more than 10 lines starting with a tab or a space&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Tabs&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Tabs %&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Spaces&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Spaces %&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Total&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;799,055&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;17.15%&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3,859,528&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;82.85%&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4,658,583&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Clearly, C# developers (on GitHub) prefer &lt;strong&gt;Spaces&lt;/strong&gt; over &lt;strong&gt;Tabs&lt;/strong&gt;, let the endless debates continue!! (I think &lt;em&gt;some&lt;/em&gt; of this can be explained by the fact that Visual Studio &lt;a href=&quot;https://blogs.msdn.microsoft.com/zainnab/2010/09/08/insert-spaces-vs-keep-tabs/&quot;&gt;uses ‘spaces’ by default&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;If you want to see how C# compares to other programming languages, take a look at &lt;a href=&quot;https://medium.com/@hoffa/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd&quot;&gt;400,000 GitHub repositories, 1 billion files, 14 terabytes of code: Spaces or Tabs?&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;regions-should-be-banned-or-okay-in-some-cases&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;regions&lt;/code&gt;: ‘should be banned’ or ‘okay in some cases’?&lt;/h2&gt;

&lt;p&gt;It turns out that there are an impressive &lt;strong&gt;712,498&lt;/strong&gt; C# files (out of 5.8 million) that contain at least one &lt;code class=&quot;highlighter-rouge&quot;&gt;#region&lt;/code&gt; statement (&lt;a href=&quot;https://gist.github.com/mattwarren/42100ffe488bce5d48be22b59124b752#regions&quot;&gt;query used&lt;/a&gt;), that’s just over 12%. (I’m hoping that a lot of those files have been auto-generated by a tool!)&lt;/p&gt;

&lt;h2 id=&quot;kr-or-allman-where-do-c-devs-like-to-put-their-braces&quot;&gt;‘K&amp;amp;R’ or ‘Allman’, where do C# devs like to put their braces?&lt;/h2&gt;

&lt;p&gt;C# developers overwhelmingly prefer putting an opening brace &lt;code class=&quot;highlighter-rouge&quot;&gt;{&lt;/code&gt; on it’s own line (&lt;a href=&quot;https://gist.github.com/mattwarren/42100ffe488bce5d48be22b59124b752#brace_placement&quot;&gt;query used&lt;/a&gt;)&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;separate line&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;same line&lt;/th&gt;
      &lt;th&gt;same line (initializer)&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;total (with brace)&lt;/th&gt;
      &lt;th&gt;total (all code)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;81,306,320 (67%)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;40,044,603 (33%)&lt;/td&gt;
      &lt;td&gt;3,631,947 (2.99%)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;121,350,923 (15.32%)&lt;/td&gt;
      &lt;td&gt;792,166,632&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;(‘same line initializers’ include code like &lt;code class=&quot;highlighter-rouge&quot;&gt;new { Name = &quot;&quot;, .. }&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;new [] { 1, 2, 3.. }&lt;/code&gt;)&lt;/p&gt;

&lt;h2 id=&quot;do-c-developers-like-writing-functional-code&quot;&gt;Do C# developers like writing functional code?&lt;/h2&gt;

&lt;p&gt;This is slightly unscientific, but I wanted to see how widely the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-operator&quot;&gt;Lambda Operator&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;=&amp;gt;&lt;/code&gt; is used in C# code (&lt;a href=&quot;https://gist.github.com/mattwarren/42100ffe488bce5d48be22b59124b752#lambdas&quot;&gt;query&lt;/a&gt;). Yes, I know, if you want to write functional code on .NET you really should use F#, but C# has become more ‘functional’ over the years and I wanted to see how much code was taking advantage of that.&lt;/p&gt;

&lt;p&gt;Here’s the raw percentiles:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Percentile&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;% of lines using lambdas&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.51&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;25&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.14&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;50&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2.50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5.26&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;90&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9.95&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;95&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;14.29&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;99&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;28.00&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So we can say that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;50% of all the C# code on GitHub uses &lt;code class=&quot;highlighter-rouge&quot;&gt;=&amp;gt;&lt;/code&gt; on 2.44% (or less) of their lines.&lt;/li&gt;
  &lt;li&gt;10% of all C# files have lambdas on almost 1 in 10 of their lines (9.95%)&lt;/li&gt;
  &lt;li&gt;5% use &lt;code class=&quot;highlighter-rouge&quot;&gt;=&amp;gt;&lt;/code&gt; on 1 in 7 lines (14.29%)&lt;/li&gt;
  &lt;li&gt;1% of files have lambdas on over 1 in 3 lines (28%) of their lines of code, that’s pretty impressive!&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;which-using-statements-are-most-widely-used&quot;&gt;Which &lt;code class=&quot;highlighter-rouge&quot;&gt;using&lt;/code&gt; statements are most widely used?&lt;/h2&gt;

&lt;p&gt;Now on to some a bit more substantial, what are the most widely used &lt;code class=&quot;highlighter-rouge&quot;&gt;using&lt;/code&gt; statements in C# code?&lt;/p&gt;

&lt;p&gt;The top 10 looks like this (the &lt;a href=&quot;https://gist.github.com/mattwarren/be5df65729b0188d31463e3f143ba886&quot;&gt;full results are available&lt;/a&gt;):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;using statement&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;count&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;using System.Collections.Generic;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,780,646&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using System;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,477,019&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using System.Linq;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,319,830&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using System.Text;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;902,165&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using System.Threading.Tasks;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;628,195&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using System.Runtime.InteropServices;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;431,867&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using System.IO;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;407,848&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using System.Runtime.CompilerServices;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;338,686&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using System.Collections;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;289,867&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using System.Reflection;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;218,369&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;However, &lt;a href=&quot;https://twitter.com/davkean/status/917523113587257344&quot;&gt;as was pointed out&lt;/a&gt;, the top 5 are included by default when you add a new file in Visual Studio and many people wouldn’t remove them. The same applies to ‘System.Runtime.InteropServices’ and ‘System.Runtime.CompilerServices’ which are include in ‘AssemblyInfo.cs` by default.&lt;/p&gt;

&lt;p&gt;So if we adjust the list to take account of this, the top 10 looks like so:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;using statement&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;count&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;using System.IO;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;407,848&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using System.Collections;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;289,867&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using System.Reflection;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;218,369&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using System.Diagnostics;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;201,341&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using System.Threading;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;179,168&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using System.ComponentModel;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;160,681&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using System.Web;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;160,323&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using System.Windows.Forms;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;137,003&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using System.Globalization;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;132,113&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using System.Drawing;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;127,033&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Finally, an interesting list is the top 10 using statements that aren’t &lt;code class=&quot;highlighter-rouge&quot;&gt;System&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Microsoft&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows&lt;/code&gt; namespaces:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;using statement&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;count&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;using NUnit.Framework;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;119,463&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using UnityEngine;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;117,673&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using Xunit;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;99,099&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using Newtonsoft.Json;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;81,675&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using Newtonsoft.Json.Linq;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;29,416&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using Moq;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;23,546&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using UnityEngine.UI;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;20,355&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using UnityEditor;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;19,937&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using Amazon.Runtime;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;18,941&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;using log4net;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;17,297&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;what-nuget-packages-are-most-often-included-in-a-net-project&quot;&gt;What NuGet packages are most often included in a .NET project?&lt;/h2&gt;

&lt;p&gt;It turns out that there is also a separate dataset containing all the ‘packages.config’ files on GitHub, it’s called &lt;a href=&quot;https://bigquery.cloud.google.com/table/fh-bigquery:github_extracts.contents_net_packages_config&quot;&gt;contents_net_packages_config&lt;/a&gt; and has 104,808 entries. By querying this we can see that &lt;a href=&quot;https://www.newtonsoft.com/json&quot;&gt;Json.Net&lt;/a&gt; is the clear winner!!&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;package&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;count&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Newtonsoft.Json&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;45,055&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Microsoft.Web.Infrastructure&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16,022&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Microsoft.AspNet.Razor&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;15,109&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Microsoft.AspNet.WebPages&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14,495&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Microsoft.AspNet.Mvc&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14,236&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EntityFramework&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14,191&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Microsoft.AspNet.WebApi.Client&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13,480&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Microsoft.AspNet.WebApi.Core&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12,210&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Microsoft.Net.Http&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11,625&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;jQuery&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10,646&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Microsoft.Bcl.Build&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10,641&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Microsoft.Bcl&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10,349&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NUnit&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10,341&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Owin&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9,681&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Microsoft.Owin&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9,202&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Microsoft.AspNet.WebApi.WebHost&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9,007&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WebGrease&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8,743&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Microsoft.AspNet.Web.Optimization&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8,721&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Microsoft.AspNet.WebApi&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8,179&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;how-many-lines-of-code-loc-are-in-a-typical-c-file&quot;&gt;How many lines of code (LOC) are in a typical C# file?&lt;/h2&gt;

&lt;p&gt;Are C# developers prone to creating huge files that go one for 1000’s of lines? Well some are but fortunately it’s the minority of us!!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/10/Percentiles%20of%20lines%20of%20code%20per%20file.png&quot;&gt;&lt;img src=&quot;/images/2017/10/Percentiles%20of%20lines%20of%20code%20per%20file.png&quot; alt=&quot;Percentiles of lines of code per file&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note the Y-axis is ‘lines of code’ and is logarithmic, the &lt;a href=&quot;https://gist.github.com/mattwarren/c810abe0c1ea152b60632c5987161aa4&quot;&gt;raw data is available&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Oh dear, Uncle Bob isn’t going to be happy, whilst 96% of the files have 509 LOC of less, the other 4% don’t!! From &lt;a href=&quot;http://amzn.to/2yezlZH&quot;&gt;Clean Code&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/10/Uncle Bob - Clean Code - Number of lines of code in a file.png&quot;&gt;&lt;img src=&quot;/images/2017/10/Uncle Bob - Clean Code - Number of lines of code in a file.png&quot; alt=&quot;Uncle Bob - Clean Code - Number of lines of code in a file&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And in case you’re wondering, here’s the Top 10 longest C# files!!&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;File&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Lines&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;MarMot/Input/test.marmot.cs&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;92663&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;src/CodenameGenerator/WordRepos/LastNamesRepository.cs&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;88810&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cs_inputtest/cs_02_7000.cs&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;63004&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cs_inputtest/cs_02_6000.cs&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;54004&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;src/ML NET20/Utility/UserName.cs&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;52014&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MWBS/Dictionary/DefaultWordDictionary.cs&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;48912&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Sources/Accord.Math/Matrix/Matrix.Comparisons1.Generated.cs&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;48407&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UrduProofReader/UrduLibs/Utils.cs&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;48255&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cs_inputtest/cs_02_5000.cs&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;45004&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;css/style.cs&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;44366&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;what-is-the-most-widely-thrown-exception&quot;&gt;What is the most widely thrown &lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt;?&lt;/h2&gt;

&lt;p&gt;There’s a few interesting results in &lt;a href=&quot;https://gist.github.com/mattwarren/42100ffe488bce5d48be22b59124b752#most-popular-execeptions&quot;&gt;this query&lt;/a&gt;, for instance who knew that so many &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationExceptions&lt;/code&gt; were thrown and &lt;code class=&quot;highlighter-rouge&quot;&gt;NotSupportedException&lt;/code&gt; being so high up the list is a bit worrying!!&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Exception&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;count&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;throw new ArgumentNullException&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;699,526&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;throw new ArgumentException&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;361,616&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;throw new NotImplementedException&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;340,361&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;throw new InvalidOperationException&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;260,792&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;throw new ArgumentOutOfRangeException&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;160,640&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;throw new NotSupportedException&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;110,019&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;throw new HttpResponseException&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;74,498&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;throw new ValidationException&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;35,615&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;throw new ObjectDisposedException&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;31,129&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;throw new ApplicationException&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;30,849&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;throw new UnauthorizedException&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;21,133&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;throw new FormatException&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;19,510&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;throw new SerializationException&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;17,884&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;throw new IOException&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;15,779&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;throw new IndexOutOfRangeException&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14,778&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;throw new NullReferenceException&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12,372&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;throw new InvalidDataException&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12,260&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;throw new ApiException&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11,660&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;throw new InvalidCastException&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10,510&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;asyncawait-all-the-things-or-not&quot;&gt;‘async/await all the things’ or not?&lt;/h2&gt;

&lt;p&gt;The addition of the &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt; keywords to the C# language makes writing &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/async&quot;&gt;asynchronous code much easier&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetDotNetCountAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Suspends GetDotNetCountAsync() to allow the caller (the web server)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// to accept another request, rather than blocking on this one.&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_httpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DownloadStringAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://dotnetfoundation.org&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.NET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But how much is it used? Using the query below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;SELECT Count(*) count
FROM
  [fh-bigquery:github_extracts.contents_net_cs]
WHERE
  REGEXP_MATCH(content, r'\sasync\s|\sawait\s')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I found that there are &lt;strong&gt;218,643&lt;/strong&gt; files (out of 5,885,933) that have at least one usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt; in them.&lt;/p&gt;

&lt;h2 id=&quot;do-c-developers-like-using-the-var-keyword&quot;&gt;Do C# developers like using the &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; keyword?&lt;/h2&gt;

&lt;strike&gt;&lt;p&gt;Less that they use &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt;, there are &lt;strong&gt;130,590&lt;/strong&gt; files that have at least one usage of the &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; keyword&lt;/p&gt;&lt;/strike&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: thanks for &lt;a href=&quot;https://twitter.com/jairbubbles&quot;&gt;jairbubbles&lt;/a&gt; for &lt;a href=&quot;https://gist.github.com/mattwarren/42100ffe488bce5d48be22b59124b752#gistcomment-2228956&quot;&gt;pointing out&lt;/a&gt; that my &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; regex was wrong and supplying a fixed version!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;More&lt;/strong&gt; than they use &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt;, there are &lt;strong&gt;1,457,154&lt;/strong&gt; files that have at least one usage of the &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; keyword&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;just-how-many-files-should-you-have-in-a-repository&quot;&gt;Just how many files should you have in a repository?&lt;/h2&gt;

&lt;p&gt;90%	of the repositories (that have any C# files) have 95 files or less. 95% have 170 files or less and 99% have	535 files or less.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/10/Number of Files per Repository.png&quot;&gt;&lt;img src=&quot;/images/2017/10/Number of Files per Repository.png&quot; alt=&quot;Number of C# Files per Repository&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(again the Y-axis (# files) is logarithmic)&lt;/p&gt;

&lt;p&gt;The top 10 largest repositories, by number of C# files are shown below:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Repository&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;# Files&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/xen2/mcs&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;23389&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/mater06/LEGOChimaOnlineReloaded&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14241&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/Microsoft/referencesource&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13051&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/dotnet/corefx&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10652&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/apo-j/Projects_Working&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10185&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/Microsoft/CodeContracts&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9338&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/drazenzadravec/nequeo&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8060&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/ClearCanvas/ClearCanvas&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7946&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/mwilliamson-firefly/aws-sdk-net&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7860&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/151706061/MacroMedicalSystem&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7765&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;what-is-the-most-popular-repository-with-c-code-in-it&quot;&gt;What is the most popular repository with C# code in it?&lt;/h2&gt;

&lt;p&gt;This time we are going to look at the most popular repositories (based on GitHub ‘stars’) that contain at least 50 C# files (&lt;a href=&quot;https://gist.github.com/mattwarren/42100ffe488bce5d48be22b59124b752#most_popular_c_repos&quot;&gt;query used&lt;/a&gt;):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;repo&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;stars&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;files&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/grpc/grpc&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11075&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;237&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/dotnet/coreclr&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8576&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6503&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/dotnet/roslyn&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8422&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6351&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/facebook/yoga&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8046&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;73&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/bazelbuild/bazel&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7123&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;132&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/dotnet/corefx&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7115&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10652&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/SeleniumHQ/selenium&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7024&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;512&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/Microsoft/WinObjC&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6184&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;81&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/qianlifeng/Wox&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5674&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;207&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/Wox-launcher/Wox&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5674&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;142&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/ShareX/ShareX&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5336&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;766&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/Microsoft/Windows-universal-samples&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5130&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1501&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/NancyFx/Nancy&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3701&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;957&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/chocolatey/choco&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3432&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;248&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;https://github.com/JamesNK/Newtonsoft.Json&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3340&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;650&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Interesting that the top spot is a Google Repository! (the C# files in it are sample code for using the GRPC library from .NET)&lt;/p&gt;

&lt;h2 id=&quot;what-are-the-most-popular-c-class-names&quot;&gt;What are the most popular C# &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; names?&lt;/h2&gt;

&lt;p&gt;Assuming that I got the &lt;a href=&quot;https://gist.github.com/mattwarren/42100ffe488bce5d48be22b59124b752#class_names&quot;&gt;regex correct&lt;/a&gt;, the most popular C# &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; names are the following:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Class name&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Count&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;class C&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;182480&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;class Program&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;163462&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;class Test&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;50593&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;class Settings&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;40841&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;class Resources&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;39345&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;class A&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;34687&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;class App&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;28462&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;class B&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;24246&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;class Startup&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;18238&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;class Foo&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;15198&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Yay for &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt;, just sneaking into the Top 10!!&lt;/p&gt;

&lt;h2 id=&quot;foocs-programcs-or-something-else-whats-the-most-common-file-name&quot;&gt;‘Foo.cs’, ‘Program.cs’ or something else, what’s the most common file name?&lt;/h2&gt;

&lt;p&gt;Finally lets look at the different &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; names used, as with the &lt;code class=&quot;highlighter-rouge&quot;&gt;using&lt;/code&gt; statement they are dominated by the default ones used in the Visual Studio templates:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;File&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Count&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;AssemblyInfo.cs&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;386822&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Program.cs&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;105280&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Resources.Designer.cs&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;40881&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Settings.Designer.cs&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;35392&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;App.xaml.cs&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;21928&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Global.asax.cs&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16133&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Startup.cs&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14564&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HomeController.cs&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13574&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RouteConfig.cs&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11278&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MainWindow.xaml.cs&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11169&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=15464097&quot;&gt;Hacker News&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/csharp/comments/75ykfb/analysing_c_code_on_github_with_bigquery/&quot;&gt;/r/csharp&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;more-information&quot;&gt;More Information&lt;/h2&gt;

&lt;p&gt;As always, if you’ve read this far your present is yet more blog posts to read, enjoy!!&lt;/p&gt;

&lt;h3 id=&quot;how-bigquery-works-only-put-in-at-the-end-of-the-blog-post&quot;&gt;How BigQuery Works (only put in at the end of the blog post)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/blog/big-data/2016/01/bigquery-under-the-hood&quot;&gt;BigQuery under the hood&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/blog/big-data/2016/04/inside-capacitor-bigquerys-next-generation-columnar-storage-format&quot;&gt;Inside Capacitor, BigQuery’s next-generation columnar storage format&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/blog/big-data/2016/08/in-memory-query-execution-in-google-bigquery&quot;&gt;In-memory query execution in Google BigQuery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/blog/big-data/2017/07/counting-uniques-faster-in-bigquery-with-hyperloglog&quot;&gt;Counting uniques faster in BigQuery with HyperLogLog++&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/blog/big-data/2017/10/separation-of-compute-and-state-in-google-bigquery-and-cloud-dataflow-and-why-it-matters&quot;&gt;Separation of compute and state in Google BigQuery and Cloud Dataflow (and why it matters)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gcppodcast.com/post/episode-94-big-query-under-the-hood-with-tino-tereshko-and-jordan-tigani/&quot;&gt;#94 BigQuery Under the Hood with Tino Tereshko and Jordan Tigani&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.atscale.com/bi-benchmarks-with-google-bigquery&quot;&gt;TECH TALK: BI Performance Benchmarks with Google BigQuery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bigquery-analysis-of-other-programming-languages&quot;&gt;BigQuery analysis of other Programming Languages&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/google-cloud/analyzing-go-code-with-bigquery-485c70c3b451&quot;&gt;Analyzing Go code with BigQuery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@sAbakumoff/using-bigquery-github-data-to-rank-npm-repositories-ecf8947a1182&quot;&gt;Using BigQuery GitHub data to rank npm repositories&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@sAbakumoff/using-bigquery-github-data-to-find-out-open-source-software-development-trends-e288a2ca3e6b&quot;&gt;Using BigQuery GitHub data to find out open source software development trends&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/blog/big-data/2016/09/using-bigquery-to-analyze-php-on-github&quot;&gt;Using BigQuery to Analyze PHP on GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://labs.steren.fr/2017/08/17/extracting-all-go-regular-expressions-found-on-github/&quot;&gt;Extracting all Go regular expressions found on GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kozikow.com/2016/06/05/more-advanced-github-code-search/&quot;&gt;More advanced github code search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kozikow.com/2016/07/01/top-angular-directives-on-github/&quot;&gt;Top angular directives on github, including custom directives&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.takipi.com/779236-java-logging-statements-1313-github-repositories-error-warn-or-fatal/&quot;&gt;779,236 Java Logging Statements, 1,313 GitHub Repositories: ERROR, WARN or FATAL?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/bigquery/&quot;&gt;/r/BigQuery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2017/10/12/Analysing-C-code-on-GitHub-with-BigQuery/&quot;&gt;Analysing C# code on GitHub with BigQuery&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='C#' scheme='http://www.mattwarren.org/tags#C#'/>
   
 </entry>
 
 <entry>
   <title>A look at the internals of 'boxing' in the CLR</title>
   <link href="http://www.mattwarren.org/2017/08/02/A-look-at-the-internals-of-boxing-in-the-CLR/"/>
   <updated>2017-08-02T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2017/08/02/A-look-at-the-internals-of-boxing-in-the-CLR</id>
   <content type="html">
     &lt;p&gt;It’s a &lt;a href=&quot;https://stackoverflow.com/search?q=boxing+c%23&quot;&gt;fundamental part of .NET&lt;/a&gt; and can often happen &lt;a href=&quot;https://github.com/controlflow/resharper-heapview#resharper-heap-allocations-viewer-plugin&quot;&gt;without you knowing&lt;/a&gt;, but &lt;strong&gt;how does it actually work&lt;/strong&gt;? What is the .NET Runtime doing to make &lt;em&gt;boxing&lt;/em&gt; possible?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: this post won’t be discussing how to detect boxing, how it can affect performance or how to remove it (speak to &lt;a href=&quot;https://www.ageofascent.com/2016/02/18/asp-net-core-exeeds-1-15-million-requests-12-6-gbps/&quot;&gt;Ben Adams&lt;/a&gt; about that!). It will &lt;strong&gt;only&lt;/strong&gt; be talking about &lt;em&gt;how it works&lt;/em&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;As an aside, if you like reading about &lt;strong&gt;CLR internals&lt;/strong&gt; you may find these other posts interesting:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2017/06/15/How-the-.NET-Rutime-loads-a-Type/?recommended=1&quot;&gt;How the .NET Runtime loads a Type&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2017/05/08/Arrays-and-the-CLR-a-Very-Special-Relationship/?recommended=1&quot;&gt;Arrays and the CLR - a Very Special Relationship&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2017/04/13/The-CLR-Thread-Pool-Thread-Injection-Algorithm/?recommended=1&quot;&gt;The CLR Thread Pool ‘Thread Injection’ Algorithm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2017/02/07/The-68-things-the-CLR-does-before-executing-a-single-line-of-your-code/?recommended=1&quot;&gt;The 68 things the CLR does before executing a single line of your code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2017/01/25/How-do-.NET-delegates-work/?recommended=1&quot;&gt;How do .NET delegates work?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2016/12/14/Why-is-Reflection-slow/?recommended=1&quot;&gt;Why is reflection slow?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2016/10/26/How-does-the-fixed-keyword-work/?recommended=1&quot;&gt;How does the ‘fixed’ keyword work?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;boxing-in-the-clr-specification&quot;&gt;Boxing in the CLR Specification&lt;/h3&gt;

&lt;p&gt;Firstly it’s worth pointing out that boxing is mandated by the &lt;a href=&quot;http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf&quot;&gt;CLR specification ‘ECMA-335’&lt;/a&gt;, so the runtime &lt;strong&gt;has&lt;/strong&gt; to provide it:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/08/ECMA Spec - I.8.2.4 Boxing and unboxing of values.png&quot;&gt;&lt;img src=&quot;/images/2017/08/ECMA Spec - I.8.2.4 Boxing and unboxing of values - cutdown.png&quot; alt=&quot;ECMA Spec - I.8.2.4 Boxing and unboxing of values&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means that there are a few key things that the CLR needs to take care of, which we will explore in the rest of this post.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;creating-a-boxed-type&quot;&gt;Creating a ‘boxed’ Type&lt;/h2&gt;

&lt;p&gt;The first thing that the runtime needs to do is create the corresponding reference type (‘boxed type’) for any &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; that it loads. You can see this in action, right at the beginning of the ‘Method Table’ creation where it &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/4b49e4330441db903e6a5b6efab3e1dbb5b64ff3/src/vm/methodtablebuilder.cpp#L1425-L1445&quot;&gt;first checks if it’s dealing with a ‘Value Type’&lt;/a&gt;, then behaves accordingly. So the ‘boxed type’ for any &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; is created up front, when your .dll is imported, then it’s ready to be used by any ‘boxing’ that happens during program execution.&lt;/p&gt;

&lt;p&gt;The comment in the linked code is pretty interesting, as it reveals some of the low-level details the runtime has to deal with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Text&quot;&gt;// Check to see if the class is a valuetype; but we don't want to mark System.Enum
// as a ValueType. To accomplish this, the check takes advantage of the fact
// that System.ValueType and System.Enum are loaded one immediately after the
// other in that order, and so if the parent MethodTable is System.ValueType and
// the System.Enum MethodTable is unset, then we must be building System.Enum and
// so we don't mark it as a ValueType.
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;cpu-specific-code-generation&quot;&gt;CPU-specific code-generation&lt;/h2&gt;

&lt;p&gt;But to see what happens during program execution, let’s start with a simple C# program. The code below creates a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Value Type&lt;/code&gt;, which is then ‘boxed’ and ‘unboxed’:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyStruct&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myStruct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyStruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// boxing&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boxed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myStruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// unboxing&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unboxed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyStruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boxed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This gets turned into the following IL code, in which you can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;box&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;unbox.any&lt;/code&gt; IL instructions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Text&quot;&gt;L_0000: ldloca.s myStruct
L_0002: initobj TestNamespace.MyStruct
L_0008: ldloc.0 
L_0009: box TestNamespace.MyStruct
L_000e: stloc.1 
L_000f: ldloc.1 
L_0010: unbox.any TestNamespace.MyStruct
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;runtime-and-jit-code&quot;&gt;Runtime and JIT code&lt;/h3&gt;

&lt;p&gt;So what does the JIT do with these IL op codes? Well in the normal case it &lt;em&gt;wires up&lt;/em&gt; and then &lt;em&gt;inlines&lt;/em&gt; the optimised, hand-written,  assembly code versions of the ‘JIT Helper Methods’ provided by the runtime. The links below take you to the relevant lines of code in the CoreCLR source:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CPU specific, optimised versions (which are &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/4b49e4330441db903e6a5b6efab3e1dbb5b64ff3/src/vm/jitinterfacegen.cpp#L217-L275&quot;&gt;wired-up at run-time&lt;/a&gt;):
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/amd64/JitHelpers_InlineGetThread.asm#L86-L148&quot;&gt;JIT_BoxFastMP_InlineGetThread&lt;/a&gt; (AMD64 - multi-proc or Server GC, implicit TLS)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/8cc7e35dd0a625a3b883703387291739a148e8c8/src/vm/amd64/JitHelpers_Slow.asm#L201-L271&quot;&gt;JIT_BoxFastMP&lt;/a&gt; (AMD64 - multi-proc or Server GC)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/8cc7e35dd0a625a3b883703387291739a148e8c8/src/vm/amd64/JitHelpers_Slow.asm#L485-L554&quot;&gt;JIT_BoxFastUP&lt;/a&gt; (AMD64 - single-proc and Workstation GC)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/38a2a69c786e4273eb1339d7a75f939c410afd69/src/vm/i386/jitinterfacex86.cpp#L756-L886&quot;&gt;JIT_TrialAlloc::GenBox(..)&lt;/a&gt; (x86), which is &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/38a2a69c786e4273eb1339d7a75f939c410afd69/src/vm/i386/jitinterfacex86.cpp#L1503-L1504&quot;&gt;independently wired-up&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;JIT inlines the helper function call in the common case, see &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/a14608efbad1bcb4e9d36a418e1e5ac267c083fb/src/jit/importer.cpp#L5212-L5221&quot;&gt;Compiler::impImportAndPushBox(..)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Generic, less-optimised version, used as a fall-back &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/methodtable.cpp#L3734-L3783&quot;&gt;MethodTable::Box(..)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Eventually calls into &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/object.cpp#L1514-L1581&quot;&gt;CopyValueClassUnchecked(..)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Which ties in with the answer to this Stack Overflow question &lt;a href=&quot;https://stackoverflow.com/questions/2437925/why-is-struct-better-with-being-less-than-16-bytes/2437938#2437938&quot;&gt;Why is struct better with being less than 16 bytes?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Interesting enough, the only other ‘JIT Helper Methods’ that get this special treatment are &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;array&lt;/code&gt; allocations, which goes to show just how &lt;em&gt;performance sensitive&lt;/em&gt; boxing is.&lt;/p&gt;

&lt;p&gt;In comparison, there is only one helper method for ‘unboxing’, called &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/03bec77fb4efaa397248a2b9a35c547522221447/src/vm/jithelpers.cpp#L3603-L3626&quot;&gt;JIT_Unbox(..)&lt;/a&gt;, which falls back to &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/03bec77fb4efaa397248a2b9a35c547522221447/src/vm/jithelpers.cpp#L3574-L3600&quot;&gt;JIT_Unbox_Helper(..)&lt;/a&gt; in the uncommon case and is &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/4b49e4330441db903e6a5b6efab3e1dbb5b64ff3/src/inc/jithelpers.h#L105&quot;&gt;wired up here&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;CORINFO_HELP_UNBOX&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;JIT_Unbox&lt;/code&gt;). The JIT will also inline the helper call in the common case, to save the cost of a method call, see &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/11c911e6f49fdc95fc52bec8d930df7e5c50daa9/src/jit/importer.cpp#L14172-L14177&quot;&gt;Compiler::impImportBlockCode(..)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that the ‘unbox helper’ only fetches a reference/pointer to the ‘boxed’ data, it has to then be &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/11c911e6f49fdc95fc52bec8d930df7e5c50daa9/src/jit/importer.cpp#L14277-L14283&quot;&gt;put onto the stack&lt;/a&gt;. As we saw above, when the C# compiler does unboxing it uses the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.unbox_any(v=vs.110).aspx&quot;&gt;‘Unbox_Any’&lt;/a&gt; op-code not just the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.unbox(v=vs.110).aspx&quot;&gt;‘Unbox’&lt;/a&gt; one, see &lt;a href=&quot;https://stackoverflow.com/questions/3743762/unboxing-does-not-create-a-copy-of-the-value-is-this-right&quot;&gt;Unboxing does not create a copy of the value&lt;/a&gt; for more information.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;unboxing-stub-creation&quot;&gt;Unboxing Stub Creation&lt;/h2&gt;

&lt;p&gt;As well as ‘boxing’ and ‘unboxing’ a &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt;, the runtime also needs to help out during the time that a type remains ‘boxed’. To see why, let’s extend &lt;code class=&quot;highlighter-rouge&quot;&gt;MyStruct&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;override&lt;/code&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;ToString()&lt;/code&gt; method, so that it displays the current &lt;code class=&quot;highlighter-rouge&quot;&gt;Value&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyStruct&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Value = &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, if we look at the ‘Method Table’ the runtime creates for the &lt;em&gt;boxed&lt;/em&gt; version of &lt;code class=&quot;highlighter-rouge&quot;&gt;MyStruct&lt;/code&gt; (remember, value types have no ‘Method Table’), we can see something strange going on. Note that there are 2 entries for &lt;code class=&quot;highlighter-rouge&quot;&gt;MyStruct::ToString&lt;/code&gt;, one of which I’ve labelled as an ‘Unboxing Stub’&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Method table summary for 'MyStruct':
 Number of static fields: 0
 Number of instance fields: 1
 Number of static obj ref fields: 0
 Number of static boxed fields: 0
 Number of declared fields: 1
 Number of declared methods: 1
 Number of declared non-abstract methods: 1
 Vtable (with interface dupes) for 'MyStruct':
   Total duplicate slots = 0

 SD: MT::MethodIterator created for MyStruct (TestNamespace.MyStruct).
   slot  0: MyStruct::ToString  0x000007FE41170C10 (slot =  0) (Unboxing Stub)
   slot  1: System.ValueType::Equals  0x000007FEC1194078 (slot =  1) 
   slot  2: System.ValueType::GetHashCode  0x000007FEC1194080 (slot =  2) 
   slot  3: System.Object::Finalize  0x000007FEC14A30E0 (slot =  3) 
   slot  5: MyStruct::ToString  0x000007FE41170C18 (slot =  4) 
   &amp;lt;-- vtable ends here
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(&lt;a href=&quot;\data\2017\08\Full Method Table info for MyStruct.txt&quot;&gt;full output is available&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what is this ‘unboxing stub’ and why is it needed?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s there because if you call &lt;code class=&quot;highlighter-rouge&quot;&gt;ToString()&lt;/code&gt; on a &lt;em&gt;boxed&lt;/em&gt; version of &lt;code class=&quot;highlighter-rouge&quot;&gt;MyStruct&lt;/code&gt;, it calls the &lt;em&gt;overridden&lt;/em&gt; method declared within &lt;code class=&quot;highlighter-rouge&quot;&gt;MyStruct&lt;/code&gt; itself (which is what you’d want it to do), not the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.object.tostring(v=vs.110).aspx&quot;&gt;Object::ToString()&lt;/a&gt; version. But, &lt;code class=&quot;highlighter-rouge&quot;&gt;MyStruct::ToString()&lt;/code&gt; expects to be able to access any fields within the &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt;, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Value&lt;/code&gt; in this case. To make that possible, the runtime/JIT has to adjust the &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; pointer before &lt;code class=&quot;highlighter-rouge&quot;&gt;MyStruct::ToString()&lt;/code&gt; is called, as shown in the diagram below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. MyStruct:         [0x05 0x00 0x00 0x00]

                     |   Object Header   |   MethodTable  |   MyStruct    |
2. MyStruct (Boxed): [0x40 0x5b 0x6f 0x6f 0xfe 0x7 0x0 0x0 0x5 0x0 0x0 0x0]
                                          ^
                    object 'this' pointer | 

                     |   Object Header   |   MethodTable  |   MyStruct    |
3. MyStruct (Boxed): [0x40 0x5b 0x6f 0x6f 0xfe 0x7 0x0 0x0 0x5 0x0 0x0 0x0]
                                                           ^
                                   adjusted 'this' pointer | 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Key to the diagram&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Original &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt;, on the &lt;strong&gt;stack&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; being &lt;em&gt;boxed&lt;/em&gt; into an &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; that lives on the &lt;strong&gt;heap&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Adjustment made to &lt;em&gt;this&lt;/em&gt; pointer so &lt;code class=&quot;highlighter-rouge&quot;&gt;MyStruct::ToString()&lt;/code&gt; will work&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(If you want more information on .NET object internals, see &lt;a href=&quot;https://alexandrnikitin.github.io/blog/dotnet-generics-under-the-hood/#net-memory-layout&quot;&gt;this useful article&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;We can see this in action in the the code linked below, note that the stub &lt;em&gt;only&lt;/em&gt; consists of a few assembly instructions (it’s not as heavy-weight as a method call) and there are CPU-specific versions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/c61525b5883e883621f98d44f479b15d790b0533/src/vm/prestub.cpp#L1760-L1763&quot;&gt;MethodDesc::DoPrestub(..)&lt;/a&gt; (calls &lt;code class=&quot;highlighter-rouge&quot;&gt;MakeUnboxingStubWorker(..)&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/c61525b5883e883621f98d44f479b15d790b0533/src/vm/prestub.cpp#L1332-L1364&quot;&gt;MakeUnboxingStubWorker(..)&lt;/a&gt; (calls &lt;code class=&quot;highlighter-rouge&quot;&gt;EmitUnboxMethodStub(..)&lt;/code&gt; to create the stub)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1c9eb774950c98ae65ef5497d805cff2eb565971/src/vm/i386/stublinkerx86.cpp#L3305-L3363&quot;&gt;i386&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1c540c594cc55d8446086dcd979c48efa84e00a9/src/vm/arm/stubs.cpp#L2194-L2221&quot;&gt;arm&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1c540c594cc55d8446086dcd979c48efa84e00a9/src/vm/arm64/stubs.cpp#L1829-L1839&quot;&gt;arm64&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The runtime/JIT has to do these tricks to help maintain the illusion that a &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; can behave like a &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;, even though under-the-hood they are very different. See Eric Lipperts answer to &lt;a href=&quot;https://stackoverflow.com/questions/1682231/how-do-valuetypes-derive-from-object-referencetype-and-still-be-valuetypes&quot;&gt;How do ValueTypes derive from Object (ReferenceType) and still be ValueTypes?&lt;/a&gt; for a bit more on this.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hopefully this post has given you some idea of what happens &lt;em&gt;under-the-hood&lt;/em&gt; when ‘boxing’ takes place.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;

&lt;p&gt;As before, if you’ve got this far you might find these other links interesting:&lt;/p&gt;

&lt;h3 id=&quot;useful-code-comments-related-to-boxingunboxing-stubs&quot;&gt;Useful code comments related to boxing/unboxing stubs&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/a14608efbad1bcb4e9d36a418e1e5ac267c083fb/src/vm/methodtablebuilder.cpp#L6748-L6760&quot;&gt;MethodTableBuilder::AllocAndInitMethodDescChunk(..)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/fd3668c7c9b9f5d64b5e6d1edf8c55a307cd3c2d/src/vm/genmeth.cpp#L733-L750&quot;&gt;MethodDesc::FindOrCreateAssociatedMethodDesc(..) (in genmeth.cpp)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/eeb1efd9394a5decd00078b06099d785a471c06d/src/jit/importer.cpp#L14229-L14247&quot;&gt;Compiler::impImportBlockCode(..)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/AndyAyersMS/coreclr/blob/aa70c0c4b98c167b4b347df79e1765d6727dac5a/src/jit/importer.cpp#L5204-L5219&quot;&gt;Note on different ‘Boxing’ modes&lt;/a&gt;, added as part of the work on &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/13188&quot;&gt;JIT: modify box/unbox/isinst/castclass expansions for fast jitting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;github-issues&quot;&gt;GitHub Issues&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/8735&quot;&gt;Question: Boxing on stack for function calls&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/8423&quot;&gt;Boxing Cache?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/1341&quot;&gt;Improve the default hash code for structs&lt;/a&gt; (read the whole discussion)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/13016&quot;&gt;JIT: Fix value type box optimization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/111&quot;&gt;(Discussion) Lightweight Boxing?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;other-similarrelated-articles&quot;&gt;Other similar/related articles&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codeproject.com/Articles/20481/NET-Type-Internals-From-a-Microsoft-CLR-Perspecti#12&quot;&gt;.NET Type Internals - From a Microsoft CLR Perspective&lt;/a&gt; (section on ‘Boxing and Unboxing’)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://yizhang82.me/value-type-boxing#interface-call-into-the-value-type-instance-method&quot;&gt;C# value type boxing under the hood&lt;/a&gt; (section on ‘Interface call into the value type instance method’)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mycodingplace.wordpress.com/2016/11/11/value-type-methods-call-callvirt-constrained-and-hidden-boxing/&quot;&gt;Value type methods – call, callvirt, constrained and hidden boxing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/ricom/2007/01/26/performance-quiz-12-the-cost-of-a-good-hash-solution/&quot;&gt;Performance Quiz #12 – The Cost of a Good Hash – Solution&lt;/a&gt; (Rico Mariani)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ericlippert.com/2011/03/14/to-box-or-not-to-box/&quot;&gt;To box or not to box&lt;/a&gt; (Eric Lippert)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://theburningmonk.com/2015/07/beware-of-implicit-boxing-of-value-types/&quot;&gt;Beware of implicit boxing of value types&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://doogalbellend.blogspot.co.uk/2007/04/method-calls-on-value-types-and-boxing.html&quot;&gt;Method calls on value types and boxing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stack-overflow-questions&quot;&gt;Stack Overflow Questions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/7660605/clr-specification-on-boxing&quot;&gt;CLR specification on boxing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/5494807/how-clr-works-when-invoking-a-method-of-a-struct&quot;&gt;How CLR works when invoking a method of a struct&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1249086/boxing-on-structs-when-calling-tostring&quot;&gt;boxing on structs when calling ToString()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/436363/does-calling-a-method-on-a-value-type-result-in-boxing-in-net&quot;&gt;Does calling a method on a value type result in boxing in .NET?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1359856/why-does-implicitly-calling-tostring-on-a-value-type-cause-a-box-instruction&quot;&gt;Why does implicitly calling toString on a value type cause a box instruction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2437925/why-is-struct-better-with-being-less-than-16-bytes/2437938#2437938&quot;&gt;Why is struct better with being less than 16 bytes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/40217308/when-are-type-objects-for-value-types-created&quot;&gt;When are Type Objects for Value Types created?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2412981/if-my-struct-implements-idisposable-will-it-be-boxed-when-used-in-a-using-statem&quot;&gt;If my struct implements IDisposable will it be boxed when used in a using statement?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1330571/when-does-a-using-statement-box-its-argument-when-its-a-struct&quot;&gt;When does a using-statement box its argument, when it’s a struct?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2017/08/02/A-look-at-the-internals-of-boxing-in-the-CLR/&quot;&gt;A look at the internals of 'boxing' in the CLR&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
 </entry>
 
 <entry>
   <title>Memory Usage Inside the CLR</title>
   <link href="http://www.mattwarren.org/2017/07/10/Memory-Usage-Inside-the-CLR/"/>
   <updated>2017-07-10T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2017/07/10/Memory-Usage-Inside-the-CLR</id>
   <content type="html">
     &lt;p&gt;Have you ever wondered where and why the .NET Runtime (CLR) allocates memory? I don’t mean the ‘&lt;em&gt;managed&lt;/em&gt;’ memory that &lt;em&gt;your&lt;/em&gt; code allocates, e.g. via &lt;code class=&quot;highlighter-rouge&quot;&gt;new MyClass(..)&lt;/code&gt; and the Garbage Collector (GC) then cleans up. I mean the memory that the CLR &lt;em&gt;itself&lt;/em&gt; allocates, all the internal data structures that it needs to make is possible for your code to run.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; just to clarify, this post will &lt;strong&gt;not&lt;/strong&gt; be telling you how you can analyse the memory usage of &lt;em&gt;your code&lt;/em&gt;, for that I recommend using one of the excellent .NET Profilers available such as &lt;a href=&quot;https://www.jetbrains.com/dotmemory/features/&quot;&gt;dotMemory by JetBrains&lt;/a&gt; or the &lt;a href=&quot;http://www.red-gate.com/products/dotnet-development/ants-memory-profiler/&quot;&gt;ANTS Memory Profiler from Redgate&lt;/a&gt; (I’ve personally used both and they’re great)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-high-level-view&quot;&gt;The high-level view&lt;/h2&gt;

&lt;p&gt;Fortunately there’s a fantastic tool that makes it very easy for us to get an overview of memory usage within the CLR itself. It’s called &lt;a href=&quot;https://technet.microsoft.com/en-us/sysinternals/vmmap.aspx&quot;&gt;VMMap&lt;/a&gt; and it’s part of the excellent &lt;a href=&quot;https://technet.microsoft.com/en-gb/sysinternals/bb842062&quot;&gt;Sysinternals Suite&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the post I will just be using a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld&lt;/code&gt; program, so that we can observe what the CLR does in the simplest possible scenario, obviously things may look a bit different in a more complex app.&lt;/p&gt;

&lt;p&gt;Firstly, lets look at the data over time, in 1 second intervals. The &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld&lt;/code&gt; program just prints to the Console and then waits until you press &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ENTER&amp;gt;&lt;/code&gt;, so once the memory usage has reached it’s peak it remains there till the program exits. (Click for a larger version)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/07/Overall Memory Usage - Timeline (Committed).png&quot;&gt;&lt;img src=&quot;/images/2017/07/Overall Memory Usage - Timeline (Committed).png&quot; alt=&quot;Overall Memory Usage - Timeline (Committed)&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, to get a more detailed view, we will now look at the &lt;em&gt;snapshot&lt;/em&gt; from 2 seconds into the timeline, when the memory usage has stabilised.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/07/Overall Memory Usage.png&quot;&gt;&lt;img src=&quot;/images/2017/07/Overall Memory Usage.png&quot; alt=&quot;Overall Memory Usage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you want to find out more about memory usage in general, but also &lt;em&gt;specifically&lt;/em&gt; how measure it in .NET applications, I recommend reading this excellent series of posts by &lt;a href=&quot;https://twitter.com/goldshtn&quot;&gt;Sasha Goldshtein&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.microsoft.co.il/sasha/2011/07/14/mapping-the-memory-usage-of-net-applications-part-1-windows-memory-recap/&quot;&gt;Mapping the Memory Usage of .NET Applications: Part 1, Windows Memory Recap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.microsoft.co.il/sasha/2011/07/18/mapping-the-memory-usage-of-net-applications-part-2-vmmap-and-memorydisplay/&quot;&gt;Mapping the Memory Usage of .NET Applications: Part 2, VMMap and MemoryDisplay&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.microsoft.co.il/sasha/2011/07/22/mapping-the-memory-usage-of-net-applications-part-3-clr-profiler/&quot;&gt;Mapping the Memory Usage of .NET Applications: Part 3, CLR Profiler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, if like me you always get the different types of memory mixed-up, please read this Stackoverflow answer first &lt;a href=&quot;https://stackoverflow.com/questions/1984186/what-is-private-bytes-virtual-bytes-working-set&quot;&gt;What is private bytes, virtual bytes, working set?&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;image-memory&quot;&gt;‘Image’ Memory&lt;/h3&gt;

&lt;p&gt;Now we’ve seen the high-level view, lets take a close look at the individual chucks, the largest of which is labelled &lt;em&gt;Image&lt;/em&gt;, which according to the VMMap help page (see here for &lt;a href=&quot;/images/2017/07/VMMap - Help for Memory Types.png&quot;&gt;all info on all memory types&lt;/a&gt;):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… represents an executable file such as a .exe or .dll and has been loaded into a process by the image loader. It does not include images mapped as data files, which would be included in the Mapped File memory type. Image mappings can include shareable memory like code. When data regions, like initialized data, is modified, additional private memory is created in the process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/07/Image Memory Usage.png&quot;&gt;&lt;img src=&quot;/images/2017/07/Image Memory Usage.png&quot; alt=&quot;Image Memory Usage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, it’s worth pointing out a few things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;This memory is takes up a large amount of the total process memory because I’m using a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld&lt;/code&gt; program, in other types of programs it wouldn’t dominate the memory usage as much&lt;/li&gt;
  &lt;li&gt;I was using a &lt;code class=&quot;highlighter-rouge&quot;&gt;DEBUG&lt;/code&gt; version of the &lt;a href=&quot;https://github.com/dotnet/coreclr&quot;&gt;CoreCLR&lt;/a&gt;, so the CLR specific files System.Private.CoreLib.dll, coreclr.dll, clrjit.dll and CoreRun.exe may well be larger than if they were compiled in &lt;code class=&quot;highlighter-rouge&quot;&gt;RELEASE&lt;/code&gt; mode&lt;/li&gt;
  &lt;li&gt;Some of this memory is potentially ‘shared’ with other processes, compare the numbers in the ‘Total WS’, ‘Private WS’, ‘Shareable WS’ and ‘Shared WS’ columns to see this in action.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;managed-heaps-created-by-the-garbage-collector&quot;&gt;‘Managed Heaps’ created by the Garbage Collector&lt;/h3&gt;

&lt;p&gt;The next largest usage of memory is the GC itself, it pre-allocates several &lt;em&gt;heaps&lt;/em&gt; that it can then give out whenever your program allocates an object, for example via code such as &lt;code class=&quot;highlighter-rouge&quot;&gt;new MyClass()&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;new byte[]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/07/Managed Heap Memory Usage - Expanded.png&quot;&gt;&lt;img src=&quot;/images/2017/07/Managed Heap Memory Usage - Expanded.png&quot; alt=&quot;Managed Heap Memory Usage - Expanded&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main thing to note about the image above is that you can clearly see the different heap, there is 256 MB allocated for &lt;em&gt;Generations&lt;/em&gt; (Gen 0, 1, 2) and 128 MB for the ‘Large Object Heap’. In addition, note the difference between the amounts in the &lt;em&gt;Size&lt;/em&gt; and the &lt;em&gt;Committed&lt;/em&gt; columns. Only the &lt;em&gt;Committed&lt;/em&gt; memory is actually being used, the total &lt;em&gt;Size&lt;/em&gt; is what the GC pre-allocates or reserves up front from the address space.&lt;/p&gt;

&lt;p&gt;If you’re interested, the rules for &lt;em&gt;heap&lt;/em&gt; or more specifically &lt;em&gt;segment&lt;/em&gt; sizes are helpfully explained in the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals#ephemeral-generations-and-segments&quot;&gt;Microsoft Docs&lt;/a&gt;, but simply put, it varies depending on the GC mode (Workstation v Server), whether the process is 32/64-bit and ‘Number of CPUs’.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;internal-clr-heap-memory&quot;&gt;Internal CLR ‘Heap’ memory&lt;/h2&gt;

&lt;p&gt;However the part that I’m going to look at for the rest of this post is the memory that is allocated by the CLR itself, that is &lt;em&gt;unmanaged memory&lt;/em&gt; that is uses for all its internal data structures.&lt;/p&gt;

&lt;p&gt;But if we just look at the VMMap UI view, it doesn’t really tell us that much!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/07/Heap Memory Usage.png&quot;&gt;&lt;img src=&quot;/images/2017/07/Heap Memory Usage.png&quot; alt=&quot;Heap Memory Usage&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, using the excellent &lt;a href=&quot;https://github.com/Microsoft/perfview/&quot;&gt;PerfView tool&lt;/a&gt; we can capture the full call-stack of any memory allocations, that is any calls to &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa366887(v=vs.85).aspx&quot;&gt;VirtualAlloc()&lt;/a&gt; or &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/hardware/ff552108(v=vs.85).aspx&quot;&gt;RtlAllocateHeap()&lt;/a&gt; (obviously these functions only apply when running the CoreCLR on Windows). If we do this, PerfView gives us the following data (yes, it’s not pretty, but it’s very powerful!!)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/07/PerfView - Net Virtual Alloc Stacks.png&quot;&gt;&lt;img src=&quot;/images/2017/07/PerfView - Net Virtual Alloc Stacks.png&quot; alt=&quot;PerfView - Net Virtual Alloc Stacks&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So lets explore this data in more detail.&lt;/p&gt;

&lt;h3 id=&quot;notable-memory-allocations&quot;&gt;Notable memory allocations&lt;/h3&gt;

&lt;p&gt;There are a few places where the CLR allocates significant chunks of memory up-front and then uses them through its lifetime, they are listed below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GC related allocations (see &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/gc/gc.cpp&quot;&gt;gc.cpp&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;Mark List - &lt;strong&gt;1,052,672 Bytes (1,028 K)&lt;/strong&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;WKS::make_mark_list(..)&lt;/code&gt;. using during the ‘mark’ phase of the GC, see &lt;a href=&quot;https://blogs.msdn.microsoft.com/abhinaba/2009/01/30/back-to-basics-mark-and-sweep-garbage-collection/&quot;&gt;Back To Basics: Mark and Sweep Garbage Collection&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Card Table - &lt;strong&gt;397,312 Bytes (388 K)&lt;/strong&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;WKS::gc_heap::make_card_table(..)&lt;/code&gt;, see &lt;a href=&quot;/2016/02/04/learning-how-garbage-collectors-work-part-1/#marking-the-card-table&quot;&gt;Marking the ‘Card Table’&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Overall Heap Creation/Allocation - &lt;strong&gt;204,800 Bytes (200 K)&lt;/strong&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;WKS::gc_heap::make_gc_heap(..)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;S.O.H Segment creation - &lt;strong&gt;65,536 Bytes (64 K)&lt;/strong&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;WKS::gc_heap::allocate(..)&lt;/code&gt;, triggered by the first object allocation&lt;/li&gt;
      &lt;li&gt;L.O.H Segment creation - &lt;strong&gt;65,536 Bytes (64 K)&lt;/strong&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;WKS::gc_heap::allocate_large_object(..)&lt;/code&gt;, triggered by the first ‘large’ object allocation&lt;/li&gt;
      &lt;li&gt;Handle Table - &lt;strong&gt;20,480 Bytes (20 K)&lt;/strong&gt; in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/74a3f9691e490e9732da55c46b678159c64fae74/src/gc/handletable.cpp#L110&quot;&gt;HndCreateHandleTable(..)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stress Log - &lt;strong&gt;4,194,304 Bytes (4,096 K)&lt;/strong&gt; in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/74a3f9691e490e9732da55c46b678159c64fae74/src/utilcode/stresslog.cpp#L191&quot;&gt;StressLog::Initialize(..)&lt;/a&gt;. Only if the ‘stress log’ is activated, see &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/inc/stresslog.h#L6-L22&quot;&gt;this comment for more info&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;‘Watson’ error reporting - &lt;strong&gt;65,536 Bytes (64 K)&lt;/strong&gt; in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/3a24095610ecaba62495740bf8319ad467af4997/src/vm/ceemain.cpp#L1079-L1090&quot;&gt;EEStartupHelper routine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Virtual Call Stub Manager - &lt;strong&gt;36,864 Bytes (36 K)&lt;/strong&gt; in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/74a3f9691e490e9732da55c46b678159c64fae74/src/vm/virtualcallstub.cpp#L877&quot;&gt;VirtualCallStubManager::InitStatic()&lt;/a&gt;, which in turn &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/74a3f9691e490e9732da55c46b678159c64fae74/src/vm/virtualcallstub.cpp#L3449-L3475&quot;&gt;creates the DispatchCache&lt;/a&gt;. See &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/virtual-stub-dispatch.md&quot;&gt;‘Virtual Stub Dispatch’ in the BOTR&lt;/a&gt; for more info&lt;/li&gt;
  &lt;li&gt;Debugger Heap and Control-Block - &lt;strong&gt;28,672 Bytes (28K)&lt;/strong&gt; (only if debugging support is needed) in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/51e968b013e9b1582035f202e004ed024f747f4f/src/debug/ee/debugger.cpp#L16637-L16639&quot;&gt;DebuggerHeap::Init(..)&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/51e968b013e9b1582035f202e004ed024f747f4f/src/debug/ee/rcthread.cpp#L402&quot;&gt;DebuggerRCThread::Init(..)&lt;/a&gt;, both called via &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/3a24095610ecaba62495740bf8319ad467af4997/src/vm/ceemain.cpp#L2759-L2839&quot;&gt;InitializeDebugger(..)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;execution-engine-heaps&quot;&gt;Execution Engine Heaps&lt;/h3&gt;

&lt;p&gt;However another technique that it uses is to allocated ‘heaps’, often 64K at a time and then perform individual allocations within the heaps as needed. These heaps are split up into individual use-cases, the most common being for ‘&lt;strong&gt;frequently accessed&lt;/strong&gt;’ data and it’s counter-part, data that is ‘&lt;strong&gt;rarely accessed&lt;/strong&gt;’, see the explanation from this comment in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/loaderallocator.hpp#L73-L91&quot;&gt;loaderallocator.hpp&lt;/a&gt; for more. This is done to ensure that the CLR retains control over any memory allocations and can therefore prevent ‘fragmentation’.&lt;/p&gt;

&lt;p&gt;These heaps are together known as ‘Loader Heaps’ as explained in &lt;a href=&quot;https://web.archive.org/web/20080919091745/http://msdn.microsoft.com:80/en-us/magazine/cc163791.aspx#S5&quot;&gt;Drill Into .NET Framework Internals to See How the CLR Creates Runtime Objects&lt;/a&gt; (wayback machine version):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;LoaderHeaps&lt;/strong&gt;
LoaderHeaps are meant for loading various runtime CLR artifacts and optimization artifacts that live for the lifetime of the domain. These heaps grow by predictable chunks to minimize fragmentation. LoaderHeaps are different from the garbage collector (GC) Heap (or multiple heaps in case of a symmetric multiprocessor or SMP) in that the GC Heap hosts object instances while LoaderHeaps hold together the type system. Frequently accessed artifacts like MethodTables, MethodDescs, FieldDescs, and Interface Maps get allocated on a &lt;strong&gt;HighFrequencyHeap&lt;/strong&gt;, while less frequently accessed data structures, such as EEClass and ClassLoader and its lookup tables, get allocated on a &lt;strong&gt;LowFrequencyHeap&lt;/strong&gt;. The &lt;strong&gt;StubHeap&lt;/strong&gt; hosts stubs that facilitate code access security (CAS), COM wrapper calls, and P/Invoke.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the main places you see this high/low-frequency of access is in the heart of the Type system, where different data items are either classified as ‘hot’ (high-frequency) or ‘cold’ (low-frequency), from the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/type-loader.md#key-data-structures&quot;&gt;‘Key Data Structures’ section&lt;/a&gt; of the BOTR page on ‘Type Loader Design’:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;EEClass&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;MethodTable&lt;/strong&gt; data are split into “hot” and “cold” structures to improve working set and cache utilization. &lt;strong&gt;MethodTable&lt;/strong&gt; itself is meant to only store “hot” data that are needed in program steady state. &lt;strong&gt;EEClass&lt;/strong&gt; stores “cold” data that are typically only needed by type loading, JITing or reflection. Each &lt;strong&gt;MethodTable&lt;/strong&gt; points to one &lt;strong&gt;EEClass&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Further to this, listed below are some specific examples of when each heap type is used:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;List of all &lt;a href=&quot;https://github.com/dotnet/coreclr/search?utf8=%E2%9C%93&amp;amp;q=GetLowFrequencyHeap&amp;amp;type=&quot;&gt;&lt;strong&gt;Low-Frequency Heap&lt;/strong&gt; usages&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/b258792e59b09060f54e0c9bbd31edc3e67d1ae8/src/vm/class.cpp#L74&quot;&gt;EEClass::operator new&lt;/a&gt; (the ‘cold’ scenario above)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/cd95a2e99450f892e56d9703cc71ddd682421e62/src/vm/binder.cpp#L1135&quot;&gt;MscorlibBinder::AttachModule(..)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/b258792e59b09060f54e0c9bbd31edc3e67d1ae8/src/vm/typehash.cpp#L46&quot;&gt;EETypeHashTable::Create(..)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/7e4afb4fbf900b789f53ccb816c6ddba7807de68/src/vm/comutilnative.cpp#L3056&quot;&gt;COMNlsHashProvider::InitializeDefaultSeed()&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/a3c193780b8e055678feb06b2499cf8e7b41810c/src/vm/clsload.cpp#L3647&quot;&gt;ClassLoader::CreateTypeHandleForTypeKey(..)&lt;/a&gt; (when creating function pointers)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;List of all &lt;a href=&quot;https://github.com/dotnet/coreclr/search?utf8=%E2%9C%93&amp;amp;q=GetHighFrequencyHeap&amp;amp;type=&quot;&gt;&lt;strong&gt;High-Frequency&lt;/strong&gt; Heap usages&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/4ee1c192d1638b4bc69db59c0807a2b8c2b5bd3c/src/vm/methodtablebuilder.cpp#L9888&quot;&gt;MethodTableBuilder::AllocateNewMT(..)&lt;/a&gt; (the ‘hot’ scenario mentioned above)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/array.cpp#L148&quot;&gt;ArrayClass::GenerateArrayAccessorCallSig(..)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/0ee3b5e64a98dc71aefed2304fe4bcf7f66ca9f5/src/vm/generics.cpp#L335&quot;&gt;ClassLoader::CreateTypeHandleForNonCanonicalGenericInstantiation(..)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/ecall.cpp#L414&quot;&gt;ECall::GetFCallImpl(..)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/a9b25d4aa22a1f4ad5f323f6c826e318f5a720fe/src/vm/clrtocomcall.cpp#L77&quot;&gt;ComPlusCall::PopulateComPlusCallMethodDesc(..)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;List of all &lt;a href=&quot;https://github.com/dotnet/coreclr/search?utf8=%E2%9C%93&amp;amp;q=GetStubHeap&amp;amp;type=&quot;&gt;&lt;strong&gt;Stub Heap&lt;/strong&gt; usages&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/8cc7e35dd0a625a3b883703387291739a148e8c8/src/vm/prestub.cpp#L1005&quot;&gt;MethodDesc::DoPrestub(..)&lt;/a&gt; (triggers JIT-ting of a method)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/44285ef65b626db7954066ff596d6be07c7dd7a2/src/vm/dllimportcallback.cpp#L953&quot;&gt;UMEntryThunkCache::GetUMEntryThunk(..)&lt;/a&gt; (a DLL Import callback)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/51e968b013e9b1582035f202e004ed024f747f4f/src/vm/comtoclrcall.cpp#L1858&quot;&gt;ComCall::CreateGenericComCallStub(..)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/8cc7e35dd0a625a3b883703387291739a148e8c8/src/vm/prestub.cpp#L956&quot;&gt;MakeUnboxingStubWorker(..)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;List of all &lt;a href=&quot;https://github.com/dotnet/coreclr/search?utf8=%E2%9C%93&amp;amp;q=GetPrecodeHeap&amp;amp;type=&quot;&gt;&lt;strong&gt;Precode Heap&lt;/strong&gt; Usages&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/fd3668c7c9b9f5d64b5e6d1edf8c55a307cd3c2d/src/vm/method.cpp#L4693&quot;&gt;MethodDescChunk::AllocateCompactEntryPoints(..)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/980c1204d68f54be77eb840cc3f2e4fe2df42a26/src/vm/precode.cpp#L378&quot;&gt;Precode::Allocate(..)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/980c1204d68f54be77eb840cc3f2e4fe2df42a26/src/vm/precode.cpp#L542&quot;&gt;Precode::AllocateTemporaryEntryPoints(..)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;List of all &lt;a href=&quot;https://github.com/dotnet/coreclr/search?utf8=%E2%9C%93&amp;amp;q=GetExecutableHeap&amp;amp;type=&quot;&gt;&lt;strong&gt;Executable Heap&lt;/strong&gt; usages&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/4f8be95166a30ea7c0b1d6aed4ef424ee47c425a/src/vm/i386/cgenx86.cpp#L1086&quot;&gt;GenerateInitPInvokeFrameHelper(..)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/38a2a69c786e4273eb1339d7a75f939c410afd69/src/vm/i386/jitinterfacex86.cpp#L883&quot;&gt;JIT_TrialAlloc::GenBox(..)&lt;/a&gt; (x86 JIT)&lt;/li&gt;
      &lt;li&gt;From &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/loaderallocator.hpp#L329&quot;&gt;comment on GetExecutableHeap()&lt;/a&gt; ‘The executable heap is intended to only be used by the global loader allocator.’&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the general ‘Loader Heaps’ listed above are allocated in the &lt;code class=&quot;highlighter-rouge&quot;&gt;LoaderAllocator::Init(..)&lt;/code&gt; function (&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32b52269a270f9b7800da3ba119b92061f528789/src/vm/loaderallocator.cpp#L986-L1044&quot;&gt;link to actual code&lt;/a&gt;), the &lt;code class=&quot;highlighter-rouge&quot;&gt;executable&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;stub&lt;/code&gt; heap have the ‘executable’ flag set, all the rest don’t. The size of these heaps is &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32b52269a270f9b7800da3ba119b92061f528789/src/vm/appdomain.hpp#L811-L818&quot;&gt;configured in this code&lt;/a&gt;, they ‘reserve’ different amounts up front, but they all have a ‘commit’ size that is equivalent to one OS ‘page’.&lt;/p&gt;

&lt;p&gt;In addition to the ‘general’ heaps, there are some others that are specifically used by the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/virtual-stub-dispatch.md&quot;&gt;Virtual Stub Dispatch&lt;/a&gt; mechanism, they are known as the &lt;code class=&quot;highlighter-rouge&quot;&gt;indcell_heap&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;cache_entry_heap&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;lookup_heap&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_heap&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve_heap&lt;/code&gt;, they’re allocated &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/virtualcallstub.cpp#L690-L756&quot;&gt;in this code&lt;/a&gt;, using the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/virtualcallstub.cpp#L521-L688&quot;&gt;specified commit/reserve sizes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, if you’re interested in the mechanics of how the heaps actually work &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/utilcode/loaderheap.cpp&quot;&gt;take a look at LoaderHeap.cpp&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;jit-memory-usage&quot;&gt;JIT Memory Usage&lt;/h3&gt;

&lt;p&gt;Last, but by no means least, there is one other component in the CLR that extensively allocates memory and that is the JIT. It does so in 2 main scenarios:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;‘Transient’&lt;/strong&gt; or temporary memory needed when it’s doing the job of converting IL code into machine code&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;‘Permanent’&lt;/strong&gt; memory used when it needs to emit the ‘machine code’ for a method&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;transient-memory&quot;&gt;&lt;strong&gt;‘Transient’ Memory&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;This is needed by the JIT when it is doing the job of converting IL code into machine code for the current CPU architecture. This memory is only needed whilst the JIT is running and can be re-used/discarded later, it is used to hold the internal &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/bbf13d7e5e0764770cc0d55d727beb73a05d55f6/Documentation/botr/ryujit-overview.md#overview-of-the-ir&quot;&gt;JIT data structures&lt;/a&gt; (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;Compiler&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BasicBlock&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;GenTreeStmt&lt;/code&gt;, etc).&lt;/p&gt;

&lt;p&gt;For example, take a look at the following code from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/74a3f9691e490e9732da55c46b678159c64fae74/src/jit/valuenum.cpp#L4489&quot;&gt;Compiler::fgValueNumber()&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// Allocate the value number store.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fgVNPassesCompleted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vnStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fgVNPassesCompleted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CompAllocator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMK_ValueNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompAllocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMK_ValueNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vnStore&lt;/span&gt;                  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMK_ValueNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueNumStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The line &lt;code class=&quot;highlighter-rouge&quot;&gt;vnStore = new (this, CMK_ValueNumber) ...&lt;/code&gt; ends up calling the specialised &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; operator defined in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/74a3f9691e490e9732da55c46b678159c64fae74/src/jit/compiler.hpp&quot;&gt;compiler.hpp&lt;/a&gt; (code shown below), which as per the comment, uses a customer ‘Arena Allocator’ that is implemented in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/alloc.cpp&quot;&gt;/src/jit/alloc.cpp&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*****************************************************************************
 *  operator new
 *
 *  Note that compGetMem is an arena allocator that returns memory that is
 *  not zero-initialized and can contain data from a prior allocation lifetime.
 *  it also requires that 'sz' be aligned to a multiple of sizeof(int)
 */&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__cdecl&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompMemKind&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AlignUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compGetMem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This technique (of overriding the &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; operator) is used in &lt;a href=&quot;https://github.com/dotnet/coreclr/search?utf8=%E2%9C%93&amp;amp;q=%22operator+new%22&amp;amp;type=&quot;&gt;lots of places throughout the CLR&lt;/a&gt;, for instance there is a generic one implemented in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32b52269a270f9b7800da3ba119b92061f528789/src/utilcode/clrhost_nodependencies.cpp#L421-L440&quot;&gt;the CLR Host&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;permanent-memory&quot;&gt;&lt;strong&gt;‘Permanent’ Memory&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;The last type of memory that the JIT uses is ‘permanent’ memory to store the JITted machine code, this is done via calls to &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/44f57065649af5f8bcbb7c71d827221a7bc1bf7a/src/jit/compiler.cpp#L2163-L2200&quot;&gt;Compiler::compGetMem(..)&lt;/a&gt;, starting from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/44f57065649af5f8bcbb7c71d827221a7bc1bf7a/src/jit/compiler.cpp#L5066-L5345&quot;&gt;Compiler::compCompile(..)&lt;/a&gt; via the call-stack shown below. Note that as before this uses a customer ‘Arena Allocator’ that is implemented in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/alloc.cpp&quot;&gt;/src/jit/alloc.cpp&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ clrjit!ClrAllocInProcessHeap
 + clrjit!ArenaAllocator::allocateHostMemory
  + clrjit!ArenaAllocator::allocateNewPage
   + clrjit!ArenaAllocator::allocateMemory
    + clrjit!Compiler::compGetMem
     + clrjit!emitter::emitGetMem
      + clrjit!emitter::emitAllocInstr
       + clrjit!emitter::emitNewInstrTiny
        + clrjit!emitter::emitIns_R_R
         + clrjit!emitter::emitInsBinary
          + clrjit!CodeGen::genCodeForStoreLclVar
           + clrjit!CodeGen::genCodeForTreeNode
            + clrjit!CodeGen::genCodeForBBlist
             + clrjit!CodeGen::genGenerateCode
              + clrjit!Compiler::compCompile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;real-world-example&quot;&gt;Real-world example&lt;/h2&gt;

&lt;p&gt;Finally, to prove that this investigation matches with more real-world scenarios, we can see similar memory usage breakdowns in this GitHub issue: &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/10380#issuecomment-288365180&quot;&gt;[Question] Reduce memory consumption of CoreCLR&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Yes, we have profiled several Xamarin GUI applications on Tizen Mobile.&lt;/p&gt;

  &lt;p&gt;Typical profile of CoreCLR’s memory on the GUI applications is the following:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;Mapped assembly images - 4.2 megabytes (50%)&lt;/li&gt;
    &lt;li&gt;JIT-compiler’s memory - 1.7 megabytes (20%)&lt;/li&gt;
    &lt;li&gt;Execution engine - about 1 megabyte (11%)&lt;/li&gt;
    &lt;li&gt;Code heap - about 1 megabyte (11%)&lt;/li&gt;
    &lt;li&gt;Type information - about 0.5 megabyte (6%)&lt;/li&gt;
    &lt;li&gt;Objects heap - about 0.2 megabyte (2%)&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=14740169&quot;&gt;HackerNews&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;

&lt;p&gt;See the links below for additional information on ‘Loader Heaps’&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://web.archive.org/web/20080919091745/http://msdn.microsoft.com:80/en-us/magazine/cc163791.aspx#S5&quot;&gt;Drill Into .NET Framework Internals to See How the CLR Creates Runtime Objects&lt;/a&gt; (wayback machine version)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vivekcek.wordpress.com/2016/07/10/c-different-types-of-heap-memory/&quot;&gt;C# Different Types Of Heap Memory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://social.msdn.microsoft.com/Forums/vstudio/en-US/24eac008-e6a2-4205-b551-68acb5bfb9f5/need-clarification-loader-heap-high-frequency-heap-and-method-tables?forum=clr&quot;&gt;Need clarification : Loader Heap , High Frequency heap and method tables&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/alejacma/2009/08/24/managed-debugging-with-windbg-managed-heap-part-5/&quot;&gt;MANAGED DEBUGGING with WINDBG. Managed Heap. Part 5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/10121943/net-process-memory-usage-5x-clr-heap-memory&quot;&gt;.NET process memory usage = 5x CLR Heap Memory?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4403506/what-is-the-difference-between-object-and-loader-heap-in-net-4-0/4517582#4517582&quot;&gt;what is the difference between object and loader heap in .net 4.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://csharp.2000things.com/2011/01/03/200-static-data-and-constants-are-stored-on-the-heap/&quot;&gt;2,000 Things You Should Know About C# - #200 – Static Data and Constants Are Stored on the Heap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4405627/high-frequency-heap&quot;&gt;High Frequency Heap - Can anyone explain me the CLR’s “HighFrequencyHeap”?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/8479529/heap-memory-management-net/12062828#12062828&quot;&gt;To help clarify the discussion on the heaps here, there are about 8 different heaps that the CLR uses&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/search?utf8=%E2%9C%93&amp;amp;q=%22%5Bmemory+consumption%5D%22&amp;amp;type=Issues&quot;&gt;Issues about ‘[Memory Consumption]’&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2017/07/10/Memory-Usage-Inside-the-CLR/&quot;&gt;Memory Usage Inside the CLR&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
 </entry>
 
 <entry>
   <title>How the .NET Runtime loads a Type</title>
   <link href="http://www.mattwarren.org/2017/06/15/How-the-.NET-Rutime-loads-a-Type/"/>
   <updated>2017-06-15T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2017/06/15/How-the-.NET-Rutime-loads-a-Type</id>
   <content type="html">
     &lt;p&gt;It is something we take for granted every time we run a .NET program, but it turns out that loading a Type or &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; is a fairly complex process.&lt;/p&gt;

&lt;p&gt;So how does the .NET Runtime (CLR) actually load a Type?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you want the tl;dr it’s done &lt;strong&gt;carefully&lt;/strong&gt;, &lt;strong&gt;cautiously&lt;/strong&gt; and &lt;strong&gt;step-by-step&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;ensuring-type-safety&quot;&gt;Ensuring Type Safety&lt;/h2&gt;

&lt;p&gt;One of the key requirements of a ‘Managed Runtime’ is providing Type Safety, but what does it actually mean? From the MSDN page on &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/hbzz1a9a(v=vs.110).aspx&quot;&gt;Type Safety and Security&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Type-safe code accesses only the memory locations it is authorized to access. (For this discussion, type safety specifically refers to memory type safety and should not be confused with type safety in a broader respect.) For example, type-safe code cannot read values from another object’s private fields. It accesses types only in well-defined, allowable ways.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So in effect, the CLR has to ensure your Types/Classes are &lt;strong&gt;well-behaved&lt;/strong&gt; and &lt;strong&gt;following the rules&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;compiler-prevents-you-from-creating-an-abstract-class&quot;&gt;Compiler prevents you from creating an ‘abstract’ class&lt;/h3&gt;

&lt;p&gt;But lets look at a more concrete example, using the C# code below&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AbstractClass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AbstractClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NormalClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AbstractClass&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NormalClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AbstractClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The compiler quite rightly refuses to compile this and gives the following error, because &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/k535acbf(v=vs.71).aspx&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;abstract&lt;/code&gt; classes can’t be created&lt;/a&gt;, you can only inherit from them.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;error CS0144: Cannot create an instance of the abstract class or interface 
        'ConsoleApplication.AbstractClass'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So that’s all well and good, but the CLR can’t rely on &lt;strong&gt;all&lt;/strong&gt; code being created via a well-behaved compiler, or in fact via a compiler at all. So it &lt;strong&gt;has&lt;/strong&gt; to check for and prevent any attempt to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;abstract&lt;/code&gt; class.&lt;/p&gt;

&lt;h3 id=&quot;writing-il-code-by-hand&quot;&gt;Writing IL code by hand&lt;/h3&gt;

&lt;p&gt;One way to circumvent the compiler is to write IL code by hand using the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/ilasm-exe-il-assembler&quot;&gt;IL Assembler tool (ILAsm)&lt;/a&gt; which will do &lt;em&gt;almost&lt;/em&gt; no checks on the validity of the IL you give it.&lt;/p&gt;

&lt;p&gt;For instance the IL below is the equivalent of writing &lt;code class=&quot;highlighter-rouge&quot;&gt;var test = new AbstractClass();&lt;/code&gt; (if the C# compiler would let us):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.method public hidebysig static void Main(string[] args) cil managed
{
    .entrypoint
    .maxstack 1
    .locals init (
        [0] class ConsoleApplication.NormalClass class2)
	
    // System.InvalidOperationException: Instances of abstract classes cannot be created.
    newobj instance void ConsoleApplication.AbstractClass::.ctor()
		
    stloc.0 
    ldloc.0 
    callvirt instance class [mscorlib]System.Type [mscorlib]System.Object::GetType()
    callvirt instance string [mscorlib]System.Reflection.MemberInfo::get_Name()
    call void [mscorlib]Internal.Console::WriteLine(string)
    ret 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Fortunately the CLR has got this covered and will throw an &lt;code class=&quot;highlighter-rouge&quot;&gt;InvalidOperationException&lt;/code&gt; when you execute the code. This is due to &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/dde63bc1aa39aabae77fb89aad583483965c523e/src/vm/jitinterface.cpp#L5832-L5835&quot;&gt;this check&lt;/a&gt; which is hit when the JIT compiles the &lt;code class=&quot;highlighter-rouge&quot;&gt;newobj&lt;/code&gt; IL instruction.&lt;/p&gt;

&lt;h3 id=&quot;creating-types-at-run-time&quot;&gt;Creating Types at run-time&lt;/h3&gt;

&lt;p&gt;One other way that you can attempt to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;abstract&lt;/code&gt; class is at run-time, using reflection (thanks to &lt;a href=&quot;https://blogs.msdn.microsoft.com/seteplia/2017/02/01/dissecting-the-new-constraint-in-c-a-perfect-example-of-a-leaky-abstraction/&quot;&gt;this blog post&lt;/a&gt; for giving me some tips on other ways of creating Types).&lt;/p&gt;

&lt;p&gt;This is shown in the code below:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abstractType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ConsoleApplication.AbstractClass&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abstractType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// System.MissingMethodException: Cannot create an abstract class.&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abstractInstance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abstractType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The compiler is completely happy with this, it doesn’t do anything to prevent or warn you and nor should it. However when you run the code, it will throw an exception, strangely enough a &lt;code class=&quot;highlighter-rouge&quot;&gt;MissingMethodException&lt;/code&gt; this time, but it does the job!&lt;/p&gt;

&lt;p&gt;The call stack is below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Activator.cs#L45-L52&quot;&gt;Activator CreateInstance(..)&lt;/a&gt; (C# code)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/97c58ac4fce27b7796206a59eea0ca27cb49fe1a/src/mscorlib/src/System/RtType.cs#L4767-L4793&quot;&gt;RtType CreateInstanceSlow(..)&lt;/a&gt; (C# code)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/b479cee9fdcee2cb4035fda788d34e724e32a222/src/mscorlib/src/System/RuntimeHandles.cs#L223&quot;&gt;RuntimeHandles CreateInstance(..)&lt;/a&gt; (extern call)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/reflectioninvocation.cpp#L473-L631&quot;&gt;RuntimeTypeHandle::CreateInstance(..)&lt;/a&gt; (C++ implementation)&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/reflectioninvocation.cpp#L552&quot;&gt;actual check&lt;/a&gt; that throws a &lt;code class=&quot;highlighter-rouge&quot;&gt;MissingMethodException&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One final way (unless I’ve missed some out?) is to use &lt;code class=&quot;highlighter-rouge&quot;&gt;GetUninitializedObject(..)&lt;/code&gt; in the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.runtime.serialization.formatterservices.getuninitializedobject(v=vs.110).aspx&quot;&gt;FormatterServices class&lt;/a&gt; like so:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsValueType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NotSupportedException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;Type '&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FullName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;' doesn't have a parameterless constructor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emptyInstance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FormatterServices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetUninitializedObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emptyInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emptyInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abstractType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ConsoleApplication.AbstractClass&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abstractType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// System.MemberAccessException: Cannot create an abstract class.&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abstractInstance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abstractType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again the run-time stops you from doing this, however this time it decides to throw a &lt;code class=&quot;highlighter-rouge&quot;&gt;MemberAccessException&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;This happens via the following call stack:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/3ababc21ab334a2e37c6ba4115c946ea26a6f2fb/src/mscorlib/src/System/Runtime/Serialization/FormatterServices.cs#L42-L56&quot;&gt;FormatterServices GetUninitializedObject(..)&lt;/a&gt; (C# code)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/3ababc21ab334a2e37c6ba4115c946ea26a6f2fb/src/mscorlib/src/System/Runtime/Serialization/FormatterServices.cs#L59&quot;&gt;FormatterServices nativeGetUninitializedObject(..)&lt;/a&gt; (extern call)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/reflectioninvocation.cpp#L2676-L2739&quot;&gt;ReflectionSerialization::GetUninitializedObject(..)&lt;/a&gt; (C++ implementation)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/reflectioninvocation.cpp#L2705&quot;&gt;Actual check&lt;/a&gt; that throws a &lt;code class=&quot;highlighter-rouge&quot;&gt;MemberAccessException&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;further-type-safety-checks&quot;&gt;Further Type-Safety Checks&lt;/h3&gt;

&lt;p&gt;These checks are just one example of what the runtime has to validate when creating types, there are many more things is has to deal with. For instance you &lt;strong&gt;can’t&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/reflectioninvocation.cpp#L550&quot;&gt;instantiate an interface&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/dde63bc1aa39aabae77fb89aad583483965c523e/src/vm/jitinterface.cpp#L5827-L5830&quot;&gt;create a Function Pointer type&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/dde63bc1aa39aabae77fb89aad583483965c523e/src/vm/jitinterface.cpp#L7385-L7395&quot;&gt;load a type with invalid IL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/dde63bc1aa39aabae77fb89aad583483965c523e/src/vm/jitinterface.cpp#L6251-L6254&quot;&gt;box a type containing stack pointers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/3437a820fdc94caa3d1775bcee802b056f3adce2/src/vm/methodtablebuilder.cpp#L12298-L12301&quot;&gt;load a type if any of it’s generic argument types failed to load&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/3437a820fdc94caa3d1775bcee802b056f3adce2/src/vm/methodtablebuilder.cpp#L12477-L12488&quot;&gt;create a subclass of an Array&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/classcompat.cpp#L2612-L2615&quot;&gt;create virtual, static methods&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/classcompat.cpp#L2560-L2563&quot;&gt;have methods in an enum&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/classcompat.cpp#L2408-L2411&quot;&gt;have a class with a method name that is too long&lt;/a&gt; (&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/cb8cfba3b61f18f81787322f0a2563d118c26b8a/src/inc/corhdr.h#L170&quot;&gt;1024 characters if you’re wondering&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;and many, many more (for instance, search &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/classcompat.cpp&quot;&gt;classcompat.cpp&lt;/a&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;BuildMethodTableThrowException&lt;/code&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/methodtablebuilder.cpp&quot;&gt;methodtablebuilder.cpp&lt;/a&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;ThrowTypeLoadException&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;loading-types-step-by-step&quot;&gt;Loading Types ‘step-by-step’&lt;/h2&gt;

&lt;p&gt;So we’ve seen that the CLR has to do multiple checks when it’s loading types, but why does it have to load them ‘step-by-step’?&lt;/p&gt;

&lt;p&gt;Well in a nutshell, it’s because of circular references and recursion, particularly when dealing with generics types. If we take the code below from section ‘2.1 Load Levels’ in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/type-loader.md#21-load-levels&quot;&gt;Type Loader Design (BotR)&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;classA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;classB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;classC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These are valid types and &lt;code class=&quot;highlighter-rouge&quot;&gt;class A&lt;/code&gt; depends on &lt;code class=&quot;highlighter-rouge&quot;&gt;class B&lt;/code&gt; and vice versa. So we can’t load &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; until we know that &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; is valid, but we can’t load &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;, until we’re sure that &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; is valid, a classic deadlock!!&lt;/p&gt;

&lt;p&gt;How does the run-time get round this, well from the same BotR page:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The loader initially creates the structure(s) representing the type and initializes them with data that can be obtained without loading other types. When this “no-dependencies” work is done, the structure(s) can be referred from other places, usually by sticking pointers to them into another structures. &lt;strong&gt;After that the loader progresses in incremental steps and fills the structure(s) with more and more information until it finally arrives at a fully loaded type.&lt;/strong&gt; In the above example, the base types of &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;B&lt;/strong&gt; will be approximated by something that does not include the other type, and substituted by the real thing later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(there is also some &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/methodtable.cpp#L5547-L5560&quot;&gt;more info here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;So it loads types in stages, step-by-step, ensuring each dependant type has reached the same stage before continuing. These ‘Class Load’ stages are shown in the image below and explained in detail in this very helpful &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/5d2a54449d6b9d8fecb788e741654d7dbd992a87/src/vm/classloadlevel.h#L11-L70&quot;&gt;source-code comment&lt;/a&gt; (Yay for Open-Sourcing the CoreCLR!!)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/06/Class Load flow.png&quot;&gt;&lt;img src=&quot;/images/2017/06/Class Load flow.png&quot; alt=&quot;Class Load flow&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The different levels are handled in the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/a3c193780b8e055678feb06b2499cf8e7b41810c/src/vm/clsload.cpp#L3488-L3567&quot;&gt;ClassLoader::DoIncrementalLoad(..)&lt;/a&gt; method, which contains the &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt; statement that deals with them all in turn.&lt;/p&gt;

&lt;p&gt;However this is part of a bigger process, which controls loading an entire file, also known as a &lt;code class=&quot;highlighter-rouge&quot;&gt;Module&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Assembly&lt;/code&gt; in .NET terminology. The entire process for that is handled in by another &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/domainfile.cpp#L535-L627&quot;&gt;dispatch loop (switch statement)&lt;/a&gt;, that works with the &lt;code class=&quot;highlighter-rouge&quot;&gt;FileLoadLevel&lt;/code&gt; enum (&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/5d2a54449d6b9d8fecb788e741654d7dbd992a87/src/vm/domainfile.h#L28-L53&quot;&gt;definition&lt;/a&gt;). So in reality the whole process for loading an &lt;code class=&quot;highlighter-rouge&quot;&gt;Assembly&lt;/code&gt; looks like this (the loading of one or more Types happens as sub-steps once the &lt;code class=&quot;highlighter-rouge&quot;&gt;Module&lt;/code&gt; had reached the &lt;code class=&quot;highlighter-rouge&quot;&gt;FILE_LOADED&lt;/code&gt; stage)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;FILE_LOAD_CREATE&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/domainfile.cpp#L60-L86&quot;&gt;DomainFile ctor()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FILE_LOAD_BEGIN&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/domainfile.cpp#L1725-L1736&quot;&gt;Begin()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FILE_LOAD_FIND_NATIVE_IMAGE&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/domainfile.cpp#L1739-L1912&quot;&gt;FindNativeImage()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FILE_LOAD_VERIFY_NATIVE_IMAGE_DEPENDENCIES&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/domainfile.cpp#L631-L767&quot;&gt;VerifyNativeImageDependencies()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FILE_LOAD_ALLOCATE&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/domainfile.cpp#L1973-L2125&quot;&gt;Allocate()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FILE_LOAD_ADD_DEPENDENCIES&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/domainfile.cpp#L1038-L1049&quot;&gt;AddDependencies()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FILE_LOAD_PRE_LOADLIBRARY&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/domainfile.cpp#L966-L975&quot;&gt;PreLoadLibrary()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FILE_LOAD_LOADLIBRARY&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/domainfile.cpp#L979-L991&quot;&gt;LoadLibrary()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FILE_LOAD_POST_LOADLIBRARY&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/domainfile.cpp#L993-L1036&quot;&gt;PostLoadLibrary()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FILE_LOAD_EAGER_FIXUPS&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/domainfile.cpp#L1051-L1083&quot;&gt;EagerFixups()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FILE_LOAD_VTABLE_FIXUPS&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/domainfile.cpp#L1085-L1089&quot;&gt;VtableFixups()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FILE_LOAD_DELIVER_EVENTS&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/domainfile.cpp#L2145-L2186&quot;&gt;DeliverSyncEvents()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FILE_LOADED&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/domainfile.cpp#L1091-L1183&quot;&gt;FinishLoad()&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;strong&gt;CLASS_LOAD_BEGIN&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;CLASS_LOAD_UNRESTOREDTYPEKEY&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;CLASS_LOAD_UNRESTORED&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;CLASS_LOAD_APPROXPARENTS&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;CLASS_LOAD_EXACTPARENTS&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;CLASS_DEPENDENCIES_LOADED&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;CLASS_LOADED&lt;/strong&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FILE_LOAD_VERIFY_EXECUTION&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/domainfile.cpp#L1185-L1214&quot;&gt;VerifyExecution()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FILE_ACTIVE&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/domainfile.cpp#L1216-L1322&quot;&gt;Activate()&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;calls &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/13e7c4368da664a8b50228b1a5ef01a660fbb2dd/src/vm/methodtable.cpp#L3648-L3686&quot;&gt;MethodTable::CheckRunClassInitThrowing()&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/f853a04ea9c80bf63419a07fe3fe2fefb23d25aa/src/vm/ceeload.cpp#L7882-L8197&quot;&gt;Module::ExpandAll()&lt;/a&gt; which trigger/run the &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; constructors of all the classes in the file/module&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can see this in action if we &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/Documentation/building&quot;&gt;build a Debug version of the CoreCLR&lt;/a&gt; and enable the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/clr-configuration-knobs.md&quot;&gt;relevant configuration knobs&lt;/a&gt;. For a simple ‘Hello World’ program we get the log output shown below, where &lt;code class=&quot;highlighter-rouge&quot;&gt;LOADER:&lt;/code&gt; messages correspond to &lt;code class=&quot;highlighter-rouge&quot;&gt;FILE_LOAD_XXX&lt;/code&gt; stages and &lt;code class=&quot;highlighter-rouge&quot;&gt;PHASEDLOAD:&lt;/code&gt; messages indicate which &lt;code class=&quot;highlighter-rouge&quot;&gt;CLASS_LOAD_XXX&lt;/code&gt; step we are on.&lt;/p&gt;

&lt;p&gt;You can also see some of the other events that happen at the same time, these include creation of &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; variables (&lt;code class=&quot;highlighter-rouge&quot;&gt;STATICS:&lt;/code&gt;), thread-statics (&lt;code class=&quot;highlighter-rouge&quot;&gt;THREAD STATICS:&lt;/code&gt;) and &lt;code class=&quot;highlighter-rouge&quot;&gt;PreStubWorker&lt;/code&gt; which indicates methods being prepared for the JITter.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-------------------------------------------------------------------------------------------------------
This is NOT the full output, it's only the parts that reference 'Program.exe' and it's modules/classses
-------------------------------------------------------------------------------------------------------

PEImage: Opened HMODULE C:\coreclr\bin\Product\Windows_NT.x64.Debug\Program.exe
StoreFile: Add cached entry (000007FE65174540) with PEFile 000000000040D6E0
Assembly C:\coreclr\bin\Product\Windows_NT.x64.Debug\Program.exe: bits=0x2
LOADER: 439e30:***Program*	&amp;gt;&amp;gt;&amp;gt;Load initiated, LOADED/LOADED
LOADER: 0000000000439E30:***Program*	   loading at level BEGIN
LOADER: 0000000000439E30:***Program*	   loading at level FIND_NATIVE_IMAGE
LOADER: 0000000000439E30:***Program*	   loading at level VERIFY_NATIVE_IMAGE_DEPENDENCIES
LOADER: 0000000000439E30:***Program*	   loading at level ALLOCATE
STATICS: Allocating statics for module Program
Loaded pModule: &quot;C:\coreclr\bin\Product\Windows_NT.x64.Debug\Program.exe&quot;.
Module Program: bits=0x2
STATICS: Allocating 72 bytes for precomputed statics in module C:\coreclr\bin\Product\Windows_NT.x64.Debug\Program.exe in LoaderAllocator 000000000043AA18
StoreFile (StoreAssembly): Add cached entry (000007FE65174F28) with PEFile 000000000040D6E0Completed Load Level ALLOCATE for DomainFile 000000000040D8C0 in AD 1 - success = 1
LOADER: 0000000000439E30:***Program*	   loading at level ADD_DEPENDENCIES
Completed Load Level ADD_DEPENDENCIES for DomainFile 000000000040D8C0 in AD 1 - success = 1
LOADER: 0000000000439E30:***Program*	   loading at level PRE_LOADLIBRARY
LOADER: 0000000000439E30:***Program*	   loading at level LOADLIBRARY
LOADER: 0000000000439E30:***Program*	   loading at level POST_LOADLIBRARY
LOADER: 0000000000439E30:***Program*	   loading at level EAGER_FIXUPS
LOADER: 0000000000439E30:***Program*	   loading at level VTABLE FIXUPS
LOADER: 0000000000439E30:***Program*	   loading at level DELIVER_EVENTS
DRCT::IsReady - wait(0x100)=258, GetLastError() = 42424
DRCT::IsReady - wait(0x100)=258, GetLastError() = 42424
D::LA: Load Assembly Asy:0x000000000040D8C0 AD:0x0000000000439E30 which:C:\coreclr\bin\Product\Windows_NT.x64.Debug\Program.exe
Completed Load Level DELIVER_EVENTS for DomainFile 000000000040D8C0 in AD 1 - success = 1
LOADER: 0000000000439E30:***Program*	   loading at level LOADED
Completed Load Level LOADED for DomainFile 000000000040D8C0 in AD 1 - success = 1
LOADER: 439e30:***Program*	&amp;lt;&amp;lt;&amp;lt;Load completed, LOADED
In PreStubWorker for System.Environment::SetCommandLineArgs
Prestubworker: method 000007FEC2AE1160M
DoRunClassInit: Request to init 000007FEC3BACCF8T in appdomain 0000000000439E30
RunClassInit: Calling class contructor for type 000007FEC3BACCF8T
In PreStubWorker for System.Environment::.cctor
Prestubworker: method 000007FEC2AE1B10M
DoRunClassInit: Request to init 000007FEC3BACCF8T in appdomain 0000000000439E30
DoRunClassInit: returning SUCCESS for init 000007FEC3BACCF8T in appdomain 0000000000439E30
RunClassInit: Returned Successfully from class contructor for type 000007FEC3BACCF8T
DoRunClassInit: returning SUCCESS for init 000007FEC3BACCF8T in appdomain 0000000000439E30
PHASEDLOAD: LoadTypeHandleForTypeKey for type ConsoleApplication.Program to level LOADED
PHASEDLOAD: table contains:
LoadTypeHandle: Loading Class from Module 000007FE65174718 token 2000002
PHASEDLOAD: Creating loading entry for type ConsoleApplication.Program
PHASEDLOAD: About to do incremental load of type ConsoleApplication.Program (0000000000000000) from level BEGIN
Looking up System.Object by name.
Loading class &quot;ConsoleApplication.Program&quot; from module &quot;C:\coreclr\bin\Product\Windows_NT.x64.Debug\Program.exe&quot; in domain 0x0000000000439E30 
SD: MT::MethodIterator created for System.Object.
EEC::IMD: pNewMD:0x65175178 for tok:0x6000001 (ConsoleApplication.Program::.cctor)
EEC::IMD: pNewMD:0x651751a8 for tok:0x6000002 (ConsoleApplication.Program::.ctor)
EEC::IMD: pNewMD:0x651751d8 for tok:0x6000003 (ConsoleApplication.Program::Main)
STATICS: Placing statics for ConsoleApplication.Program
STATICS: Field placed at non GC offset 0x38
Offset of staticCounter1: 56
STATICS: Field placed at non GC offset 0x40
Offset of staticCounter2: 64
STATICS: Static field bytes needed (0 is normal for non dynamic case)0
STATICS: Placing ThreadStatics for ConsoleApplication.Program
THREAD STATICS: Field placed at non GC offset 0x20
Offset of threadStaticCounter1: 32
THREAD STATICS: Field placed at non GC offset 0x28
Offset of threadStaticCounter2: 40
STATICS: ThreadStatic field bytes needed (0 is normal for non dynamic case)0
CLASSLOADER: AppDomainAgileAttribute for ConsoleApplication.Program is 0
MethodTableBuilder: finished method table for module 000007FE65174718 token 2000002 = 000007FE65175230T 
PHASEDLOAD: About to do incremental load of type ConsoleApplication.Program (000007FE65175230) from level APPROXPARENTS
Notify: 000007FE65175230 ConsoleApplication.Program
Successfully loaded class ConsoleApplication.Program
PHASEDLOAD: Completed full dependency load of type (000007FE65175230)+ConsoleApplication.Program
PHASEDLOAD: Completed full dependency load of type (000007FE65175230)+ConsoleApplication.Program
LOADER: 439e30:***Program*	&amp;gt;&amp;gt;&amp;gt;Load initiated, ACTIVE/ACTIVE
LOADER: 0000000000439E30:***Program*	   loading at level VERIFY_EXECUTION
LOADER: 0000000000439E30:***Program*	   loading at level ACTIVE
Completed Load Level ACTIVE for DomainFile 000000000040D8C0 in AD 1 - success = 1
LOADER: 439e30:***Program*	&amp;lt;&amp;lt;&amp;lt;Load completed, ACTIVE
In PreStubWorker for ConsoleApplication.Program::Main
Prestubworker: method 000007FE651751D8M
    In PreStubWorker, calling MakeJitWorker
CallCompileMethodWithSEHWrapper called...
D::gV: cVars=0, extendOthers=1
Looking up System.Console by name.
SD: MT::MethodIterator created for System.Console.
JitComplete completed successfully
Got through CallCompile MethodWithSEHWrapper
MethodDesc::MakeJitWorker finished. Stub is 000007fe`652d0480 
DoRunClassInit: Request to init 000007FE65175230T in appdomain 0000000000439E30
RunClassInit: Calling class contructor for type 000007FE65175230T
In PreStubWorker for ConsoleApplication.Program::.cctor
Prestubworker: method 000007FE65175178M
    In PreStubWorker, calling MakeJitWorker
CallCompileMethodWithSEHWrapper called...
D::gV: cVars=0, extendOthers=1
JitComplete completed successfully
Got through CallCompile MethodWithSEHWrapper
MethodDesc::MakeJitWorker finished. Stub is 000007fe`652d04c0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;So there you have it, the CLR loads your classes/Types &lt;strong&gt;carefully&lt;/strong&gt;, &lt;strong&gt;cautiously&lt;/strong&gt; and &lt;strong&gt;step-by-step&lt;/strong&gt;!!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=14564962&quot;&gt;HackerNews&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/programming/comments/6hfgp7/how_the_net_runtime_loads_a_type/&quot;&gt;/r/programming&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;As always, here’s some more links if you’d like to find out further information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/Documentation/botr/type-loader.md&quot;&gt;Type Loader Design&lt;/a&gt; (BotR)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/Documentation/botr/type-system.md&quot;&gt;Type System Overview&lt;/a&gt; (BotR)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/davidnotario/2005/02/08/jit-compiler-and-type-constructors-cctors/&quot;&gt;JIT compiler and type constructors (.cctors)&lt;/a&gt; (i.e. ‘When do class constructors (.cctor) get run’?)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/ericlippert/2008/02/18/why-do-initializers-run-in-the-opposite-order-as-constructors-part-two/&quot;&gt;Why Do Initializers Run In The Opposite Order As Constructors? Part Two&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/commit/969cea6a2ffff6c53a615d2fd398f9a7b8c73290&quot;&gt;Disallow statics of spans and class instance members of span (PR)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/8516&quot;&gt;Span: Add tests to verify type loader checks for ref-like types #8516&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://weblog.west-wind.com/posts/2012/Nov/03/Back-to-Basics-When-does-a-NET-Assembly-Dependency-get-loaded&quot;&gt;Back to Basics: When does a .NET Assembly Dependency get loaded&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2017/06/15/How-the-.NET-Rutime-loads-a-Type/&quot;&gt;How the .NET Runtime loads a Type&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
 </entry>
 
 <entry>
   <title>Lowering in the C# Compiler (and what happens when you misuse it)</title>
   <link href="http://www.mattwarren.org/2017/05/25/Lowering-in-the-C-Compiler/"/>
   <updated>2017-05-25T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2017/05/25/Lowering-in-the-C#-Compiler</id>
   <content type="html">
     &lt;p&gt;Turns out that what I’d always thought of as “&lt;em&gt;Compiler magic&lt;/em&gt;” or “&lt;em&gt;Syntactic sugar&lt;/em&gt;” is actually known by the technical term ‘&lt;em&gt;Lowering&lt;/em&gt;’ and the C# compiler (a.k.a &lt;a href=&quot;https://github.com/dotnet/roslyn&quot;&gt;Roslyn&lt;/a&gt;) uses it extensively.&lt;/p&gt;

&lt;p&gt;But what is it? Well this quote from &lt;a href=&quot;http://www.drdobbs.com/architecture-and-design/so-you-want-to-write-your-own-language/240165488?pgno=2&quot;&gt;So You Want To Write Your Own Language?&lt;/a&gt; gives us some idea:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Lowering&lt;/strong&gt;
One semantic technique that is obvious in hindsight (but took Andrei Alexandrescu to point out to me) is called “lowering.” It consists of, internally, rewriting more complex semantic constructs in terms of simpler ones. For example, while loops and foreach loops can be rewritten in terms of for loops. Then, the rest of the code only has to deal with for loops. This turned out to uncover a couple of latent bugs in how while loops were implemented in D, and so was a nice win. It’s also used to rewrite scope guard statements in terms of try-finally statements, etc. Every case where this can be found in the semantic processing will be win for the implementation.&lt;/p&gt;

  &lt;p&gt;– by &lt;a href=&quot;https://en.wikipedia.org/wiki/Walter_Bright&quot;&gt;Walter Bright&lt;/a&gt; (author of the D programming language)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But if you’re still not sure what it means, have a read of Eric Lippert’s post on the subject, &lt;a href=&quot;https://ericlippert.com/2014/04/28/lowering-in-language-design-part-one/&quot;&gt;Lowering in language design&lt;/a&gt;, which contains this quote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A common technique along the way though is to have the compiler “lower” from high-level language features to low-level language features in the &lt;em&gt;same language&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;As an aside, if you like reading about the &lt;strong&gt;Roslyn compiler source&lt;/strong&gt; you may like these other posts that I’ve written:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2016/10/26/How-does-the-fixed-keyword-work/?recommended=1&quot;&gt;How does the ‘fixed’ keyword work?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2014/06/05/roslyn-code-base-performance-lessons-part-1/?recommended=1&quot;&gt;Roslyn code base - performance lessons (part 1)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2014/06/10/roslyn-code-base-performance-lessons-part-2/?recommended=1&quot;&gt;Roslyn code base - performance lessons (part 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-does-lowering-look-like&quot;&gt;What does ‘Lowering’ look like?&lt;/h2&gt;

&lt;p&gt;The C# compiler has used lowering for a while, one of the oldest or most recognised examples is when this code:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Collections.Generic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;is turned into this&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompilerGenerated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d__0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEnumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDisposable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEnumerator&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l__initialThreadId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s__1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s__2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEnumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DebuggerHidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEnumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DebuggerHidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DebuggerHidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;d__0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__state&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l__initialThreadId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurrentManagedThreadId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DebuggerHidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDisposable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEnumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MoveNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__state&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s__2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__state&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s__1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s__2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s__2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s__1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s__1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s__1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s__2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__current&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__state&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DebuggerHidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEnumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NotSupportedException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DebuggerHidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IEnumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetEnumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d__0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__state&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l__initialThreadId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurrentManagedThreadId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__state&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d__&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d__&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;d__0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__this&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DebuggerHidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IEnumerator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetEnumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Generic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetEnumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IteratorStateMachine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d__0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d__0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr_07&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;d__0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;expr_07&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__this&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr_07&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yikes, I’m glad we don’t have to write that code ourselves!! There’s an entire state-machine in there, built to allow our original code to be halted/resumed each time round the loop (at the ‘yield’ statement).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-c-compiler-and-lowering&quot;&gt;The C# compiler and ‘Lowering’&lt;/h2&gt;

&lt;p&gt;But it turns out that the Roslyn compiler does &lt;em&gt;a lot&lt;/em&gt; more ‘lowering’ than you might think. If you take a look at the code under &lt;a href=&quot;https://github.com/dotnet/roslyn/tree/master/src/Compilers/CSharp/Portable/Lowering&quot;&gt;‘/src/Compilers/CSharp/Portable/Lowering’&lt;/a&gt; (VB.NET &lt;a href=&quot;https://github.com/dotnet/roslyn/tree/master/src/Compilers/VisualBasic/Portable/Lowering&quot;&gt;equivalent here&lt;/a&gt;), you see the following folders:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/tree/master/src/Compilers/CSharp/Portable/Lowering/AsyncRewriter&quot;&gt;AsyncRewriter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/tree/master/src/Compilers/CSharp/Portable/Lowering/IteratorRewriter&quot;&gt;IteratorRewriter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/tree/master/src/Compilers/CSharp/Portable/Lowering/LambdaRewriter&quot;&gt;LambdaRewriter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/tree/master/src/Compilers/CSharp/Portable/Lowering/StateMachineRewriter&quot;&gt;StateMachineRewriter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Which correspond to some C# language features you might be familar with, such as ‘lambdas’, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;x =&amp;gt; x.Name &amp;gt; 5&lt;/code&gt;, ‘iterators’ used by &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; (above) and the &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;However if we look at bit deeper, under the &lt;a href=&quot;https://github.com/dotnet/roslyn/tree/master/src/Compilers/CSharp/Portable/Lowering/LocalRewriter&quot;&gt;‘LocalRewriter’ folder&lt;/a&gt; we can see lots more scenarios that we might never have considered ‘lowering’, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_DelegateCreationExpression.cs&quot;&gt;Delegate creation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_Event.cs&quot;&gt;Events&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_FixedStatement.cs&quot;&gt;‘fixed’ keyword&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_ForEachStatement.cs&quot;&gt;ForEach loops&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_IsOperator.cs&quot;&gt;‘Is’ operator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_LockStatement.cs&quot;&gt;‘lock’ statement&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_NullCoalescingOperator.cs&quot;&gt;’??’ a.k.a the null-coalescing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_StackAlloc.cs&quot;&gt;‘stackalloc’ keyword&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_StringConcat.cs&quot;&gt;‘String.Concat()’&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_SwitchStatement.cs&quot;&gt;‘switch’ statement&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_ThrowStatement.cs&quot;&gt;‘throw’ expression&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_UsingStatement.cs&quot;&gt;‘using’ statement&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;even a &lt;a href=&quot;https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_WhileStatement.cs&quot;&gt;‘while’ loop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So a big thank-you is due to all the past and present C# language developers and designers, they did all this work for us. Imagine that C# didn’t have all these high-level features, we’d be stuck writing them by hand.&lt;/p&gt;

&lt;p&gt;It would be like writing &lt;strong&gt;Java&lt;/strong&gt; :-)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-happens-when-you-misuse-it&quot;&gt;What happens when you misuse it&lt;/h2&gt;

&lt;p&gt;But of course the real fun part is ‘misusing’ or outright ‘abusing’ the compiler. So I set up a little &lt;a href=&quot;https://twitter.com/matthewwarren/status/867753577346985984&quot;&gt;twitter competition&lt;/a&gt; just how much ‘lowering’ could we get the compiler to do for us (i.e the highest ratio of ‘input’ lines of code to ‘output’ lines).&lt;/p&gt;

&lt;p&gt;It had the following rules (see &lt;a href=&quot;https://gist.github.com/mattwarren/3c7cfaa245effc0a318b87f1ee5dc153&quot;&gt;this gist&lt;/a&gt; for more info):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You can have as many lines as you want within method &lt;code class=&quot;highlighter-rouge&quot;&gt;M()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;No single line can be longer than 100 chars&lt;/li&gt;
  &lt;li&gt;To get your score, divide the ‘# of expanded lines’ by the ‘# of original line(s)’
    &lt;ol&gt;
      &lt;li&gt;Based on the default &lt;strong&gt;output&lt;/strong&gt; formatting of &lt;a href=&quot;https://sharplab.io/#b:master/f:r/&quot;&gt;https://sharplab.io&lt;/a&gt;, no re-formatting allowed!!&lt;/li&gt;
      &lt;li&gt;But you can format the &lt;strong&gt;intput&lt;/strong&gt; however you want, i.e. make use of the full 100 chars&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Must compile with no warnings on &lt;a href=&quot;https://sharplab.io/#b:master/f:r/&quot;&gt;https://sharplab.io&lt;/a&gt; (allows C# 7 features)
    &lt;ol&gt;
      &lt;li&gt;But doesn’t have to do anything sensible when run&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;You cannot modify the code that is already there, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;public class C {}&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;public void M()&lt;/code&gt;
    &lt;ol&gt;
      &lt;li&gt;Cannot just add &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;public void M()&lt;/code&gt;, that’s too easy!!&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;You can add new &lt;code class=&quot;highlighter-rouge&quot;&gt;using ...&lt;/code&gt; declarations, these do not count towards the line count&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For instance with the following code (interactive version available on &lt;a href=&quot;https://sharplab.io/#b:master/f:r/K4Zwlgdg5gBAygTxAFwKYFsDcBYAUAB2ACMAbMAYxnJIEMQQYBhGAbzxg5kNIpgDcA9mAAmMALIAKAJSt2neQDFgEcgB4UAJ0hQAfDDQoYAXhjTjegESkaACws5c8gL54nQA&quot;&gt;sharplab.io&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blah&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This counts as &lt;strong&gt;1&lt;/strong&gt; line of original code (only code inside method &lt;code class=&quot;highlighter-rouge&quot;&gt;M()&lt;/code&gt; is counted)&lt;/p&gt;

&lt;p&gt;This expands to &lt;strong&gt;23&lt;/strong&gt; lines (again only lines of code inside the braces (&lt;code class=&quot;highlighter-rouge&quot;&gt;{&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;}&lt;/code&gt;) of &lt;code class=&quot;highlighter-rouge&quot;&gt;class C&lt;/code&gt; are counted.&lt;/p&gt;

&lt;p&gt;Giving a &lt;strong&gt;total score&lt;/strong&gt; of &lt;strong&gt;23&lt;/strong&gt; (23 / 1)&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompilerGenerated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__0_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Note: this type is marked as 'beforefieldinit'.&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b__0_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blah&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__0_0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__0_0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b__0_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;results&quot;&gt;Results&lt;/h3&gt;

&lt;p&gt;The first place entry was the following entry from &lt;a href=&quot;https://gist.github.com/mattwarren/3c7cfaa245effc0a318b87f1ee5dc153#gistcomment-2106237&quot;&gt;Schabse Laks&lt;/a&gt;, which contains 9 lines-of-code inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;M()&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Linq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Generic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;dynamic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;this expands to an impressive &lt;strong&gt;7964&lt;/strong&gt; lines of code (yep you read that right!!) for a score of &lt;strong&gt;885&lt;/strong&gt; (7964 / 9). The main trick he figured out was that adding more lines to the input increased the score, i.e is scales superlinearly. Although it you &lt;a href=&quot;https://twitter.com/Schabse/status/867809080714313729&quot;&gt;take things too far&lt;/a&gt; the compiler bails out with a pretty impressive error message:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;error CS8078: An expression is too long or complex to compile&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here’s the Top 6 top results:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Submitter&lt;/th&gt;
      &lt;th&gt;Entry&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://twitter.com/Schabse&quot;&gt;Schabse Laks&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://twitter.com/Schabse/status/867808817655840768&quot;&gt;link&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;885&lt;/strong&gt; (7964 / 9)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://twitter.com/a_tessenr&quot;&gt;Andrey Dyatlov&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://twitter.com/a_tessenr/status/867776073735454721&quot;&gt;link&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;778&lt;/strong&gt; (778 / 1)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://twitter.com/alrz_h&quot;&gt;alrz&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://twitter.com/alrz_h/status/867780509627273216&quot;&gt;link&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;755&lt;/strong&gt; (755 / 1)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://twitter.com/andygocke&quot;&gt;Andy Gocke&lt;/a&gt; *&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://twitter.com/andygocke/status/867773813907312640&quot;&gt;link&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;633&lt;/strong&gt; (633 / 1)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://twitter.com/jaredpar&quot;&gt;Jared Parsons&lt;/a&gt; *&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://twitter.com/jaredpar/status/867772979698049024&quot;&gt;link&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;461&lt;/strong&gt; (461 / 1)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://twitter.com/jon_cham&quot;&gt;Jonathan Chambers&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://twitter.com/jon_cham/status/867759359803228162&quot;&gt;link&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;384&lt;/strong&gt; (384 / 1)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; = member of the Roslyn compiler team (they’re not disqualified, but maybe they should have some kind of handicap applied to ‘even out’ the playing field?)&lt;/p&gt;

&lt;h3 id=&quot;honourable-mentions&quot;&gt;Honourable mentions&lt;/h3&gt;

&lt;p&gt;However there were some other entries that whilst they didn’t make it into the Top 6, are still worth a mention due to the ingenuity involved:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Uncovering a &lt;a href=&quot;https://twitter.com/a_tessenr/status/867765123745710080&quot;&gt;complier bug&lt;/a&gt;, kudos to &lt;a href=&quot;https://twitter.com/a_tessenr&quot;&gt;@a_tessenr&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/issues/19778&quot;&gt;GitHub bug report&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/roslyn/pull/19784/files&quot;&gt;fix in the compiler&lt;/a&gt; that was done within a few hours!!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hitting an &lt;a href=&quot;https://twitter.com/Schabse/status/867809080714313729&quot;&gt;internal compiler limit&lt;/a&gt;, nice work by &lt;a href=&quot;https://twitter.com/Schabse&quot;&gt;@Schabse&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The most &lt;a href=&quot;https://twitter.com/NickPalladinos/status/867764488958857216&quot;&gt;elegant attempt&lt;/a&gt; featuring a &lt;code class=&quot;highlighter-rouge&quot;&gt;Y combinator&lt;/code&gt; by &lt;a href=&quot;https://twitter.com/NickPalladinos&quot;&gt;@NickPalladinos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/AdamSpeight2008/status/867800480478515200&quot;&gt;Using VB.NET&lt;/a&gt; (hint: it didn’t end well!!), but still a valiant attempt by &lt;a href=&quot;https://twitter.com/AdamSpeight2008&quot;&gt;@AdamSpeight2008&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The most &lt;a href=&quot;https://twitter.com/leppie/status/867861870241226753&quot;&gt;astheticially pleasing&lt;/a&gt; entry by &lt;a href=&quot;https://twitter.com/leppie&quot;&gt;@leppie&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=14422944&quot;&gt;HackerNews&lt;/a&gt;, &lt;a href=&quot;https://www.reddit.com/r/programming/comments/6dfsdl/lowering_in_the_c_compiler_and_what_happens_when/&quot;&gt;/r/programming&lt;/a&gt; or &lt;a href=&quot;https://www.reddit.com/r/csharp/comments/6dgkpk/lowering_in_the_c_compiler_and_what_happens_when/&quot;&gt;/r/csharp&lt;/a&gt; (whichever takes your fancy!!)&lt;/p&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2017/05/25/Lowering-in-the-C-Compiler/&quot;&gt;Lowering in the C# Compiler (and what happens when you misuse it)&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='C#' scheme='http://www.mattwarren.org/tags#C#'/>
   
     <category term='Open Source' scheme='http://www.mattwarren.org/tags#Open Source'/>
   
     <category term='Roslyn' scheme='http://www.mattwarren.org/tags#Roslyn'/>
   
 </entry>
 
 <entry>
   <title>Adding a new Bytecode Instruction to the CLR</title>
   <link href="http://www.mattwarren.org/2017/05/19/Adding-a-new-Bytecode-Instruction-to-the-CLR/"/>
   <updated>2017-05-19T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2017/05/19/Adding-a-new-Bytecode-Instruction-to-the-CLR</id>
   <content type="html">
     &lt;p&gt;Now that the &lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2015/02/03/coreclr-is-now-open-source/&quot;&gt;CoreCLR is open-source&lt;/a&gt; we can do fun things, for instance find out if it’s possible to add new &lt;a href=&quot;https://en.wikipedia.org/wiki/Common_Intermediate_Language&quot;&gt;IL (Intermediate Language)&lt;/a&gt; instruction to the runtime.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; it turns out that it’s easier than you might think!! Here are the steps you need to go through:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Step 0 - &lt;a href=&quot;#step-0&quot;&gt;Introduction and Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Step 1 - &lt;a href=&quot;#step-1&quot;&gt;Add the new IL instruction to the runtime&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Step 2 - &lt;a href=&quot;#step-2&quot;&gt;Make the Interpreter work&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Step 3 - &lt;a href=&quot;#step-3&quot;&gt;Ensure the JIT can recognise the new op-code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Step 4 - &lt;a href=&quot;#step-4&quot;&gt;Runtime code generation via Reflection.Emit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Step 5 - &lt;a href=&quot;#step-5&quot;&gt;Future Improvements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: turns out that I wasn’t the only person to have this idea, see &lt;a href=&quot;https://www.slideshare.net/kekyo/beachhead-implements-new-opcode-on-clr-jit&quot;&gt;Beachhead implements new opcode on CLR JIT&lt;/a&gt; for another implementation by &lt;a href=&quot;https://twitter.com/kekyo2&quot;&gt;Kouji Matsui&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;step-0&quot;&gt;Step 0&lt;/h3&gt;

&lt;p&gt;But first a bit of background information. Adding a new IL instruction to the CLR is a pretty rare event, that last time is was done &lt;em&gt;for real&lt;/em&gt; was in .NET 2.0 when support for generics was added. This is &lt;em&gt;part&lt;/em&gt; of the reason why .NET code had good backwards-compatibility, from &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ff602939(v=vs.110).aspx&quot;&gt;Backward compatibility and the .NET Framework 4.5&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The .NET Framework 4.5 and its point releases (4.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2, and 4.7) are backward-compatible with apps that were built with earlier versions of the .NET Framework. In other words, &lt;strong&gt;apps and components built with previous versions will work without modification on the .NET Framework 4.5&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Side note&lt;/strong&gt;: The .NET framework &lt;em&gt;did&lt;/em&gt; break backwards compatibility when moving from 1.0 to 2.0, precisely so that support for generics could be added &lt;em&gt;deep&lt;/em&gt; into the runtime, i.e. with support in the IL. Java took a different decision, I guess because it had been around longer, breaking backwards-comparability was a bigger issue. See the excellent blog post &lt;a href=&quot;http://www.jprl.com/Blog/archive/development/2007/Aug-31.html&quot;&gt;Comparing Java and C# Generics&lt;/a&gt; for more info.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;step-1&quot;&gt;Step 1&lt;/h3&gt;

&lt;p&gt;For this exercise I plan to add a new IL instruction (op-code) to the CoreCLR runtime and because I’m a raving narcissist (not really, see below) I’m going to name it after myself. So let me introduce the &lt;code class=&quot;highlighter-rouge&quot;&gt;matt&lt;/code&gt; IL instruction, that you can use like so:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.method private hidebysig static int32 TestMattOpCodeMethod(int32 x, int32 y) 
        cil managed noinlining
{
    .maxstack 2
    ldarg.0
    ldarg.1
    matt  // yay, my name as an IL op-code!!!!
    ret
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But because I’m actually a bit-British (i.e. I don’t like to &lt;a href=&quot;http://www.phrases.org.uk/meanings/68800.html&quot;&gt;‘blow my own trumpet’&lt;/a&gt;), I’m going to make the &lt;code class=&quot;highlighter-rouge&quot;&gt;matt&lt;/code&gt; op-code almost completely pointless, it’s going to do exactly the same thing as calling &lt;code class=&quot;highlighter-rouge&quot;&gt;Math.Max(x, y)&lt;/code&gt;, i.e. just return the largest of the 2 numbers.&lt;/p&gt;

&lt;p&gt;The other reason for naming it &lt;code class=&quot;highlighter-rouge&quot;&gt;matt&lt;/code&gt; is that I’d really like someone to make a version of the &lt;a href=&quot;https://github.com/dotnet/roslyn&quot;&gt;C# (Roslyn) compiler&lt;/a&gt; that allows you to write code like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{0} m@ {1} = {2}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// prints '1 m@ 7 = 7'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I definitely want the &lt;code class=&quot;highlighter-rouge&quot;&gt;m@&lt;/code&gt; operator to be a thing (pronounced ‘matt’, not ‘m-at’), maybe the other &lt;a href=&quot;https://blogs.msdn.microsoft.com/mattwar/2004/03/05/about-me/&quot;&gt;‘Matt Warren’&lt;/a&gt; who works at Microsoft on the &lt;a href=&quot;https://github.com/dotnet/csharplang/blob/master/meetings/2015/LDM-2015-01-21.md#design-team&quot;&gt;C# Language Design Team&lt;/a&gt; can help out!! Seriously though, if anyone reading this would like to write a similar blog post, showing how you’d add the &lt;code class=&quot;highlighter-rouge&quot;&gt;m@&lt;/code&gt; operator to the Roslyn compiler, please let me know I’d love to read it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Thanks to &lt;a href=&quot;https://twitter.com/mmjuraszek&quot;&gt;Marcin Juraszek (@mmjuraszek)&lt;/a&gt; you can now use the &lt;code class=&quot;highlighter-rouge&quot;&gt;m@&lt;/code&gt; in a C# program, see &lt;a href=&quot;http://marcinjuraszek.com/2017/05/adding-matt-operator-to-roslyn-part-1.html&quot;&gt;Adding Matt operator to Roslyn - Syntax, Lexer and Parser&lt;/a&gt;, &lt;a href=&quot;http://marcinjuraszek.com/2017/05/adding-matt-operator-to-roslyn-part-2.html&quot;&gt;Adding Matt operator to Roslyn - Binder&lt;/a&gt; and &lt;a href=&quot;http://marcinjuraszek.com/2017/06/adding-matt-operator-to-roslyn-part-3.html&quot;&gt;Adding Matt operator to Roslyn - Emitter&lt;/a&gt; for the full details.&lt;/p&gt;

&lt;p&gt;Now we’ve defined the op-code, the first step is to ensure that the run-time and tooling can recognise it. In particular we need &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/496e4ekx(v=vs.110).aspx&quot;&gt;the IL Assembler&lt;/a&gt; (a.k.a &lt;code class=&quot;highlighter-rouge&quot;&gt;ilasm&lt;/code&gt;) to be able to take the IL code above (&lt;code class=&quot;highlighter-rouge&quot;&gt;TestMattOpCodeMethod(..)&lt;/code&gt;) and produce a .NET executable.&lt;/p&gt;

&lt;p&gt;As the .NET runtime source code is nicely structured (+1 to the runtime devs), to make this possible we only need to makes changes in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/inc/opcode.def&quot;&gt;opcode.def&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;--- a/src/inc/opcode.def
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/src/inc/opcode.def
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -154,7 +154,7 @@ OPDEF(CEE_NEWOBJ,                     &quot;newobj&quot;,           VarPop,             Pu
&lt;/span&gt; OPDEF(CEE_CASTCLASS,                  &quot;castclass&quot;,        PopRef,             PushRef,     InlineType,         IObjModel,   1,  0xFF,    0x74,    NEXT)
 OPDEF(CEE_ISINST,                     &quot;isinst&quot;,           PopRef,             PushI,       InlineType,         IObjModel,   1,  0xFF,    0x75,    NEXT)
 OPDEF(CEE_CONV_R_UN,                  &quot;conv.r.un&quot;,        Pop1,               PushR8,      InlineNone,         IPrimitive,  1,  0xFF,    0x76,    NEXT)
&lt;span class=&quot;gd&quot;&gt;-OPDEF(CEE_UNUSED58,                   &quot;unused&quot;,           Pop0,               Push0,       InlineNone,         IPrimitive,  1,  0xFF,    0x77,    NEXT)
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+OPDEF(CEE_MATT,                       &quot;matt&quot;,             Pop1+Pop1,          Push1,       InlineNone,         IPrimitive,  1,  0xFF,    0x77,    NEXT)
&lt;/span&gt; OPDEF(CEE_UNUSED1,                    &quot;unused&quot;,           Pop0,               Push0,       InlineNone,         IPrimitive,  1,  0xFF,    0x78,    NEXT)
 OPDEF(CEE_UNBOX,                      &quot;unbox&quot;,            PopRef,             PushI,       InlineType,         IPrimitive,  1,  0xFF,    0x79,    NEXT)
 OPDEF(CEE_THROW,                      &quot;throw&quot;,            PopRef,             Push0,       InlineNone,         IObjModel,   1,  0xFF,    0x7A,    THROW)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I just picked the first available &lt;code class=&quot;highlighter-rouge&quot;&gt;unused&lt;/code&gt; slot and added &lt;code class=&quot;highlighter-rouge&quot;&gt;matt&lt;/code&gt; in there. It’s defined as &lt;code class=&quot;highlighter-rouge&quot;&gt;Pop1+Pop1&lt;/code&gt; because it takes 2 values from the stack as input and &lt;code class=&quot;highlighter-rouge&quot;&gt;Push1&lt;/code&gt; because after is has executed, a single result is pushed back onto the stack.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: all the changes I made are &lt;a href=&quot;https://github.com/dotnet/coreclr/compare/master...mattwarren:newOpCode&quot;&gt;available in one-place on GitHub&lt;/a&gt; if you’d rather look at them like that.&lt;/p&gt;

&lt;p&gt;Once this change was done &lt;code class=&quot;highlighter-rouge&quot;&gt;ilasm&lt;/code&gt; will successfully assembly the test code file &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld.il&lt;/code&gt; that contains &lt;code class=&quot;highlighter-rouge&quot;&gt;TestMattOpCodeMethod(..)&lt;/code&gt; as shown above:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ ilasm /EXE /OUTPUT=HelloWorld.exe -NOLOGO HelloWorld.il

Assembling 'HelloWorld.il'  to EXE --&amp;gt; 'HelloWorld.exe'
Source file is ANSI

Assembled method HelloWorld::Main
Assembled method HelloWorld::TestMattOpCodeMethod

Creating PE file

Emitting classes:
Class 1:        HelloWorld

Emitting fields and methods:
Global
Class 1 Methods: 2;
Resolving local member refs: 1 -&amp;gt; 1 defs, 0 refs, 0 unresolved

Emitting events and properties:
Global
Class 1
Resolving local member refs: 0 -&amp;gt; 0 defs, 0 refs, 0 unresolved
Writing PE file
Operation completed successfully
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;step-2&quot;&gt;Step 2&lt;/h3&gt;

&lt;p&gt;However at this point the &lt;code class=&quot;highlighter-rouge&quot;&gt;matt&lt;/code&gt; op-code isn’t actually executed, at runtime the CoreCLR just throws an exception because it doesn’t know what to do with it. As a first (simpler) step, I just wanted to make the &lt;a href=&quot;/2017/03/30/The-.NET-IL-Interpreter/&quot;&gt;.NET Interpreter&lt;/a&gt; work, so I made the following changes to wire it up:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;--- a/src/vm/interpreter.cpp
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/src/vm/interpreter.cpp
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -2726,6 +2726,9 @@ void Interpreter::ExecuteMethod(ARG_SLOT* retVal, __out bool* pDoJmpCall, __out
&lt;/span&gt;         case CEE_REM_UN:
             BinaryIntOp&amp;lt;BIO_RemUn&amp;gt;();
             break;
&lt;span class=&quot;gi&quot;&gt;+        case CEE_MATT:
+            BinaryArithOp&amp;lt;BA_Matt&amp;gt;();
+            break;
&lt;/span&gt;         case CEE_AND:
             BinaryIntOp&amp;lt;BIO_And&amp;gt;();
             break;

&lt;span class=&quot;gd&quot;&gt;--- a/src/vm/interpreter.hpp
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/src/vm/interpreter.hpp
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -298,10 +298,14 @@ void Interpreter::BinaryArithOpWork(T val1, T val2)
&lt;/span&gt;         {
             res = val1 / val2;
         }
&lt;span class=&quot;gd&quot;&gt;-        else 
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+        else if (op == BA_Rem)
&lt;/span&gt;         {
             res = RemFunc(val1, val2);
         }
&lt;span class=&quot;gi&quot;&gt;+        else if (op == BA_Matt)
+        {
+            res = MattFunc(val1, val2);
+        }
&lt;/span&gt;     }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then I added the methods that would actually implement the interpreted code:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;--- a/src/vm/interpreter.cpp
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/src/vm/interpreter.cpp
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -10801,6 +10804,26 @@ double Interpreter::RemFunc(double v1, double v2)
&lt;/span&gt;     return fmod(v1, v2);
 }
 
&lt;span class=&quot;gi&quot;&gt;+INT32 Interpreter::MattFunc(INT32 v1, INT32 v2)
+{
+	return v1 &amp;gt; v2 ? v1 : v2;
+}
+
+INT64 Interpreter::MattFunc(INT64 v1, INT64 v2)
+{
+	return v1 &amp;gt; v2 ? v1 : v2;
+}
+
+float Interpreter::MattFunc(float v1, float v2)
+{
+	return v1 &amp;gt; v2 ? v1 : v2;
+}
+
+double Interpreter::MattFunc(double v1, double v2)
+{
+	return v1 &amp;gt; v2 ? v1 : v2;
+}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So fairly straight-forward and the bonus is that at this point the &lt;code class=&quot;highlighter-rouge&quot;&gt;matt&lt;/code&gt; operator is fully operational, you can actually write IL using it and it will run (interpreted only).&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;step-3&quot;&gt;Step 3&lt;/h3&gt;

&lt;p&gt;However not everyone wants to &lt;a href=&quot;/2017/03/30/The-.NET-IL-Interpreter/&quot;&gt;re-compile the CoreCLR&lt;/a&gt; just to enable the Interpreter, so I want to also make it work &lt;em&gt;for real&lt;/em&gt; via the Just-in-Time (JIT) compiler.&lt;/p&gt;

&lt;p&gt;The full changes to make this work were spread across multiple files, but were mostly &lt;em&gt;housekeeping&lt;/em&gt; so I won’t include them all here, &lt;a href=&quot;https://github.com/dotnet/coreclr/compare/master...mattwarren:newOpCode&quot;&gt;check-out the full diff&lt;/a&gt; if you’re interested. But the significant parts are below:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;--- a/src/jit/importer.cpp
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/src/jit/importer.cpp
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -11112,6 +11112,10 @@ void Compiler::impImportBlockCode(BasicBlock* block)
&lt;/span&gt;                 oper = GT_UMOD;
                 goto MATH_MAYBE_CALL_NO_OVF;
 
&lt;span class=&quot;gi&quot;&gt;+            case CEE_MATT:
+                oper = GT_MATT;
+                goto MATH_MAYBE_CALL_NO_OVF;
+
&lt;/span&gt;             MATH_MAYBE_CALL_NO_OVF:
                 ovfl = false;
             MATH_MAYBE_CALL_OVF:

&lt;span class=&quot;gd&quot;&gt;--- a/src/vm/jithelpers.cpp
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/src/vm/jithelpers.cpp
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -341,6 +341,14 @@ HCIMPL2(UINT32, JIT_UMod, UINT32 dividend, UINT32 divisor)
&lt;/span&gt; HCIMPLEND
 
 /*********************************************************************/
&lt;span class=&quot;gi&quot;&gt;+HCIMPL2(INT32, JIT_Matt, INT32 x, INT32 y)
+{
+    FCALL_CONTRACT;
+    return x &amp;gt; y ? x : y;
+}
+HCIMPLEND
+
+/*********************************************************************/
&lt;/span&gt; HCIMPL2_VV(INT64, JIT_LDiv, INT64 dividend, INT64 divisor)
 {
     FCALL_CONTRACT;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In summary, these changes mean that during the JIT’s &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md#morph-blocks&quot;&gt;‘Morph phase’&lt;/a&gt; the IL containing the &lt;code class=&quot;highlighter-rouge&quot;&gt;matt&lt;/code&gt; op code is converted from:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fgMorphTree BB01, stmt 1 (before)
       [000004] ------------             ▌  return    int   
       [000002] ------------             │  ┌──▌  lclVar    int    V01 arg1        
       [000003] ------------             └──▌  m@        int   
       [000001] ------------                └──▌  lclVar    int    V00 arg0               
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;into this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fgMorphTree BB01, stmt 1 (after)
       [000004] --C--+------             ▌  return    int   
       [000003] --C--+------             └──▌  call help int    HELPER.CORINFO_HELP_MATT
       [000001] -----+------ arg0 in rcx    ├──▌  lclVar    int    V00 arg0         
       [000002] -----+------ arg1 in rdx    └──▌  lclVar    int    V01 arg1                 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;HELPER.CORINFO_HELP_MATT&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When this is finally compiled into assembly code it ends up looking like so:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Assembly listing for method HelloWorld:TestMattOpCodeMethod(int,int):int             &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Emitting BLENDED_CODE for X64 CPU with AVX                                           &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// optimized code                                                                       &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// rsp based frame                                                                      &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// partially interruptible                                                              &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Final local variable assignments                                                     &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//                                                                                      &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  V00 arg0         [V00,T00] (  3,  3   )     int  -&amp;gt;  rcx                            &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  V01 arg1         [V01,T01] (  3,  3   )     int  -&amp;gt;  rdx                            &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  V02 OutArgs      [V02    ] (  1,  1   )  lclBlk (32) [rsp+0x00]                     &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//                                                                                      &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Lcl frame size = 40                                    &lt;/span&gt;
                                                                                       
&lt;span class=&quot;nl&quot;&gt;G_M9261_IG01:&lt;/span&gt;                                                                          
       &lt;span class=&quot;mi&quot;&gt;4883&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EC28&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;                                           
                                                                                       
&lt;span class=&quot;nl&quot;&gt;G_M9261_IG02:&lt;/span&gt;                                                                          
       &lt;span class=&quot;n&quot;&gt;E8976FEB5E&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;CORINFO_HELP_MATT&lt;/span&gt;                                 
       &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;                   &lt;span class=&quot;n&quot;&gt;nop&lt;/span&gt;                                                        
                                                                                       
&lt;span class=&quot;nl&quot;&gt;G_M9261_IG03:&lt;/span&gt;                                                                          
       &lt;span class=&quot;mi&quot;&gt;4883&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C428&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;                                           
       &lt;span class=&quot;n&quot;&gt;C3&lt;/span&gt;                   &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;                                                        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m not entirely sure why there is a &lt;code class=&quot;highlighter-rouge&quot;&gt;nop&lt;/code&gt; instruction in there? But it works, which is the main thing!!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;step-4&quot;&gt;Step 4&lt;/h3&gt;

&lt;p&gt;In the CLR you can also dynamically emit code at runtime using the methods that sit under the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit(v=vs.110).aspx&quot;&gt;‘System.Reflection.Emit’ namespace&lt;/a&gt;, so the last task is to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;OpCodes.Matt&lt;/code&gt; field and have it emit the correct values for the &lt;code class=&quot;highlighter-rouge&quot;&gt;matt&lt;/code&gt; op-code.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;--- a/src/mscorlib/src/System/Reflection/Emit/OpCodes.cs
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/src/mscorlib/src/System/Reflection/Emit/OpCodes.cs
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -139,6 +139,7 @@ internal enum OpCodeValues
&lt;/span&gt;         Castclass = 0x74,
         Isinst = 0x75,
         Conv_R_Un = 0x76,
&lt;span class=&quot;gi&quot;&gt;+        Matt = 0x77,
&lt;/span&gt;         Unbox = 0x79,
         Throw = 0x7a,
         Ldfld = 0x7b,
&lt;span class=&quot;gu&quot;&gt;@@ -1450,6 +1451,16 @@ private OpCodes()
&lt;/span&gt;             (0 &amp;lt;&amp;lt; OpCode.StackChangeShift)
         );
 
&lt;span class=&quot;gi&quot;&gt;+        public static readonly OpCode Matt = new OpCode(OpCodeValues.Matt,
+            ((int)OperandType.InlineNone) |
+            ((int)FlowControl.Next &amp;lt;&amp;lt; OpCode.FlowControlShift) |
+            ((int)OpCodeType.Primitive &amp;lt;&amp;lt; OpCode.OpCodeTypeShift) |
+            ((int)StackBehaviour.Pop1_pop1 &amp;lt;&amp;lt; OpCode.StackBehaviourPopShift) |
+            ((int)StackBehaviour.Push1 &amp;lt;&amp;lt; OpCode.StackBehaviourPushShift) |
+            (1 &amp;lt;&amp;lt; OpCode.SizeShift) |
+            (-1 &amp;lt;&amp;lt; OpCode.StackChangeShift)
+        );
+
&lt;/span&gt;         public static readonly OpCode Unbox = new OpCode(OpCodeValues.Unbox,
             ((int)OperandType.InlineType) |
             ((int)FlowControl.Next &amp;lt;&amp;lt; OpCode.FlowControlShift) |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This lets us write the code shown below, which emits, compiles and then executes the &lt;code class=&quot;highlighter-rouge&quot;&gt;matt&lt;/code&gt; op-code:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;DynamicMethod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DynamicMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;TestMattOpCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
		&lt;span class=&quot;n&quot;&gt;returnType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;parameterTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; 
		&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Emit the IL&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetILGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OpCodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ldarg_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OpCodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ldarg_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OpCodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Matt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Use the new 'matt' IL OpCode&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OpCodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Compile the IL into a delegate (uses the JITter under-the-hood)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mattOpCodeInvoker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// prints &quot;1 m@ 7 = 7&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{0} m@ {1} = {2} (via IL Emit)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mattOpCodeInvoker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
   
&lt;span class=&quot;c1&quot;&gt;// prints &quot;12 m@ 9 = 12&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{0} m@ {1} = {2} (via IL Emit)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mattOpCodeInvoker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;step-5&quot;&gt;Step 5&lt;/h3&gt;

&lt;p&gt;Finally, you may have noticed that I cheated a little bit in &lt;a href=&quot;#step-3&quot;&gt;Step 3&lt;/a&gt; when I made changes to the JIT. Even though what I did works, it is not the most efficient way due to the extra method call to &lt;code class=&quot;highlighter-rouge&quot;&gt;CORINFO_HELP_MATT&lt;/code&gt;. Also the JIT generally doesn’t use helper functions in this way, instead prefering to emit assembly code directly.&lt;/p&gt;

&lt;p&gt;As a &lt;em&gt;future exercise&lt;/em&gt; for anyone who has read this far (any takers?), it would be nice if the JIT emitted more efficient code. For instance if you write C# code like this (which does the same thing as the &lt;code class=&quot;highlighter-rouge&quot;&gt;matt&lt;/code&gt; op-code):&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MaxMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s turned into the following IL by the C# compiler&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IL to import:
IL_0000  02                ldarg.0     
IL_0001  03                ldarg.1     
IL_0002  30 02             bgt.s        2 (IL_0006)
IL_0004  03                ldarg.1     
IL_0005  2a                ret         
IL_0006  02                ldarg.0     
IL_0007  2a                ret         
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then when the JIT runs it’s processed as 3 basic-blocks (BB01, BB02 and BB03):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Importing BB01 (PC=000) of 'TestNamespace.TestClass:MaxMethod(int,int):int'
    [ 0]   0 (0x000) ldarg.0
    [ 1]   1 (0x001) ldarg.1
    [ 2]   2 (0x002) bgt.s
           [000005] ------------             ▌  stmtExpr  void  (IL 0x000...  ???)
           [000004] ------------             └──▌  jmpTrue   void  
           [000002] ------------                │  ┌──▌  lclVar    int    V01 arg1         
           [000003] ------------                └──▌  &amp;gt;         int   
           [000001] ------------                   └──▌  lclVar    int    V00 arg0         

Importing BB03 (PC=006) of 'TestNamespace.TestClass:MaxMethod(int,int):int'
    [ 0]   6 (0x006) ldarg.0
    [ 1]   7 (0x007) ret
           [000009] ------------             ▌  stmtExpr  void  (IL 0x006...  ???)
           [000008] ------------             └──▌  return    int   
           [000007] ------------                └──▌  lclVar    int    V00 arg0         

Importing BB02 (PC=004) of 'TestNamespace.TestClass:MaxMethod(int,int):int'
    [ 0]   4 (0x004) ldarg.1
    [ 1]   5 (0x005) ret
           [000013] ------------             ▌  stmtExpr  void  (IL 0x004...  ???)
           [000012] ------------             └──▌  return    int   
           [000011] ------------                └──▌  lclVar    int    V01 arg1         
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before finally being turned into the following assembly code, which is way more efficient. It contains just a &lt;code class=&quot;highlighter-rouge&quot;&gt;cmp&lt;/code&gt;, a &lt;code class=&quot;highlighter-rouge&quot;&gt;jg&lt;/code&gt; and a couple of &lt;code class=&quot;highlighter-rouge&quot;&gt;mov&lt;/code&gt; instructions, but crucially it’s all done in-line, it doesn’t need call out to another method.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Assembly listing for method TestNamespace.TestClass:MaxMethod(int,int):int&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Emitting BLENDED_CODE for X64 CPU with AVX&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// optimized code&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// rsp based frame&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// partially interruptible&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Final local variable assignments&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   V00 arg0         [V00,T00] (  4,  3.50)     int  -&amp;gt;  rcx&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   V01 arg1         [V01,T01] (  4,  3.50)     int  -&amp;gt;  rdx&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// # V02 OutArgs      [V02    ] (  1,  1   )  lclBlk ( 0) [rsp+0x00]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Lcl frame size = 0&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;G_M32709_IG01:&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;G_M32709_IG02:&lt;/span&gt;
       &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BCA&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;cmp&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edx&lt;/span&gt;
       &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F03&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;jg&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;SHORT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G_M32709_IG04&lt;/span&gt;
       &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BC2&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;mov&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edx&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;G_M32709_IG03:&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;C3&lt;/span&gt;                   &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;G_M32709_IG04:&lt;/span&gt;
       &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BC1&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;mov&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecx&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;G_M32709_IG05:&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;C3&lt;/span&gt;                   &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;disclaimercredit&quot;&gt;Disclaimer/Credit&lt;/h3&gt;

&lt;p&gt;I got the idea for doing this from the Appendix of the excellent book &lt;a href=&quot;https://www.amazon.co.uk/Shared-Source-Essentials-David-Stutz/dp/059600351X/ref=as_li_ss_tl?ie=UTF8&amp;amp;qid=1495146939&amp;amp;sr=8-1-fkmr0&amp;amp;keywords=shared+source+essentials+sscli&amp;amp;linkCode=ll1&amp;amp;tag=mattonsoft-21&amp;amp;linkId=033fb897262ad494f8f5322fd9f99f66&quot;&gt;Shared Source CLI Essentials - Amazon&lt;/a&gt;, you can also &lt;a href=&quot;http://www.newardassociates.com/files/SSCLI2.pdf&quot;&gt;download a copy of the 2nd edition&lt;/a&gt; if you don’t want to purchase the print one.&lt;/p&gt;

&lt;p&gt;In Appendix B the authors of the book reproduced the work that &lt;a href=&quot;http://www.ugidotnet.org/eventi/28/Rotor&quot;&gt;Peter Drayton&lt;/a&gt; did to add an &lt;em&gt;Exponentiation&lt;/em&gt; op-code to the SSCLI, which inspired this entire post, so thanks for that!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/05/Appendix B - Add a new CIL opcode.png&quot; alt=&quot;Appendix B - Add a new CIL opcode&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=14379557&quot;&gt;HackerNews&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/programming/comments/6c3qsh/adding_a_new_bytecode_instruction_to_the_clr/&quot;&gt;/r/programming&lt;/a&gt;&lt;/p&gt;


     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2017/05/19/Adding-a-new-Bytecode-Instruction-to-the-CLR/&quot;&gt;Adding a new Bytecode Instruction to the CLR&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
     <category term='JIT Compiler' scheme='http://www.mattwarren.org/tags#JIT Compiler'/>
   
 </entry>
 
 <entry>
   <title>Arrays and the CLR - a Very Special Relationship</title>
   <link href="http://www.mattwarren.org/2017/05/08/Arrays-and-the-CLR-a-Very-Special-Relationship/"/>
   <updated>2017-05-08T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2017/05/08/Arrays-and-the-CLR-a-Very-Special-Relationship</id>
   <content type="html">
     &lt;p&gt;A while ago I wrote about the ‘special relationship’ that &lt;a href=&quot;/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/&quot;&gt;exists between Strings and the CLR&lt;/a&gt;, well it turns out that Arrays and the CLR have an even deeper one, the type of closeness where you &lt;em&gt;hold hands on your first meeting&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.telegraph.co.uk/news/2017/01/27/theresa-may-donald-trump-prove-opposites-can-attract-uk-us-leaders/&quot;&gt;&lt;img src=&quot;/images/2017/05/Donald-Trump-Theresa-May.jpg&quot; alt=&quot;Donald Trump and  Theresa May&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;As an aside, if you like reading about &lt;strong&gt;CLR internals&lt;/strong&gt; you may find these other posts interesting:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2017/04/13/The-CLR-Thread-Pool-Thread-Injection-Algorithm/?recommended=1&quot;&gt;The CLR Thread Pool ‘Thread Injection’ Algorithm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2017/02/07/The-68-things-the-CLR-does-before-executing-a-single-line-of-your-code/?recommended=1&quot;&gt;The 68 things the CLR does before executing a single line of your code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2017/01/25/How-do-.NET-delegates-work/?recommended=1&quot;&gt;How do .NET delegates work?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2016/12/14/Why-is-Reflection-slow/?recommended=1&quot;&gt;Why is reflection slow?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2016/10/26/How-does-the-fixed-keyword-work/?recommended=1&quot;&gt;How does the ‘fixed’ keyword work?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;fundamental-to-the-common-language-runtime-clr&quot;&gt;Fundamental to the Common Language Runtime (CLR)&lt;/h2&gt;

&lt;p&gt;Arrays are such a fundamental part of the CLR that they are included in the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/dotnet-standards.md&quot;&gt;ECMA specification&lt;/a&gt;, to make it clear that the &lt;em&gt;runtime&lt;/em&gt; has to implement them:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/05/Single-Dimensions Arrays (Vectors) in the ECMA Spec.png&quot; alt=&quot;Single-Dimensions Arrays (Vectors) in the ECMA Spec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In addition, there are several &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_CIL_instructions&quot;&gt;IL (Intermediate Language) instructions&lt;/a&gt; that specifically deal with arrays:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;newarr&lt;/code&gt; &amp;lt;etype&amp;gt;
    &lt;ul&gt;
      &lt;li&gt;Create a new array with elements of type etype.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ldelem.ref&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Load the element at index onto the top of the stack as an O. The type of the O is the same as the element type of the array pushed on the CIL stack.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stelem&lt;/code&gt; &amp;lt;typeTok&amp;gt;
    &lt;ul&gt;
      &lt;li&gt;Replace array element at index with the value on the stack (also &lt;code class=&quot;highlighter-rouge&quot;&gt;stelem.i&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;stelem.i1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;stelem.i2&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;stelem.r4&lt;/code&gt; etc)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ldlen&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Push the length (of type native unsigned int) of array on the stack.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This makes sense because arrays are the building blocks of so many other data types, you want them to be available, well defined and efficient in a modern high-level language like C#. Without arrays you can’t have lists, dictionaries, queues, stacks, trees, etc, they’re all built on-top of arrays which provided low-level access to contiguous pieces of memory in a type-safe way.&lt;/p&gt;

&lt;h3 id=&quot;memory-and-type-safety&quot;&gt;Memory and Type Safety&lt;/h3&gt;

&lt;p&gt;This &lt;em&gt;memory&lt;/em&gt; and &lt;em&gt;type-safety&lt;/em&gt; is important because without it .NET couldn’t be described as a ‘managed runtime’ and you’d be left having to deal with the types of issues you get when your are writing code in a more low-level language.&lt;/p&gt;

&lt;p&gt;More specifically, the CLR provide the following protections when you are using arrays (from the section on &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/intro-to-clr.md#memory-and-type-safety&quot;&gt;Memory and Type Safety&lt;/a&gt; in the BOTR ‘Intro to the CLR’ page):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;While a GC is necessary to ensure memory safety, it is not sufficient. The GC will not prevent the program from &lt;strong&gt;indexing off the end of an array&lt;/strong&gt; or accessing a field off the end of an object (possible if you compute the field’s address using a base and offset computation). &lt;strong&gt;However, if we do prevent these cases, then we can indeed make it impossible for a programmer to create memory-unsafe programs&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;While the common intermediate language (CIL) does have operators that can fetch and set arbitrary memory (and thus violate memory safety), it also has the &lt;strong&gt;following memory-safe operators&lt;/strong&gt; and the CLR strongly encourages their use in most programming:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;Field-fetch operators (LDFLD, STFLD, LDFLDA) that fetch (read), set and take the address of a field by name.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Array-fetch operators (LDELEM, STELEM, LDELEMA)&lt;/strong&gt; that fetch, set and take the address of an array element by index. &lt;strong&gt;All arrays include a tag specifying their length&lt;/strong&gt;. This facilitates an automatic bounds check before each access.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also, from the section on &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/intro-to-clr.md#verifiable-code---enforcing-memory-and-type-safety&quot;&gt;Verifiable Code - Enforcing Memory and Type Safety&lt;/a&gt; in the same BOTR page&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In practice, the number of run-time checks needed is actually very small. They include the following operations:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;Casting a pointer to a base type to be a pointer to a derived type (the opposite direction can be checked statically)&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Array bounds checks&lt;/strong&gt; (just as we saw for memory safety)&lt;/li&gt;
    &lt;li&gt;Assigning an element in an &lt;strong&gt;array of pointers to a new (pointer) value&lt;/strong&gt;. This particular check is only required because &lt;strong&gt;CLR arrays have liberal casting rules&lt;/strong&gt; (more on that later…)&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;However you don’t get this protection for free, there’s a cost to pay:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that the need to do these checks places requirements on the runtime. In particular:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;All memory in the GC heap must be tagged with its type (so the casting operator can be implemented). This type information must be available at runtime, and it must be rich enough to determine if casts are valid (e.g., the runtime needs to know the inheritance hierarchy). In fact, the first field in every object on the GC heap points to a runtime data structure that represents its type.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;All arrays must also have their size&lt;/strong&gt; (for bounds checking).&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Arrays must have complete type information&lt;/strong&gt; about their element type.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;implementation-details&quot;&gt;Implementation Details&lt;/h2&gt;

&lt;p&gt;It turns out that large parts of the internal implementation of arrays is best described as &lt;em&gt;magic&lt;/em&gt;, this Stack Overflow &lt;a href=&quot;http://stackoverflow.com/questions/19914523/mystery-behind-system-array#comment29631862_19914523&quot;&gt;comment from Marc Gravell sums it up nicely&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Arrays are basically voodoo. Because they pre-date generics, yet must allow on-the-fly type-creation (even in .NET 1.0), they are implemented using tricks, hacks, and sleight of hand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yep that’s right, arrays were parametrised (i.e. generic) before generics even existed. That means you could create arrays such as &lt;code class=&quot;highlighter-rouge&quot;&gt;int[]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;string[]&lt;/code&gt;, long before you were able to write &lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;int&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;string&amp;gt;&lt;/code&gt;, which only became possible in .NET 2.0.&lt;/p&gt;

&lt;h3 id=&quot;special-helper-classes&quot;&gt;Special helper classes&lt;/h3&gt;

&lt;p&gt;All this &lt;em&gt;magic&lt;/em&gt; or &lt;em&gt;sleight of hand&lt;/em&gt; is made possible by 2 things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The CLR breaking all the usual type-safety rules&lt;/li&gt;
  &lt;li&gt;A special array helper class called &lt;code class=&quot;highlighter-rouge&quot;&gt;SZArrayHelper&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But first the why, why were all these tricks needed? From &lt;a href=&quot;https://blogs.msdn.microsoft.com/bclteam/2004/11/19/net-arrays-ilistt-generic-algorithms-and-what-about-stl-brian-grunkemeyer/&quot;&gt;.NET Arrays, IList&amp;lt;T&amp;gt;, Generic Algorithms, and what about STL?&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When we were designing our generic collections classes, one of the things that bothered me was how to write a generic algorithm that would work on both arrays and collections.  To drive generic programming, of course we must make arrays and generic collections as seamless as possible.  It felt that there should be a simple solution to this problem &lt;strong&gt;that meant you shouldn’t have to write the same code twice, once taking an IList&amp;lt;T&amp;gt; and again taking a T[]&lt;/strong&gt;.  The solution that dawned on me was that arrays needed to implement our generic IList.  We made arrays in V1 implement the non-generic IList, which was rather simple due to the lack of strong typing with IList and our base class for all arrays (System.Array). &lt;strong&gt;What we needed was to do the same thing in a strongly typed way for IList&amp;lt;T&amp;gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But it was only done for the common case, i.e. ‘single dimensional’ arrays:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There were some restrictions here though – &lt;strong&gt;we didn’t want to support multidimensional arrays since IList&amp;lt;T&amp;gt; only provides single dimensional accesses&lt;/strong&gt;.  Also, arrays with non-zero lower bounds are rather strange, and probably wouldn’t mesh well with IList&amp;lt;T&amp;gt;, where most people may iterate from 0 to the return from the Count property on that IList.  So, &lt;strong&gt;instead of making System.Array implement IList&amp;lt;T&amp;gt;, we made T[] implement IList&amp;lt;T&amp;gt;&lt;/strong&gt;.  Here, T[] means a single dimensional array with 0 as its lower bound (often called an SZArray internally, but I think Brad wanted to promote the term ‘vector’ publically at one point in time), and the element type is T. So Int32[] implements IList&amp;lt;Int32&amp;gt;, and String[] implements IList&amp;lt;String&amp;gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also, this comment from the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/array.cpp#L1369-L1428&quot;&gt;array source code&lt;/a&gt; sheds some further light on the reasons:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//----------------------------------------------------------------------------------
// Calls to (IList&amp;lt;T&amp;gt;)(array).Meth are actually implemented by SZArrayHelper.Meth&amp;lt;T&amp;gt;
// This workaround exists for two reasons:
//
//    - For working set reasons, we don't want insert these methods in the array 
//      hierachy in the normal way.
//    - For platform and devtime reasons, we still want to use the C# compiler to 
//      generate the method bodies.
//
// (Though it's questionable whether any devtime was saved.)
//
// ....
//----------------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So it was done for &lt;em&gt;convenience&lt;/em&gt; and &lt;em&gt;efficiently&lt;/em&gt;, as they didn’t want every instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Array&lt;/code&gt; to carry around all the code for the &lt;code class=&quot;highlighter-rouge&quot;&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;IList&amp;lt;T&amp;gt;&lt;/code&gt; implementations.&lt;/p&gt;

&lt;p&gt;This mapping takes places via a call to &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/a9b25d4aa22a1f4ad5f323f6c826e318f5a720fe/src/vm/methodtable.cpp#L6870-L6873&quot;&gt;GetActualImplementationForArrayGenericIListOrIReadOnlyListMethod(..)&lt;/a&gt;, which wins the prize for the best method name in the CoreCLR source!! It’s responsible for wiring up the corresponding method from the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/68f72dd2587c3365a9fe74d1991f93612c3bc62a/src/mscorlib/src/System/Array.cs#L2595-L2778&quot;&gt;SZArrayHelper&lt;/a&gt; class, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;IList&amp;lt;T&amp;gt;.Count&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;SZArrayHelper.Count&amp;lt;T&amp;gt;&lt;/code&gt; or if the method is part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;IEnumerator&amp;lt;T&amp;gt;&lt;/code&gt; interface, the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/68f72dd2587c3365a9fe74d1991f93612c3bc62a/src/mscorlib/src/System/Array.cs#L2718-L2776&quot;&gt;SZGenericArrayEnumerator&amp;lt;T&amp;gt;&lt;/a&gt; is used.&lt;/p&gt;

&lt;p&gt;But this has the potential to cause security holes, as it breaks the normal C# type system guarantees, specifically regarding the &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; pointer. To illustrate the problem, here’s the source code of the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/68f72dd2587c3365a9fe74d1991f93612c3bc62a/src/mscorlib/src/System/Array.cs#L2627-L2633&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Count&lt;/code&gt; property&lt;/a&gt;, note the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;JitHelpers.UnsafeCast&amp;lt;T[]&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//! Warning: &quot;this&quot; is an array, not an SZArrayHelper. See comments above&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//! or you may introduce a security hole!&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_this&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JitHelpers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnsafeCast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;]&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yikes, it has to remap &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; to be able to call &lt;code class=&quot;highlighter-rouge&quot;&gt;Length&lt;/code&gt; on the correct object!!&lt;/p&gt;

&lt;p&gt;And just in case those comments aren’t enough, there is a very strongly worded comment &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/68f72dd2587c3365a9fe74d1991f93612c3bc62a/src/mscorlib/src/System/Array.cs#L2572-L2594&quot;&gt;at the top of the class&lt;/a&gt; that further spells out the risks!!&lt;/p&gt;

&lt;p&gt;Generally all this magic is hidden from you, but occasionally it leaks out. For instance if you run the code below, &lt;code class=&quot;highlighter-rouge&quot;&gt;SZArrayHelper&lt;/code&gt; will show up in the &lt;code class=&quot;highlighter-rouge&quot;&gt;StackTrace&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TargetSite&lt;/code&gt; of properties of the &lt;code class=&quot;highlighter-rouge&quot;&gt;NotSupportedException&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someInts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someInts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Throws NotSupportedException 'Collection is read-only'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 		
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NotSupportedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;				
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{0} - {1}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TargetSite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeclaringType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nsEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TargetSite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nsEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StackTrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;removing-bounds-checks&quot;&gt;Removing Bounds Checks&lt;/h3&gt;

&lt;p&gt;The runtime also provides support for arrays in more conventional ways, the first of which is related to performance. Array bounds checks are all well and good when providing &lt;em&gt;memory-safety&lt;/em&gt;, but they have a cost, so where possible the JIT removes any checks that it knows are redundant.&lt;/p&gt;

&lt;p&gt;It does this by calculating the &lt;em&gt;range&lt;/em&gt; of values that a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop access and compares those to the actual length of the array. If it determines that there is &lt;em&gt;never&lt;/em&gt; an attempt to access an item outside the permissible bounds of the array, the run-time checks are then removed.&lt;/p&gt;

&lt;p&gt;For more information, the links below take you to the areas of the JIT source code that deal with this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/ec80b02b61839af453ce297faf4ce074edeee9da/src/jit/compiler.cpp#L4524-L4525&quot;&gt;JIT trying to remove range checks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/27b2300f790793733e501497203316ccad390e2b/src/jit/rangecheck.cpp#L201-L303&quot;&gt;RangeCheck::OptimizeRangeCheck(..)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;In turn calls &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/27b2300f790793733e501497203316ccad390e2b/src/jit/rangecheck.cpp#L1261-L1290&quot;&gt;RangeCheck::GetRange(..)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Also call &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/c06fb332e7bb77a55bda724a56b33d6094a0a042/src/jit/optimizer.cpp#L7255-L7322&quot;&gt;Compiler::optRemoveRangeCheck(..)&lt;/a&gt; to actually remove the range-check&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Really informative source code comment &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/rangecheck.h#L5-L58&quot;&gt;explaining the range check removal logic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And if you are really keen, take a look at &lt;a href=&quot;https://gist.github.com/mattwarren/a72cdb3ae427957af10635153d79555b#gistcomment-2075030&quot;&gt;this gist&lt;/a&gt; that I put together to explore the scenarios where bounds checks are ‘removed’ and ‘not removed’.&lt;/p&gt;

&lt;h3 id=&quot;allocating-an-array&quot;&gt;Allocating an array&lt;/h3&gt;

&lt;p&gt;Another task that the runtime helps with is allocating arrays, using hand-written assembly code so the methods are as optimised as possible, see:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/0ec02d7375a1aa96206fd755b02e553e075ac3ae/src/vm/i386/jitinterfacex86.cpp#L885-L1109&quot;&gt;JIT_TrialAlloc::GenAllocArray(..)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/0ec02d7375a1aa96206fd755b02e553e075ac3ae/src/vm/i386/jitinterfacex86.cpp#L1082-L1104&quot;&gt;Patching in the assembly code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;run-time-treats-arrays-differently&quot;&gt;Run-time treats arrays differently&lt;/h3&gt;

&lt;p&gt;Finally, because arrays are so intertwined with the CLR, there are lots of places in which they are dealt with as a &lt;em&gt;special-case&lt;/em&gt;. For instance &lt;a href=&quot;https://github.com/dotnet/coreclr/search?l=C%2B%2B&amp;amp;q=path%3A%2Fsrc+IsArray%28%29&amp;amp;type=&amp;amp;utf8=%E2%9C%93&quot;&gt;a search for ‘IsArray()’&lt;/a&gt; in the CoreCLR source returns over 60 hits, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The method table for an array is built differently
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/a9b25d4aa22a1f4ad5f323f6c826e318f5a720fe/src/vm/classcompat.cpp#L543-L608&quot;&gt;MethodTableBuilder::BuildInteropVTableForArray(..)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;When you call &lt;code class=&quot;highlighter-rouge&quot;&gt;ToString()&lt;/code&gt; on an array, you get special formatting, i.e. ‘System.Int32[]’ or ‘MyClass[,]’
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/typestring.cpp#L903-L937&quot;&gt;TypeString::AppendType(..)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;So yes, it’s fair to say that arrays and the CLR have a &lt;strong&gt;Very Special Relationship&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;

&lt;p&gt;As always, here are some more links for your enjoyment!!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ljw1004/csharpspec/blob/gh-pages/arrays.md&quot;&gt;CSharp Specification for Arrays&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codeproject.com/Articles/20481/NET-Type-Internals-From-a-Microsoft-CLR-Perspecti?fid=459323&amp;amp;fr=26#20&quot;&gt;.NET Type Internals - From a Microsoft CLR Perspective - ARRAYS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20081203124917/http://msdn.microsoft.com/msdnmag/issues/06/11/CLRInsideOut/&quot;&gt;CLR INSIDE OUT - Investigating Memory Issues&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.abhisheksur.com/2011/06/internals-of-array.html&quot;&gt;Internals of Array&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.abhisheksur.com/2011/09/internals-of-net-objects-and-use-of-sos.html&quot;&gt;Internals of .NET Objects and Use of SOS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://windowsdebugging.wordpress.com/2012/04/07/memorylayoutofarrays/&quot;&gt;Memory layout of .NET Arrays&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://windowsdebugging.wordpress.com/2012/04/24/memorylayoutofarraysx64/&quot;&gt;Memory Layout of .NET Arrays (x64)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/468832/why-are-multi-dimensional-arrays-in-net-slower-than-normal-arrays&quot;&gt;Why are multi-dimensional arrays in .NET slower than normal arrays?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/11163297/how-do-arrays-in-c-sharp-partially-implement-ilistt/11164210#11164210&quot;&gt;How do arrays in C# partially implement IList&amp;lt;T&amp;gt;?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/33632073/purpose-of-typedependencyattributesystem-szarrayhelper-for-ilistt-ienumer/33632407#33632407&quot;&gt;Purpose of TypeDependencyAttribute(“System.SZArrayHelper”) for IList&amp;lt;T&amp;gt;, IEnumerable&amp;lt;T&amp;gt; and ICollection&amp;lt;T&amp;gt;?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/15341882/what-kind-of-class-does-yield-return-return/15341925#15341925&quot;&gt;What kind of class does ‘yield return’ return&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://labs.developerfusion.co.uk/SourceViewer/browse.aspx?assembly=SSCLI&amp;amp;namespace=System&amp;amp;type=SZArrayHelper&quot;&gt;SZArrayHelper implemented in Shared Source CLI (SSCLI)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;array-source-code-references&quot;&gt;Array source code references&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Array.cs&quot;&gt;Array.cs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/array.cpp&quot;&gt;array.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/array.h&quot;&gt;array.h&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2017/05/08/Arrays-and-the-CLR-a-Very-Special-Relationship/&quot;&gt;Arrays and the CLR - a Very Special Relationship&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
 </entry>
 
 <entry>
   <title>The CLR Thread Pool 'Thread Injection' Algorithm</title>
   <link href="http://www.mattwarren.org/2017/04/13/The-CLR-Thread-Pool-Thread-Injection-Algorithm/"/>
   <updated>2017-04-13T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2017/04/13/The-CLR-Thread-Pool-Thread-Injection-Algorithm</id>
   <content type="html">
     &lt;p&gt;&lt;strong&gt;If you’re near London at the end of April, I’ll be speaking at &lt;a href=&quot;http://2017.progscon.co.uk/&quot;&gt;ProgSCon 2017&lt;/a&gt; on &lt;a href=&quot;http://2017.progscon.co.uk/cr3ativconference/microsoft-and-open-source-a-brave-new-world/&quot;&gt;Microsoft and Open-Source – A ‘Brave New World’&lt;/a&gt;. ProgSCon is 1-day conference, with talks &lt;a href=&quot;http://2017.progscon.co.uk/home/talks/&quot;&gt;covering an eclectic range of topics&lt;/a&gt;, you’ll learn lots!!&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;As part of a never-ending quest to explore the &lt;a href=&quot;/2017/03/23/Hitchhikers-Guide-to-the-CoreCLR-Source-Code/&quot;&gt;CoreCLR source code&lt;/a&gt; I stumbled across the intriguing titled &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/hillclimbing.cpp&quot;&gt;‘HillClimbing.cpp’&lt;/a&gt; source file. This post explains what it does and why.&lt;/p&gt;

&lt;h3 id=&quot;what-is-hill-climbing&quot;&gt;What is ‘Hill Climbing’&lt;/h3&gt;

&lt;p&gt;It turns out that ‘Hill Climbing’ is a general technique, from the Wikipedia page on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Hill_climbing&quot;&gt;Hill Climbing Algorithm&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In computer science, hill climbing is a mathematical optimization technique which belongs to the family of local search. &lt;strong&gt;It is an iterative algorithm that starts with an arbitrary solution to a problem, then attempts to find a better solution by incrementally changing a single element of the solution&lt;/strong&gt;. If the change produces a better solution, an incremental change is made to the new solution, repeating until no further improvements can be found.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But in the context of the CoreCLR, ‘Hill Climbing’ (HC) is used to control the rate at which threads are added to the Thread Pool, from the &lt;a href=&quot;https://msdn.microsoft.com/en-gb/library/ff963549.aspx&quot;&gt;MSDN page on ‘Parallel Tasks’&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Thread Injection&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;The .NET thread pool automatically manages the number of worker threads in the pool. It adds and removes threads according to built-in heuristics. The .NET thread pool has two main mechanisms for injecting threads: a starvation-avoidance mechanism that adds worker threads if it sees no progress being made on queued items and a &lt;strong&gt;hill-climbing&lt;/strong&gt; heuristic that tries to &lt;strong&gt;maximize throughput&lt;/strong&gt; while using as &lt;strong&gt;few threads as possible&lt;/strong&gt;.
…
A goal of the &lt;strong&gt;hill-climbing&lt;/strong&gt; heuristic is to improve the utilization of cores when threads are blocked by I/O or other wait conditions that stall the processor
….
&lt;strong&gt;The .NET thread pool has an opportunity to inject threads every time a work item completes or at 500 millisecond intervals, whichever is shorter&lt;/strong&gt;. The thread pool uses this opportunity to try adding threads (or taking them away), guided by feedback from previous changes in the thread count. If adding threads seems to be helping throughput, the thread pool adds more; otherwise, it reduces the number of worker threads. This technique is called the &lt;strong&gt;hill-climbing&lt;/strong&gt; heuristic.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For more specifics on what the algorithm is doing, you can read the research paper &lt;a href=&quot;https://www.researchgate.net/publication/228977836_Optimizing_concurrency_levels_in_the_net_threadpool_A_case_study_of_controller_design_and_implementation&quot;&gt;Optimizing Concurrency Levels in the .NET ThreadPool&lt;/a&gt; published by Microsoft, although it you want a brief outline of what it’s trying to achieve, this summary from the paper is helpful:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In addition the controller should have:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;&lt;strong&gt;short settling times&lt;/strong&gt; so that cumulative throughput is maximized&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;minimal oscillations&lt;/strong&gt; since changing control settings incurs overheads that reduce throughput&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;fast adaptation&lt;/strong&gt; to changes in workloads and resource characteristics.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;So reduce throughput, don’t add and then remove threads too fast, but still adapt quickly to changing work-loads, simple really!!&lt;/p&gt;

&lt;p&gt;As an aside, after reading (and re-reading) the research paper I found it interesting that a considerable amount of it was dedicated to testing, as the following excerpt shows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/04/Research paper - issues encountered - approaches used to solve them.png&quot; alt=&quot;Research paper - issues encountered - approaches used to solve them&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In fact the approach to testing was considered so important that they wrote an entire follow-up paper that discusses it, see &lt;a href=&quot;http://dl.acm.org/citation.cfm?id=1688934&quot;&gt;Configuring Resource Managers Using Model Fuzzing&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;why-is-it-needed&quot;&gt;Why is it needed?&lt;/h3&gt;

&lt;p&gt;Because, in short, just adding new threads doesn’t always increase throughput and ultimately having lots of threads has a cost. As &lt;a href=&quot;https://github.com/dotnet/corefx/issues/2329#issuecomment-146964909&quot;&gt;this comment from Eric Eilebrecht&lt;/a&gt;, one of the authors of the research paper explains:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Throttling thread creation is not only about the cost of creating a thread; it’s mainly about the cost of having a &lt;strong&gt;large number of running threads on an ongoing basis&lt;/strong&gt;. For example:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;More threads means more &lt;strong&gt;context-switching&lt;/strong&gt;, which adds CPU overhead. With a large number of threads, this can have a significant impact.&lt;/li&gt;
    &lt;li&gt;More threads means more &lt;strong&gt;active stacks&lt;/strong&gt;, which impacts data locality. The more stacks a CPU is having to juggle in its various caches, the less effective those caches are.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;The &lt;strong&gt;advantage&lt;/strong&gt; of more threads than logical processors is, of course, that we can keep the CPU busy if some of the threads are blocked, and so get more work done. But we need to be careful not to “overreact” to blocking, and end up hurting performance by having &lt;strong&gt;too many&lt;/strong&gt; threads.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or in other words, from &lt;a href=&quot;https://msdn.microsoft.com/en-us/magazine/ff960958.aspx&quot;&gt;Concurrency - Throttling Concurrency in the CLR 4.0 ThreadPool&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As opposed to what may be intuitive, concurrency control is about &lt;strong&gt;throttling&lt;/strong&gt; and &lt;strong&gt;reducing&lt;/strong&gt; the number of work items that can be run in parallel in order to improve the worker ThreadPool throughput (that is, controlling the degree of concurrency is &lt;strong&gt;preventing work from running&lt;/strong&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So the algorithm was designed with all these criteria in mind and was then tested over a large range of scenarios, to ensure it actually worked! This is why it’s often said that you should just leave the .NET ThreadPool alone, not try and tinker with it. It’s been heavily tested to work across a multiple situations and it was designed to adapt over time, so it should have you covered! (although of course, there are times &lt;a href=&quot;http://joeduffyblog.com/2006/07/08/clr-thread-pool-injection-stuttering-problems/&quot;&gt;when it doesn’t work perfectly&lt;/a&gt;!!)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-algorithm-in-action&quot;&gt;The Algorithm in Action&lt;/h2&gt;

&lt;p&gt;As the source in now available, we can actually play with the algorithm and try it out in a few scenarios to see what it does. It needs very few dependences and therefore all the relevant code is contained in the following files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/hillclimbing.cpp&quot;&gt;/src/vm/hillclimbing.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/hillclimbing.h&quot;&gt;/src/vm/hillclimbing.h&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/inc/complex.h&quot;&gt;/src/inc/complex.h&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/inc/random.h&quot;&gt;/src/inc/random.h&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(For comparison, there’s an implementation of the same algorithm in the &lt;a href=&quot;https://github.com/mono/mono/blob/master/mono/metadata/threadpool-worker-default.c&quot;&gt;Mono source code&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I have a project &lt;a href=&quot;https://github.com/mattwarren/HillClimbingClrThreadPool&quot;&gt;up on my GitHub page&lt;/a&gt; that allows you to test the hill-climbing algorithm in a self-contained console app. If you’re interested you can see the &lt;a href=&quot;https://github.com/mattwarren/HillClimbingClrThreadPool/commit/0941998aeda345aeaaa44f88e8d3b99f18e23abb&quot;&gt;changes/hacks&lt;/a&gt; I had to do to get it building, although in the end it was pretty simple! (&lt;strong&gt;Update&lt;/strong&gt; Kudos to &lt;a href=&quot;https://github.com/cklutz&quot;&gt;Christian Klutz&lt;/a&gt; who &lt;a href=&quot;https://github.com/cklutz/HillClimbing&quot;&gt;ported my self-contained app to C#&lt;/a&gt;, nice job!!)&lt;/p&gt;

&lt;p&gt;The algorithm is controlled via the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/clr-configuration-knobs.md&quot;&gt;following &lt;code class=&quot;highlighter-rouge&quot;&gt;HillClimbing_XXX&lt;/code&gt; settings&lt;/a&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Setting&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Default Value&lt;/th&gt;
      &lt;th&gt;Notes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HillClimbing_WavePeriod&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HillClimbing_TargetSignalToNoiseRatio&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;300&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HillClimbing_ErrorSmoothingFactor&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HillClimbing_WaveMagnitudeMultiplier&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;100&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HillClimbing_MaxWaveMagnitude&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;20&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HillClimbing_WaveHistorySize&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HillClimbing_Bias&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;15&lt;/td&gt;
      &lt;td&gt;The ‘cost’ of a thread.  0 means drive for increased throughput regardless of thread count; higher values bias more against higher thread counts&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HillClimbing_MaxChangePerSecond&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HillClimbing_MaxChangePerSample&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;20&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HillClimbing_MaxSampleErrorPercent&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;15&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HillClimbing_SampleIntervalLow&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HillClimbing_SampleIntervalHigh&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;200&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HillClimbing_GainExponent&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;200&lt;/td&gt;
      &lt;td&gt;The exponent to apply to the gain, times 100.  100 means to use linear gain, higher values will enhance large moves and damp small ones&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Because I was using the code in a self-contained console app, I just &lt;a href=&quot;https://github.com/mattwarren/HillClimbingClrThreadPool/blob/a99db86a48309d569b221194ede0392d14eaa243/hillclimbing.cpp#L54-L91&quot;&gt;hard-coded the default values&lt;/a&gt; into the source, but in the CLR it &lt;em&gt;appears&lt;/em&gt; that you can modify these values at runtime.&lt;/p&gt;

&lt;h3 id=&quot;working-with-the-hill-climbing-code&quot;&gt;Working with the Hill Climbing code&lt;/h3&gt;

&lt;p&gt;There are several things I discovered when implementing a simple test app that works with the algorithm:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The calculation is triggered by calling the function &lt;code class=&quot;highlighter-rouge&quot;&gt;HillClimbingInstance.Update(currentThreadCount, sampleDuration, numCompletions, &amp;amp;threadAdjustmentInterval)&lt;/code&gt; and the return value is the new ‘maximum thread count’ that the algorithm is proposing.&lt;/li&gt;
  &lt;li&gt;It calculates the desired number of threads based on the ‘current throughput’, which is the ‘# of tasks completed’ (&lt;code class=&quot;highlighter-rouge&quot;&gt;numCompletions&lt;/code&gt;) during the current time-period (&lt;code class=&quot;highlighter-rouge&quot;&gt;sampleDuration&lt;/code&gt; in seconds).&lt;/li&gt;
  &lt;li&gt;It also takes the current thread count (&lt;code class=&quot;highlighter-rouge&quot;&gt;currentThreadCount&lt;/code&gt;) into consideration.&lt;/li&gt;
  &lt;li&gt;The core calculations (excluding error handling and house-keeping) are &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e5faef44cac6e86b12b3b586742183293bdd34a7/src/vm/hillclimbing.cpp#L162-L288&quot;&gt;only just over 100 LOC&lt;/a&gt;, so it’s not too hard to follow.&lt;/li&gt;
  &lt;li&gt;It works on the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e5faef44cac6e86b12b3b586742183293bdd34a7/src/vm/hillclimbing.cpp#L162&quot;&gt;basis of ‘transitions’&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;HillClimbingStateTransition&lt;/code&gt;), first &lt;code class=&quot;highlighter-rouge&quot;&gt;Warmup&lt;/code&gt;, then &lt;code class=&quot;highlighter-rouge&quot;&gt;Stabilizing&lt;/code&gt; and will only recommend a new value once it’s moved into  the &lt;code class=&quot;highlighter-rouge&quot;&gt;ClimbingMove&lt;/code&gt; state.&lt;/li&gt;
  &lt;li&gt;The real .NET Thread Pool only increases the thread-count by one thread every 500 milliseconds. It keeps doing this until the ‘# of threads’ has reached the amount that the hill-climbing algorithm suggests. See &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e5994fa5507a5f08058193ff26dc3698cd2e6444/src/vm/win32threadpool.h#L1085-L1101&quot;&gt;ThreadpoolMgr::ShouldAdjustMaxWorkersActive()&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e5faef44cac6e86b12b3b586742183293bdd34a7/src/vm/win32threadpool.cpp#L910-L992&quot;&gt;ThreadpoolMgr::AdjustMaxWorkersActive()&lt;/a&gt; for the code that handles this.&lt;/li&gt;
  &lt;li&gt;If it hasn’t got enough samples to do a ‘statistically significant’ calculation this algorithm will indicate this via the &lt;code class=&quot;highlighter-rouge&quot;&gt;threadAdjustmentInterval&lt;/code&gt; variable. This means that you should not call &lt;code class=&quot;highlighter-rouge&quot;&gt;HillClimbingInstance.Update(..)&lt;/code&gt; until another &lt;code class=&quot;highlighter-rouge&quot;&gt;threadAdjustmentInterval&lt;/code&gt; milliseconds have elapsed. (link to &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e5faef44cac6e86b12b3b586742183293bdd34a7/src/vm/hillclimbing.cpp#L105-L134&quot;&gt;source code that calculates this&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;The current thread count is only &lt;strong&gt;decreased&lt;/strong&gt; when threads complete their current task. At that point the current count is compared to the desired amount and if necessary a thread is ‘retired’&lt;/li&gt;
  &lt;li&gt;The algorithm with only returns values that respect the limits specified by &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.threading.threadpool.setminthreads(v=vs.110).aspx&quot;&gt;ThreadPool.SetMinThreads(..)&lt;/a&gt; and &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.threading.threadpool.setmaxthreads(v=vs.110).aspx&quot;&gt;ThreadPool.SetMaxThreads(..)&lt;/a&gt; (link to the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e5faef44cac6e86b12b3b586742183293bdd34a7/src/vm/hillclimbing.cpp#L301-L305&quot;&gt;code that handles this&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;In addition, it will only recommend increasing the thread count if the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e5faef44cac6e86b12b3b586742183293bdd34a7/src/vm/hillclimbing.cpp#L271-L275&quot;&gt;CPU Utilization is below 95%&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First lets look at the graphs that were &lt;strong&gt;published in the research paper&lt;/strong&gt; from Microsoft (&lt;a href=&quot;https://www.researchgate.net/publication/228977836_Optimizing_concurrency_levels_in_the_net_threadpool_A_case_study_of_controller_design_and_implementation&quot;&gt;Optimizing Concurrency Levels in the .NET ThreadPool&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/04/Hill Climbing v Old Threadpool Algorithm.png&quot;&gt;&lt;img src=&quot;/images/2017/04/Hill Climbing v Old Threadpool Algorithm.png&quot; alt=&quot;Hill Climbing v Old Threadpool Algorithm&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They clearly show the thread-pool adapting the number of threads (up and down) as the throughput changes, so it appears the algorithm is doing what it promises.&lt;/p&gt;

&lt;p&gt;Now for a similar image using the &lt;strong&gt;self-contained test app I wrote&lt;/strong&gt;. Now, my test app only &lt;a href=&quot;https://github.com/mattwarren/HillClimbingClrThreadPool/blob/fcb4bd27049b9cf8b5ddf2e5037611e36516642e/program.cpp#L63-L145&quot;&gt;pretends to add/remove threads&lt;/a&gt; based on the results for the Hill Climbing algorithm, so it’s only an approximation of the real behaviour, but it does provide a nice way to see it in action outside of the CLR.&lt;/p&gt;

&lt;p&gt;In this simple scenario, the work-load that we are asking the thread-pool to do is just moving up and then down (click for full-size image):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/04/results-smooth.png&quot;&gt;&lt;img src=&quot;/images/2017/04/results-smooth.png&quot; alt=&quot;Output from self-contained test app - smooth&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we’ll look at what the algorithm does in a more noisy scenario, here the current ‘work load’ randomly jumps around, rather than smoothly changing:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/04/results-random.png&quot;&gt;&lt;img src=&quot;/images/2017/04/results-random.png&quot; alt=&quot;Output from self-contained test app - random&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So with a combination of a very detailed &lt;a href=&quot;https://msdn.microsoft.com/en-gb/library/ff963549.aspx&quot;&gt;MSDN article&lt;/a&gt;, a easy-to-read &lt;a href=&quot;https://www.researchgate.net/publication/228977836_Optimizing_concurrency_levels_in_the_net_threadpool_A_case_study_of_controller_design_and_implementation&quot;&gt;research paper&lt;/a&gt; and most significantly having the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/hillclimbing.cpp&quot;&gt;source code available&lt;/a&gt;, we are able to get an understanding of what the .NET Thread Pool is doing ‘under-the-hood’!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/magazine/ff960958.aspx&quot;&gt;Concurrency - Throttling Concurrency in the CLR 4.0 ThreadPool&lt;/a&gt; (I recommend reading this article &lt;strong&gt;before&lt;/strong&gt; reading the research papers)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.researchgate.net/publication/228977836_Optimizing_concurrency_levels_in_the_net_threadpool_A_case_study_of_controller_design_and_implementation&quot;&gt;Optimizing Concurrency Levels in the .NET ThreadPool: A case study of controller design and implementation&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;direct link &lt;a href=&quot;https://www.researchgate.net/profile/Joseph_Hellerstein2/publication/228977836_Optimizing_concurrency_levels_in_the_net_threadpool_A_case_study_of_controller_design_and_implementation/links/0c96052d441508cb45000000/Optimizing-concurrency-levels-in-the-net-threadpool-A-case-study-of-controller-design-and-implementation.pdf&quot;&gt;to PDF file&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dl.acm.org/citation.cfm?id=1688934&quot;&gt;Configuring Resource Managers Using Model Fuzzing: A Case Study of the .NET Thread Pool&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;direct link &lt;a href=&quot;http://webcourse.cs.technion.ac.il/236635/Winter2009-2010/hw/WCFiles/2.pdf&quot;&gt;to PDF file&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-gb/library/ff963549.aspx&quot;&gt;MSDN page on ‘Parallel Tasks’&lt;/a&gt; (see section on ‘Thread Injection’)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.google.com/patents/US20100083272&quot;&gt;Patent US20100083272 - Managing pools of dynamic resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Shows/Going+Deep/Erika-Parsons-and-Eric-Eilebrecht--CLR-4-Inside-the-new-Threadpool&quot;&gt;Erika Parsons and Eric Eilebrecht - CLR 4 - Inside the Thread Pool - Channel 9&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.danielmoth.com/Blog/New-And-Improved-CLR-4-Thread-Pool-Engine.aspx&quot;&gt;New and Improved CLR 4 Thread Pool Engine&lt;/a&gt; (Work-stealing and Local Queues)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://aviadezra.blogspot.co.uk/2009/06/net-clr-thread-pool-work.html&quot;&gt;.NET CLR Thread Pool Internals&lt;/a&gt; (compares the new Hill Climbing algorithm, to the previous algorithm used in the Legacy Thread Pool)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://joeduffyblog.com/2006/07/08/clr-thread-pool-injection-stuttering-problems/&quot;&gt;CLR thread pool injection, stuttering problems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://joeduffyblog.com/2007/03/04/why-the-clr-20-sp1s-threadpool-default-max-thread-count-was-increased-to-250cpu/&quot;&gt;Why the CLR 2.0 SP1’s threadpool default max thread count was increased to 250/CPU&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/1754&quot;&gt;Use a more dependable policy for thread pool thread injection&lt;/a&gt; (CoreCLR GitHub Issue)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corefx/issues/2329&quot;&gt;Use a more dependable policy for thread pool thread injection&lt;/a&gt; (CoreFX GitHub Issue)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/JonCole/e65411214030f0d823cb&quot;&gt;ThreadPool Growth: Some Important Details&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codeproject.com/articles/3813/net-s-threadpool-class-behind-the-scenes&quot;&gt;.NET’s ThreadPool Class - Behind The Scenes&lt;/a&gt; (Based on SSCLI source, not CoreCLR)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chabster.blogspot.co.uk/2013/04/clr-execution-context.html&quot;&gt;CLR Execution Context&lt;/a&gt; (in Russian, but Google Translate does a reasonable job)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/benaadams/ThreadPoolTaskTesting&quot;&gt;Thread Pool + Task Testing (by Ben Adams)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://belliottsmith.com/injector/&quot;&gt;The Injector: A new Executor for Java&lt;/a&gt; (an improved thread-injector for the Java Thread Pool)&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=14111369&quot;&gt;Hacker News&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/programming/comments/655xg2/the_clr_thread_pool_thread_injection_algorithm/&quot;&gt;/r/programming&lt;/a&gt;&lt;/p&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2017/04/13/The-CLR-Thread-Pool-Thread-Injection-Algorithm/&quot;&gt;The CLR Thread Pool 'Thread Injection' Algorithm&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='Open Source' scheme='http://www.mattwarren.org/tags#Open Source'/>
   
     <category term='Research' scheme='http://www.mattwarren.org/tags#Research'/>
   
 </entry>
 
 <entry>
   <title>The .NET IL Interpreter</title>
   <link href="http://www.mattwarren.org/2017/03/30/The-.NET-IL-Interpreter/"/>
   <updated>2017-03-30T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2017/03/30/The-.NET-IL-Interpreter</id>
   <content type="html">
     &lt;p&gt;Whilst writing a &lt;a href=&quot;/2017/03/23/Hitchhikers-Guide-to-the-CoreCLR-Source-Code/&quot;&gt;previous blog post&lt;/a&gt; I stumbled across the .NET Interpreter, tucked away in the source code. Although, it I’d made even the smallest amount of effort to look for it, I’d have easily found it via the &lt;a href=&quot;https://github.com/dotnet/coreclr/find/master&quot;&gt;&lt;em&gt;GitHub ‘magic’ file search&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/03/GitHub file search for &amp;#39;Interpreter&amp;#39;.png&quot; alt=&quot;GitHub file search for 'Interpreter'&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;usage-scenarios&quot;&gt;Usage Scenarios&lt;/h3&gt;

&lt;p&gt;Before we look at how to use it and what it does, it’s worth pointing out that the Interpreter is not really meant for production code. As far as I can tell, its main purpose is to allow you to get the CLR up and running on a new CPU architecture. Without the interpreter you wouldn’t be able to test &lt;em&gt;any&lt;/em&gt; C# code until you had a fully functioning JIT that could emit machine code for you. For instance see &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/8594&quot;&gt;‘[ARM32/Linux] Initial bring up of FEATURE_INTERPRETER’&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/commit/8c4e60054ddb42298f3eebaf20c970d665474ae3&quot;&gt;‘[aarch64] Enable the interpreter on linux as well&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also it doesn’t have a few key features, most notable debugging support, that is you can’t debug through C# code that has been interpreted, although you can of course debug the interpreter itself. From &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/10478&quot;&gt;‘Tiered Compilation step 1’&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;…. - the interpreter is not in good enough shape to run production code as-is. There are also some significant issues if you want debugging and profiling tools to work (which we do).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can see an example of this in &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/34&quot;&gt;‘Interpreter: volatile ldobj appears to have incorrect semantics?’&lt;/a&gt; (thanks to &lt;a href=&quot;https://www.reddit.com/r/programming/comments/62hcde/the_c_interpreter/dfn3ycc/&quot;&gt;alexrp&lt;/a&gt; for telling me about this issue). There is also a fair amount of &lt;code class=&quot;highlighter-rouge&quot;&gt;TODO&lt;/code&gt; &lt;a href=&quot;https://gist.github.com/mattwarren/a7e567c3aacd1c85da86206ea729c66f&quot;&gt;comments in the code&lt;/a&gt;, although I haven’t verified what (if any) specific C# code breaks due to the missing functionality.&lt;/p&gt;

&lt;p&gt;However, I think another really useful scenario for the Interpreter is to help you learn about the inner workings of the CLR. It’s &lt;em&gt;only&lt;/em&gt; 8,000 lines long, but it’s all in one file and most significantly it’s written in C++. The code that the CLR/JIT uses when compiling &lt;em&gt;for real&lt;/em&gt; is in multiple several files (the JIT on it’s own is over 200,000 L.O.C, spread across 100’s of files) and there are large amounts hand-written written in &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/amd64&quot;&gt;raw assembly&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In theory the Interpreter should work in the same way as the &lt;em&gt;full&lt;/em&gt; runtime, albeit not as optimised. This means that it much simpler and those of us who aren’t CLR and/or assembly experts can have a chance of working out what’s going on!&lt;/p&gt;

&lt;h2 id=&quot;enabling-the-interpreter&quot;&gt;Enabling the Interpreter&lt;/h2&gt;

&lt;p&gt;The Interpreter is disabled by default, so you have to &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/Documentation#build-coreclr-from-source&quot;&gt;build the CoreCLR from source&lt;/a&gt; to make it work (it used to be the &lt;a href=&quot;https://github.com/dotnet/coreclr/commit/8a47eafa69614589eb86bbdf0c2c36aa690c1b15&quot;&gt;fallback for ARM64&lt;/a&gt; but that’s no longer the case), here’s the diff of the changes you need to make:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;--- a/src/inc/switches.h
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/src/inc/switches.h
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -233,5 +233,8 @@
&lt;/span&gt; #define FEATURE_STACK_SAMPLING
 #endif // defined (ALLOW_SXS_JIT)

&lt;span class=&quot;gi&quot;&gt;+// Let's test the .NET Interpreter!!
+#define FEATURE_INTERPRETER
+
&lt;/span&gt; #endif // !defined(CROSSGEN_COMPILE)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You also need to enable some environment variables, the ones that I used are in the table below. For the full list, take a look at &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/clr-configuration-knobs.md&quot;&gt;Host Configuration Knobs&lt;/a&gt; and search for ‘Interpreter’.&lt;/p&gt;

&lt;span class=&quot;compactTable&quot;&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Interpret&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Selectively uses the interpreter to execute the specified methods&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;InterpreterDoLoopMethods&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;If set, don’t check for loops, start by interpreting &lt;em&gt;all&lt;/em&gt; methods&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;InterpreterPrintPostMortem&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Prints summary information about the execution to the console&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;DumpInterpreterStubs&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Prints all interpreter stubs that are created to the console&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;TraceInterpreterEntries&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Logs entries to interpreted methods to the console&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;TraceInterpreterIL&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Logs individual instructions of interpreted methods to the console&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;TraceInterpreterVerbose&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Logs interpreter progress with detailed messages to the console&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;TraceInterpreterJITTransition&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Logs when the interpreter determines a method should be JITted&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;/span&gt;

&lt;p&gt;To test out the Interpreter, I will be using the code below:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TryParse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stopwatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StartNew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Completed {0,10:N0} iterations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Performed {0:N0} iterations, max);
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Took {0:N0} msecs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElapsedMilliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which on my machine, gives the following results for &lt;code class=&quot;highlighter-rouge&quot;&gt;100,000&lt;/code&gt; iterations:&lt;/p&gt;

&lt;span class=&quot;compactTable&quot;&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Run&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Compiled (msecs)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Interpreted (msecs)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4,393&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4,089&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4,416&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;/span&gt;

&lt;p&gt;So yeah, you don’t want to be using the interpreter for any performance sensitive code!!&lt;/p&gt;

&lt;h3 id=&quot;diagnostic-output&quot;&gt;Diagnostic Output&lt;/h3&gt;

&lt;p&gt;In addition, a diagnostic output is produced. Note, this is from a single iteration of the loop, otherwise it becomes too verbose to read.&lt;/p&gt;

&lt;div class=&quot;language-make highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;Generating interpretation stub (# 1 = 0x1, hash = 0x91b7d02e) for ConsoleApplication.Program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Main.&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Skipping ConsoleApplication.Program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.cctor&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Entering method #1 (= 0x1)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConsoleApplication.Program:Main(class).&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
         &lt;span class=&quot;nl&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;nf&quot;&gt;class: 0x0000000002C50568 (System.String[]) [...]&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;START 1, ConsoleApplication.Program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Main(class)&lt;/span&gt;
     &lt;span class=&quot;nl&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nop&lt;/span&gt;
   &lt;span class=&quot;nl&quot;&gt;0x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Skipping ConsoleApplication.Stopwatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.cctor&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Skipping DomainBoundILStubClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IL_STUB_PInvoke&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Skipping ConsoleApplication.Stopwatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StartNew&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Skipping ConsoleApplication.Stopwatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.ctor&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Skipping ConsoleApplication.Stopwatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Reset&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Skipping ConsoleApplication.Stopwatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Start&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Skipping ConsoleApplication.Stopwatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetTimestamp&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;Returning to method ConsoleApplication.Program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Main(class)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; stub num 1.&lt;/span&gt;
   &lt;span class=&quot;nl&quot;&gt;0x6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stloc.0&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;loc0   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;nf&quot;&gt;class: 0x0000000002C50580 (ConsoleApplication.Stopwatch) [...]&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;loc1   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;nf&quot;&gt;int: 0&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;loc2   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;nf&quot;&gt;bool: false&lt;/span&gt;
   &lt;span class=&quot;nl&quot;&gt;0x7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ldc.i4.1&lt;/span&gt;
   &lt;span class=&quot;nl&quot;&gt;0x8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stloc.1&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;loc0   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;nf&quot;&gt;class: 0x0000000002C50580 (ConsoleApplication.Stopwatch) [...]&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;loc1   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;nf&quot;&gt;int: 1&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;loc2   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;nf&quot;&gt;bool: false&lt;/span&gt;
   &lt;span class=&quot;nl&quot;&gt;0x9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;br.s&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x27&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ldloc.1&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x28&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ldc.i4.2&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x29&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clt&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x2b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stloc.2&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;loc0   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;nf&quot;&gt;class: 0x0000000002C50580 (ConsoleApplication.Stopwatch) [...]&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;loc1   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;nf&quot;&gt;int: 1&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;loc2   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;nf&quot;&gt;bool: true&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x2c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ldloc.2&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x2d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;brtrue.s&lt;/span&gt;
   &lt;span class=&quot;nl&quot;&gt;0xb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nop&lt;/span&gt;
   &lt;span class=&quot;nl&quot;&gt;0xc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ldstr&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ldloc.1&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;box&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x17&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;Returning to method ConsoleApplication.Program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Main(class)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; stub num 1.&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x1c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;Completed&lt;/span&gt;          &lt;span class=&quot;err&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;iterations&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;Returning to method ConsoleApplication.Program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Main(class)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; stub num 1.&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x21&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nop&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x22&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nop&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ldloc.1&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ldc.i4.1&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x25&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x26&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stloc.1&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;loc0   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;nf&quot;&gt;class: 0x0000000002C50580 (ConsoleApplication.Stopwatch) [...]&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;loc1   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;nf&quot;&gt;int: 2&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;loc2   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;nf&quot;&gt;bool: true&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x27&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ldloc.1&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x28&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ldc.i4.2&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x29&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clt&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x2b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stloc.2&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;loc0   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;nf&quot;&gt;class: 0x0000000002C50580 (ConsoleApplication.Stopwatch) [...]&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;loc1   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;nf&quot;&gt;int: 2&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;loc2   &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;nf&quot;&gt;bool: false&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x2c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ldloc.2&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x2d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;brtrue.s&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x2f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ldloc.0&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;callvirt&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Skipping ConsoleApplication.Stopwatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Stop&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;Returning to method ConsoleApplication.Program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Main(class)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; stub num 1.&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x35&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nop&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x36&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ldstr&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x3b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ldloc.0&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x3c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;callvirt&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Skipping ConsoleApplication.Stopwatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_ElapsedMilliseconds&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Skipping ConsoleApplication.Stopwatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetElapsedDateTimeTicks&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Skipping ConsoleApplication.Stopwatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetRawElapsedTicks&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;Returning to method ConsoleApplication.Program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Main(class)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; stub num 1.&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x41&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;box&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x46&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;Returning to method ConsoleApplication.Program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Main(class)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; stub num 1.&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x4b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;Took&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;33&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;msecs&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;Returning to method ConsoleApplication.Program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Main(class)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; stub num 1.&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nop&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;0x51&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So you can clearly see the interpreter in action, executing the individual IL instructions and showing the current values of any local variables as it goes along. Then, once the entire program has run, you also get some nice summary statistics (this time from a full-run, with &lt;code class=&quot;highlighter-rouge&quot;&gt;100,000&lt;/code&gt; iterations):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IL instruction profiling:

Instructions (24000085 total, 20000083 1-byte):
Instruction  |   execs   |       % |   cum %
-------------------------------------------
     ldloc.1 |   3000011 |  12.50% |  12.50%
         ceq |   3000001 |  12.50% |  25.00%
    ldc.i4.0 |   3000001 |  12.50% |  37.50%
         nop |   2000013 |   8.33% |  45.83%
     stloc.2 |   2000001 |   8.33% |  54.17%
      ldc.i4 |   2000001 |   8.33% |  62.50%
    brtrue.s |   2000001 |   8.33% |  70.83%
     ldloc.2 |   2000001 |   8.33% |  79.17%
    ldc.i4.1 |   1000001 |   4.17% |  83.33%
         cgt |   1000001 |   4.17% |  87.50%
     stloc.1 |   1000001 |   4.17% |  91.67%
         rem |   1000000 |   4.17% |  95.83%
         add |   1000000 |   4.17% | 100.00%
        call |        23 |   0.00% | 100.00%
       ldstr |        11 |   0.00% | 100.00%
         box |        11 |   0.00% | 100.00%
     ldloc.0 |         2 |   0.00% | 100.00%
    callvirt |         2 |   0.00% | 100.00%
        br.s |         1 |   0.00% | 100.00%
     stloc.0 |         1 |   0.00% | 100.00%
         ret |         1 |   0.00% | 100.00%                                        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;main-sections-of-the-interpreter-code&quot;&gt;Main sections of the Interpreter code&lt;/h2&gt;

&lt;p&gt;Now we’ve seen it in action, let’s take a look at the code within the Interpreter and see &lt;strong&gt;how&lt;/strong&gt; it works&lt;/p&gt;

&lt;h3 id=&quot;top-level-dispatcher&quot;&gt;Top-level dispatcher&lt;/h3&gt;

&lt;p&gt;At the heart of the Interpreter is a &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L2073-L3261&quot;&gt;giant switch statement&lt;/a&gt; (in &lt;code class=&quot;highlighter-rouge&quot;&gt;Interpreter::ExecuteMethod(..)&lt;/code&gt;), that is almost 1,200 lines long! In it you’ll find &lt;em&gt;lots&lt;/em&gt; of code like this:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_ILCodePtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CEE_NOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m_ILCodePtr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CEE_BREAK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// TODO: interact with the debugger?
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;m_ILCodePtr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CEE_LDARG_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LdArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CEE_LDARG_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LdArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In total, there are 199 &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; statements, corresponding to all the available CLR &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_CIL_instructions&quot;&gt;Intermediate Language (IL) op-codes&lt;/a&gt;, in all their different combinations, for instance &lt;code class=&quot;highlighter-rouge&quot;&gt;CEE_LDC_??&lt;/code&gt;, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;CEE_LDC_I4&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CEE_LDC_I8&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CEE_LDC_R4&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CEE_LDC_R8&lt;/code&gt;. The large majority of the &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; statements just call out to another function that does the actual work, although there are some exceptions, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L2268-L2391&quot;&gt;such as &lt;code class=&quot;highlighter-rouge&quot;&gt;CEE_RET&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;method-calls&quot;&gt;Method calls&lt;/h3&gt;

&lt;p&gt;The other task that takes up lots of code in the interpreter is handling method calls, over 2,500 L.O.C in total! This is spread across several methods, each doing a particular part of the work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L8965-L10027&quot;&gt;void Interpreter::DoCallWork(..)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CALL&lt;/code&gt; &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.call%28v=vs.110%29.aspx?f=255&amp;amp;MSPPError=-2147217396&quot;&gt;Calls the method indicated by the passed method descriptor&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CALLVIRT&lt;/code&gt; &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.callvirt%28v=vs.110%29.aspx?f=255&amp;amp;MSPPError=-2147217396&quot;&gt;Calls a late-bound method on an object, pushing the return value onto the evaluation stack.&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Also via &lt;code class=&quot;highlighter-rouge&quot;&gt;Interpreter::NewObj()&lt;/code&gt;, i.e the &lt;code class=&quot;highlighter-rouge&quot;&gt;NEWOBJ&lt;/code&gt; IL op-code&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L10032-L10427&quot;&gt;void Interpreter::CallI()&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CALLI&lt;/code&gt; &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.calli%28v=vs.110%29.aspx?f=255&amp;amp;MSPPError=-2147217396&quot;&gt;Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L660-L1600&quot;&gt;CorJitResult Interpreter::GenerateInterpreterStub(..)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;The external entry point, i.e. the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1c4fda612e8a4f0d48346c477d058fa3fddf514e/src/vm/jitinterface.cpp#L11969-L12012&quot;&gt;JIT inserts a stub to this method&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Also called via &lt;code class=&quot;highlighter-rouge&quot;&gt;Interpreter::InterpretMethodBody(..)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Actually emits &lt;strong&gt;assembly code&lt;/strong&gt;!!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L195-L424&quot;&gt;void InterpreterMethodInfo::InitArgInfo(..)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Called via &lt;code class=&quot;highlighter-rouge&quot;&gt;Interpreter::GenerateInterpreterStub(..)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In summary, this work involves &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/virtual-stub-dispatch.md&quot;&gt;dynamically generating stubs&lt;/a&gt; and ensuring that method arguments are in the right registers (hence the assembly code). It handles virtual methods, static and instance calls, delegates, intrinsics and probably a few other scenarios as well! In addition, if the method being called needs to be interpreted, it also has to make sure that happens.&lt;/p&gt;

&lt;h3 id=&quot;creating-objects-and-arrays&quot;&gt;Creating objects and arrays&lt;/h3&gt;

&lt;p&gt;The interpreter needs to handle some of the key functionality of a runtime, that is creating and initialising objects. To do this it has to call into the GC, before finally calling the constructor:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L5833-L6012&quot;&gt;void Interpreter::NewObj()&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NEWOBJ&lt;/code&gt; &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.newobj%28v=vs.110%29.aspx?f=255&amp;amp;MSPPError=-2147217396&quot;&gt;Creates a new object or a new instance of a value type, pushing an object reference (type O) onto the evaluation stack&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L6015-L6085&quot;&gt;void Interpreter::NewArr()&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NEWARR&lt;/code&gt; &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.newarr%28v=vs.110%29.aspx?f=255&amp;amp;MSPPError=-2147217396&quot;&gt;Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L5761-L5811&quot;&gt;void Interpreter::InitObj()&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;INITOBJ&lt;/code&gt; &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.initobj%28v=vs.110%29.aspx?f=255&amp;amp;MSPPError=-2147217396&quot;&gt;Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;boxing-and-unboxing&quot;&gt;Boxing and Unboxing&lt;/h3&gt;

&lt;p&gt;Another large chuck of code is dedicated to boxing/unboxing, that is converting ‘value types’ (&lt;code class=&quot;highlighter-rouge&quot;&gt;structs&lt;/code&gt;) into &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; references when needed. The .NET IL provides specific op-codes to handle this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L8497-L8562&quot;&gt;void Interpreter::Box()&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BOX&lt;/code&gt; &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.box%28v=vs.110%29.aspx?f=255&amp;amp;MSPPError=-2147217396&quot;&gt;Converts a value type to an object reference (type O)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L8602-L8693&quot;&gt;void Interpreter::Unbox()&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UNBOX&lt;/code&gt; &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.unbox%28v=vs.110%29.aspx?f=255&amp;amp;MSPPError=-2147217396&quot;&gt;Converts the boxed representation of a value type to its unboxed form&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L8747-L8871&quot;&gt;void Interpreter::UnboxAny()&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UNBOX_ANY&lt;/code&gt; &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.unbox_any%28v=vs.110%29.aspx?f=255&amp;amp;MSPPError=-2147217396&quot;&gt;Converts the boxed representation of a type specified in the instruction to its unboxed form&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;loading-and-storing-data&quot;&gt;Loading and Storing data&lt;/h3&gt;

&lt;p&gt;That is, reading/writing fields in an object or elements in an array:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L7533-L7690&quot;&gt;void Interpreter::StFld()&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;STFLD&lt;/code&gt; &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.stfld(v=vs.110).aspx&quot;&gt;Replaces the value stored in the field of an object reference or pointer with a new value&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L8246-L8385&quot;&gt;void Interpreter::StElem()&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;STELEM&lt;/code&gt; &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.stelem(v=vs.110).aspx&quot;&gt;Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L7248-L7477&quot;&gt;void Interpreter::LdFld(FieldDesc* fldIn)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LDFLD&lt;/code&gt; &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.ldfld(v=vs.110).aspx&quot;&gt;Finds the value of a field in the object whose reference is currently on the evaluation stack&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L8120-L8243&quot;&gt;void Interpreter::LdElem()&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LDELEM&lt;/code&gt; &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.ldelem(v=vs.110).aspx&quot;&gt;Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;other-specific-il-op-codes&quot;&gt;Other Specific IL Op Codes&lt;/h3&gt;

&lt;p&gt;There is also a significant amount of code (over 1,000 lines) that just deals with low-level operations, that is ‘comparisions’, ‘branching’ and ‘basic arithmetic’:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L6714-L7127&quot;&gt;INT32 Interpreter::CompareOpRes(..)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CEQ&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CGT&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CGT_UN&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CLT&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;CLT_UN&lt;/code&gt; called via &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L6694-L6710&quot;&gt;Interpreter::CompareOp()&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BEQ&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BGE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BGT&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BLE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BLT&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BNE_UN&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BGE_UN&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BGT_UN&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BLE_UN&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BLT_UN&lt;/code&gt; called via &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L7199-L7245&quot;&gt;Interpreter::BrOnComparison()&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L4353-L4608&quot;&gt;void Interpreter::BinaryArithOp()&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SUB&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;MUL&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DIV&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;REM&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;in turn calls &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.hpp#L266-L313&quot;&gt;Interpreter::BinaryArithOpWork(..)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L4612-L4823&quot;&gt;void Interpreter::BinaryArithOvfOp()&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ADD_OVF&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD_OVF_UN&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;MUL_OVF&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;MUL_OVF_UN&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SUB_OVF&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SUB_OVF_UN&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;in turn calls &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L4825-L4866&quot;&gt;Interpreter::BinaryArithOvfOpWork(..)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;working-with-the-garbage-collector-gc&quot;&gt;Working with the Garbage Collector (GC)&lt;/h3&gt;

&lt;p&gt;In addition, the interpreter has to provide the GC with the information it needs. This happens when the GC calls &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L3667-L3762&quot;&gt;Interpreter::GCScanRoots(..)&lt;/a&gt;, with additional work talking place in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/48e244855c98c6f280c986d0981238f403a49ff3/src/vm/interpreter.cpp#L3765-L3795&quot;&gt;Interpreter::GCScanRootAtLoc(..)&lt;/a&gt;. Very simply the interpreter has to let the GC know about any ‘root’ objects that are currently ‘live’. This includes static variables and any local variables in the function that is currently executing.&lt;/p&gt;

&lt;p&gt;When the interpreter locates a ‘root’ object, it notifies the GC via a callback (&lt;code class=&quot;highlighter-rouge&quot;&gt;pf(..)&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Interpreter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GCScanRootAtLoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InterpreterType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;promote_func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ScanContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pinningRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToCorInfoType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CORINFO_TYPE_CLASS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CORINFO_TYPE_STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pinningRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GC_CALL_PINNED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;integration-with-the-virtual-machine-vm&quot;&gt;Integration with the Virtual Machine (VM)&lt;/h2&gt;

&lt;p&gt;Finally, whilst the Interpreter is fairly self-contained, there are times where it needs to work with the rest of the runtime&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Run-time is responsible for &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1c4fda612e8a4f0d48346c477d058fa3fddf514e/src/vm/ceemain.cpp#L816-L818&quot;&gt;starting&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1c4fda612e8a4f0d48346c477d058fa3fddf514e/src/vm/ceemain.cpp#L1824-L1826&quot;&gt;stopping&lt;/a&gt; the interpreter&lt;/li&gt;
  &lt;li&gt;The JIT &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1c4fda612e8a4f0d48346c477d058fa3fddf514e/src/vm/jitinterface.cpp#L11969-L12012&quot;&gt;wires up interpreter stubs&lt;/a&gt; or uses them as a fall-back if JIT compilation fails. In addition the JIT ‘pre-stubs’ allow for interpreted methods &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1c4fda612e8a4f0d48346c477d058fa3fddf514e/src/vm/prestub.cpp#L255-L655&quot;&gt;when calling the JIT itself&lt;/a&gt; and when &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1c4fda612e8a4f0d48346c477d058fa3fddf514e/src/vm/prestub.cpp#L1146-L1633&quot;&gt;the ‘pre-stub’ is executed&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Stack-walking &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/stackwalk.cpp#L80-L158&quot;&gt;takes account of interpreter frames&lt;/a&gt;, by utilising &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1c4fda612e8a4f0d48346c477d058fa3fddf514e/src/vm/frames.cpp#L1030-L1049&quot;&gt;InterpreterFrame data structures&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;When looking up the &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodDesc&lt;/code&gt; for a given code address, the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1c4fda612e8a4f0d48346c477d058fa3fddf514e/src/vm/methodtable.cpp#L7524-L7535&quot;&gt;interpreter stubs are accounted for&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=14007489&quot;&gt;HackerNews&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/programming/comments/62hcde/the_c_interpreter/&quot;&gt;/r/programming&lt;/a&gt;&lt;/p&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2017/03/30/The-.NET-IL-Interpreter/&quot;&gt;The .NET IL Interpreter&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='Open Source' scheme='http://www.mattwarren.org/tags#Open Source'/>
   
 </entry>
 
 <entry>
   <title>A Hitchhikers Guide to the CoreCLR Source Code</title>
   <link href="http://www.mattwarren.org/2017/03/23/Hitchhikers-Guide-to-the-CoreCLR-Source-Code/"/>
   <updated>2017-03-23T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2017/03/23/Hitchhikers-Guide-to-the-CoreCLR-Source-Code</id>
   <content type="html">
     
&lt;link rel=&quot;stylesheet&quot; href=&quot;/datavis/treemap-coreclr.css&quot; /&gt;

&lt;script src=&quot;https://d3js.org/d3.v4.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;/datavis/treemap-coreclr.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&quot;https://www.flickr.com/photos/toddle_email_newsletters/18056890646&quot;&gt;&lt;img src=&quot;/images/2017/03/Towel Day - Dont Panic - Douglas Adams - The Hitchhikers Guide to the Galaxy.jpg&quot; alt=&quot;Towel Day - Dont Panic - Douglas Adams - The Hitchhikers Guide to the Galaxy&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;photo by &lt;a href=&quot;http://audiencestack.com/static/blog.html&quot;&gt;Alan O’Rourke&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just over 2 years ago Microsoft open-sourced the entire .NET framework, this posts attempts to provide a ‘Hitchhikers Guide’ to the source-code found in the &lt;a href=&quot;https://github.com/dotnet/coreclr&quot;&gt;CoreCLR GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To make it easier for you to get to the information you’re interested in, this post is split into several parts&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#overall-stats&quot;&gt;Overall Stats&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#top-10-lists&quot;&gt;‘Top 10’ lists&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#high-level-overview&quot;&gt;High-level Overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#deep-dive-into-individual-areas&quot;&gt;Deep Dive into Individual Areas&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#mscorlib&quot;&gt;mscorlib (C# code)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#vm-virtual-machine&quot;&gt;Virtual Machine (VM)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#jit-just-in-time-compiler&quot;&gt;Just-in-Time compiler (JIT)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pal-platform-adaptation-layer&quot;&gt;Platform Adaptation Layer (PAL)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#gc-garbage-collector&quot;&gt;Garbage Collector (GC)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#debug&quot;&gt;Debugger&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#all-the-rest&quot;&gt;All the rest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s worth pointing out that .NET Developers have provided 2 excellent glossaries, the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/glossary.md&quot;&gt;CoreCLR one&lt;/a&gt; and the &lt;a href=&quot;https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/glossary.md&quot;&gt;CoreFX one&lt;/a&gt;, so if you come across any unfamiliar terms or abbreviations, check these first. Also there is extensive &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/&quot;&gt;documentation available&lt;/a&gt; and if you are interested in the low-level details I &lt;em&gt;really&lt;/em&gt; recommend checking out the &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/Documentation/botr&quot;&gt;‘Book of the Runtime’ (BotR)&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;overall-stats&quot;&gt;Overall Stats&lt;/h2&gt;

&lt;p&gt;If you take a look at the repository on GitHub, it shows the following stats for the entire repo&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/03/CoreCLR GitHub repo info.png&quot; alt=&quot;CoreCLR GitHub repo info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But most of the C# code is test code, so if we just look under &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/src&lt;/code&gt;&lt;/a&gt; (i.e. ignore any code under &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/tests&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/tests&lt;/code&gt;&lt;/a&gt;) there are the following mix of &lt;strong&gt;Source&lt;/strong&gt; file types, i.e. no ‘.txt’, ‘.dat’, etc:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  - 2,012 .cpp
  - 1,183 .h
  - 956 .cs
  - 113 .inl
  - 98 .hpp
  - 51 .S
  - 43 .py
  - 42 .asm
  - 24 .idl
  - 20 .c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So by far the majority of the code is written in C++, but there is still also a fair amount of C# code (all under &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/mscorlib&quot;&gt;‘mscorlib’&lt;/a&gt;). Clearly there are low-level parts of the CLR that have to be written in C++ or Assembly code because they need to be ‘close to the metal’ or have high performance, but it’s interesting that there are large parts of the runtime written in managed code itself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: All stats/lists in the post were calculated using &lt;a href=&quot;https://github.com/dotnet/coreclr/commit/51a6b5ce75c853e77266b8e1ce8c264736d2aabe&quot;&gt;commit 51a6b5c&lt;/a&gt; from the 9th March 2017.&lt;/p&gt;

&lt;h3 id=&quot;compared-to-rotor&quot;&gt;Compared to ‘Rotor’&lt;/h3&gt;

&lt;p&gt;As a comparison here’s what the stats for &lt;a href=&quot;https://en.wikipedia.org/wiki/Shared_Source_Common_Language_Infrastructure&quot;&gt;‘Rotor’ the Shared Source CLI&lt;/a&gt; looked like back in October 2002. Rotor was ‘Shared Source’, not truly ‘Open Source’, so it didn’t have the same community involvements as the CoreCLR.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/03/Shared Source CLI Stats - Oct 2002.jpg&quot;&gt;&lt;img src=&quot;/images/2017/03/Shared Source CLI Stats - Oct 2002.jpg&quot; alt=&quot;Shared Source CLI Stats - Oct 2002&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SSCLI aka ‘Rotor’ includes the fx or base class libraries (BCL), but the CoreCLR doesn’t as they are now hosted separately in the &lt;a href=&quot;https://github.com/dotnet/corefx&quot;&gt;CoreFX GitHub repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For reference, the equivalent stats for the CoreCLR source in March 2017 look like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Packaged as 61.2 MB .zip archive
    &lt;ul&gt;
      &lt;li&gt;Over 10.8 million lines of code (2.6 million of source code, under \src)&lt;/li&gt;
      &lt;li&gt;24,485 Files (7,466 source)
        &lt;ul&gt;
          &lt;li&gt;6,626 C# (956 source)&lt;/li&gt;
          &lt;li&gt;2,074 C and C++&lt;/li&gt;
          &lt;li&gt;3,701 IL&lt;/li&gt;
          &lt;li&gt;93 Assembler&lt;/li&gt;
          &lt;li&gt;43 Python&lt;/li&gt;
          &lt;li&gt;6 Perl&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Over 8.2 million lines of test code&lt;/li&gt;
  &lt;li&gt;Build output expands to over 1.2 G with tests
    &lt;ul&gt;
      &lt;li&gt;Product binaries 342 MB&lt;/li&gt;
      &lt;li&gt;Test binaries 909 MB&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;top-10-lists&quot;&gt;Top 10 lists&lt;/h2&gt;

&lt;p&gt;These lists are mostly just for fun, but they do give some insights into the code-base and how it’s structured.&lt;/p&gt;

&lt;h3 id=&quot;top-10-largest-files&quot;&gt;Top 10 Largest Files&lt;/h3&gt;

&lt;p&gt;You might have heard about the mammoth source file that is &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/gc/gc.cpp&quot;&gt;gc.cpp&lt;/a&gt;, which is so large that GitHub refuses to display it.&lt;/p&gt;

&lt;p&gt;But it turns out it’s not the only large file in the source, there are also several files in the JIT that are around 20K LOC. However it seems that all the large files are C++ source code, so if you’re only interested in C# code, you don’t have to worry!!&lt;/p&gt;

&lt;span class=&quot;compactTable&quot;&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;File&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;# Lines of Code&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Type&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Location&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/gc/gc.cpp&quot;&gt;gc.cpp&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;37,037&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;.cpp&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;\src\gc\&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/flowgraph.cpp&quot;&gt;flowgraph.cpp&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;24,875&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;.cpp&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;\src\jit\&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/codegenlegacy.cpp&quot;&gt;codegenlegacy.cpp&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;21,727&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;.cpp&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;\src\jit\&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/importer.cpp&quot;&gt;importer.cpp&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;18,680&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;.cpp&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;\src\jit\&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/morph.cpp&quot;&gt;morph.cpp&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;18,381&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;.cpp&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;\src\jit\&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/inc/isolationpriv.h&quot;&gt;isolationpriv.h&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;18,263&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;.h&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;\src\inc\&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/pal/prebuilt/inc/cordebug.h&quot;&gt;cordebug.h&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;18,111&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;.h&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;\src\pal\prebuilt\inc\&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/gentree.cpp&quot;&gt;gentree.cpp&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;17,177&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;.cpp&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;\src\jit\&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/debug/ee/debugger.cpp&quot;&gt;debugger.cpp&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;16,975&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;.cpp&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;\src\debug\ee\&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;/span&gt;

&lt;h3 id=&quot;top-10-longest-methods&quot;&gt;Top 10 Longest Methods&lt;/h3&gt;

&lt;p&gt;The large methods aren’t actually that hard to find, because they’re all have &lt;code class=&quot;highlighter-rouge&quot;&gt;#pragma warning(disable:21000)&lt;/code&gt; before them, to keep the compiler happy! There are ~40 large methods in total, here’s the ‘Top 10’&lt;/p&gt;

&lt;span class=&quot;compactTable&quot;&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Method&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;# Lines of Code&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/51a6b5ce75c853e77266b8e1ce8c264736d2aabe/src/vm/mlinfo.cpp#L1501-L3008&quot;&gt;MarshalInfo::MarshalInfo(Module* pModule,&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,507&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/51a6b5ce75c853e77266b8e1ce8c264736d2aabe/src/gc/gc.cpp#L21419-L22924&quot;&gt;void gc_heap::plan_phase (int condemned_gen_number)&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,505&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/51a6b5ce75c853e77266b8e1ce8c264736d2aabe/src/debug/di/process.cpp#L4533-L5884&quot;&gt;void CordbProcess::DispatchRCEvent()&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,351&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/51a6b5ce75c853e77266b8e1ce8c264736d2aabe/src/debug/shared/dbgtransportsession.cpp#L1264-L2502&quot;&gt;void DbgTransportSession::TransportWorker()&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,238&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/51a6b5ce75c853e77266b8e1ce8c264736d2aabe/src/utilcode/ex.cpp#L211-L1427&quot;&gt;LPCSTR Exception::GetHRSymbolicName(HRESULT hr)&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,216&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/51a6b5ce75c853e77266b8e1ce8c264736d2aabe/src/ildasm/dis.cpp#L872-L1953&quot;&gt;BOOL Disassemble(IMDInternalImport *pImport, BYTE *ILHeader,…&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,081&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/51a6b5ce75c853e77266b8e1ce8c264736d2aabe/src/debug/ee/debugger.cpp#L10555-L11605&quot;&gt;bool Debugger::HandleIPCEvent(DebuggerIPCEvent * pEvent)&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,050&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/51a6b5ce75c853e77266b8e1ce8c264736d2aabe/src/vm/i386/gmsx86.cpp#L367-L1268&quot;&gt;void LazyMachState::unwindLazyState(LazyMachState* baseState…&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;901&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/51a6b5ce75c853e77266b8e1ce8c264736d2aabe/src/vm/fieldmarshaler.cpp#L223-L1109&quot;&gt;VOID ParseNativeType(Module* pModule,&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;886&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/51a6b5ce75c853e77266b8e1ce8c264736d2aabe/src/vm/i386/stublinkerx86.cpp#L4934-L5773&quot;&gt;VOID StubLinkerCPU::EmitArrayOpStub(const ArrayOpScript* pAr…&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;839&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;/span&gt;

&lt;h3 id=&quot;top-10-files-with-the-most-commits&quot;&gt;Top 10 files with the Most Commits&lt;/h3&gt;

&lt;p&gt;Finally, lets look at which files have been changed the most since the &lt;a href=&quot;https://github.com/dotnet/coreclr/commit/ef1e2ab&quot;&gt;initial commit on GitHub&lt;/a&gt; back in January 2015 (ignore ‘merge’ commits)&lt;/p&gt;

&lt;span class=&quot;compactTable&quot;&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;File&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;# Commits&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/commits/51a6b5ce75c853e77266b8e1ce8c264736d2aabe/src/jit/morph.cpp&quot;&gt;src\jit\morph.cpp&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;237&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/commits/51a6b5ce75c853e77266b8e1ce8c264736d2aabe/src/jit/compiler.h&quot;&gt;src\jit\compiler.h&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;231&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/commits/51a6b5ce75c853e77266b8e1ce8c264736d2aabe/src/jit/importer.cpp&quot;&gt;src\jit\importer.cpp&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;196&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/commits/51a6b5ce75c853e77266b8e1ce8c264736d2aabe/src/jit/codegenxarch.cpp&quot;&gt;src\jit\codegenxarch.cpp&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;190&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/commits/51a6b5ce75c853e77266b8e1ce8c264736d2aabe/src/jit/flowgraph.cpp&quot;&gt;src\jit\flowgraph.cpp&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;171&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/commits/51a6b5ce75c853e77266b8e1ce8c264736d2aabe/src/jit/compiler.cpp&quot;&gt;src\jit\compiler.cpp&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;161&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/commits/51a6b5ce75c853e77266b8e1ce8c264736d2aabe/src/jit/gentree.cpp&quot;&gt;src\jit\gentree.cpp&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;157&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/commits/51a6b5ce75c853e77266b8e1ce8c264736d2aabe/src/jit/lower.cpp&quot;&gt;src\jit\lower.cpp&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;147&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/commits/51a6b5ce75c853e77266b8e1ce8c264736d2aabe/src/jit/gentree.h&quot;&gt;src\jit\gentree.h&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;137&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/commits/51a6b5ce75c853e77266b8e1ce8c264736d2aabe/src/pal/inc/pal.h&quot;&gt;src\pal\inc\pal.h&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;136&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;/span&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;high-level-overview&quot;&gt;High-level Overview&lt;/h2&gt;

&lt;p&gt;Next we’ll take a look at how the source code is structured and what are the main components.&lt;/p&gt;

&lt;p&gt;They say “A picture is worth a thousand words”, so below is a treemap with the source code files grouped by colour into the top-level sections they fall under. You can hover over an individual box to get more detailed information and can click on the different radio buttons to toggle the sizing (LOC/Files/Commits)&lt;/p&gt;

&lt;div id=&quot;top-level-treemap&quot;&gt;
  &lt;!-- &lt;svg width=&quot;960&quot; height=&quot;570&quot;&gt;&lt;/svg&gt; --&gt;
  &lt;svg width=&quot;800&quot; height=&quot;570&quot;&gt;&lt;/svg&gt;
  &lt;form&gt;
    &lt;span style=&quot;padding-right: 5em&quot;&gt;&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;mode&quot; value=&quot;sumByLinesOfCode&quot; checked=&quot;&quot; /&gt; Total L.O.C&lt;/label&gt;&lt;/span&gt;	
    &lt;span style=&quot;padding-right: 5em&quot;&gt;&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;mode&quot; value=&quot;sumByNumFiles&quot; /&gt; # Files&lt;/label&gt;&lt;/span&gt;
    &lt;span style=&quot;padding-right: 5em&quot;&gt;&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;mode&quot; value=&quot;sumByNumCommits&quot; /&gt; # Commits&lt;/label&gt;&lt;/span&gt;
  &lt;/form&gt;
&lt;/div&gt;

&lt;h3 id=&quot;notes-and-observations&quot;&gt;Notes and Observations&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The ‘# Commits’ only represent the commits made on GitHub, in the 2 1/2 years since the CoreCLR was open-sourced. So they are skewed to the recent work and don’t represent changes made over the entire history of the CLR. However it’s interesting to see which components have had more ‘churn’ in the last few years (i.e ‘jit’) and which have been left alone (e.g. ‘pal’)&lt;/li&gt;
  &lt;li&gt;From the number of LOC/files it’s clear to see what the significant components are within the CoreCLR source, e.g ‘vm’, ‘jit’, ‘pal’ &amp;amp; ‘mscorlib’ (these are covered in detail in the next part of this post)&lt;/li&gt;
  &lt;li&gt;In the ‘VM’ section it’s interesting to see how much code is generic ~650K LOC and how much is per-CPU architecture 25K LOC for ‘i386’, 16K for ‘amd64’, 14K for ‘arm’ and 7K for ‘arm64’. This suggests that the code is nicely organised so that the per-architecture work is minimised and cleanly separated out.&lt;/li&gt;
  &lt;li&gt;It’s surprising (to me) that the ‘GC’ section is as small as it is, I always thought of the GC is a very complex component, but there is way more code in the ‘debugger’ and the ‘pal’.&lt;/li&gt;
  &lt;li&gt;Likewise, I never really appreciated the complexity if the ‘JIT’, it’s the 2nd largest component, comprising over 370K LOC.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’re interested, this raw numbers for the code under ‘/src’ are available in &lt;a href=&quot;https://gist.github.com/mattwarren/33ca0c20d36be5790578e71f67975514&quot;&gt;this gist&lt;/a&gt; and for the code under ‘/tests/src’ in &lt;a href=&quot;https://gist.github.com/mattwarren/9125c637dc1eb8dba18b2ab70023c0e4&quot;&gt;this gist&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;deep-dive-into-individual-areas&quot;&gt;Deep Dive into Individual Areas&lt;/h2&gt;

&lt;p&gt;As the source code is well organised, the top-level folders (under &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src&quot;&gt;/src&lt;/a&gt;) correspond to the logical components within the CoreCLR. We’ll start off by looking at the most significant components, i.e. the ‘&lt;strong&gt;Debugger&lt;/strong&gt;’, ‘&lt;strong&gt;Garbage Collector&lt;/strong&gt;’ (GC), ‘&lt;strong&gt;Just-in-Time compiler&lt;/strong&gt;’ (JIT), ‘&lt;strong&gt;mscorlib&lt;/strong&gt;’ (all the C# code), ‘&lt;strong&gt;Platform Adaptation Layer&lt;/strong&gt;’ (PAL) and the CLR ‘&lt;strong&gt;Virtual Machine&lt;/strong&gt;’ (VM).&lt;/p&gt;

&lt;h3 id=&quot;mscorlib&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/mscorlib&quot;&gt;mscorlib&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The ‘mscorlib’ folder contains all the C# code within the CoreCLR, so it’s the place that most C# developers would start looking if they wanted to contribute. For this reason it deserves it’s own treemap, so we can see how it’s structured:&lt;/p&gt;

&lt;div id=&quot;mscorlib-treemap&quot;&gt;
  &lt;svg width=&quot;800&quot; height=&quot;570&quot;&gt;&lt;/svg&gt;
  &lt;form&gt;   
	&lt;span style=&quot;padding-right: 5em&quot;&gt;&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;mode&quot; value=&quot;sumByLinesOfCode&quot; checked=&quot;&quot; /&gt; Total L.O.C&lt;/label&gt;&lt;/span&gt;
    &lt;span style=&quot;padding-right: 5em&quot;&gt;&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;mode&quot; value=&quot;sumByNumFiles&quot; /&gt; # Files&lt;/label&gt;&lt;/span&gt;
    &lt;span style=&quot;padding-right: 5em&quot;&gt;&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;mode&quot; value=&quot;sumByNumCommits&quot; /&gt; # Commits&lt;/label&gt;&lt;/span&gt;
  &lt;/form&gt;
&lt;/div&gt;

&lt;p&gt;So by-far the bulk of the code is at the ‘top-level’, i.e. directly in the &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/mscorlib/src/System&quot;&gt;‘System’ namespace&lt;/a&gt;, this contains the fundamental types that &lt;a href=&quot;https://gist.github.com/mattwarren/07b38f39e2adc4acdd5ec53d10a50751&quot;&gt;have to exist for the CLR to run&lt;/a&gt;, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AppDomain&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;WeakReference&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Type&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Delegate&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Byte&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Char&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Int16&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Int32&lt;/code&gt;, etc&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Tuple&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Span&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ArraySegment&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Attribute&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Where possible the CoreCLR is written in C#, because of the benefits that ‘managed code’ brings, so there is a significant amount of code within the ‘mscorlib’ section. Note that anything under here is not externally exposed, when you write C# code that runs against the CoreCLR, you actually access everything through &lt;a href=&quot;https://github.com/dotnet/corefx&quot;&gt;the CoreFX&lt;/a&gt;, which then &lt;a href=&quot;https://www.simple-talk.com/blogs/anatomy-of-a-net-assembly-type-forwards/&quot;&gt;type-forwards&lt;/a&gt; to the CoreCLR where appropriate.&lt;/p&gt;

&lt;p&gt;I don’t know the rules for what lives in CoreCLR v CoreFX, but based on what I’ve read on various GitHub issues, it seems that over time, more and more code is moving from CoreCLR -&amp;gt; CoreFX.&lt;/p&gt;

&lt;p&gt;However the &lt;em&gt;managed&lt;/em&gt; C# code is often deeply entwined with &lt;em&gt;unmanaged&lt;/em&gt; C++, for instance several types are implemented across multiple files, e.g.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Arrays - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Array.cs&quot;&gt;Arrays.cs&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/array.cpp&quot;&gt;array.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/array.h&quot;&gt;array.h&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Assemblies - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/mscorlib/shared/System/Reflection/Assembly.cs&quot;&gt;Assembly.cs&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/assembly.cpp&quot;&gt;assembly.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/assembly.hpp&quot;&gt;assembly.hpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From what I understand this is done for performance reasons, any code that is perf sensitive will end up being implemented in C++ (or even Assembly), unless the JIT can suitable optimise the C# code.&lt;/p&gt;

&lt;h4 id=&quot;code-shared-with-corert&quot;&gt;&lt;strong&gt;Code shared with CoreRT&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Recently there has been a significant amount of work done to moved more and more code over into the ‘shared partition’. This is the area of the CoreCLR source code that is shared with &lt;a href=&quot;https://github.com/dotnet/corert/&quot;&gt;CoreRT&lt;/a&gt;  (‘the .NET Core runtime optimized for AOT compilation’). Because certain classes are implemented in both runtimes, they’ve ensured that the work isn’t duplicated and any fixes are shared in both locations. You can see how this works by looking at the links below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CoreCLR
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/search?utf8=%E2%9C%93&amp;amp;q=%22shared+partition%22&amp;amp;type=Commits&quot;&gt;‘shared partition’ commits&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/mscorlib/src&quot;&gt;Normal mscorlib&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/mscorlib/shared&quot;&gt;Shared mscorlib&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CoreRT
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/search?q=shared+partition&amp;amp;type=Commits&amp;amp;utf8=%E2%9C%93&quot;&gt;‘shared partition’ commits&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/System.Private.CoreLib/src&quot;&gt;Normal System.Private.Corelib&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corert/tree/master/src/System.Private.CoreLib/shared&quot;&gt;Shared System.Private.Corelib&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;other-parts-of-mscorlib&quot;&gt;&lt;strong&gt;Other parts of mscorlib&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;All the other sections of mscorlib line up with &lt;code class=&quot;highlighter-rouge&quot;&gt;namespaces&lt;/code&gt; available in the .NET runtime and contain functionality that &lt;em&gt;most&lt;/em&gt; C# devs will have used at one time or another. The largest ones in there are shown below (click to go directly to the source code):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/mscorlib/src/System/Reflection&quot;&gt;System.Reflection&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/mscorlib/src/System/Reflection/Emit&quot;&gt;System.Reflection.Emit&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FieldInfo&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;PropertyInfo&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodInfo&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;AssemblyBuilder&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;TypeBuilder&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodBuilder&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ILGenerator&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/mscorlib/src/System/Globalization&quot;&gt;System.Globalization&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CultureInfo&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CalendarInfo&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTimeParse&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;JulianCalendar&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;HebrewCalendar&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/mscorlib/src/System/Threading&quot;&gt;System.Threading&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/mscorlib/src/System/Threading/Tasks&quot;&gt;System.Threading.Tasks&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Timer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Semaphore&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Mutex&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;AsyncLocal&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CancellationToken&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/mscorlib/src/System/Runtime/CompilerServices&quot;&gt;System.Runtime.CompilerServices&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/mscorlib/src/System/Runtime/InteropServices&quot;&gt;System.Runtime.InteropServices&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Unsafe&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;[CallerFilePath]&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;[CallerLineNumber]&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;[CallerMemberName]&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;GCHandle&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;[LayoutKind]&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;[MarshalAs(..)]&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;[StructLayout(LayoutKind ..)]&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/mscorlib/src/System/Diagnostics&quot;&gt;System.Diagnostics&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Assert&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Debugger&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Stacktrace&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/mscorlib/src/System/Text&quot;&gt;System.Text&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ASCIIEncoding&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;UTF8Encoding&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;UnicodeEncoding&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/mscorlib/src/System/Collections&quot;&gt;System.Collections&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Hashtable&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/mscorlib/src/System/Collections/Generic&quot;&gt;System.Collections.Generic&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Dictionary&amp;lt;T,U&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/mscorlib/src/System/IO&quot;&gt;System.IO&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Stream&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;MemoryStream&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;TestReader&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;TestWriter&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vm-virtual-machine&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm&quot;&gt;vm (Virtual Machine)&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The VM, not surprisingly, is the largest component of the CoreCLR, with over 640K L.O.C spread across 576 files, and it contains the &lt;em&gt;guts&lt;/em&gt; of the runtime. The bulk of the code is OS and CPU independent and written in C++, however there is also a significant amount of architecture-specific assembly code, see the section &lt;a href=&quot;#cpu-architecture-specific-code&quot;&gt;‘CPU Architecture-specific code’&lt;/a&gt; for more info.&lt;/p&gt;

&lt;p&gt;The VM contains the main start-up routine of the entire runtime &lt;code class=&quot;highlighter-rouge&quot;&gt;EEStartupHelper()&lt;/code&gt; in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1d03b8fd8d650bd215623a7b035e68db96697e59/src/vm/ceemain.cpp#L806-L1378&quot;&gt;ceemain.cpp&lt;/a&gt;, see &lt;a href=&quot;/2017/02/07/The-68-things-the-CLR-does-before-executing-a-single-line-of-your-code/&quot;&gt;‘The 68 things the CLR does before executing a single line of your code’&lt;/a&gt; for all the details. In addition it provides the following functionality:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Type System&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/method.cpp&quot;&gt;method.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/class.cpp&quot;&gt;class.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/typedesc.cpp&quot;&gt;typedesc.cpp&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Loading types/classes&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/ceeload.cpp&quot;&gt;ceeload.cpp&lt;/a&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/methodtable.cpp&quot;&gt;methodtable.cpp&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/methodtablebuilder.cpp&quot;&gt;methodtablebuilder.cpp&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Threading&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/threads.cpp&quot;&gt;threads.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/threadstatics.cpp&quot;&gt;threadstatics.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/threadsuspend.cpp&quot;&gt;threadsuspend.cpp&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/win32threadpool.cpp&quot;&gt;win32threadpool.cpp&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Exception Handling and Stack Walking&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/exceptionhandling.cpp&quot;&gt;exceptionhandling.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/excep.cpp&quot;&gt;excep.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/stackwalk.cpp&quot;&gt;stackwalk.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/frames.cpp&quot;&gt;frames.cpp&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fundamental Types&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/object.cpp&quot;&gt;object.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/array.cpp&quot;&gt;array.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/appdomain.cpp&quot;&gt;appdomain.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/safehandle.cpp&quot;&gt;safehandle.cpp&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Generics&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/generics.cpp&quot;&gt;generics.cpp&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/genericdict.cpp&quot;&gt;genericdict.cpp&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;An entire Interpreter&lt;/strong&gt; (yes .NET can run interpreted!!)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/interpreter.cpp&quot;&gt;interpreter.cpp&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/interpreter.hpp&quot;&gt;interpreter.hpp&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Function calling mechanisms&lt;/strong&gt; (see &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/mscorlib.md#calling-from-managed-to-native-code&quot;&gt;BotR&lt;/a&gt; for more info)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/ecall.cpp&quot;&gt;ecall.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/fcall.cpp&quot;&gt;fcall.cpp&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/qcall.cpp&quot;&gt;qcall.cpp&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stubs&lt;/strong&gt; (used for &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/virtual-stub-dispatch.md&quot;&gt;virtual dispatch&lt;/a&gt; and &lt;a href=&quot;/2017/01/25/How-do-.NET-delegates-work/&quot;&gt;delegates&lt;/a&gt; amongst other things)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/arm/stubs.cpp&quot;&gt;stubs.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/prestub.cpp&quot;&gt;prestub.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/stubgen.cpp&quot;&gt;stubgen.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/stubhelpers.cpp&quot;&gt;stubhelpers.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/stubmgr.cpp&quot;&gt;stubmgr.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/virtualcallstub.cpp&quot;&gt;virtualcallstub.cpp&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Event Tracing&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/eventtrace.cpp&quot;&gt;eventtrace.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/eventreporter.cpp&quot;&gt;eventreporter.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/eventstore.cpp&quot;&gt;eventstore.cpp&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/nativeeventsource.cpp&quot;&gt;nativeeventsource.cpp&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Profiler&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/arm/profiler.cpp&quot;&gt;profiler.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/profilermetadataemitvalidator.cpp&quot;&gt;profilermetadataemitvalidator.cpp&lt;/a&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/profattach.cpp&quot;&gt;profattach.cpp&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/profdetach.cpp&quot;&gt;profdetach.cpp&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;P/Invoke&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/dllimport.cpp&quot;&gt;dllimport.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/dllimportcallback.cpp&quot;&gt;dllimportcallback.cpp&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/marshalnative.cpp&quot;&gt;marshalnative.cpp&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reflection&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/reflectioninvocation.cpp&quot;&gt;reflectioninvocation.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/dispatchinfo.cpp&quot;&gt;dispatchinfo.cpp&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/invokeutil.cpp&quot;&gt;invokeutil.cpp&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cpu-architecture-specific-code&quot;&gt;&lt;strong&gt;CPU Architecture-specific code&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;All the architecture-specific code is kept separately in several sub-folders, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/amd64&quot;&gt;amd64&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/arm&quot;&gt;arm&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/arm64&quot;&gt;arm64&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/vm/i386&quot;&gt;i386&lt;/a&gt;. For example here’s the various implementations of the &lt;code class=&quot;highlighter-rouge&quot;&gt;WriteBarrier&lt;/code&gt; function used by the GC:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/amd64/JitHelpers_FastWriteBarriers.asm#L44-L81&quot;&gt;amd64&lt;/a&gt; (.asm), there is also &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/4a0a82a8dabaabb1e9a82af944d70aed210838a3/src/vm/amd64/jithelpers_fastwritebarriers.S#L10-L73&quot;&gt;a .S version&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/a9b25d4aa22a1f4ad5f323f6c826e318f5a720fe/src/vm/arm/asmhelpers.asm#L1625-L2101&quot;&gt;arm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/9baa44aa334cf6f032e4abeae10dc1b960aaeb57/src/vm/arm64/asmhelpers.asm#L314-L397&quot;&gt;arm64&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/05e35b9e4edb317ec0fcfbe622ae3d7621ef5ae4/src/vm/i386/jithelp.asm#L118-L281&quot;&gt;i386&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jit-just-in-time-compiler&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit&quot;&gt;jit (Just-in-Time compiler)&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Before we look at the actual source code, it’s worth looking at the different ‘flavours’ or the JIT that are available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/jit&quot;&gt;clrjit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/jit/standalone&quot;&gt;standalone&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/jit/compatjit&quot;&gt;compatjit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/jit/legacyjit&quot;&gt;legacyjit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/jit/protojit&quot;&gt;protojit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/jit/protononjit&quot;&gt;protononjit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/jit/jitstd&quot;&gt;jitstd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fortunately one of the Microsoft developers has &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/2214#issuecomment-161850464&quot;&gt;clarified which one should be used&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Here’s my guidance on how non-MS contributors should think about contributing to the JIT: &lt;strong&gt;If you want to help advance the state of the production code-generators for .NET, then contribute to the new RyuJIT x86/ARM32 backend. This is our long term direction.&lt;/strong&gt; If instead your interest is around getting the .NET Core runtime working on x86 or ARM32 platforms to do other things, &lt;strong&gt;by all means use and contribute bug fixes if necessary to the LEGACY_BACKEND paths in the RyuJIT code base today to unblock yourself.&lt;/strong&gt; We do run testing on these paths today in our internal testing infrastructure and will do our best to avoid regressing it until we can replace it with something better. &lt;strong&gt;We just want to make sure that there will be no surprises or hard feelings for when the time comes to remove them from the code-base.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;jit-phases&quot;&gt;&lt;strong&gt;JIT Phases&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;The JIT has almost 90 source files, but fortunately they correspond to the different phases it goes through, so it’s not too hard to find your way around. Using the table from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md#phases-of-ryujit&quot;&gt;‘Phases of RyuyJIT’&lt;/a&gt;, I added the right-hand column so you can jump to the relevant source file(s):&lt;/p&gt;

&lt;span class=&quot;compactTable&quot;&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Phase&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;IR Transformations&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;File&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md#pre-import&quot;&gt;Pre-import&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Compiler-&amp;gt;lvaTable&lt;/code&gt; created and filled in for each user argument and variable. BasicBlock list initialized.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/compiler.hpp&quot;&gt;compiler.hpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md#importation&quot;&gt;Importation&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GenTree&lt;/code&gt; nodes created and linked in to Statements, and Statements into BasicBlocks. Inlining candidates identified.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/importer.cpp&quot;&gt;importer.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md#inlining&quot;&gt;Inlining&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;The IR for inlined methods is incorporated into the flowgraph.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/inline.cpp&quot;&gt;inline.cpp&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/inlinepolicy.cpp&quot;&gt;inlinepolicy.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md#struct-promotion&quot;&gt;Struct Promotion&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;New lvlVars are created for each field of a promoted struct.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/morph.cpp&quot;&gt;morph.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md#mark-addr-exposed&quot;&gt;Mark Address-Exposed Locals&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;lvlVars with references occurring in an address-taken context are marked. This must be kept up-to-date.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/compiler.hpp&quot;&gt;compiler.hpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md#morph-blocks&quot;&gt;Morph Blocks&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Performs localized transformations, including mandatory normalization as well as simple optimizations.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/morph.cpp&quot;&gt;morph.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md#eliminate-qmarks&quot;&gt;Eliminate Qmarks&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;All &lt;code class=&quot;highlighter-rouge&quot;&gt;GT_QMARK&lt;/code&gt; nodes are eliminated, other than simple ones that do not require control flow.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/compiler.cpp&quot;&gt;compiler.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md#flowgraph-analysis&quot;&gt;Flowgraph Analysis&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BasicBlock&lt;/code&gt; predecessors are computed, and must be kept valid. Loops are identified, and normalized, cloned and/or unrolled.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/flowgraph.cpp&quot;&gt;flowgraph.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md#normalize-ir&quot;&gt;Normalize IR for Optimization&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;lvlVar references counts are set, and must be kept valid. Evaluation order of &lt;code class=&quot;highlighter-rouge&quot;&gt;GenTree&lt;/code&gt; nodes (&lt;code class=&quot;highlighter-rouge&quot;&gt;gtNext&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;gtPrev&lt;/code&gt;) is determined, and must be kept valid.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/compiler.cpp&quot;&gt;compiler.cpp&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/lclvars.cpp&quot;&gt;lclvars.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md#ssa-vn&quot;&gt;SSA and Value Numbering Optimizations&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Computes liveness (&lt;code class=&quot;highlighter-rouge&quot;&gt;bbLiveIn&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bbLiveOut&lt;/code&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;BasicBlocks&lt;/code&gt;), and dominators. Builds SSA for tracked lvlVars. Computes value numbers.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/liveness.cpp&quot;&gt;liveness.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md#licm&quot;&gt;Loop Invariant Code Hoisting&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Hoists expressions out of loops.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/optimizer.cpp&quot;&gt;optimizer.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md#copy-propagation&quot;&gt;Copy Propagation&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Copy propagation based on value numbers.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/copyprop.cpp&quot;&gt;copyprop.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md#cse&quot;&gt;Common Subexpression Elimination (CSE)&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Elimination of redundant subexressions based on value numbers.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/optcse.cpp&quot;&gt;optcse.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md#assertion-propagation&quot;&gt;Assertion Propagation&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Utilizes value numbers to propagate and transform based on properties such as non-nullness.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/assertionprop.cpp&quot;&gt;assertionprop.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md#range-analysis&quot;&gt;Range analysis&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Eliminate array index range checks based on value numbers and assertions&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/rangecheck.cpp&quot;&gt;rangecheck.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md#rationalization&quot;&gt;Rationalization&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Flowgraph order changes from &lt;code class=&quot;highlighter-rouge&quot;&gt;FGOrderTree&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;FGOrderLinear&lt;/code&gt;. All &lt;code class=&quot;highlighter-rouge&quot;&gt;GT_COMMA&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;GT_ASG&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;GT_ADDR&lt;/code&gt; nodes are transformed.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/rationalize.cpp&quot;&gt;rationalize.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md#lowering&quot;&gt;Lowering&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Register requirements are fully specified (&lt;code class=&quot;highlighter-rouge&quot;&gt;gtLsraInfo&lt;/code&gt;). All control flow is explicit.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/lower.cpp&quot;&gt;lower.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/lowerarm.cpp&quot;&gt;lowerarm.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/lowerarm64.cpp&quot;&gt;lowerarm64.cpp&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/lowerxarch.cpp&quot;&gt;lowerxarch.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md#reg-alloc&quot;&gt;Register allocation&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Registers are assigned (&lt;code class=&quot;highlighter-rouge&quot;&gt;gtRegNum&lt;/code&gt; and/or &lt;code class=&quot;highlighter-rouge&quot;&gt;gtRsvdRegs&lt;/code&gt;),and the number of spill temps calculated.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/regalloc.cpp&quot;&gt;regalloc.cpp&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/register_arg_convention.cpp&quot;&gt;register_arg_convention.cp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-overview.md#code-generation&quot;&gt;Code Generation&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Determines frame layout. Generates code for each &lt;code class=&quot;highlighter-rouge&quot;&gt;BasicBlock&lt;/code&gt;. Generates prolog &amp;amp; epilog code for the method. Emit EH, GC and Debug info.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/codegenarm.cpp&quot;&gt;codegenarm.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/codegenarm64.cpp&quot;&gt;codegenarm64.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/codegencommon.cpp&quot;&gt;codegencommon.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/codegenlegacy.cpp&quot;&gt;codegenlegacy.cpp&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/codegenlinear.cpp&quot;&gt;codegenlinear.cpp&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/codegenxarch.cpp&quot;&gt;codegenxarch.cpp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;/span&gt;

&lt;h3 id=&quot;pal-platform-adaptation-layer&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/pal&quot;&gt;pal (Platform Adaptation Layer)&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The PAL provides an OS independent layer to give access to common low-level functionality such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/pal/src/file&quot;&gt;File system&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/pal/src/thread&quot;&gt;Threads&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/pal/src/sync&quot;&gt;Critical Sections&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/pal/src/sharedmemory&quot;&gt;Shared Memory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/pal/src/safecrt&quot;&gt;‘Safe’ C runtime-library (CRT)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As .NET was originally written to run on Windows, all the APIs look very similar to the Win32 APIs. However for non-Windows platforms they are actually implemented using the functionality available on that OS. For example this is what PAL code to &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/pal/src/examples/example1.cpp&quot;&gt;read/write a file&lt;/a&gt; looks like:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;WCHAR&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'o'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'o'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;WCHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;WCHAR&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'t'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'m'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'p'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;PAL_Initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SetCurrentDirectoryW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SetCurrentDirectoryW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;CreateFileW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GENERIC_WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILE_SHARE_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CREATE_NEW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;WriteFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Testing&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CloseHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CopyFileW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DeleteFileW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PAL_Terminate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The PAL does contain some &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/pal/src/arch&quot;&gt;per-CPU assembly code&lt;/a&gt;, but it’s only for very low-level functionality, for instance here’s the different implementations of the &lt;code class=&quot;highlighter-rouge&quot;&gt;DebugBreak&lt;/code&gt; function:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/pal/src/arch/amd64/debugbreak.S&quot;&gt;amd64&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/pal/src/arch/arm/debugbreak.S&quot;&gt;arm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/pal/src/arch/arm64/debugbreak.S&quot;&gt;arm64&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/pal/src/arch/i386/debugbreak.S&quot;&gt;i386&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gc-garbage-collector&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/gc&quot;&gt;gc (Garbage Collector)&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The GC is clearly a very complex piece of code, lying right at the heart of the CLR, so for more information about what it does I recommend reading the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/garbage-collection.md&quot;&gt;BotR entry on ‘Garbage Collection Design’&lt;/a&gt; and if you’re interested I’ve also written &lt;a href=&quot;http://mattwarren.org/tags/#Garbage-Collectors&quot;&gt;several blog posts&lt;/a&gt; looking at its functionality.&lt;/p&gt;

&lt;p&gt;However from a source code point-of-view the GC is pretty simple, it’s spread across just 19 .cpp files, but the bulk of the work is in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/gc/gc.cpp&quot;&gt;gc.cpp&lt;/a&gt; (&lt;a href=&quot;https://raw.githubusercontent.com/dotnet/coreclr/master/src/gc/gc.cpp&quot;&gt;raw version&lt;/a&gt;) all ~37K L.O.C of it!!&lt;/p&gt;

&lt;p&gt;If you want to get deeper into the GC code (warning, it’s pretty dense), a good way to start is to search for the occurrences of various &lt;code class=&quot;highlighter-rouge&quot;&gt;ETW&lt;/code&gt; events that are fired as the GC moves through the phases outlined in the BotR post above, these events are listed below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FireEtwGCTriggered(..)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FireEtwGCAllocationTick_V1(..)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FireEtwGCFullNotify_V1(..)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FireEtwGCJoin_V2(..)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FireEtwGCMarkWithType(..)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FireEtwGCPerHeapHistory_V3(..)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FireEtwGCGlobalHeapHistory_V2(..)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FireEtwGCCreateSegment_V1(..)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FireEtwGCFreeSegment_V1(..)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FireEtwBGCAllocWaitBegin(..)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FireEtwBGCAllocWaitEnd(..)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FireEtwBGCDrainMark(..)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FireEtwBGCRevisit(..)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FireEtwBGCOverflow(..)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FireEtwPinPlugAtGCTime(..)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FireEtwGCCreateConcurrentThread_V1(..)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FireEtwGCTerminateConcurrentThread_V1(..)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But the GC doesn’t work in isolation, it also requires help from the Execute Engine (EE), this is done via the &lt;code class=&quot;highlighter-rouge&quot;&gt;GCToEEInterface&lt;/code&gt; which is implemented in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/gcenv.ee.cpp&quot;&gt;gcenv.ee.cpp&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;local-gc-and-gc-sample&quot;&gt;&lt;strong&gt;Local GC and GC Sample&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Finally, there are 2 others ways you can get into the GC code and understand what it does.&lt;/p&gt;

&lt;p&gt;Firstly there is a &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/gc/sample/GCSample.cpp&quot;&gt;&lt;strong&gt;GC sample&lt;/strong&gt;&lt;/a&gt; the lets you use the full GC independent of the rest of the runtime. It shows you how to ‘create type layout information in format that the GC expects’, ‘implement fast object allocator and write barrier’ and ‘allocate objects and work with GC handles’, all in under 250 LOC!!&lt;/p&gt;

&lt;p&gt;Also worth mentioning is the ‘&lt;strong&gt;Local GC&lt;/strong&gt;’ project, which is an ongoing effort to decouple the GC from the rest of the runtime, they even have a dashboard so you can &lt;a href=&quot;https://github.com/dotnet/coreclr/projects/3&quot;&gt;track its progress&lt;/a&gt;. Currently the GC code is too intertwined with the runtime and vica-versa, so ‘Local GC’ is aiming to break that link by providing a set of clear interfaces, &lt;code class=&quot;highlighter-rouge&quot;&gt;GCToOSInterface&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;GCToEEInterface&lt;/code&gt;. This will help with the CoreCLR cross-platform efforts, making the GC easier to port to new OSes.&lt;/p&gt;

&lt;h3 id=&quot;debug&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/debug&quot;&gt;debug&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The CLR is a ‘managed runtime’ and one of the significant components it provides is a advanced debugging experience, via Visual Studio or WinDBG. This debugging experience is very complex and I’m not going to go into it in detail here, however if you want to learn more I recommend you read &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/dac-notes.md&quot;&gt;‘Data Access Component (DAC) Notes’&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But what does the source look like, how is it laid out? Well the a several main sub-components under the top-level &lt;code class=&quot;highlighter-rouge&quot;&gt;/debug&lt;/code&gt; folder:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/debug/daccess&quot;&gt;dacaccess&lt;/a&gt; - the provides the ‘Data Access Component’ (DAC) functionality as outlined in the BotR page linked to above. The DAC is an abstraction layer over the internal structures in the runtime, which the debugger uses to inspect objects/classes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/debug/di&quot;&gt;di&lt;/a&gt; - this contains the exposed APIs (or entry points) of the debugger, implemented by &lt;code class=&quot;highlighter-rouge&quot;&gt;CoreCLRCreateCordbObject(..)&lt;/code&gt; in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/debug/di/cordb.cpp&quot;&gt;cordb.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/debug/ee&quot;&gt;ee&lt;/a&gt; - the section of debugger that works with the Execution Engine (EE) to do things like stack-walking&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/debug/inc&quot;&gt;inc&lt;/a&gt; - all the interfaces (.h) files that the debugger components implement&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;all-the-rest&quot;&gt;All the rest&lt;/h3&gt;

&lt;p&gt;As well as the main components, there are various other top-level folders in the source, the full list is below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/binder&quot;&gt;binder&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;The ‘binder’ is responsible for loading assemblies within a .NET program (except the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/binder.cpp&quot;&gt;mscorlib binder&lt;/a&gt; which is elsewhere). The ‘binder’ comprises low-level code that controls &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/binder/assembly.cpp&quot;&gt;Assemblies&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/binder/applicationcontext.cpp&quot;&gt;Application Contexts&lt;/a&gt; and the all-important &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/binder/bindinglog.cpp&quot;&gt;Fusion Log&lt;/a&gt; for diagnosing why assemblies aren’t loading!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/classlibnative&quot;&gt;classlibnative&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Code for native implementations of many of the core data types in the CoreCLR, e.g. &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/classlibnative/bcltype/arraynative.cpp&quot;&gt;Arrays&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/classlibnative/bcltype/objectnative.cpp&quot;&gt;System.Object&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/classlibnative/bcltype/stringnative.cpp&quot;&gt;String&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/classlibnative/bcltype/decimal.cpp&quot;&gt;decimal&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/classlibnative/float/floatsingle.cpp&quot;&gt;float&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/classlibnative/float/floatdouble.cpp&quot;&gt;double&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;Also includes all the native methods exposed in the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/classlibnative/bcltype/system.cpp&quot;&gt;‘System.Environment’&lt;/a&gt; namespace, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment.ProcessorCount&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment.TickCount&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment.GetCommandLineArgs()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment.FailFast()&lt;/code&gt;, etc&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/coreclr&quot;&gt;coreclr&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Contains the different tools that can ‘host’ or run the CLR, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;corerun&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;coreconsole&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;unixcorerun&lt;/code&gt;. See &lt;a href=&quot;/2016/07/04/How-the-dotnet-CLI-tooling-runs-your-code/&quot;&gt;How the dotnet CLI tooling runs your code&lt;/a&gt; for more info on how these tools work.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/corefx&quot;&gt;corefx&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Several classes under the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.globalization%28v=vs.110%29.aspx?f=255&amp;amp;MSPPError=-2147217396&quot;&gt;‘System.Globalization’&lt;/a&gt; namespace have native implementations,  in here you will find the code for &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/corefx/System.Globalization.Native/calendarData.cpp&quot;&gt;Calendar Data&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/corefx/System.Globalization.Native/locale.cpp&quot;&gt;Locales&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/corefx/System.Globalization.Native/normalization.cpp&quot;&gt;Text Normalisation&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/corefx/System.Globalization.Native/timeZoneInfo.cpp&quot;&gt;Time Zone information&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/dlls&quot;&gt;dlls&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Wrapper code and build files that control how the various dlls are built. For instance &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/dlls/mscoree&quot;&gt;mscoree&lt;/a&gt; is the main Execution Engine (EE) and contains the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/d905f67f12c6b2eed918894e0642ec972a1d9fec/src/dlls/mscoree/mscoree.cpp#L61-L116&quot;&gt;CoreCLR DLL Entrypoint&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/dlls/mscoree/coreclr/CMakeLists.txt&quot;&gt;CoreCLR build definition&lt;/a&gt;, likewise &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/dlls/mscorrc&quot;&gt;mscorrc&lt;/a&gt; includes the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/dlls/mscorrc/mscorrc.rc&quot;&gt;resource file&lt;/a&gt; that houses all the CoreCLR error messages.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/gcdump&quot;&gt;gcdump&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/gcinfo&quot;&gt;gcinfo&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Code that will write-out the &lt;code class=&quot;highlighter-rouge&quot;&gt;GCInfo&lt;/code&gt; that is produced by the JIT to help the GC do it’s job. This &lt;code class=&quot;highlighter-rouge&quot;&gt;GCInfo&lt;/code&gt; includes information about the ‘liveness’ of variables within a section of code and whether the method is &lt;a href=&quot;/2016/08/08/GC-Pauses-and-Safe-Points/#gc-suspension-in-user-code&quot;&gt;fully or partially interruptible&lt;/a&gt;, which enables the EE to suspend methods when the GC is working.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/ilasm&quot;&gt;ilasm&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;IL (Intermediate Language) Assembler is a tool for converting IL code into a .NET executable, see the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/496e4ekx%28v=vs.110%29.aspx?f=255&amp;amp;MSPPError=-2147217396&quot;&gt;MSDN page&lt;/a&gt; for more info and usage examples.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/ildasm&quot;&gt;ildasm&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Tool for disassembling a .NET executable into the corresponding IL source code, again, see the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/f7dy01k1%28v=vs.110%29.aspx?f=255&amp;amp;MSPPError=-2147217396&quot;&gt;MSDN page&lt;/a&gt; for info and usage examples.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/inc&quot;&gt;inc&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Header files that define the ‘interfaces’ between the sub-components that make up the CoreCLR. For example &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/inc/corjit.h&quot;&gt;corjit.h&lt;/a&gt; covers all communication between the Execution Engine (EE) and the JIT, that is ‘EE -&amp;gt; JIT’ and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/inc/corinfo.h&quot;&gt;corinfo.h&lt;/a&gt; is the interface going the other way, i.e. ‘JIT -&amp;gt; EE’&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/ipcman&quot;&gt;ipcman&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Code that enables the ‘Inter-Process Communication’ (IPC) used in .NET (mostly legacy and &lt;em&gt;probably&lt;/em&gt; not cross-platform)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/md&quot;&gt;md&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;The MetaData (md) code provides the ability to gather information about methods, classes, types and assemblies and is what makes &lt;a href=&quot;http://odetocode.com/Articles/288.aspx&quot;&gt;Reflection possible&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/nativeresources&quot;&gt;nativeresources&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;A simple tool that is responsible for converting/extracting resources from a Windows Resource File.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/palrt&quot;&gt;palrt&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;The PAL (Platform Adaptation Layer) Run-Time, contains specific parts of the PAL layer.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/scripts&quot;&gt;scripts&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Several Python scripts for auto-generating various files in the source (e.g. ETW events).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/strongname&quot;&gt;strongname&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;The code for handling &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/wd40t7ad%28v=vs.110%29.aspx?f=255&amp;amp;MSPPError=-2147217396&quot;&gt;‘strong-naming’&lt;/a&gt;, including the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/strongname/inc/thekey.h&quot;&gt;signing&lt;/a&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/strongname/inc/ecmakey.h&quot;&gt;keys&lt;/a&gt; used by the CoreCLR itself.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/ToolBox&quot;&gt;ToolBox&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Contains 2 stand-alone tools
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/jasonz/2003/10/21/sos-debugging-of-the-clr-part-1/&quot;&gt;SOS (son-of-strike)&lt;/a&gt; the CLR debugging extension that enables reporting of .NET specific information when using WinDBG&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/ToolBox/superpmi/readme.txt&quot;&gt;SuperPMI&lt;/a&gt; which enables testing of the JIT without requiring the full Execution Engine (EE)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/tools&quot;&gt;tools&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Several cmd-line tools that can be used in conjunction with the CoreCLR, e.g. &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/tools/metainfo/metainfo.cpp&quot;&gt;‘Runtime Meta Data Dump Utility’&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/tools/crossgen/crossgen.cpp&quot;&gt;‘Native Image Generator’&lt;/a&gt; (also known as &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md&quot;&gt;‘crossgen’&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/unwinder&quot;&gt;unwinder&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Provides the low-level functionality to make it possible for the debugger and exception handling components to &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/stackwalking.md&quot;&gt;walk or unwind the stack&lt;/a&gt;. This is done via 2 functions, &lt;code class=&quot;highlighter-rouge&quot;&gt;GetModuleBase(..)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;GetFunctionEntry(..)&lt;/code&gt; which are implemented in CPU architecture-specific code, see &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/unwinder/amd64&quot;&gt;amd64&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/unwinder/arm&quot;&gt;arm&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/unwinder/arm64&quot;&gt;arm64&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/unwinder/i386&quot;&gt;i386&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/utilcode&quot;&gt;utilcode&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Shared utility code that is used by the VM, Debugger and JIT&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/zap&quot;&gt;zap&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;‘ZAP’ is the original code name for &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/6t9t5wcf%28v=vs.110%29.aspx?f=255&amp;amp;MSPPError=-2147217396&quot;&gt;NGen (Native Image Generator)&lt;/a&gt;, a tool that creates native images from .NET IL code.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;If you’ve read this far &lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=N_dUmDBfp6k&quot;&gt;‘So long and thanks for all the fish’&lt;/a&gt;&lt;/strong&gt; (YouTube)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=13949986&quot;&gt;Hacker News&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/programming/comments/6131kr/a_hitchhikers_guide_to_the_coreclr_source_code/&quot;&gt;/r/programming&lt;/a&gt;&lt;/p&gt;

     
     
     
     
   </content>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='Open Source' scheme='http://www.mattwarren.org/tags#Open Source'/>
   
 </entry>
 
 <entry>
   <title>The 68 things the CLR does before executing a single line of your code (*)</title>
   <link href="http://www.mattwarren.org/2017/02/07/The-68-things-the-CLR-does-before-executing-a-single-line-of-your-code/"/>
   <updated>2017-02-07T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2017/02/07/The-68-things-the-CLR-does-before-executing-a-single-line-of-your-code</id>
   <content type="html">
     &lt;p&gt;Because the CLR is a managed environment there are several components within the runtime that need to be initialised before &lt;em&gt;any&lt;/em&gt; of your code can be executed. This post will take a look at the EE (Execution Engine) start-up routine and examine the initialisation process in detail.&lt;/p&gt;

&lt;p&gt;(*) 68 is only a rough guide, it depends on which version of the runtime you are using, which features are enabled and a few other things&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;hello-world&quot;&gt;‘Hello World’&lt;/h2&gt;

&lt;p&gt;Imagine you have the simplest possible C# program, what has to happen before the CLR prints ‘Hello World’ out to the console?&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ConsoleApplication&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Program&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-code-path-into-the-ee-execution-engine&quot;&gt;The code path into the EE (Execution Engine)&lt;/h2&gt;

&lt;p&gt;When a .NET executable runs, control gets into the EE via the following code path:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/5c47caa806e6907df81e7a96864984df4d0f38cd/src/vm/ceemain.cpp#L2821-L2846&quot;&gt;_CorExeMain()&lt;/a&gt; (the external entry point)
    &lt;ul&gt;
      &lt;li&gt;call to &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/5c47caa806e6907df81e7a96864984df4d0f38cd/src/vm/ceemain.cpp#L2837&quot;&gt;_CorExeMainInternal()&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1d03b8fd8d650bd215623a7b035e68db96697e59/src/vm/ceemain.cpp#L2856-L2934&quot;&gt;_CorExeMainInternal()&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;call to &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1d03b8fd8d650bd215623a7b035e68db96697e59/src/vm/ceemain.cpp#L2891&quot;&gt;EnsureEEStarted()&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1d03b8fd8d650bd215623a7b035e68db96697e59/src/vm/ceemain.cpp#L366-L496&quot;&gt;EnsureEEStarted()&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;call to &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1d03b8fd8d650bd215623a7b035e68db96697e59/src/vm/ceemain.cpp#L429&quot;&gt;EEStartup()&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1d03b8fd8d650bd215623a7b035e68db96697e59/src/vm/ceemain.cpp#L1419-L1451&quot;&gt;EEStartup()&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;call to &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1d03b8fd8d650bd215623a7b035e68db96697e59/src/vm/ceemain.cpp#L1436&quot;&gt;EEStartupHelper()&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1d03b8fd8d650bd215623a7b035e68db96697e59/src/vm/ceemain.cpp#L806-L1378&quot;&gt;EEStartupHelper()&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(if you’re interested in what happens before this, i.e. how a CLR Host can start-up the runtime, see my previous post &lt;a href=&quot;/2016/07/04/How-the-dotnet-CLI-tooling-runs-your-code/&quot;&gt;‘How the dotnet CLI tooling runs your code’&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;And so we end up in &lt;code class=&quot;highlighter-rouge&quot;&gt;EEStartupHelper()&lt;/code&gt;, which at a high-level does the following (from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1d03b8fd8d650bd215623a7b035e68db96697e59/src/vm/ceemain.cpp#L1411-L1417&quot;&gt;a comment in ceemain.cpp&lt;/a&gt;):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;EEStartup is responsible for all the one time initialization of the runtime.&lt;br /&gt;
Some of the highlights of what it does include&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Creates the default and shared, appdomains.&lt;/li&gt;
    &lt;li&gt;Loads mscorlib.dll and loads up the fundamental types (System.Object …)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-main-phases-in-ee-execution-engine-start-up-routine&quot;&gt;The main phases in EE (Execution Engine) start-up routine&lt;/h2&gt;

&lt;p&gt;But let’s look at what it does in detail, the lists below contain all the individual function calls made from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1d03b8fd8d650bd215623a7b035e68db96697e59/src/vm/ceemain.cpp#L806-L1378&quot;&gt;EEStartupHelper()&lt;/a&gt; (~500 L.O.C). To make them easier to understand, we’ll split them up into separate phases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#phase-1---set-up-the-infrastructure-that-needs-to-be-in-place-before-anything-else-can-run&quot;&gt;Phase 1&lt;/a&gt; - Set-up the &lt;strong&gt;infrastructure&lt;/strong&gt; that needs to be in place before anything else can run&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#phase-2---initialise-the-core-low-level-components&quot;&gt;Phase 2&lt;/a&gt; - Initialise the &lt;strong&gt;core, low-level&lt;/strong&gt; components&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#phase-3---start-up-the-low-level-components-ie-error-handling-profiling-api-debugging&quot;&gt;Phase 3&lt;/a&gt; - Start-up the &lt;strong&gt;low-level components&lt;/strong&gt;, i.e. error handling, profiling API, debugging&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#phase-4---start-the-main-components-ie-garbage-collector-gc-appdomains-security&quot;&gt;Phase 4&lt;/a&gt; - Start the &lt;strong&gt;main components&lt;/strong&gt;, i.e. Garbage Collector (GC), AppDomains, Security&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#phase-5-final-setup-and-then-notify-other-components-that-the-ee-has-started&quot;&gt;Phase 5&lt;/a&gt; - Final setup and then &lt;strong&gt;notify other components&lt;/strong&gt; that the EE has started&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; some items in the list below are only included if a particular &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/clr.defines.targets&quot;&gt;feature&lt;/a&gt; is &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/clr.props&quot;&gt;defined at build-time&lt;/a&gt;, these are indicated by the inclusion on an &lt;code class=&quot;highlighter-rouge&quot;&gt;ifdef&lt;/code&gt; statement. Also note that the links take you to the code for the function being &lt;em&gt;called&lt;/em&gt;, not the line of code within &lt;code class=&quot;highlighter-rouge&quot;&gt;EEStartupHelper()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;phase-1---set-up-the-infrastructure-that-needs-to-be-in-place-before-anything-else-can-run&quot;&gt;Phase 1 - &lt;strong&gt;Set-up the infrastructure that needs to be in place before anything else can run&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Wire-up &lt;strong&gt;console handling&lt;/strong&gt; - &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms686016(v=vs.85).aspx&quot;&gt;SetConsoleCtrlHandler(..)&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;ifndef FEATURE_PAL&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Initialise the internal &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SString&lt;/code&gt; class&lt;/strong&gt; (everything uses strings!) - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/f5cbe4c9cab2873b60cd3c991732a250d2e164a2/src/utilcode/sstring.cpp#L46-L67&quot;&gt;SString::Startup()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Make sure the &lt;strong&gt;configuration&lt;/strong&gt; is set-up, so settings that control run-time options can be accessed - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/eeconfig.cpp#L140-L163&quot;&gt;EEConfig::Set-up()&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1d03b8fd8d650bd215623a7b035e68db96697e59/src/vm/ceemain.cpp#L568-L581&quot;&gt;InitializeHostConfigFile()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#if !defined(CROSSGEN_COMPILE)&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Initialize &lt;strong&gt;Numa and CPU group information&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/3992010c31ffc9eb50359713f1c29fd29902e04a/src/utilcode/util.cpp#L793-L796&quot;&gt;NumaNodeInfo::InitNumaNodeInfo()&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/3992010c31ffc9eb50359713f1c29fd29902e04a/src/utilcode/util.cpp#L1029-L1065&quot;&gt;CPUGroupInfo::EnsureInitialized()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifndef CROSSGEN_COMPILE&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Initialize &lt;strong&gt;global configuration settings&lt;/strong&gt; based on startup flags - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1d03b8fd8d650bd215623a7b035e68db96697e59/src/vm/ceemain.cpp#L584-L648&quot;&gt;InitializeStartupFlags()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Set-up the &lt;strong&gt;Thread Manager&lt;/strong&gt; that gives the runtime access to the OS threading functionality (&lt;code class=&quot;highlighter-rouge&quot;&gt;StartThread()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Join()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SetThreadPriority()&lt;/code&gt; etc) - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/496c33f0b5c6ad87257dd1ff1c42ea8db0a53ae0/src/vm/threads.cpp#L1550-L1692&quot;&gt;InitThreadManager()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Initialize &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/bb968803(v=vs.85).aspx&quot;&gt;&lt;strong&gt;Event Tracing (ETW)&lt;/strong&gt;&lt;/a&gt; and fire off the CLR startup events - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/38a0b157a1bad7080763009746cce92be2388b8e/src/vm/eventtrace.cpp#L4275-L4306&quot;&gt;InitializeEventTracing()&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/inc/eventtracebase.h#L123&quot;&gt;ETWFireEvent(EEStartupStart_V1)&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifdef FEATURE_EVENT_TRACE&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Set-up the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/8dbf701c.aspx&quot;&gt;&lt;strong&gt;GS Cookie (Buffer Security Check)&lt;/strong&gt;&lt;/a&gt; to help prevent buffer overruns - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1d03b8fd8d650bd215623a7b035e68db96697e59/src/vm/ceemain.cpp#L693-L741&quot;&gt;InitGSCookie()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Create the data-structures needed to hold the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/stackwalking.md#the-stack-model&quot;&gt;&lt;strong&gt;‘frames’ used for stack-traces&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/6ed21c52f25243b7cc1c64b19a47bbd4beb69314/src/vm/frames.cpp#L304-L321&quot;&gt;Frame::Init()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ensure initialization of &lt;a href=&quot;https://blogs.msdn.microsoft.com/junfeng/2004/10/09/should-we-put-apphack-in-net-2-0/&quot;&gt;&lt;strong&gt;Apphacks environment variables&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/search?utf8=%E2%9C%93&amp;amp;q=GetGlobalCompatibilityFlags&quot;&gt;GetGlobalCompatibilityFlags()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifndef FEATURE_CORECLR&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Create the &lt;strong&gt;diagnostic and performance logs&lt;/strong&gt; used by the runtime - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/f5cbe4c9cab2873b60cd3c991732a250d2e164a2/src/utilcode/log.cpp#L191-L200&quot;&gt;InitializeLogging()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifdef LOGGING&lt;/code&gt;) and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/utilcode/perflog.cpp#L58-L148&quot;&gt;PerfLog::PerfLogInitialize()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifdef ENABLE_PERF_LOG&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;phase-2---initialise-the-core-low-level-components&quot;&gt;Phase 2 - &lt;strong&gt;Initialise the core, low-level components&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Write to the log&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;===================EEStartup Starting===================&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Ensure that the &lt;strong&gt;Runtime Library functions&lt;/strong&gt; (that interact with ntdll.dll) are enabled - &lt;a href=&quot;https://github.com/dotnet/coreclr/ blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/rtlfunctions.cpp#L24-L47&quot;&gt;EnsureRtlFunctions()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifndef FEATURE_PAL&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Set-up the &lt;strong&gt;global store for&lt;/strong&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/synch.h&quot;&gt;&lt;strong&gt;events (mutexes, semaphores)&lt;/strong&gt;&lt;/a&gt; used for synchronisation within the runtime - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/eventstore.cpp#L207-L212&quot;&gt;InitEventStore()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Create the &lt;strong&gt;Assembly Binding logging&lt;/strong&gt; mechanism a.k.a &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/e74a18c4(v=vs.110).aspx&quot;&gt;Fusion&lt;/a&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/fusioninit.cpp#L174-L490&quot;&gt;InitializeFusion()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifdef FEATURE_FUSION&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Then initialize the actual &lt;strong&gt;Assembly Binder infrastructure&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/binder/coreclrbindercommon.cpp#L18-L29&quot;&gt;CCoreCLRBinderHelper::Init()&lt;/a&gt; which in turn calls &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/binder/assemblybinder.cpp#L454-L472&quot;&gt;AssemblyBinder::Startup()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifdef FEATURE_FUSION&lt;/code&gt; is NOT defined)&lt;/li&gt;
  &lt;li&gt;Set-up the heuristics used to control &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/73b4f008866b153a4d86785b648de4a281981c9e/Documentation/coding-guidelines/clr-code-guide.md#262-using-crsts&quot;&gt;&lt;strong&gt;Monitors, Crsts, and SimpleRWLocks&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/syncblk.h#L160-L170&quot;&gt;InitializeSpinConstants()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Initialize the &lt;strong&gt;InterProcess Communication with COM&lt;/strong&gt; (IPC) - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1d03b8fd8d650bd215623a7b035e68db96697e59/src/vm/ceemain.cpp#L4209-L4317&quot;&gt;InitializeIPCManager()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifdef FEATURE_IPCMAN&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Set-up and enable &lt;strong&gt;Performance Counters&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/inc/perfcounters.h&quot;&gt;PerfCounters::Init()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifdef ENABLE_PERF_COUNTERS&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Set-up the &lt;strong&gt;CLR interpreter&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/interpreter.cpp#L6612-L6635&quot;&gt;Interpreter::Initialize()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifdef FEATURE_INTERPRETER&lt;/code&gt;), turns out that the CLR has a mode where your code is interpreted instead of compiled!&lt;/li&gt;
  &lt;li&gt;Initialise the &lt;strong&gt;stubs that are used by the CLR for&lt;/strong&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/method-descriptor.md#precode&quot;&gt;&lt;strong&gt;calling methods and triggering the JIT&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/stubmgr.cpp#L719-L729&quot;&gt;StubManager::InitializeStubManagers()&lt;/a&gt;, also &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/stublink.cpp#L2281-L2293&quot;&gt;Stub::Init()&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/375948e39cf1a946b3d8048ca51cd4e548f94648/src/vm/i386/stublinkerx86.cpp#L841-L860&quot;&gt;StubLinkerCPU::Init()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Set up the &lt;strong&gt;core handle map&lt;/strong&gt;, used to load assemblies into memory - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/peimage.cpp#L39-L78&quot;&gt;PEImage::Startup()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Startup the &lt;strong&gt;access checks options&lt;/strong&gt;, used for granting/denying security demands on method calls - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/clsload.cpp#L4960-L4969&quot;&gt;AccessCheckOptions::Startup()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Startup the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/Documentation/botr/mscorlib.md#interface-between-managed--clr-code&quot;&gt;&lt;strong&gt;mscorlib binder&lt;/strong&gt;&lt;/a&gt; (used for loading “known” types from mscorlib.dll) - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/binder.cpp#L487-L491&quot;&gt;MscorlibBinder::Startup()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Initialize &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/kwdt6w2k(v=vs.71).aspx&quot;&gt;&lt;strong&gt;remoting&lt;/strong&gt;&lt;/a&gt;, &lt;strong&gt;which allows out-of-process communication&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/remoting.cpp#L121-L129&quot;&gt;CRemotingServices::Initialize()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifdef FEATURE_REMOTING&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Set-up the data structures used by the GC for &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms404247(v=vs.110).aspx&quot;&gt;&lt;strong&gt;weak, strong and no-pin references&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/38a0b157a1bad7080763009746cce92be2388b8e/src/gc/objecthandle.cpp#L612-L679&quot;&gt;Ref_Initialize()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Set-up the contexts used to &lt;a href=&quot;https://blogs.msdn.microsoft.com/suzcook/2003/06/12/executing-code-in-another-appdomain/&quot;&gt;&lt;strong&gt;proxy method calls across App Domains&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/contexts.cpp#L139-L151&quot;&gt;Context::Initialize()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Wire-up &lt;strong&gt;events that allow the EE to synchronise shut-down&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;g_pEEShutDownEvent-&amp;gt;CreateManualEvent(FALSE)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Initialise the process-wide data structures used for &lt;strong&gt;reader-writer lock implementation&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/rwlock.cpp#L115-L137&quot;&gt;CRWLock::ProcessInit()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifdef FEATURE_RWLOCK&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Initialize the &lt;strong&gt;debugger manager&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/corhost.cpp#L6090-L6100&quot;&gt;CCLRDebugManager::ProcessInit()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifdef FEATURE_INCLUDE_ALL_INTERFACES&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Initialize the &lt;strong&gt;CLR Security Attribute&lt;/strong&gt; Manager - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/corhost.cpp#L6899-L6910&quot;&gt;CCLRSecurityAttributeManager::ProcessInit()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifdef FEATURE_IPCMAN&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Set-up the manager for &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/virtual-stub-dispatch.md&quot;&gt;&lt;strong&gt;Virtual call stubs&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/74967f89e0f43e156cf23cd88840e1f0fc94f997/src/vm/virtualcallstub.cpp#L859-L886&quot;&gt;VirtualCallStubManager::InitStatic()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Initialise the lock that that &lt;strong&gt;GC uses when controlling memory pressure&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/ffeef85a626d7344fd3e2031f749c356db0628d3/src/vm/comutilnative.cpp#L1634&quot;&gt;GCInterface::m_MemoryPressureLock.Init(CrstGCMemoryPressure)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Initialize &lt;strong&gt;Assembly Usage Logger&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1d03b8fd8d650bd215623a7b035e68db96697e59/src/vm/ceemain.cpp#L744-L772&quot;&gt;InitAssemblyUsageLogManager()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifndef FEATURE_CORECLR&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;phase-3---start-up-the-low-level-components-ie-error-handling-profiling-api-debugging&quot;&gt;Phase 3 - &lt;strong&gt;Start-up the low-level components, i.e. error handling, profiling API, debugging&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Set-up the &lt;strong&gt;App Domains&lt;/strong&gt; used by the CLR - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e90db7bdfde00932d04188aa9eb105442a3fa294/src/vm/appdomain.cpp#L2229-L2287&quot;&gt;SystemDomain::Attach()&lt;/a&gt; (also creates the DefaultDomain and the SharedDomain by calling &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/93cb39e3c1bbd4407261926a7365949f288ebc37/src/vm/appdomain.cpp#L4505-L4536&quot;&gt;SystemDomain::CreateDefaultDomain()&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/93cb39e3c1bbd4407261926a7365949f288ebc37/src/vm/appdomain.cpp#L11834-L11861&quot;&gt;SharedDomain::Attach()&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Start up the &lt;strong&gt;ECall interface&lt;/strong&gt;, a private native calling interface used within the CLR - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/ecall.cpp#L510-L526&quot;&gt;ECall::Init()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Set-up the &lt;a href=&quot;/2017/01/25/How-do-.NET-delegates-work/&quot;&gt;&lt;strong&gt;caches for the stubs used by &lt;code class=&quot;highlighter-rouge&quot;&gt;delegates&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/c5abe8c5a3d74b8417378e03f560fd54799c17f2/src/vm/comdelegate.cpp#L524-L544&quot;&gt;COMDelegate::Init()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Set-up all the &lt;strong&gt;global/static variables used by the EE itself&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/b0e0168b65813f0067648966c81befff0a439da1/src/vm/codeman.cpp#L4164-L4187&quot;&gt;ExecutionManager::Init()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Initialise &lt;strong&gt;Watson, for windows error reporting&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/dwreport.cpp#L166-L189&quot;&gt;InitializeWatson(fFlags)&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifndef FEATURE_PAL&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Initialize the &lt;strong&gt;debugging services&lt;/strong&gt;, this must be done before any EE thread objects are created, and before any classes or modules are loaded - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1d03b8fd8d650bd215623a7b035e68db96697e59/src/vm/ceemain.cpp#L4067-L4168&quot;&gt;InitializeDebugger()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifdef DEBUGGING_SUPPORTED&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Activate the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/d21c150d(v=vs.110).aspx&quot;&gt;&lt;strong&gt;Managed Debugging Assistants&lt;/strong&gt;&lt;/a&gt; that the CLR provides - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/mda.cpp#L246-L270&quot;&gt;ManagedDebuggingAssistants::EEStartupActivation()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;ifdef MDA_SUPPORTED&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Initialise the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/bb384493(v=vs.110).aspx&quot;&gt;&lt;strong&gt;Profiling API&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/profilinghelper.cpp#L493-L591&quot;&gt;ProfilingAPIUtility::InitializeProfiling()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifdef PROFILING_SUPPORTED&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Initialise the &lt;strong&gt;exception handling mechanism&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/d24162bd144b37b2b353797db846aab80bf13db1/src/vm/exceptionhandling.cpp#L145-L168&quot;&gt;InitializeExceptionHandling()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Install the CLR &lt;strong&gt;global exception filter&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/2fc44782c783f363c1a98e0767f6fa65b5548c95/src/vm/excep.cpp#L4894-L5001&quot;&gt;InstallUnhandledExceptionFilter()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ensure that the initial &lt;strong&gt;runtime thread&lt;/strong&gt; is created - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/496c33f0b5c6ad87257dd1ff1c42ea8db0a53ae0/src/vm/threads.h#L649-L653&quot;&gt;SetupThread()&lt;/a&gt; in turn calls &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/496c33f0b5c6ad87257dd1ff1c42ea8db0a53ae0/src/vm/threads.cpp#L822-L1085&quot;&gt;SetupThread(..)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Initialise the &lt;strong&gt;PreStub manager&lt;/strong&gt; (&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/method-descriptor.md#precode&quot;&gt;PreStub’s trigger the JIT&lt;/a&gt;) - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/b1586fb32ae6bbb37966952c10308b328021db43/src/vm/prestub.cpp#L1688-L1702&quot;&gt;InitPreStubManager()&lt;/a&gt; and the corresponding helpers &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/stubhelpers.cpp#L46-L50&quot;&gt;StubHelpers::Init()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Initialise the &lt;strong&gt;COM Interop layer&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/interoputil.cpp#L5346-L5368&quot;&gt;InitializeComInterop()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifdef FEATURE_COMINTEROP&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Initialise &lt;strong&gt;NDirect method calls&lt;/strong&gt; (lazy binding of unmanaged P/Invoke targets) - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/8c2db15331291324573d752fb3b6a3a9dae73b31/src/vm/dllimport.cpp#L7345-L7375&quot;&gt;NDirect::Init()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Set-up the &lt;strong&gt;JIT Helper functions&lt;/strong&gt;, so they are in place before the execution manager runs - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/jitinterfacegen.cpp#L193-L299&quot;&gt;InitJITHelpers1()&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/3891c5f681eccd262f1ccca4bfa34a582573ce1d/src/vm/jithelpers.cpp#L6657-L6677&quot;&gt;InitJITHelpers2()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Initialise and set-up the &lt;strong&gt;SyncBlock cache&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/syncblk.cpp#L826-L829&quot;&gt;SyncBlockCache::Attach()&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/syncblk.cpp#L919-L949&quot;&gt;SyncBlockCache::Start()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Create the cache used when &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/stackwalking.md&quot;&gt;&lt;strong&gt;walking/unwinding the stack&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/1f1f95dc7b5c33a23ccc4df42078d11eb72d52db/src/vm/stackwalk.cpp#L3366-L3371&quot;&gt;StackwalkCache::Init()&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;phase-4---start-the-main-components-ie-garbage-collector-gc-appdomains-security&quot;&gt;Phase 4 - &lt;strong&gt;Start the main components, i.e. Garbage Collector (GC), AppDomains, Security&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Start up &lt;strong&gt;security system, that handles&lt;/strong&gt; &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/930b76w0(v=vs.90).aspx&quot;&gt;&lt;strong&gt;Code Access Security (CAS)&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/security.inl#L17-L21&quot;&gt;Security::Start()&lt;/a&gt; which in turn calls &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/securitypolicy.cpp#L94-L124&quot;&gt;SecurityPolicy::Start()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Wire-up an event to allow &lt;strong&gt;synchronisation of AppDomain unloads&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e90db7bdfde00932d04188aa9eb105442a3fa294/src/vm/appdomain.cpp#L2617-L2630&quot;&gt;AppDomain::CreateADUnloadStartEvent()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Initialise the &lt;strong&gt;‘Stack Probes’ used to setup stack guards&lt;/strong&gt;  &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/stackprobe.cpp#L556-L631&quot;&gt;InitStackProbes()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifdef FEATURE_STACK_PROBE&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Initialise the &lt;strong&gt;GC and create the heaps that it uses&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/ace6d1b728f4041d351cbf05e9356a23305be182/src/gc/gccommon.cpp#L136-L159&quot;&gt;InitializeGarbageCollector()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Initialise the &lt;strong&gt;tables used to hold the locations of pinned objects&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/81c42cecca5e1b0b802d4df980280750d2e1419e/src/vm/nativeoverlapped.cpp#L363-L371&quot;&gt;InitializePinHandleTable()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Inform the &lt;strong&gt;debugger about the DefaultDomain&lt;/strong&gt;, so it can interact with it - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e90db7bdfde00932d04188aa9eb105442a3fa294/src/vm/appdomain.cpp#L4529-L4547&quot;&gt;SystemDomain::System()-&amp;gt;PublishAppDomainAndInformDebugger(..)&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifdef DEBUGGING_SUPPORTED&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Initialise the existing &lt;strong&gt;OOB Assembly List&lt;/strong&gt; (no idea?) - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/assembly.cpp#L5062-L5067&quot;&gt;ExistingOobAssemblyList::Init()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifndef FEATURE_CORECLR&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Actually initialise the &lt;strong&gt;System Domain (which contains mscorlib)&lt;/strong&gt;, so that it can start executing - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e90db7bdfde00932d04188aa9eb105442a3fa294/src/vm/appdomain.cpp#L2478-L2591&quot;&gt;SystemDomain::System()-&amp;gt;Init()&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;phase-5-final-setup-and-then-notify-other-components-that-the-ee-has-started&quot;&gt;Phase 5 &lt;strong&gt;Final setup and then notify other components that the EE has started&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Tell the &lt;strong&gt;profiler we’ve stated up&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e90db7bdfde00932d04188aa9eb105442a3fa294/src/vm/appdomain.cpp#L4606-L4657&quot;&gt;SystemDomain::NotifyProfilerStartup()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifdef PROFILING_SUPPORTED&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Pre-create a thread to &lt;strong&gt;handle AppDomain unloads&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e90db7bdfde00932d04188aa9eb105442a3fa294/src/vm/appdomain.cpp#L12944-L13004&quot;&gt;AppDomain::CreateADUnloadWorker()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifndef CROSSGEN_COMPILE&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Set a flag to confirm that &lt;strong&gt;‘initialisation’ of the EE succeeded&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;g_fEEInit = false&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Load the &lt;strong&gt;System Assemblies (‘mscorlib’) into the Default Domain&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e90db7bdfde00932d04188aa9eb105442a3fa294/src/vm/appdomain.cpp#L6397-L6432&quot;&gt;SystemDomain::System()-&amp;gt;DefaultDomain()-&amp;gt;LoadSystemAssemblies()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Set-up all the &lt;strong&gt;shared static variables (and &lt;code class=&quot;highlighter-rouge&quot;&gt;String.Empty&lt;/code&gt;) in the Default Domain&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e90db7bdfde00932d04188aa9eb105442a3fa294/src/vm/appdomain.cpp#L7548-L7613&quot;&gt;SystemDomain::System()-&amp;gt;DefaultDomain()-&amp;gt;SetupSharedStatics()&lt;/a&gt;, they are all contained in the internal class &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/SharedStatics.cs&quot;&gt;SharedStatics.cs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Set-up the &lt;strong&gt;stack sampler feature&lt;/strong&gt;, that identifies ‘hot’ methods in your code - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/7250e6f6630839b09d54f2f71d858b33c018ae8b/src/vm/stacksampler.cpp#L85-L94&quot;&gt;StackSampler::Init()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifdef FEATURE_STACK_SAMPLING&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Perform any &lt;strong&gt;once-only&lt;/strong&gt; &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.safehandle(v=vs.110).aspx&quot;&gt;&lt;strong&gt;SafeHandle&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;initialization&lt;/strong&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/0b064eef415468f50e7360256e42737d247eb677/src/vm/safehandle.cpp#L29-L51&quot;&gt;SafeHandle::Init()&lt;/a&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;#ifndef CROSSGEN_COMPILE&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Set flags to indicate that the &lt;strong&gt;CLR has successfully started&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;g_fEEStarted = TRUE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;g_EEStartupStatus = S_OK&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;hr = S_OK&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Write to the log&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;===================EEStartup Completed===================&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Once this is all done, the CLR is now ready to execute your code!!&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;executing-your-code&quot;&gt;Executing your code&lt;/h2&gt;

&lt;p&gt;Your code will be executed (after first being ‘JITted’) via the following code flow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/corhost.cpp#L1267-L1365&quot;&gt;CorHost2::ExecuteAssembly()&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;calling &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/corhost.cpp#L1349&quot;&gt;ExecuteMainMethod()&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/5ff10a5b41d5481e21df9bbf5a4e8b419895530d/src/vm/assembly.cpp#L2698-L2784&quot;&gt;Assembly::ExecuteMainMethod()&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;calling &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/5ff10a5b41d5481e21df9bbf5a4e8b419895530d/src/vm/assembly.cpp#L2762&quot;&gt;RunMain()&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/5ff10a5b41d5481e21df9bbf5a4e8b419895530d/src/vm/assembly.cpp#L2529-L2660&quot;&gt;RunMain() (in assembly.cpp)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;eventually calling into you &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/5ff10a5b41d5481e21df9bbf5a4e8b419895530d/src/vm/assembly.cpp#L2633-L2646&quot;&gt;main() method&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/callhelpers.h#L390-L430&quot;&gt;full explanation of the ‘call’ process&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=13593210&quot;&gt;Hacker News&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/programming/comments/5slr5m/the_68_things_the_clr_does_before_executing_a/&quot;&gt;/r/programming&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;further-information&quot;&gt;Further information&lt;/h2&gt;

&lt;p&gt;The CLR provides a huge amount of log information if you create a &lt;a href=&quot;https://github.com/dotnet/coreclr#building-the-repository&quot;&gt;debug build&lt;/a&gt; and then enable the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/clr-configuration-knobs.md&quot;&gt;right environment variables&lt;/a&gt;. The links below take you to the various logs produced when running a simple ‘hello world’ program (shown at the top of this post), they give you an pretty good idea of the different things that the CLR is doing behind-the-scenes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/data/2017/02/All Classes Loaded.txt&quot;&gt;All Classes Loaded&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/data/2017/02/All Methods JITted.txt&quot;&gt;All Methods JITted&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/data/2017/02/COMPLUS-EVERYTHING.log&quot;&gt;Entire log&lt;/a&gt; (warning ~68K lines long!!)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/data/2017/02/COMPLUS-EVERYTHING-Just-EEStartup.log&quot;&gt;Log produced during EEStartupHelper() only&lt;/a&gt; (only ~48K lines!!)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/data\2017\02\COMPLUS-AppDomain.log&quot;&gt;AppDomain log&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/data\2017\02\COMPLUS-ClassLoader.log&quot;&gt;Class Loader log&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/data\2017\02\COMPLUS-ClassLoader-ConsoleApplication.log&quot;&gt;Class loader log for &lt;code class=&quot;highlighter-rouge&quot;&gt;ConsoleApplication&lt;/code&gt; only&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/data\2017\02\COMPLUS-CodeSharing.log&quot;&gt;Code Sharing log&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/data\2017\02\COMPLUS-CORDB-(CoreDebugging).log&quot;&gt;Core Debugging log&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/data\2017\02\COMPLUS-EH-(ExceptionHandling).log&quot;&gt;Exception Handling log&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/data\2017\02\COMPLUS-Jit.log&quot;&gt;JIT log&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/data\2017\02\COMPLUS-Loader.log&quot;&gt;Loader log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2017/02/07/The-68-things-the-CLR-does-before-executing-a-single-line-of-your-code/&quot;&gt;The 68 things the CLR does before executing a single line of your code (*)&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
 </entry>
 
 <entry>
   <title>How do .NET delegates work?</title>
   <link href="http://www.mattwarren.org/2017/01/25/How-do-.NET-delegates-work/"/>
   <updated>2017-01-25T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2017/01/25/How-do-.NET-delegates-work</id>
   <content type="html">
     &lt;p&gt;Delegates are a fundamental part of the .NET runtime and whilst you rarely create them directly, they are there &lt;em&gt;under-the-hood&lt;/em&gt; every time you use a lambda in LINQ (&lt;code class=&quot;highlighter-rouge&quot;&gt;=&amp;gt;&lt;/code&gt;) or a &lt;code class=&quot;highlighter-rouge&quot;&gt;Func&amp;lt;T&amp;gt;&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;Action&amp;lt;T&amp;gt;&lt;/code&gt; to &lt;a href=&quot;https://blogs.msdn.microsoft.com/madst/2007/01/23/is-c-becoming-a-functional-language/&quot;&gt;make your code more functional&lt;/a&gt;. But how do they actually work and what’s going in the CLR when you use them?&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;il-of-delegates-andor-lambdas&quot;&gt;IL of delegates and/or lambdas&lt;/h3&gt;

&lt;p&gt;Let’s start with a small code sample like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SimpleDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DelegateTest&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// create an instance of the class&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DelegateTest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DelegateTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;My instance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// create a delegate&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SimpleDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SimpleDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstanceMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// call 'InstanceMethod' via the delegate (compiler turns this into 'd1.Invoke(5)')&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;d1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns &quot;My instance: 5&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InstanceMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{0}: {1}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you were to take a look at the IL of the &lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleDelegate&lt;/code&gt; class, the &lt;code class=&quot;highlighter-rouge&quot;&gt;ctor&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Invoke&lt;/code&gt; methods look like so:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;[MethodImpl(0, MethodCodeType=MethodCodeType.Runtime)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SimpleDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;@object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntPtr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;[MethodImpl(0, MethodCodeType=MethodCodeType.Runtime)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It turns out that this behaviour is manadated by the spec, from &lt;a href=&quot;http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf&quot;&gt;ECMA 335 Standard - Common Language Infrastructure (CLI)&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/01/Delegates in the Common Language Infrastructure (CLI) Spec - highlighted.png&quot;&gt;&lt;img src=&quot;/images/2017/01/Delegates in the Common Language Infrastructure (CLI) Spec - highlighted.png&quot; alt=&quot;Delegates in the Common Language Infrastructure (CLI) Spec&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So the internal implementation of a delegate, the part responsible for calling a method, is created by the runtime. This is because there needs to be complete control over those methods, delegates are a fundamental part of the CLR, any security issues, performance overhead or other inefficiencies would be a big problem.&lt;/p&gt;

&lt;p&gt;Methods that are created in this way are technically know as &lt;code class=&quot;highlighter-rouge&quot;&gt;EEImpl&lt;/code&gt; methods (i.e. implemented by the ‘Execution Engine’), from the ‘Book of the Runtime’ (BOTR) section ‘&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/Documentation/botr/method-descriptor.md#kinds-of-methoddescs&quot;&gt;Method Descriptor - Kinds of MethodDescs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;EEImpl&lt;/strong&gt;
Delegate methods whose implementation is provided by the runtime (Invoke, BeginInvoke, EndInvoke). See &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/Documentation/project-docs/dotnet-standards.md&quot;&gt;ECMA 335 Partition II - Delegates&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There’s also more information available in these two excellent articles &lt;a href=&quot;https://www.codeproject.com/Articles/20481/NET-Type-Internals-From-a-Microsoft-CLR-Perspecti?fid=459323&amp;amp;fr=26#16&quot;&gt;.NET Type Internals - From a Microsoft CLR Perspective&lt;/a&gt; (section on ‘Delegates’) and &lt;a href=&quot;https://www.codeproject.com/Articles/26936/Understanding-NET-Delegates-and-Events-By-Practice#Internal&quot;&gt;Understanding .NET Delegates and Events, By Practice&lt;/a&gt; (section on ‘Internal Delegates Representation’)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;how-the-runtime-creates-delegates&quot;&gt;How the runtime creates delegates&lt;/h2&gt;

&lt;h3 id=&quot;inlining-of-delegate-ctors&quot;&gt;Inlining of delegate ctors&lt;/h3&gt;

&lt;p&gt;So we’ve seen that the runtime has responsibility for creating the bodies of delegate methods, but how is this done. It starts by wiring up the delegate constructor (ctor), as per the BOTR page on &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/method-descriptor.md&quot;&gt;‘method descriptors’&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;FCall&lt;/strong&gt;
Internal methods implemented in unmanaged code. These are methods marked with MethodImplAttribute(MethodImplOptions.InternalCall) attribute, &lt;strong&gt;delegate constructors&lt;/strong&gt; and tlbimp constructors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At runtime this happens when the JIT compiles a method that contains IL code for creating a delegate. In &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/0d04afc8f5919edcbb371c1e0c4f832f76aed09f/src/jit/flowgraph.cpp#L7031-L7167&quot;&gt;Compiler::fgOptimizeDelegateConstructor(..)&lt;/a&gt;, the JIT firstly obtains a reference to the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/comdelegate.cpp#L3609&quot;&gt;correct delegate ctor&lt;/a&gt;, which in the simple case is &lt;code class=&quot;highlighter-rouge&quot;&gt;CtorOpened(Object target, IntPtr methodPtr, IntPtr shuffleThunk)&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/01a9eaaa14fc3de8f11eafa6155af8ce4e44e9e9/src/mscorlib/src/System/MulticastDelegate.cs#L622-L627&quot;&gt;(link to C# code)&lt;/a&gt;, before finally wiring up the &lt;code class=&quot;highlighter-rouge&quot;&gt;ctor&lt;/code&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/0d04afc8f5919edcbb371c1e0c4f832f76aed09f/src/jit/importer.cpp#L7366&quot;&gt;inlining it if possible&lt;/a&gt; for maximum performance.&lt;/p&gt;

&lt;h3 id=&quot;creation-of-the-delegate-invoke-method&quot;&gt;Creation of the delegate Invoke() method&lt;/h3&gt;

&lt;p&gt;But what’s more interesting is the process that happens when creating the &lt;code class=&quot;highlighter-rouge&quot;&gt;Invoke()&lt;/code&gt; method, using a technique involving ‘stubs’ of code (raw-assembly) that know how to locate the information about the target method and can jump control to it. These ‘stubs’ are actually used in a wide-variety of scenarios, for instance during &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/virtual-stub-dispatch.md#stubs&quot;&gt;Virtual Method Dispatch&lt;/a&gt; and also &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/method-descriptor.md#precode&quot;&gt;by the JITter&lt;/a&gt; (when a method is first called it hits a ‘pre-code stub’ that causes the method to be JITted, the ‘stub’ is then replaced by a call to the JITted ‘native code’).&lt;/p&gt;

&lt;p&gt;In the particular case of delegates, these stubs are referred to as ‘shuffle thunks’. This is because part of the work they have to do is ‘shuffle’ the arguments that are passed into the &lt;code class=&quot;highlighter-rouge&quot;&gt;Invoke()&lt;/code&gt; method, so that are in the correct place (stack/register) by the time the ‘target’ method is called.&lt;/p&gt;

&lt;p&gt;To understand what’s going on, it’s helpful to look at the following diagram taken from the BOTR page on &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/method-descriptor.md#precode&quot;&gt;Method Descriptors and Precode stubs&lt;/a&gt;. The ‘shuffle thunks’ we are discussing are a particular case of a ‘stub’ and sit in the corresponding box in the diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/01/Figure 3 The most complex case of Precode, Stub and Native Code.png&quot; alt=&quot;Figure 3 The most complex case of Precode, Stub and Native Code&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-shuffle-thunks-are-set-up&quot;&gt;How ‘shuffle thunks’ are set-up&lt;/h3&gt;

&lt;p&gt;So let’s look at the code flow for the delegate we created in the sample at the beginning of this post, specifically an ‘open’ delegate, calling an instance method (if you are wondering about the difference between open and closed delegates, have a read of &lt;a href=&quot;http://blog.slaks.net/2011/06/open-delegates-vs-closed-delegates.html&quot;&gt;‘Open Delegates vs. Closed Delegates’&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;We start off in the &lt;code class=&quot;highlighter-rouge&quot;&gt;impImportCall()&lt;/code&gt; method, deep inside the .NET JIT, triggered when a &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.call(v=vs.110).aspx&quot;&gt;‘call’ op-code&lt;/a&gt; for a delegate is encountered, it then goes through the following functions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/0d04afc8f5919edcbb371c1e0c4f832f76aed09f/src/jit/importer.cpp#L7348-L7353&quot;&gt;Compiler::impImportCall(..)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/0d04afc8f5919edcbb371c1e0c4f832f76aed09f/src/jit/flowgraph.cpp#L7031-L7167&quot;&gt;Compiler::fgOptimizeDelegateConstructor(..)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/comdelegate.cpp#L3440-L3691&quot;&gt;COMDelegate::GetDelegateCtor(..)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/c5abe8c5a3d74b8417378e03f560fd54799c17f2/src/vm/comdelegate.cpp#L584-L632&quot;&gt;COMDelegate::SetupShuffleThunk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/stubcache.cpp#L70-L165&quot;&gt;StubCacheBase::Canonicalize(..)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/c5abe8c5a3d74b8417378e03f560fd54799c17f2/src/vm/comdelegate.cpp#L473-L483&quot;&gt;ShuffleThunkCache::CompileStub()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;EmitShuffleThunk (specific assembly code for different CPU architectures)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/arm/stubs.cpp#L1534-L1716&quot;&gt;arm&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/arm64/stubs.cpp#L1634-L1676&quot;&gt;arm64&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/375948e39cf1a946b3d8048ca51cd4e548f94648/src/vm/i386/stublinkerx86.cpp#L3989-L4240&quot;&gt;i386&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Below is the code from the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/arm64/stubs.cpp#L1634-L1676&quot;&gt;arm64 version&lt;/a&gt; (chosen because it’s the shortest one of the three!). You can see that it emits assembly code to fetch the real target address from &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodPtrAux&lt;/code&gt;, loops through the method arguments and puts them in the correct register (i.e. ‘shuffles’ them into place) and finally emits a tail-call jump to the target method associated with the delegate.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StubLinkerCPU&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EmitShuffleThunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ShuffleEntry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pShuffleEntryArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// On entry x0 holds the delegate instance. Look up the real target address stored in the MethodPtrAux
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// field and save it in x9. Tailcall to the target method after re-arranging the arguments
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// ldr x9, [x0, #offsetof(DelegateObject, _methodPtrAux)]
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;EmitLoadStoreRegImm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eLOAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DelegateObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetOffsetOfMethodPtrAux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//add x11, x0, DelegateObject::GetOffsetOfMethodPtrAux() - load the indirection cell into x11 used by ResolveWorkerAsmStub
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;EmitAddImm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DelegateObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetOffsetOfMethodPtrAux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ShuffleEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pEntry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pShuffleEntryArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srcofs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShuffleEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SENTINEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srcofs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShuffleEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REGMASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// If source is present in register then destination must also be a register
&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;_ASSERTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dstofs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShuffleEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REGMASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;EmitMovReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dstofs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShuffleEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OFSMASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srcofs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShuffleEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OFSMASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dstofs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShuffleEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REGMASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// source must be on the stack
&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;_ASSERTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srcofs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShuffleEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REGMASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;EmitLoadStoreRegImm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eLOAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dstofs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShuffleEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OFSMASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RegSp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srcofs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// source must be on the stack
&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;_ASSERTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srcofs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShuffleEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REGMASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// dest must be on the stack
&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;_ASSERTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dstofs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShuffleEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REGMASK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;EmitLoadStoreRegImm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eLOAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RegSp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srcofs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;EmitLoadStoreRegImm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eSTORE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RegSp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dstofs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Tailcall to target
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// br x9
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;EmitJumpRegister&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;other-functions-that-call-setupshufflethunk&quot;&gt;Other functions that call &lt;code class=&quot;highlighter-rouge&quot;&gt;SetupShuffleThunk(..)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The other places in code that also emit these ‘shuffle thunks’ are listed below. They are used in the various scenarios where a delegate is explicitly created, e.g. via `Delegate.CreateDelegate(..).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/7200e78258623eb889a46aa7a90818046bd1957d/src/vm/comdelegate.cpp#L881-L1099&quot;&gt;COMDelegate::BindToMethod(..)&lt;/a&gt; - actual &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/7200e78258623eb889a46aa7a90818046bd1957d/src/vm/comdelegate.cpp#L1019&quot;&gt;call to &lt;code class=&quot;highlighter-rouge&quot;&gt;SetupShuffleThunk(..)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/7200e78258623eb889a46aa7a90818046bd1957d/src/vm/comdelegate.cpp#L1938-L2174&quot;&gt;COMDelegate::DelegateConstruct(..)&lt;/a&gt; (ECall impl) - actual &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/7200e78258623eb889a46aa7a90818046bd1957d/src/vm/comdelegate.cpp#L2052&quot;&gt;call to &lt;code class=&quot;highlighter-rouge&quot;&gt;SetupShuffleThunk(..)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/7200e78258623eb889a46aa7a90818046bd1957d/src/vm/comdelegate.cpp#L3440-L3691&quot;&gt;COMDelegate::GetDelegateCtor(..)&lt;/a&gt; - actual &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/7200e78258623eb889a46aa7a90818046bd1957d/src/vm/comdelegate.cpp#L3618&quot;&gt;call to &lt;code class=&quot;highlighter-rouge&quot;&gt;SetupShuffleThunk(..)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;different-types-of-delegates&quot;&gt;Different types of delegates&lt;/h2&gt;

&lt;p&gt;Now that we’ve looked at how one type of delegate works (#2 ‘Instance open non-virt’ in the table below), it will be helpful to see the other different types that the runtime deals with. From the very informative &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/comdelegate.cpp#L3547-L3567&quot;&gt;&lt;strong&gt;DELEGATE KINDS TABLE&lt;/strong&gt;&lt;/a&gt; in the CLR source:&lt;/p&gt;

&lt;span class=&quot;compactTable&quot;&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;#&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;delegate type&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;_target&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;_methodPtr&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;_methodPtrAux&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Instance closed&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;‘this’ ptr&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;target method&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;null&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Instance open non-virt&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;delegate&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;shuffle thunk&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;target method&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Instance open virtual&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;delegate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Virtual-stub dispatch&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;method id&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Static closed&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;first arg&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;target method&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;null&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Static closed (special sig)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;delegate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;specialSig thunk&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;target method&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Static opened&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;delegate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;shuffle thunk&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;target method&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Secure&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;delegate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;call thunk&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;MethodDesc (frame)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The columns map to the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/b1f5c6acca00ca471818237d698baca317851b1f/src/mscorlib/src/System/Delegate.cs#L23-L38&quot;&gt;internal fields of a delegate&lt;/a&gt; (from &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Delegate&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;So we’ve (deliberately) looked at the simple case, but the more complex scenarios all work along similar lines, just using different and more stubs/thunks as needed e.g. ‘virtual-stub dispatch’ or ‘call thunk’.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;delegates-are-special&quot;&gt;Delegates are special!!&lt;/h2&gt;

&lt;p&gt;As well as being responsible for creating delegates, the runtime also treats delegate specially, to enforce security and/or type-safety. You can see how this is implemented in the links below&lt;/p&gt;

&lt;p&gt;In MethodTableBuilder.cpp:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/methodtablebuilder.cpp#L3341-L3352&quot;&gt;For delegates we don’t allow any non-runtime implemented bodies for any of the four special methods&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/methodtablebuilder.cpp#L6316-L6336&quot;&gt;It is not allowed for EnC (edit-and-continue) to replace one of the runtime builtin methods&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/methodtablebuilder.cpp#L6706-L6719&quot;&gt;Don’t allow overrides for any of the four special runtime implemented delegate methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In ClassCompat.cpp:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/classcompat.cpp#L2749-L2792&quot;&gt;currently the only runtime implemented functions are delegate instance methods&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/classcompat.cpp#L2869-L2880&quot;&gt;For delegates we don’t allow any non-runtime implemented bodies for any of the four special methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post in &lt;a href=&quot;https://www.reddit.com/r/programming/comments/5q2w1t/how_do_net_delegates_work/&quot;&gt;/r/programming&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/csharp/comments/5q3ges/how_do_net_delegates_work/&quot;&gt;/r/csharp&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;other-links&quot;&gt;Other links:&lt;/h2&gt;

&lt;p&gt;If you’ve read this far, good job!!&lt;/p&gt;

&lt;p&gt;As a reward, below are some extra links that cover more than you could possibly want to know about delegates!!&lt;/p&gt;

&lt;h3 id=&quot;general-info&quot;&gt;General Info:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/299703/delegate-keyword-vs-lambda-notation&quot;&gt;delegate keyword vs. lambda notation - Stack Overflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/73227/what-is-the-difference-between-lambdas-and-delegates-in-the-net-framework&quot;&gt;What is the difference between lambdas and delegates in the .NET Framework?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=13198805&quot;&gt;Why can’t the jit inline the generated code?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/6737&quot;&gt;Inline literal delegates passed to functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://csharpindepth.com/Articles/Chapter2/Events.aspx&quot;&gt;Delegates and Events&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.slaks.net/2011/06/open-delegates-vs-closed-delegates.html&quot;&gt;Open Delegates vs. Closed Delegates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.philosophicalgeek.com/2014/07/25/using-windbg-to-answer-implementation-questions-for-yourself-can-a-delegate-invocation-be-inlined/&quot;&gt;Using Windbg to answer implementation questions for yourself (Can a Delegate Invocation be Inlined?)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/8819&quot;&gt;[Question] Can Virtual Stub Dispatch be “inlined”?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/virtual-stub-dispatch.md&quot;&gt;BOTR - Virtual Stub Dispatch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;internal-delegate-info&quot;&gt;Internal Delegate Info&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.monstuff.com/archives/000038.html&quot;&gt;C# Delegates strike back · Curiosity is bliss&lt;/a&gt; (mostly from a Mono P.O.V)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/7136615/open-delegate-for-generic-interface-method&quot;&gt;Open delegate for generic interface method&lt;/a&gt; (Bug in the CLR)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/5275&quot;&gt;[ARM/Linux] ARM-softfp delegate code generation issue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/virtualcallstub.h#L122-L134&quot;&gt;On x86 are four possible kinds of callsites when you take into account all features&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/virtualcallstub.h#L179-L222&quot;&gt;VirtualCallStubManager is the heart of the stub dispatch logic. See the book of the runtime entry&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/virtualcallstub.h#L912-L948&quot;&gt;StubDispatchNotes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://syslog.ravelin.com/anatomy-of-a-function-call-in-go-f6fc81b80ecc&quot;&gt;Anatomy of a function call in Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;debugging-delegates&quot;&gt;Debugging delegates&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://geekswithblogs.net/akraus1/archive/2012/05/20/149699.aspx&quot;&gt;Useful .NET Delegate Internals&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fremag/MemoScope.Net/wiki/Delegate-Targets&quot;&gt;Delegate Targets from MemoScope.Net&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fremag/MemoScope.Net/blob/master/MemoScope/Modules/Delegates/DelegatesAnalysis.cs&quot;&gt;DelegatesAnalysis.cs from MemoScope.Net&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Microsoft/clrmd/issues/35&quot;&gt;Getting the method name of a Delegate instance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3668642/get-method-name-from-delegate-with-windbg&quot;&gt;Get method name from delegate with WinDbg&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://julmar.com/blog/debugging/sos-finding-the-method-bound-to-an-eventhandler-with-windbg/&quot;&gt;SOS: finding the method bound to an EventHandler with WinDbg.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/abhinaba/2014/09/29/net-just-in-time-compilation-and-warming-up-your-system/&quot;&gt;.NET Just in Time Compilation and Warming up Your System&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2017/01/25/How-do-.NET-delegates-work/&quot;&gt;How do .NET delegates work?&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='Benchmarking' scheme='http://www.mattwarren.org/tags#Benchmarking'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
 </entry>
 
 <entry>
   <title>Analysing Pause times in the .NET GC</title>
   <link href="http://www.mattwarren.org/2017/01/13/Analysing-Pause-times-in-the-.NET-GC/"/>
   <updated>2017-01-13T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2017/01/13/Analysing-Pause-times-in-the-.NET-GC</id>
   <content type="html">
     &lt;p&gt;Over the last few months there have been several blog posts looking at GC pauses in different programming languages or runtimes. It all started with a post looking at the &lt;a href=&quot;https://blog.pusher.com/latency-working-set-ghc-gc-pick-two/&quot;&gt;latency of the Haskell GC&lt;/a&gt;, next came a follow-up that &lt;a href=&quot;http://prl.ccs.neu.edu/blog/2016/05/24/measuring-gc-latencies-in-haskell-ocaml-racket/&quot;&gt;compared Haskell, OCaml and Racket&lt;/a&gt;, followed by &lt;a href=&quot;https://blog.pusher.com/golangs-real-time-gc-in-theory-and-practice/&quot;&gt;Go GC in Theory and Practice&lt;/a&gt;, before a final post looking at &lt;a href=&quot;http://theerlangelist.com/article/reducing_maximum_latency&quot;&gt;the situation in Erlang&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After reading all these posts I wanted to see how the .NET GC compares to the other runtime implementations.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The posts above all use a similar test program to exercise the GC, based on the message-bus scenario that &lt;a href=&quot;https://blog.pusher.com/latency-working-set-ghc-gc-pick-two/&quot;&gt;Pusher initially described&lt;/a&gt;, fortunately &lt;a href=&quot;https://gitlab.com/frje&quot;&gt;Franck Jeannin&lt;/a&gt; had &lt;a href=&quot;https://gitlab.com/frje/gc-latency-experiment/blob/master/Main.cs&quot;&gt;already started work on a .NET version&lt;/a&gt;, so this blog post will make us of that.&lt;/p&gt;

&lt;p&gt;At the heart of the test is the following code:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sw&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stopwatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StartNew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pushMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Elapsed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;worst&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Elapsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pushMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windowSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;               
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/086634ba83170ed984679e17a09167ec&quot;&gt;The full code is available&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we are creating a ‘message’ (that is actually a &lt;code class=&quot;highlighter-rouge&quot;&gt;byte[1024]&lt;/code&gt;) and then putting it into a data structure (&lt;code class=&quot;highlighter-rouge&quot;&gt;byte[][]&lt;/code&gt;). This is repeated 10 million times (&lt;code class=&quot;highlighter-rouge&quot;&gt;msgCount&lt;/code&gt;), but at any one time there are only 200,000 (&lt;code class=&quot;highlighter-rouge&quot;&gt;windowSize&lt;/code&gt;) messages in memory, because we overwrite old ‘messages’ as we go along.&lt;/p&gt;

&lt;p&gt;We are timing how long it takes to &lt;em&gt;add&lt;/em&gt; the message to the array, which should be a very quick operation. It’s not guaranteed that this time will always equate to GC pauses, but it’s pretty likely. However we can also double check the actual GC pause times by using the &lt;a href=&quot;http://www.philosophicalgeek.com/2012/07/16/how-to-debug-gc-issues-using-perfview/&quot;&gt;excellent PerfView tool&lt;/a&gt;, to give us more confidence.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;workstation-gc-vs-server-gc&quot;&gt;Workstation GC vs. Server GC&lt;/h3&gt;

&lt;p&gt;Unlike the Java GC &lt;a href=&quot;https://twitter.com/matthewwarren/status/819130794262298625&quot;&gt;that is very configurable&lt;/a&gt;, the .NET GC really only gives you a few options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Workstation&lt;/li&gt;
  &lt;li&gt;Server&lt;/li&gt;
  &lt;li&gt;Concurrent/Background&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we will be comparing the Server and Workstation modes, but as we want to &lt;em&gt;reduce&lt;/em&gt; pauses we are going to always leave &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/yhwwzef8(v=vs.110).aspx&quot;&gt;Concurrent/Background mode enabled&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As outlined in the excellent post &lt;a href=&quot;https://blogs.msdn.microsoft.com/seteplia/2017/01/05/understanding-different-gc-modes-with-concurrency-visualizer/&quot;&gt;Understanding different GC modes with Concurrency Visualizer&lt;/a&gt;, the 2 modes are optimised for different things (emphasis mine):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Workstation GC is designed for desktop applications to minimize the time spent in GC&lt;/strong&gt;. In this case GC will happen more frequently but with shorter pauses in application threads. &lt;strong&gt;Server GC is optimized for application throughput in favor of longer GC pauses&lt;/strong&gt;. Memory consumption will be higher, but application can process greater volume of data without triggering garbage collection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Therefore Workstation mode should give us shorter pauses than Server mode and the results bear this out, below is a graph of the pause times at different percentiles, &lt;a href=&quot;https://github.com/HdrHistogram/HdrHistogram.NET/&quot;&gt;recorded with by HdrHistogram.NET&lt;/a&gt; (click for full-size image):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/01/Histogram - Array - WKS v SVR.png&quot;&gt;&lt;img src=&quot;/images/2017/01/Histogram - Array - WKS v SVR.png&quot; alt=&quot;Histogram - Array - WKS v SVR&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that the X-axis scale is logarithmic, the Workstation (WKS) pauses starts increasing at the 99.99%’ile, whereas the Server (SVR) pauses only start at the 99.9999%’ile, although they have a larger maximum.&lt;/p&gt;

&lt;p&gt;Another way of looking at the results is the table below, here we can clearly see that Workstation has a-lot more GC pauses, although the max is smaller. But more significantly the total GC pause time is much higher and as a result the overall/elapsed time is twice as long (WKS v. SVR).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Workstation GC (Concurrent) vs. Server GC (Background)&lt;/strong&gt; (On .NET 4.6 - Array tests - all times in milliseconds)&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GC Mode&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Max GC Pause&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;# GC Pauses&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Total GC Pause Time&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Elapsed Time&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Peak Working Set (MB)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Workstation - 1&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;28.0&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,797&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10,266.2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;21,688.3&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;550.37&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Workstation - 2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;23.2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,796&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9,756.6&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;21,018.2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;543.50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Workstation - 3&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;19.3&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,800&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9,676.0&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;21,114.6&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;531.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Server - 1&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;104.6&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;646.4&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7,062.2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2,086.39&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Server - 2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;107.2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;664.8&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7,096.6&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2,092.65&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Server - 3&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;106.2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;558.4&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7,023.6&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2,058.12&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Therefore if you only care about the reducing the maximum pause time then Workstation mode is a suitable option, but you will experience more GC pauses overall and so the throughput of your application will be reduced. In addition, the working set is higher for Server mode as it allocates 1 heap per CPU.&lt;/p&gt;

&lt;p&gt;Fortunately in .NET we have the choice of which mode we want to use, according to the fantastic article &lt;a href=&quot;https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e&quot;&gt;Modern garbage collection&lt;/a&gt; the GO runtime has optimised for pause time only:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The reality is that Go’s GC does not really implement any new ideas or research. As their announcement admits, it is a straightforward concurrent mark/sweep collector based on ideas from the 1970s. &lt;strong&gt;It is notable only because it has been designed to optimise for pause times at the cost of absolutely every other desirable characteristic in a GC&lt;/strong&gt;. Go’s &lt;a href=&quot;https://talks.golang.org/2015/go-gc.pdf&quot;&gt;tech talks&lt;/a&gt; and marketing materials don’t seem to mention any of these tradeoffs, leaving developers unfamiliar with garbage collection technologies to assume that no such tradeoffs exist, and by implication, that Go’s competitors are just badly engineered piles of junk.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;max-gc-pause-time-compared-to-amount-of-live-objects&quot;&gt;Max GC Pause Time compared to Amount of Live Objects&lt;/h3&gt;

&lt;p&gt;To investigate things further, let’s look at how the maximum pause times vary with the number of &lt;em&gt;live objects&lt;/em&gt;. If you refer back to the sample code, we will still be allocating 10,000,000 message (&lt;code class=&quot;highlighter-rouge&quot;&gt;msgCount&lt;/code&gt;), but we will vary the amount that are kept around at any one time by changing the &lt;code class=&quot;highlighter-rouge&quot;&gt;windowSize&lt;/code&gt; value. Here are the results (click for full-size image):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/01/GC Pause times compared to WindowSize.png&quot;&gt;&lt;img src=&quot;/images/2017/01/GC Pause times compared to WindowSize.png&quot; alt=&quot;GC Pause times compared to WindowSize&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So you can clearly see that the max pause time is proportional (linearly?) to the amount of live objects, i.e. the amount of objects that survive the GC. Why is this that case, well to get a bit more info we will again use PerfView to help us. If you compare the 2 tables below, you can see that the ‘Promoted MB’ is drastically different, a lot more memory is promoted when we have a larger &lt;code class=&quot;highlighter-rouge&quot;&gt;windowSize&lt;/code&gt;, so the GC has more work to do and as a result the ‘Pause MSec’ times go up.&lt;/p&gt;

&lt;center&gt;&lt;table border=&quot;1&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th colspan=&quot;13&quot;&gt;GC Events by Time - windowSize = 100,000&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th colspan=&quot;13&quot;&gt;All times are in msec. Hover over columns for help.&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;GC&lt;br /&gt;Index&lt;/th&gt;&lt;th title=&quot;N=NonConcurrent, B=Background, F=Foreground (while background is running) I=Induced i=InducedNotForced&quot;&gt;Gen&lt;/th&gt;&lt;th&gt;Pause&lt;br /&gt;MSec&lt;/th&gt;&lt;th title=&quot;Amount allocated since the last GC occured&quot;&gt;Gen0&lt;br /&gt;Alloc&lt;br /&gt;MB&lt;/th&gt;&lt;th title=&quot;The peak size of the GC during GC. (includes fragmentation)&quot;&gt;Peak&lt;br /&gt;MB&lt;/th&gt;&lt;th title=&quot;The size after GC (includes fragmentation)&quot;&gt;After&lt;br /&gt;MB&lt;/th&gt;&lt;th title=&quot;Memory this GC promoted&quot;&gt;Promoted&lt;br /&gt;MB&lt;/th&gt;&lt;th title=&quot;Size of gen0 at the end of this GC.&quot;&gt;Gen0&lt;br /&gt;MB&lt;/th&gt;&lt;th title=&quot;Size of gen1 at the end of this GC.&quot;&gt;Gen1&lt;br /&gt;MB&lt;/th&gt;&lt;th title=&quot;Size of Gen2 in MB at the end of this GC.&quot;&gt;Gen2&lt;br /&gt;MB&lt;/th&gt;&lt;th title=&quot;Size of Large object heap (LOH) in MB at the end of this GC.&quot;&gt;LOH&lt;br /&gt;MB&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align: right;&quot;&gt;2&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;1N&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;39.443&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;1,516.354&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;1,516.354&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;108.647&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;104.831&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;0.000&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;107.200&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;0.031&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;1.415&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align: right;&quot;&gt;3&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;0N&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;38.516&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;1,651.466&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;0.000&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;215.847&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;104.800&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;0.000&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;214.400&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;0.031&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;1.415&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align: right;&quot;&gt;4&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;1N&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;42.732&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;1,693.908&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;1,909.754&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;108.647&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;104.800&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;0.000&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;107.200&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;0.031&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;1.415&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align: right;&quot;&gt;5&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;0N&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;35.067&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;1,701.012&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;1,809.658&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;215.847&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;104.800&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;0.000&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;214.400&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;0.031&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;1.415&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align: right;&quot;&gt;6&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;1N&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;54.424&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;1,727.380&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;1,943.226&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;108.647&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;104.800&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;0.000&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;107.200&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;0.031&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;1.415&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align: right;&quot;&gt;7&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;0N&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;35.208&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;1,603.832&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;1,712.479&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;215.847&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;104.800&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;0.000&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;214.400&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;0.031&lt;/td&gt;&lt;td style=&quot;text-align: right;&quot;&gt;1.415&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/center&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/01/GC Events by Time - windowSize 100,000.png&quot;&gt;Full PerfView output&lt;/a&gt;&lt;/p&gt;

&lt;center&gt;&lt;table border=&quot;1&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th colspan=&quot;13&quot; align=&quot;Center&quot;&gt;GC Events by Time - windowSize = 400,000&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th colspan=&quot;13&quot; align=&quot;Center&quot;&gt;All times are in msec. Hover over columns for help.&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;GC&lt;br /&gt;Index&lt;/th&gt;&lt;th title=&quot;N=NonConcurrent, B=Background, F=Foreground (while background is running) I=Induced i=InducedNotForced&quot;&gt;Gen&lt;/th&gt;&lt;th&gt;Pause&lt;br /&gt;MSec&lt;/th&gt;&lt;th title=&quot;Amount allocated since the last GC occured&quot;&gt;Gen0&lt;br /&gt;Alloc&lt;br /&gt;MB&lt;/th&gt;&lt;th title=&quot;The peak size of the GC during GC. (includes fragmentation)&quot;&gt;Peak&lt;br /&gt;MB&lt;/th&gt;&lt;th title=&quot;The size after GC (includes fragmentation)&quot;&gt;After&lt;br /&gt;MB&lt;/th&gt;&lt;th title=&quot;Memory this GC promoted&quot;&gt;Promoted&lt;br /&gt;MB&lt;/th&gt;&lt;th title=&quot;Size of gen0 at the end of this GC.&quot;&gt;Gen0&lt;br /&gt;MB&lt;/th&gt;&lt;th title=&quot;Size of gen1 at the end of this GC.&quot;&gt;Gen1&lt;br /&gt;MB&lt;/th&gt;&lt;th title=&quot;Size of Gen2 in MB at the end of this GC.&quot;&gt;Gen2&lt;br /&gt;MB&lt;/th&gt;&lt;th title=&quot;Size of Large object heap (LOH) in MB at the end of this GC.&quot;&gt;LOH&lt;br /&gt;MB&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;right&quot;&gt;2&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0N&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;10.319&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;76.170&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;76.170&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;76.133&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;68.983&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0.000&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;72.318&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0.000&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;3.815&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;right&quot;&gt;3&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;1N&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;47.192&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;666.089&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0.000&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;708.556&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;419.231&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0.000&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;704.016&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0.725&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;3.815&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;right&quot;&gt;4&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0N&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;145.347&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;1,023.369&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;1,731.925&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;868.610&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;419.200&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0.000&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;864.070&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0.725&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;3.815&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;right&quot;&gt;5&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;1N&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;190.736&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;1,278.314&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;2,146.923&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;433.340&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;419.200&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0.000&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;428.800&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0.725&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;3.815&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;right&quot;&gt;6&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0N&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;150.689&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;1,235.161&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;1,668.501&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;862.140&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;419.200&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0.000&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;857.600&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0.725&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;3.815&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;right&quot;&gt;7&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;1N&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;214.465&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;1,493.290&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;2,355.430&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;433.340&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;419.200&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0.000&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;428.800&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0.725&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;3.815&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;right&quot;&gt;8&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0N&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;148.816&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;1,055.470&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;1,488.810&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;862.140&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;419.200&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0.000&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;857.600&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0.725&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;3.815&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;right&quot;&gt;9&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;1N&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;225.881&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;1,543.345&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;2,405.485&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;433.340&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;419.200&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0.000&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;428.800&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0.725&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;3.815&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;right&quot;&gt;10&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0N&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;148.292&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;1,077.176&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;1,510.516&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;862.140&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;419.200&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0.000&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;857.600&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0.725&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;3.815&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;right&quot;&gt;11&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;1N&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;225.917&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;1,610.319&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;2,472.459&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;433.340&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;419.200&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0.000&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;428.800&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;0.725&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;3.815&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/center&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/01/GC Events by Time - windowSize 400,000.png&quot;&gt;Full PerfView output&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;going-off-heap&quot;&gt;Going ‘off-heap’&lt;/h3&gt;

&lt;p&gt;Finally, if we really want to eradicate GC pauses in .NET, we can go off-heap. To do that we can write &lt;code class=&quot;highlighter-rouge&quot;&gt;unsafe&lt;/code&gt; code like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windowSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IntPtr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unmanagedPointer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Marshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AllocHGlobal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytePtr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unmanagedPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Get the raw data into the bytePtr (byte *) &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// in reality this would come from elsewhere, e.g. a network packet&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// but for the test we'll just cheat and populate it in a loop&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;*(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytePtr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Copy the unmanaged byte array (byte*) into the managed one (byte[])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Marshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unmanagedPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Marshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FreeHGlobal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unmanagedPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note: I wouldn’t recommend this option unless you have first profiled and determined that GC pauses are a problem, it’s called &lt;code class=&quot;highlighter-rouge&quot;&gt;unsafe&lt;/code&gt; for a reason.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017/01/Histogram - Array - SVR v OffHeap.png&quot;&gt;&lt;img src=&quot;/images/2017/01/Histogram - Array - SVR v OffHeap.png&quot; alt=&quot;Histogram - Array - SVR v OffHeap&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But as the graph shows, it clearly works (the off-heap values are there, honest!!). But it’s not that surprising, we are giving the GC nothing to do (because off-heap memory isn’t tracked by the GC), we get no GC pauses!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To finish let’s get a final work from Maoni Stephens, the main GC dev on the .NET runtime, from &lt;a href=&quot;https://blogs.msdn.microsoft.com/maoni/2014/12/25/gc-etw-events-2/&quot;&gt;GC ETW events – 2 – Maoni’s WebLog&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It doesn’t even mean for the longest individual GC pauses you should always look at full GCs because full GCs can be done concurrently, which means you could have gen2 GCs whose pauses are shorter than ephemeral GCs. And even if full GCs did have longest individual pauses, it still doesn’t necessarily mean you should only look at them because you might be doing these GCs very infrequently, and ephemeral GCs actually contribute to most of the GC pause time if the total GC pauses are your problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note: &lt;strong&gt;Ephemeral&lt;/strong&gt; generations and segments - Because objects in generations 0 and 1 are short-lived, these generations are known as the &lt;strong&gt;ephemeral&lt;/strong&gt; generations.&lt;/p&gt;

&lt;p&gt;So if GC pause times are a genuine issue in your application, make sure you analyse them correctly!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post in &lt;a href=&quot;https://www.reddit.com/r/csharp/comments/5ns3dx/analysing_pause_times_in_the_net_gc/&quot;&gt;/r/csharp&lt;/a&gt;, &lt;a href=&quot;https://www.reddit.com/r/programming/comments/5nrror/analysing_pause_times_in_the_net_gc/&quot;&gt;/r/programming&lt;/a&gt; and &lt;a href=&quot;https://news.ycombinator.com/item?id=13397898&quot;&gt;Hacker News&lt;/a&gt;&lt;/p&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2017/01/13/Analysing-Pause-times-in-the-.NET-GC/&quot;&gt;Analysing Pause times in the .NET GC&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='Garbage Collectors' scheme='http://www.mattwarren.org/tags#Garbage Collectors'/>
   
 </entry>
 
 <entry>
   <title>Why Exceptions should be Exceptional</title>
   <link href="http://www.mattwarren.org/2016/12/20/Why-Exceptions-should-be-Exceptional/"/>
   <updated>2016-12-20T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/12/20/Why-Exceptions-should-be-Exceptional</id>
   <content type="html">
     &lt;p&gt;&lt;img src=&quot;/images/2016/12/Meteor-Hit-588072.jpg&quot; alt=&quot;Meteor Hit on the Earth&quot; /&gt;&lt;/p&gt;

&lt;p&gt;According to the &lt;a href=&quot;http://neo.jpl.nasa.gov/&quot;&gt;NASA ‘Near Earth Object Program’&lt;/a&gt; asteroid &lt;a href=&quot;http://neo.jpl.nasa.gov/risk/a101955.html&quot;&gt;‘&lt;em&gt;101955 Bennu (1999 RQ36)&lt;/em&gt;’&lt;/a&gt; has a Cumulative Impact Probability of 3.7e-04, i.e. there is a &lt;strong&gt;1 in 2,700&lt;/strong&gt; (0.0370%) chance of Earth impact, but more reassuringly there is a 99.9630% chance the asteroid will miss the Earth completely!&lt;/p&gt;

&lt;p&gt;But how does this relate to exceptions in the .NET runtime, well let’s take a look at the official .NET &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms229030(v=vs.110).aspx&quot;&gt;Framework Design Guidelines for Throwing Exceptions&lt;/a&gt; (which are based on the excellent book &lt;a href=&quot;http://amzn.to/2hOOHsR&quot;&gt;Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/12/Framework Design Guidelines for Exceptions.png&quot; alt=&quot;Framework Design Guidelines for Exceptions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So exceptions should be exceptional, unusual or rare, much like a asteroid strike!!&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;net-framework-tryxxx-pattern&quot;&gt;.NET Framework TryXXX() Pattern&lt;/h3&gt;

&lt;p&gt;In .NET, the recommended was to avoid exceptions in normal code flow is to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;TryXXX()&lt;/code&gt; pattern. As pointed out in the guideline section on &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms229009(v=vs.110).aspx&quot;&gt;Exceptions and Performance&lt;/a&gt;, rather than writing code like this, which has to catch the exception when the input string isn’t a valid integer:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IANAN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FormatException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should instead use the &lt;code class=&quot;highlighter-rouge&quot;&gt;TryXXX&lt;/code&gt; API, in the following pattern:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TryParse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IANAN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// SUCCESS!!&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// FAIL!!&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Fortunately large parts of the .NET runtime use this pattern for non-exceptional events, such as parsing a string, creating a URL or adding an item to a Concurrent Dictionary.&lt;/p&gt;

&lt;h2 id=&quot;the-performance-costs-of-exceptions&quot;&gt;The performance costs of exceptions&lt;/h2&gt;

&lt;p&gt;So onto the performance costs, I was inspired to write this post after reading this tweet from &lt;a href=&quot;https://twitter.com/clemensv&quot;&gt;Clemens Vasters&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/clemensv/status/722821904189362179&quot;&gt;&lt;img src=&quot;/images/2016/12/Clemens Vasters tweet.png&quot; alt=&quot;Clemens Vasters tweet&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also copied/borrowed a large amount of ideas from the excellent post &lt;a href=&quot;https://shipilev.net/blog/2014/exceptional-performance/&quot;&gt;‘The Exceptional Performance of Lil’ Exception’&lt;/a&gt; by Java performance guru &lt;a href=&quot;https://twitter.com/shipilev&quot;&gt;Aleksey Shipilëv&lt;/a&gt; (this post is in essence the .NET version of his post, which focuses exclusively on exceptions in the JVM)&lt;/p&gt;

&lt;p&gt;So lets start with the full results (click for full-size image):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/12/Exception Benchmark Results.png&quot;&gt;&lt;img src=&quot;/images/2016/12/Exception Benchmark Results.png&quot; alt=&quot;Exception Benchmark Results&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://gist.github.com/mattwarren/e3cdd278ba9c2cad03cc6b53ce6d47f6&quot;&gt;Full Benchmark Code and Results&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;rare-exceptions-v-error-code-handling&quot;&gt;Rare exceptions v Error Code Handling&lt;/h3&gt;

&lt;p&gt;Up front I want to be clear that nothing in this post is meant to contradict the best-practices outlined in the .NET Framework Guidelines (above), in fact I hope that it actually backs them up!&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Method&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Mean&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;StdErr&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;StdDev&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Scaled&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ErrorCodeWithReturnValue&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.4472 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.0088 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.0341 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RareExceptionStackTrace&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;22.0401 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.0292 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.1132 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;15.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RareExceptionMediumStackTrace&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;61.8835 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.0609 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.2279 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;42.78&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RareExceptionDeepStackTrace&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;115.3692 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.1795 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.6953 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;79.76&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Here we can see that as long as you follow the guidance and ‘DO NOT use exceptions for the normal flow of control’ then they are actually not that costly. I mean yes, they’re 15 times slower than using error codes, but we’re only talking about 22 nanoseconds, i.e. 22 billionths of a second, you have to be throwing exceptions frequently for it to be noticeable. For reference, here’s what the code for the first 2 results looks like:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResultAndErrorCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrorCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;[Benchmark(Baseline = true)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResultAndErrorCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ErrorCodeWithReturnValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResultAndErrorCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;[Benchmark]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RareExceptionStackTrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;RareLevel20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// start all the way down&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Prevent Error CS0161: not all code paths return a value&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InvalidOperationException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ioex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Force collection of a full StackTrace&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ioex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StackTrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Where the ‘RareLevelXX() functions look like this (i.e. will &lt;strong&gt;only&lt;/strong&gt; trigger an exception once for every 2,700 times it’s called):&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;[MethodImpl(MethodImplOptions.NoInlining)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RareLevel1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RareLevel2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[MethodImpl(MethodImplOptions.NoInlining)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RareLevel2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RareLevel3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// several layers left out!!&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[MethodImpl(MethodImplOptions.NoInlining)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RareLevel19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RareLevel20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[MethodImpl(MethodImplOptions.NoInlining)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RareLevel20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// will *rarely* happen (1 in 2700)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chanceOfAsteroidHit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InvalidOperationException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Deep Stack Trace - Rarely triggered&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;            
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Therefore &lt;code class=&quot;highlighter-rouge&quot;&gt;RareExceptionMediumStackTrace()&lt;/code&gt; just calls &lt;code class=&quot;highlighter-rouge&quot;&gt;RareLevel10()&lt;/code&gt; to get a medium stack trace and &lt;code class=&quot;highlighter-rouge&quot;&gt;RareExceptionDeepStackTrace()&lt;/code&gt; calls &lt;code class=&quot;highlighter-rouge&quot;&gt;RareLevel1()&lt;/code&gt; which triggers the full/deep one (the full &lt;a href=&quot;https://gist.github.com/mattwarren/e3cdd278ba9c2cad03cc6b53ce6d47f6&quot;&gt;benchmark code is available&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;stack-traces&quot;&gt;Stack traces&lt;/h3&gt;

&lt;p&gt;Now that we’ve seen the cost of calling exceptions rarely, we’re going to look at the effect the stack trace depth has on performance. Here are the full, raw results:&lt;/p&gt;

&lt;span class=&quot;compactTable&quot;&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Method&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Mean&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;StdErr&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;StdDev&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Gen 0&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Allocated&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Exception-Message&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9,187.9417 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13.4824 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;48.6117 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;148 B&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Exception-TryCatch&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9,253.0215 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13.2496 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;51.3154 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;148 B&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Exception&lt;strong&gt;Medium&lt;/strong&gt;-Message&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14,911.7999 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;20.2448 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;78.4078 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;916 B&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Exception&lt;strong&gt;Medium&lt;/strong&gt;-TryCatch&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;15,158.0940 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;147.4210 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;737.1049 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;916 B&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Exception&lt;strong&gt;Deep&lt;/strong&gt;-Message&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;19,166.3524 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;30.0539 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;116.3984 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;916 B&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Exception&lt;strong&gt;Deep&lt;/strong&gt;-TryCatch&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;19,581.6743 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;208.3895 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;833.5579 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;916 B&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CachedException-StackTrace&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;29,354.9344 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;34.8932 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;135.1407 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.82 kB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Exception-StackTrace&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;30,178.7152 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;41.0362 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;158.9327 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.93 kB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Exception&lt;strong&gt;Medium&lt;/strong&gt;-StackTrace&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;100,121.7951 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;129.0631 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;499.8591 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.1953&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;15.71 kB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Exception&lt;strong&gt;Deep&lt;/strong&gt;-StackTrace&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;154,569.3454 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;205.2174 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;794.8034 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3.6133&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;27.42 kB&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; in these tests we are triggering an exception &lt;strong&gt;every-time&lt;/strong&gt; a method is called, they aren’t the rare cases that we measured previously.&lt;/p&gt;

&lt;h4 id=&quot;exception-handling-without-collecting-the-full-stacktrace&quot;&gt;&lt;strong&gt;Exception handling without collecting the full StackTrace&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;First we are going to look at the results measuring the scenario where we &lt;strong&gt;don’t&lt;/strong&gt; explicitly collect the &lt;code class=&quot;highlighter-rouge&quot;&gt;StackTrace&lt;/code&gt; after the exception is caught, so the benchmark code looks like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;[Benchmark]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExceptionMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Level20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// start *all* the way down the stack&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Prevent Error CS0161: not all code paths return a value&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InvalidOperationException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ioex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Only get the simple message from the Exception &lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// (don't trigger a StackTrace collection)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ioex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the following graphs, &lt;strong&gt;shallow&lt;/strong&gt; stack traces are in &lt;font color=&quot;#5B9BD5&quot; style=&quot;font-weight: bold;&quot;&gt;blue bars&lt;/font&gt;, &lt;strong&gt;medium&lt;/strong&gt; in &lt;font color=&quot;#ED7D31&quot; style=&quot;font-weight: bold;&quot;&gt;orange&lt;/font&gt; and &lt;strong&gt;deep&lt;/strong&gt; stacks are shown in &lt;font color=&quot;#70AD47&quot; style=&quot;font-weight: bold;&quot;&gt;green&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/12/Exception Handling - NOT Calculating StackTrace.png&quot;&gt;&lt;img src=&quot;/images/2016/12/Exception Handling - NOT Calculating StackTrace.png&quot; alt=&quot;Exception Handling - NOT Calculating StackTrace&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we clearly see there is an extra cost for exception handling that increases the deeper the stack trace goes. This is because when an exception is thrown the runtime needs to search up the stack until it hits a method than can handle it. The further it has to look up the stack, the more work it has to do.&lt;/p&gt;

&lt;h4 id=&quot;exception-handling-including-collection-of-the-full-stacktrace&quot;&gt;&lt;strong&gt;Exception handling including collection of the full StackTrace&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Now for the final results, in which we &lt;strong&gt;explicitly ask&lt;/strong&gt; the run-time to (lazily) fetch the full stack trace, by accessing the &lt;code class=&quot;highlighter-rouge&quot;&gt;StackTrace&lt;/code&gt; property. The code looks like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;[Benchmark]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExceptionStackTrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Level20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// start *all* the way down the stack&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Prevent Error CS0161: not all code paths return a value&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InvalidOperationException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ioex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Force collection of a full StackTrace&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ioex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StackTrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/12/Exception Handling - Calculating StackTrace.png&quot;&gt;&lt;img src=&quot;/images/2016/12/Exception Handling - Calculating StackTrace.png&quot; alt=&quot;Exception Handling - Calculating StackTrace&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally we see that fetching the entire stack trace (via &lt;code class=&quot;highlighter-rouge&quot;&gt;StackTrace&lt;/code&gt;) dominates the performance of just handling the exception (ie. only accessing the exception message). But again, the deeper the stack trace, the higher the cost.&lt;/p&gt;

&lt;p&gt;So thanks goodness we’re in the .NET world, where huge stack traces are rare. Over in &lt;a href=&quot;https://ptrthomas.wordpress.com/2006/06/06/java-call-stack-from-http-upto-jdbc-as-a-picture/&quot;&gt;Java-land they have to deal with nonesense like this&lt;/a&gt; (click to see the full-res version!!):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/12/Huge Java Stack Trace.png&quot;&gt;&lt;img src=&quot;/images/2016/12/Huge Java Stack Trace - smaller.png&quot; alt=&quot;Huge Java Stack Trace&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Rare or Exceptional exceptions are not hugely expensive&lt;/strong&gt; and they should &lt;strong&gt;always&lt;/strong&gt; be the preferred way of error handling in .NET&lt;/li&gt;
  &lt;li&gt;If you have code that is &lt;strong&gt;expected to fail often&lt;/strong&gt; (such as parsing a string into an integer), use the &lt;code class=&quot;highlighter-rouge&quot;&gt;TryXXX()&lt;/code&gt; pattern&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The deeper the stack trace, the more work that has to be done&lt;/strong&gt;, so the more overhead there is when catching/handling exceptions&lt;/li&gt;
  &lt;li&gt;This is even more true if you are also fetching the entire stack trace, via the &lt;code class=&quot;highlighter-rouge&quot;&gt;StackTrace&lt;/code&gt; property. &lt;strong&gt;So if you don’t need it, don’t fetch it.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Discuss this post in &lt;a href=&quot;https://www.reddit.com/r/programming/comments/5jdosy/why_exceptions_should_be_exceptional/&quot;&gt;/r/programming&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/csharp/comments/5je0o3/why_exceptions_should_be_exceptional/&quot;&gt;/r/csharp&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/ricom/2003/12/19/exception-cost-when-to-throw-and-when-not-to/&quot;&gt;Exception Cost: When to throw and when not to&lt;/a&gt; a classic post on the subject, by ‘.NET Perf Guru’ Rico Mariani.&lt;/p&gt;

&lt;h3 id=&quot;the-stack-trace-of-a-stacktrace&quot;&gt;The stack trace of a StackTrace!!&lt;/h3&gt;

&lt;p&gt;The full call-stack that the CLR goes through when fetching the data for the Exception &lt;code class=&quot;highlighter-rouge&quot;&gt;StackTrace&lt;/code&gt; property&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://referencesource.microsoft.com/#mscorlib/system/exception.cs,950d763693dd32d3&quot;&gt;Exception - public virtual String StackTrace&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://referencesource.microsoft.com/#mscorlib/system/exception.cs,fd7466f7c15d31c7&quot;&gt;Exception - private string GetStackTrace(..)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://referencesource.microsoft.com/#mscorlib/system/environment.cs,40b558dbbbc4b07a&quot;&gt;Environment - internal static String GetStackTrace(..)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://referencesource.microsoft.com/#mscorlib/system/diagnostics/stacktrace.cs,15f43636ec9ec56f&quot;&gt;Diagnostics - public StackTrace(..)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://referencesource.microsoft.com/#mscorlib/system/diagnostics/stacktrace.cs,2938a79cef33dc28&quot;&gt;Diagnostics - private void CaptureStackTrace(..)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://referencesource.microsoft.com/#mscorlib/system/diagnostics/stacktrace.cs,3a7c9de344634c84&quot;&gt;Diagnostics - internal static extern void GetStackFramesInternal(..)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32d03bb66a51c7ed6712c4cdd319de0cc7cbbf37/src/vm/debugdebugger.cpp#L391-L868&quot;&gt;debugdebugger - DebugStackTrace::GetStackFramesInternal(..)&lt;/a&gt; (c/c++)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32d03bb66a51c7ed6712c4cdd319de0cc7cbbf37/src/vm/debugdebugger.cpp#L1185-L1289&quot;&gt;debugdebugger - DebugStackTrace::GetStackFramesFromException(..)&lt;/a&gt; (c/c++)&lt;/li&gt;
&lt;/ul&gt;


     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2016/12/20/Why-Exceptions-should-be-Exceptional/&quot;&gt;Why Exceptions should be Exceptional&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='Benchmarking' scheme='http://www.mattwarren.org/tags#Benchmarking'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
 </entry>
 
 <entry>
   <title>Why is reflection slow?</title>
   <link href="http://www.mattwarren.org/2016/12/14/Why-is-Reflection-slow/"/>
   <updated>2016-12-14T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/12/14/Why-is-Reflection-slow</id>
   <content type="html">
     &lt;p&gt;It’s common knowledge that &lt;a href=&quot;http://stackoverflow.com/search?q=reflection+slow&quot;&gt;reflection in .NET is slow&lt;/a&gt;, but why is that the case? This post aims to figure that out by looking at what reflection does &lt;em&gt;under-the-hood&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;clr-type-system-design-goals&quot;&gt;CLR Type System Design Goals&lt;/h3&gt;

&lt;p&gt;But first it’s worth pointing out that part of the reason reflection isn’t fast is that it was never designed to have &lt;em&gt;high-performance&lt;/em&gt; as one of its goals, from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/Documentation/botr/type-system.md#design-goals-and-non-goals&quot;&gt;Type System Overview - ‘Design Goals and Non-goals’&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Goals&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Accessing information needed at runtime from executing (non-reflection) code is very fast.&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;Accessing information needed at compilation time for generating code is straightforward.&lt;/li&gt;
    &lt;li&gt;The garbage collector/stackwalker is able to access necessary information without taking locks, or allocating memory.&lt;/li&gt;
    &lt;li&gt;Minimal amounts of types are loaded at a time.&lt;/li&gt;
    &lt;li&gt;Minimal amounts of a given type are loaded at type load time.&lt;/li&gt;
    &lt;li&gt;Type system data structures must be storable in NGEN images.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Non-Goals&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;All information in the metadata is directly reflected in the CLR data structures.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;All uses of reflection are fast.&lt;/strong&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;and along the same lines, from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/Documentation/botr/type-loader.md#key-data-structures&quot;&gt;Type Loader Design - ‘Key Data Structures’&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;EEClass&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;MethodTable data are split into “hot” and “cold” structures to improve working set and cache utilization. MethodTable itself is meant to only store “hot” data that are needed in program steady state. &lt;strong&gt;EEClass stores “cold” data that are typically only needed by type loading, JITing or reflection.&lt;/strong&gt; Each MethodTable points to one EEClass.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-does-reflection-work&quot;&gt;How does Reflection work?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;So we know that ensuring reflection was fast was not a design goal, but what is it doing that takes the extra time?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well there several things that are happening, to illustrate this lets look at the managed and unmanaged code call-stack that a reflection call goes through.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;System.Reflection.RuntimeMethodInfo.Invoke&lt;/strong&gt;(..) - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/b638af3a4dd52fa7b1ea1958164136c72096c25c/src/mscorlib/src/System/Reflection/MethodInfo.cs#L619-L638&quot;&gt;source code link&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;calling &lt;strong&gt;System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal&lt;/strong&gt;(..)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;System.RuntimeMethodHandle.PerformSecurityCheck&lt;/strong&gt;(..) - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e67851210d1c03d730a3bc97a87e8a6713bbf772/src/vm/reflectioninvocation.cpp#L949-L974&quot;&gt;link&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;calling &lt;strong&gt;System.GC.KeepAlive&lt;/strong&gt;(..)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal&lt;/strong&gt;(..) - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/b638af3a4dd52fa7b1ea1958164136c72096c25c/src/mscorlib/src/System/Reflection/MethodInfo.cs#L651-L665&quot;&gt;link&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;calling stub for &lt;strong&gt;System.RuntimeMethodHandle.InvokeMethod&lt;/strong&gt;(..)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;stub for &lt;strong&gt;System.RuntimeMethodHandle.InvokeMethod&lt;/strong&gt;(..) - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e67851210d1c03d730a3bc97a87e8a6713bbf772/src/vm/reflectioninvocation.cpp#L1322-L1732&quot;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even if you don’t click the links and look at the individual C#/cpp methods, you can intuitively tell that there’s &lt;em&gt;alot&lt;/em&gt; of code being executed along the way. But to give you an example, the final method, where the bulk of the work is done, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e67851210d1c03d730a3bc97a87e8a6713bbf772/src/vm/reflectioninvocation.cpp#L1322-L1732&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;System.RuntimeMethodHandle.InvokeMethod&lt;/code&gt; is over 400 LOC&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But this is a nice overview, however what is it &lt;em&gt;specifically&lt;/em&gt; doing?&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;fetching-the-method-information&quot;&gt;Fetching the Method information&lt;/h3&gt;

&lt;p&gt;Before you can invoke a field/property/method via reflection you have to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;FieldInfo/PropertyInfo/MethodInfo&lt;/code&gt; handle for it, using code like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      
&lt;span class=&quot;n&quot;&gt;FieldInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As shown in the previous section there’s a cost to this, because the relevant meta-data has to be fetched, parsed, etc. Interestingly enough the runtime helps us by keeping an internal cache of all the fields/properties/methods. This cache is implemented by the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/b638af3a4dd52fa7b1ea1958164136c72096c25c/src/mscorlib/src/System/RtType.cs#L178-L248&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RuntimeTypeCache&lt;/code&gt; class&lt;/a&gt; and one example of its usage is in the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/b638af3a4dd52fa7b1ea1958164136c72096c25c/src/mscorlib/src/System/Reflection/MethodInfo.cs#L95&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RuntimeMethodInfo&lt;/code&gt; class&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can see the cache in action by running the code in &lt;a href=&quot;https://gist.github.com/mattwarren/be21d80a016043ea5c462415b81d9b69&quot;&gt;this gist&lt;/a&gt;, which appropriately enough uses reflection to inspect the runtime internals!&lt;/p&gt;

&lt;p&gt;Before you have done any reflection to obtain a &lt;code class=&quot;highlighter-rouge&quot;&gt;FieldInfo&lt;/code&gt;, the code in the gist will print this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Type: ReflectionOverhead.Program
  Reflection Type: System.RuntimeType (BaseType: System.Reflection.TypeInfo)
  m_fieldInfoCache is null, cache has not been initialised yet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But once you’ve fetched even just one field, then the following will be printed:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Type: ReflectionOverhead.Program
  Reflection Type: System.RuntimeType (BaseType: System.Reflection.TypeInfo)
  RuntimeTypeCache: System.RuntimeType+RuntimeTypeCache, 
  m_cacheComplete = True, 4 items in cache
    [0] - Int32 TestField1 - Private
    [1] - System.String TestField2 - Private
    [2] - Int32 &amp;lt;TestProperty1&amp;gt;k__BackingField - Private
    [3] - System.String TestField3 - Private, Static
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;ReflectionOverhead.Program&lt;/code&gt; looks like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Program&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestField1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestField2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestField3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestProperty1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This means that repeated calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;GetField&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;GetFields&lt;/code&gt; are cheaper as the runtime only has to filter the pre-existing list that’s already been created. The same applies to &lt;code class=&quot;highlighter-rouge&quot;&gt;GetMethod&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;GetProperty&lt;/code&gt;, when you call them the first time the &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodInfo&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;PropertyInfo&lt;/code&gt; cache is built.&lt;/p&gt;

&lt;h3 id=&quot;argument-validation-and-error-handling&quot;&gt;Argument Validation and Error Handling&lt;/h3&gt;

&lt;p&gt;But once you’ve obtained the &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodInfo&lt;/code&gt;, there’s still a lot of work to be done when you call &lt;code class=&quot;highlighter-rouge&quot;&gt;Invoke&lt;/code&gt; on it. Imagine you wrote some code like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;PropertyInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringLengthField&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Length&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;BindingFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BindingFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringLengthField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetGetMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you run it you would get the following exception:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;System.Reflection.TargetException: Object does not match target type.
   at System.Reflection.RuntimeMethodInfo.CheckConsistency(..)
   at System.Reflection.RuntimeMethodInfo.InvokeArgumentsCheck(..)
   at System.Reflection.RuntimeMethodInfo.Invoke(..)
   at System.Reflection.RuntimePropertyInfo.GetValue(..)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is because we have obtained the &lt;code class=&quot;highlighter-rouge&quot;&gt;PropertyInfo&lt;/code&gt; for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Length&lt;/code&gt; property on the &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; class, but invoked it with an &lt;code class=&quot;highlighter-rouge&quot;&gt;Uri&lt;/code&gt; object, which is clearly the wrong type!&lt;/p&gt;

&lt;p&gt;In addition to this, there also has to be validation of any arguments you pass through to the method you are invoking. To make argument passing work, reflection APIs take a parameter that is an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;’s, one per argument. So if you using reflection to call the method &lt;code class=&quot;highlighter-rouge&quot;&gt;Add(int x, int y)&lt;/code&gt;, you would invoke it by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;methodInfo.Invoke(.., new [] { 5, 6 })&lt;/code&gt;. At run-time checks need to be carried out on the amount and types of the values passed in, in this case to ensure that there are 2 and that they are both &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;’s. One down-side of all this work is that it often involves &lt;em&gt;boxing&lt;/em&gt; which has an additional cost, but hopefully this will be &lt;a href=&quot;https://github.com/dotnet/corefx/issues/14021&quot;&gt;minimised in the future&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;security-checks&quot;&gt;Security Checks&lt;/h3&gt;

&lt;p&gt;The other main task that is happening along the way is multiple security checks. For instance, it turns out that you aren’t allowed to use reflection to call just any method you feel like. There are some restricted or &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/dangerousapis.h#L7-L13&quot;&gt;‘Dangerous Methods’&lt;/a&gt;, that can only be called by trusted .NET framework code. In addition to a black-list, there are also dynamic security checks depending on the current &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/33tceax8(v=vs.110).aspx&quot;&gt;Code Access Security permissions&lt;/a&gt; that have to be &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/e67851210d1c03d730a3bc97a87e8a6713bbf772/src/vm/reflectioninvocation.cpp#L880-L947&quot;&gt;checked during invocation&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;how-much-does-reflection-cost&quot;&gt;How much does Reflection cost?&lt;/h2&gt;

&lt;p&gt;So now that we know what reflection is doing &lt;em&gt;behind-the-scenes&lt;/em&gt;, it’s a good time to look at what it costs us. Please note that these benchmarks are comparing reading/writing a property directly v via reflection. In .NET properties are actually a pair of &lt;code class=&quot;highlighter-rouge&quot;&gt;Get/Set&lt;/code&gt; methods that &lt;a href=&quot;http://stackoverflow.com/questions/23102639/are-c-sharp-properties-actually-methods/23102679#23102679&quot;&gt;the compiler generates for us&lt;/a&gt;, however when the property has just a simple backing field the .NET JIT inlines the method call for performance reasons. This means that using reflection to access a property will show reflection in the worse possible light, but it was chosen as it’s the most common use-case, showing up in &lt;a href=&quot;https://github.com/StackExchange/dapper-dot-net&quot;&gt;ORMs&lt;/a&gt;, &lt;a href=&quot;http://www.newtonsoft.com/json&quot;&gt;Json serialisation/deserialisation libraries&lt;/a&gt; and &lt;a href=&quot;http://automapper.org/&quot;&gt;object mapping tools&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Below are the raw results as they are displayed by &lt;a href=&quot;http://benchmarkdotnet.org/&quot;&gt;BenchmarkDotNet&lt;/a&gt;, followed by the same results displayed in 2 separate tables. (full &lt;a href=&quot;https://gist.github.com/mattwarren/a8ae31a197f4716a9d65947f4a20a069&quot;&gt;Benchmark code is available&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/12/Reflection Benchmark Results.png&quot;&gt;&lt;img src=&quot;/images/2016/12/Reflection Benchmark Results.png&quot; alt=&quot;Reflection Benchmark Results&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;reading-a-property-get&quot;&gt;Reading a Property (‘Get’)&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Method&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Mean&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;StdErr&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Scaled&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Bytes Allocated/Op&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;GetViaProperty&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.2159 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.0047 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.00&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GetViaDelegate&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.8903 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.0082 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8.82&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GetViaILEmit&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2.9236 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.0067 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13.64&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GetViaCompiledExpressionTrees&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12.3623 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.0200 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;57.65&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GetViaFastMember&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;35.9199 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.0528 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;167.52&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GetViaReflectionWithCaching&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;125.3878 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.2017 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;584.78&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GetViaReflection&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;197.9258 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.2704 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;923.08&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GetViaDelegateDynamicInvoke&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;842.9131 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.2649 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3,931.17&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;419.04&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;writing-a-property-set&quot;&gt;Writing a Property (‘Set’)&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Method&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Mean&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;StdErr&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Scaled&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Bytes Allocated/Op&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;SetViaProperty&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.4043 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.0200 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6.55&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SetViaDelegate&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2.8215 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.0078 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13.16&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SetViaILEmit&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2.8226 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.0061 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13.16&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SetViaCompiledExpressionTrees&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10.7329 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.0221 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;50.06&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SetViaFastMember&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;36.6210 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.0393 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;170.79&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SetViaReflectionWithCaching&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;214.4321 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.3122 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,000.07&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;98.49&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SetViaReflection&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;287.1039 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.3288 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,338.99&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;115.63&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SetViaDelegateDynamicInvoke&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;922.4618 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2.9192 ns&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4,302.17&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;390.99&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So we can clearly see that regular reflection code (&lt;code class=&quot;highlighter-rouge&quot;&gt;GetViaReflection&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SetViaReflection&lt;/code&gt;) is considerably slower than accessing the property directly (&lt;code class=&quot;highlighter-rouge&quot;&gt;GetViaProperty&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SetViaProperty&lt;/code&gt;). But what about the other results, lets explore those in more detail.&lt;/p&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;

&lt;p&gt;First we start with a &lt;code class=&quot;highlighter-rouge&quot;&gt;TestClass&lt;/code&gt; that looks like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestClass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TestClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and the following common code, that all the options can make use of:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Setup code, done only once &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;TestClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TestClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A String&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;@class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BindingFlag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingFlags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BindingFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; 
                           &lt;span class=&quot;n&quot;&gt;BindingFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NonPublic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; 
                           &lt;span class=&quot;n&quot;&gt;BindingFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;regular-reflection&quot;&gt;Regular Reflection&lt;/h3&gt;

&lt;p&gt;First we use regular benchmark code, that acts as out starting point and the ‘worst case’:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;[Benchmark]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetViaReflection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PropertyInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;@class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;option-1---cache-propertyinfo&quot;&gt;Option 1 - Cache PropertyInfo&lt;/h3&gt;

&lt;p&gt;Next up, we can gain a small speed boost by keeping a reference to the &lt;code class=&quot;highlighter-rouge&quot;&gt;PropertyInfo&lt;/code&gt;, rather than fetching it each time. But we’re still much slower than accessing the property directly, which demonstrates that there is a considerable cost in the ‘invocation’ part of reflection.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Setup code, done only once&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PropertyInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cachedPropertyInfo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;@class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;[Benchmark]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetViaReflection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cachedPropertyInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;option-2---use-fastmember&quot;&gt;Option 2 - Use FastMember&lt;/h3&gt;

&lt;p&gt;Here we make use of Marc Gravell’s excellent &lt;a href=&quot;http://blog.marcgravell.com/2012/01/playing-with-your-member.html&quot;&gt;Fast Member library&lt;/a&gt;, which as you can see is very simple to use!&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Setup code, done only once&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;TypeAccessor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeAccessor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;@class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allowNonPublicAccessors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;[Benchmark]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetViaFastMember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that it’s doing something slightly different to the other options. It creates a &lt;code class=&quot;highlighter-rouge&quot;&gt;TypeAccessor&lt;/code&gt; that allows access to &lt;strong&gt;all&lt;/strong&gt; the Properties on a type, not just one. But the downside is that, as a result, it takes longer to run. This is because internally it first has to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; for the Property you requested (in this case ‘Data’), before fetching it’s value. However this overhead is pretty small, FastMember is still way faster than Reflection and it’s very easy to use, so I recommend you take a look at it first.&lt;/p&gt;

&lt;p&gt;This option and all subsequent ones convert the reflection code into a &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms173171.aspx&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt;&lt;/a&gt; that can be directly invoked without the overhead of reflection every time, hence the speed boost!&lt;/p&gt;

&lt;p&gt;Although it’s worth pointing out that the creation of a &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; has a cost (see &lt;a href=&quot;#further-reading&quot;&gt;‘Further Reading’&lt;/a&gt; for more info). So in short, the speed boost is because we are doing the expensive work once (security checks, etc) and storing a strongly typed &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; that we can use again and again with little overhead. You wouldn’t use these techniques if you were doing reflection once, but if you’re only doing it once it wouldn’t be a performance bottleneck, so you wouldn’t care if it was slow!&lt;/p&gt;

&lt;p&gt;The reason that reading a property via a &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; isn’t as fast as reading it directly is because the .NET JIT won’t inline a &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; method call like it will do with a Property access. So with a &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; we have to pay the cost of a method call, which direct access doesn’t.&lt;/p&gt;

&lt;h3 id=&quot;option-3---create-a-delegate&quot;&gt;Option 3 - Create a Delegate&lt;/h3&gt;

&lt;p&gt;In this option we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateDelegate&lt;/code&gt; function to turn our PropertyInfo into a regular &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Setup code, done only once&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PropertyInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;@class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;),&lt;/span&gt; 
             &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetGetMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonPublic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;[Benchmark]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetViaDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The drawback is that you to need to know the concrete type at &lt;strong&gt;compile-time&lt;/strong&gt;, i.e. the &lt;code class=&quot;highlighter-rouge&quot;&gt;Func&amp;lt;TestClass, string&amp;gt;&lt;/code&gt; part in the code above (no you can’t use &lt;code class=&quot;highlighter-rouge&quot;&gt;Func&amp;lt;object, string&amp;gt;&lt;/code&gt;, if you do it’ll thrown an exception!). In the majority of situations when you are doing reflection you don’t have this luxury, otherwise you wouldn’t be using reflection in the first place, so it’s not a complete solution.&lt;/p&gt;

&lt;p&gt;For a very interesting/mind-bending way to get round this, see the &lt;code class=&quot;highlighter-rouge&quot;&gt;MagicMethodHelper&lt;/code&gt; code in the fantastic blog post from Jon Skeet &lt;a href=&quot;https://codeblog.jonskeet.uk/2008/08/09/making-reflection-fly-and-exploring-delegates/&quot;&gt;‘Making Reflection fly and exploring delegates’&lt;/a&gt; or read on for Options 4 or 5 below.&lt;/p&gt;

&lt;h3 id=&quot;option-4---compiled-expression-trees&quot;&gt;Option 4 - Compiled Expression Trees&lt;/h3&gt;

&lt;p&gt;Here we generate a &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt;, but the difference is that we can pass in an &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;, so we get round the limitation of ‘Option 3’. We make use of the .NET &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/mt654263.aspx&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Expression&lt;/code&gt; tree API&lt;/a&gt; that allows dynamic code generation:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Setup code, done only once&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PropertyInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;@class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ParameterExpression&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;instance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;UnaryExpression&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceCast&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeclaringType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsValueType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;Expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TypeAs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeclaringType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;Expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeclaringType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;Expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TypeAs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instanceCast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetGetMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonPublic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;[Benchmark]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetViaCompiledExpressionTrees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Full code for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Expression&lt;/code&gt; based approach is available in the blog post &lt;a href=&quot;http://geekswithblogs.net/Madman/archive/2008/06/27/faster-reflection-using-expression-trees.aspx&quot;&gt;Faster Reflection using Expression Trees&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;option-5---dynamic-code-gen-with-il-emit&quot;&gt;Option 5 - Dynamic code-gen with IL Emit&lt;/h3&gt;

&lt;p&gt;Finally we come to the lowest-level approach, emiting raw IL, although ‘&lt;em&gt;with great power, comes great responsibility&lt;/em&gt;’:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Setup code, done only once&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PropertyInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;@class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Sigil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Emit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getterEmiter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;NewDynamicMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GetTestClassDataProperty&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;LoadArgument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CastClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;@class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetGetMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonPublic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getterEmiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;[Benchmark]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetViaILEmit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;Expression&lt;/code&gt; tress (as shown in Option 4), doesn’t give you as much flexibility as emitting IL codes directly, although it does prevent you from emitting invalid code! Because of this, if you ever find yourself needing to emil IL I really recommend using the excellent &lt;a href=&quot;https://github.com/kevin-montrose/Sigil&quot;&gt;Sigil library&lt;/a&gt;, as it gives better error messages when you get things wrong!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The take-away is that if (and only if) you find yourself with a performance issue when using reflection, there are several different ways you can make it faster. These speed gains are achieved by getting a &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; that allows you to access the Property/Field/Method directly, without all the overhead of going via reflection every-time.&lt;/p&gt;

&lt;p&gt;Discuss this post in &lt;a href=&quot;https://www.reddit.com/r/programming/comments/5ie775/why_is_reflection_slow/&quot;&gt;/r/programming&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/csharp/comments/5igo67/why_is_reflection_slow/&quot;&gt;/r/csharp&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vivainio/FastExpressionKit&quot;&gt;FastExpressionKit - A small library to make reflection-y things faster&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/8846948/is-reflection-really-slow/8849503#8849503&quot;&gt;Is Reflection really slow?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3502674/why-is-reflection-slow/3502710#3502710&quot;&gt;Why is reflection slow?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/25458/how-costly-is-net-reflection&quot;&gt;How costly is .NET reflection?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/771524/how-slow-is-reflection/771533#771533&quot;&gt;How slow is Reflection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://softwareengineering.stackexchange.com/questions/143205/reflection-is-using-reflection-still-bad-or-slow-what-has-changed-with-ref&quot;&gt;Reflection: Is using reflection still “bad” or “slow”? What has changed with reflection since 2002?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jeremybytes.blogspot.co.uk/2014/01/improving-reflection-performance-with.html&quot;&gt;Improving Reflection Performance with Delegates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kennethxu.blogspot.co.uk/2009/05/cnet-calling-grandparent-virtual-method.html&quot;&gt;C#.Net Calling Grandparent’s Virtual Method (base.base in C#)&lt;/a&gt; - &lt;a href=&quot;http://kennethxu.blogspot.co.uk/2009/05/strong-typed-high-performance.html&quot;&gt;Part I&lt;/a&gt;, &lt;a href=&quot;http://kennethxu.blogspot.co.uk/2009/05/strong-typed-high-performance_15.html&quot;&gt;Part II&lt;/a&gt;, &lt;a href=&quot;http://kennethxu.blogspot.co.uk/2009/05/strong-typed-high-performance_18.html&quot;&gt;Part III&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codeblog.jonskeet.uk/2008/08/09/making-reflection-fly-and-exploring-delegates/&quot;&gt;‘Making Reflection fly and exploring delegates’&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://theburningmonk.com/2015/08/fasterflect-vs-hyperdescriptor-vs-fastmember-vs-reflection/&quot;&gt;Fasterflect vs HyperDescriptor vs FastMember vs Reflection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/naasking/Dynamics.NET&quot;&gt;Dynamics.NET - Extensions for efficient runtime reflection and structural induction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For reference, below is the call-stack or code-flow that the runtime goes through when &lt;strong&gt;Creating a Delegate&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://referencesource.microsoft.com/#mscorlib/system/delegate.cs,0b7fb52ec60c22d3&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Delegate CreateDelegate(Type type, MethodInfo method)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://referencesource.microsoft.com/#mscorlib/system/delegate.cs,944d5aaf940d71d0&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Delegate CreateDelegate(Type type, MethodInfo method, bool throwOnBindFailure)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://referencesource.microsoft.com/#mscorlib/system/delegate.cs,2a6608b61df78396&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Delegate CreateDelegateInternal(RuntimeType rtType, RuntimeMethodInfo rtMethod, Object firstArgument, DelegateBindingFlags flags, ref StackCrawlMark stackMark)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://referencesource.microsoft.com/#mscorlib/system/delegate.cs,432a6c045c0ce48d&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Delegate UnsafeCreateDelegate(RuntimeType rtType, RuntimeMethodInfo rtMethod, Object firstArgument, DelegateBindingFlags flags)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://referencesource.microsoft.com/#mscorlib/system/delegate.cs,06743cb3121175c1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bool BindToMethodInfo(Object target, IRuntimeMethodInfo method, RuntimeType methodType, DelegateBindingFlags flags);&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/7200e78258623eb889a46aa7a90818046bd1957d/src/vm/comdelegate.cpp#L802-L879&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FCIMPL5(FC_BOOL_RET, COMDelegate::BindToMethodInfo, Object* refThisUNSAFE, Object* targetUNSAFE, ReflectMethodObject *pMethodUNSAFE, ReflectClassBaseObject *pMethodTypeUNSAFE, int flags)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/7200e78258623eb889a46aa7a90818046bd1957d/src/vm/comdelegate.cpp#L885-L1099&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;COMDelegate::BindToMethod(DELEGATEREF *pRefThis, OBJECTREF *pRefFirstArg, MethodDesc *pTargetMethod, MethodTable *pExactMethodType, BOOL fIsOpenDelegate, BOOL fCheckSecurity)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2016/12/14/Why-is-Reflection-slow/&quot;&gt;Why is reflection slow?&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='Benchmarking' scheme='http://www.mattwarren.org/tags#Benchmarking'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
 </entry>
 
 <entry>
   <title>Research papers in the .NET source</title>
   <link href="http://www.mattwarren.org/2016/12/12/Research-papers-in-the-.NET-source/"/>
   <updated>2016-12-12T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/12/12/Research-papers-in-the-.NET-source</id>
   <content type="html">
     &lt;p&gt;This post is completely inspired by (or ‘copied from’ depending on your point of view) a recent post titled &lt;a href=&quot;http://lowlevelbits.org/java-papers/&quot;&gt;JAVA PAPERS&lt;/a&gt; (also see the &lt;a href=&quot;https://news.ycombinator.com/item?id=13022649&quot;&gt;HackerNews discussion&lt;/a&gt;). However, instead of looking at Java and the JVM, I’ll be looking at references to research papers in the &lt;strong&gt;.NET language, runtime and compiler source code&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If I’ve missed any that you know of, please leave a comment below!&lt;/p&gt;

&lt;p&gt;Note: I’ve deliberately left out links to specifications, standards documents or RFC’s, instead concentrating only on &lt;strong&gt;Research Papers&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;left-leaning-red-black-trees-by-robert-sedgewick---coreclr-source-reference&quot;&gt;&lt;a href=&quot;http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf&quot;&gt;&lt;strong&gt;‘Left Leaning Red Black trees’ by Robert Sedgewick&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/tests/src/GC/Stress/Tests/RedBlackTree.cs#L7-L9&quot;&gt;CoreCLR source reference&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;
The red-black tree model for implementing balanced search trees, introduced by Guibas and Sedgewick thirty years ago, is now found throughout our computational infrastructure. Red-black trees are described in standard textbooks and are the underlying data structure for symbol-table implementations within C++, Java, Python, BSD Unix, and many other modern systems. However, many of these implementations have sacrificed some of the original design goals (primarily in order to develop an effective implementation of the delete operation, which was incompletely specified in the original paper), so a new look is worthwhile. 
In this paper, we describe a new variant of redblack trees that meets many of the original design goals and leads to substantially simpler code for insert/delete, less than one-fourth as much code as in implementations in common use.&lt;/p&gt;

&lt;h3 id=&quot;hopscotch-hashing-by-maurice-herlihy-nir-shavit-and-moran-tzafrir---coreclr-source-reference&quot;&gt;&lt;a href=&quot;http://mcg.cs.tau.ac.il/papers/disc2008-hopscotch.pdf&quot;&gt;&lt;strong&gt;‘Hopscotch Hashing’ by Maurice Herlihy, Nir Shavit, and Moran Tzafrir&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/jit/smallhash.h#L48-L50&quot;&gt;CoreCLR source reference&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;
We present a new class of resizable sequential and concur-rent hash map algorithms directed at both uni-processor and multicore machines. The new hopscotch algorithms are based on a novel hopscotch multi-phased probing and displacement technique that has the flavors of chaining, cuckoo hashing, and linear probing, all put together, yet avoids the limitations and overheads of these former approaches. The resulting algorithms provide tables with very low synchronization overheads and high cache hit ratios.
In a series of benchmarks on a state-of-the-art 64-way Niagara II multi- core machine, a concurrent version of hopscotch proves to be highly scal-able, delivering in some cases 2 or even 3 times the throughput of today’s most efficient concurrent hash algorithm, Lea’s ConcurrentHashMap from java.concurr.util. Moreover, in tests on both Intel and Sun uni-processor machines, a sequential version of hopscotch consistently outperforms the most effective sequential hash table algorithms including cuckoo hashing and bounded linear probing.
The most interesting feature of the new class of hopscotch algorithms is that they continue to deliver good performance when the hash table is more than 90% full, increasing their advantage over other algorithms as the table density grows.&lt;/p&gt;

&lt;h3 id=&quot;automatic-construction-of-inlining-heuristics-using-machine-learning-by-kulkarni-cavazos-wimmer-and-simon---coreclr-source-reference&quot;&gt;&lt;a href=&quot;http://dl.acm.org/citation.cfm?id=2495914&quot;&gt;&lt;strong&gt;‘Automatic Construction of Inlining Heuristics using Machine Learning’ by Kulkarni, Cavazos, Wimmer, and Simon.&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/Documentation/design-docs/inlining-plans.md#profitability&quot;&gt;CoreCLR source reference&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;
Method inlining is considered to be one of the most important optimizations in a compiler. However, a poor inlining heuristic can lead to significant degradation of a program’s running time. Therefore, it is important that an inliner has an effective heuristic that controls whether a method is inlined or not. An important component of any inlining heuristic are the features that characterize the inlining decision. These features often correspond to the caller method and the callee methods. However, it is not always apparent what the most important features are for this problem or the relative importance of these features. Compiler writers developing inlining heuristics may exclude critical information that can be obtained during each inlining decision. In this paper, we use a machine learning technique, namely neuro-evolution [18], to automatically induce effective inlining heuristics from a set of features deemed to be useful for inlining. Our learning technique is able to induce novel heuristics that significantly out-perform manually-constructed inlining heuristics. We evaluate the heuristic constructed by our neuro-evolutionary technique within the highly tuned Java HotSpot server compiler and the Maxine VM C1X compiler, and we are able to obtain speedups of up to 89% and 114%, respectively. In addition, we obtain an average speedup of almost 9% and 11% for the Java HotSpot VM and Maxine VM, respectively. However, the output of neuro-evolution, a neural network, is not human readable. We show how to construct more concise and read-able heuristics in the form of decision trees that perform as well as our neuro-evolutionary approach.&lt;/p&gt;

&lt;h3 id=&quot;a-theory-of-objects-by-luca-cardelli--martín-abadi---coreclr-source-reference&quot;&gt;&lt;a href=&quot;http://dl.acm.org/citation.cfm?id=547964&quot;&gt;&lt;strong&gt;‘A Theory of Objects’ by Luca Cardelli &amp;amp; Martín Abadi&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/5dbaa3cb2e2e11d98924afe9de472469b5136885/Documentation/botr/type-loader.md#11-related-reading&quot;&gt;CoreCLR source reference&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;
Procedural languages are generally well understood. Their foundations have been cast in calculi that prove useful in matters of implementation and semantics. So far, an analogous understanding has not emerged for object-oriented languages. In this book the authors take a novel approach to the understanding of object-oriented languages by introducing object calculi and developing a theory of objects around them. The book covers both the semantics of objects and their typing rules, and explains a range of object-oriented concepts, such as self, dynamic dispatch, classes, inheritance, prototyping, subtyping, covariance and contravariance, and method specialization. Researchers and graduate students will find this an important development of the underpinnings of object-oriented programming.&lt;/p&gt;

&lt;h3 id=&quot;optimized-interval-splitting-in-a-linear-scan-register-allocator-by-wimmer-c-and-mössenböck-d---coreclr-source-reference&quot;&gt;&lt;a href=&quot;http://dl.acm.org/citation.cfm?id=1064998&amp;amp;dl=ACM&amp;amp;coll=ACM&quot;&gt;&lt;strong&gt;‘Optimized Interval Splitting in a Linear Scan Register Allocator’ by Wimmer, C. and Mössenböck, D.&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/Documentation/botr/ryujit-overview.md#register-allocation&quot;&gt;CoreCLR source reference&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;
We present an optimized implementation of the linear scan register allocation algorithm for Sun Microsystems’ Java HotSpot™ client compiler. Linear scan register allocation is especially suitable for just-in-time compilers because it is faster than the common graph-coloring approach and yields results of nearly the same quality.Our allocator improves the basic linear scan algorithm by adding more advanced optimizations: It makes use of lifetime holes, splits intervals if the register pressure is too high, and models register constraints of the target architecture with fixed intervals. Three additional optimizations move split positions out of loops, remove register-to-register moves and eliminate unnecessary spill stores. Interval splitting is based on use positions, which also capture the kind of use and whether an operand is needed in a register or not. This avoids the reservation of a scratch register.Benchmark results prove the efficiency of the linear scan algorithm: While the compilation speed is equal to the old local register allocator that is part of the Sun JDK 5.0, integer benchmarks execute about 15% faster. Floating-point benchmarks show the high impact of the Intel SSE2 extensions on the speed of numeric Java applications: With the new SSE2 support enabled, SPECjvm98 executes 25% faster compared with the current Sun JDK 5.0.&lt;/p&gt;

&lt;h3 id=&quot;extensible-pattern-matching-via-a-lightweight-language-extension-by-don-syme-gregory-neverov-james-margetson---roslyn-source-reference&quot;&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/research/publication/extensible-pattern-matching-via-a-lightweight-language-extension/&quot;&gt;&lt;strong&gt;‘Extensible pattern matching via a lightweight language extension’ by Don Syme, Gregory Neverov, James Margetson&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&quot;https://github.com/dotnet/roslyn/blob/614299ff83da9959fa07131c6d0ffbc58873b6ae/docs/features/patterns.md#pattern-matching-for-c&quot;&gt;Roslyn source reference&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;
Pattern matching of algebraic data types (ADTs) is a standard feature in typed functional programming languages, but it is well known that it interacts poorly with abstraction. While several partial solutions to this problem have been proposed, few have been implemented or used. This paper describes an extension to the .NET language F# called active patterns, which supports pattern matching over abstract representations of generic heterogeneous data such as XML and term structures, including where these are represented via object models in other .NET languages. Our design is the first to incorporate both ad hoc pattern matching functions for partial decompositions and “views” for total decompositions, and yet remains a simple and lightweight extension. We give a description of the language extension along with numerous motivating examples. Finally we describe how this feature would interact with other reasonable and related language extensions: existential types quantified at data discrimination tags, GADTs, and monadic generalizations of pattern matching.&lt;/p&gt;

&lt;h3 id=&quot;some-approaches-to-best-match-file-searching-by-w-a-burkhard--r-m-keller---roslyn-source-reference&quot;&gt;&lt;a href=&quot;http://dl.acm.org/citation.cfm?doid=362003.362025&quot;&gt;&lt;strong&gt;‘Some approaches to best-match file searching’ by W. A. Burkhard &amp;amp; R. M. Keller&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&quot;https://github.com/dotnet/roslyn/blob/65cc61578e9646cf76a297d8a9e0005afa57378a/src/Workspaces/Core/Portable/Utilities/BKTree.cs#L22&quot;&gt;Roslyn source reference&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;
The problem of searching the set of keys in a file to find a key which is closest to a given query key is discussed. After “closest,” in terms of a metric on the the key space, is suitably defined, three file structures are presented together with their corresponding search algorithms, which are intended to reduce the number of comparisons required to achieve the desired result. These methods are derived using certain inequalities satisfied by metrics and by graph-theoretic concepts. Some empirical results are presented which compare the efficiency of the methods.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;For reference, the links below take you straight the the GitHub searches, so you can take a look yourself:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/search?utf8=%E2%9C%93&amp;amp;q=pdf+OR+%22et+al.%22+OR+Proceedings+OR+Symposium+OR+Conference+OR+acm.org&amp;amp;type=Code&quot;&gt;CoreCLR&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Microsoft/referencesource/search?utf8=%E2%9C%93&amp;amp;q=pdf+OR+%22et+al.%22+OR+Proceedings+OR+Symposium+OR+Conference+OR+acm.org&amp;amp;type=Code&quot;&gt;.NET 4.5 Reference Source&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corefx/search?utf8=%E2%9C%93&amp;amp;q=pdf+OR+%22et+al.%22+OR+Proceedings+OR+Symposium+OR+Conference+OR+acm.org&amp;amp;type=Code&quot;&gt;CoreFX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/search?utf8=%E2%9C%93&amp;amp;q=pdf+OR+%22et+al.%22+OR+Proceedings+OR+Symposium+OR+Conference+OR+acm.org&amp;amp;type=Code&quot;&gt;Roslyn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;research-produced-by-work-on-the-net-runtime-or-compiler&quot;&gt;Research produced by work on the .NET Runtime or Compiler&lt;/h2&gt;

&lt;p&gt;But what about the other way round, are there instances of work being done in .NET that is then turned into a research paper? Well it turns out there is, the first example I came across was from a tweet by &lt;a href=&quot;https://twitter.com/xjoeduffyx&quot;&gt;Joe Duffy&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/xjoeduffyx/status/801416374086029312?p=p&quot;&gt;&lt;img src=&quot;/images/2016/12/Joe Duffy Tweet.png&quot; alt=&quot;Joe Duffy tweet about research paper&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(As an aside, I recommend checking out &lt;a href=&quot;http://joeduffyblog.com/2015/11/03/blogging-about-midori/&quot;&gt;Joe Duffy’s blog&lt;/a&gt;, it contains lots of information about &lt;strong&gt;Midori&lt;/strong&gt; the research project to build a managed OS!)&lt;/p&gt;

&lt;h3 id=&quot;applying-control-theory-in-the-real-world---experience-with-building-a-controller-for-the-net-thread-pool-by-joseph-l-hellerstein-vance-morrison-eric-eilebrecht&quot;&gt;&lt;a href=&quot;http://www.sigmetrics.org/conferences/sigmetrics/2009/workshops/papers_hotmetrics/session2_2.pdf&quot;&gt;&lt;strong&gt;‘Applying Control Theory in the Real World - Experience With Building a Controller for the .NET Thread Pool’ by Joseph L. Hellerstein, Vance Morrison, Eric Eilebrecht&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;
There has been considerable interest in using control theory to build web servers, database managers, and other systems. We claim that the potential value of using control theory cannot be realized in practice without a methodology that addresses controller design, testing, and tuning. Based on our experience with building a controller for the .NET thread pool, we develop a methodology that: (a) designs for extensibility to integrate diverse control techniques, (b) scales the test infrastructure to enable running a large number of test cases, (c) constructs test cases for which the ideal controller performance is known a priori so that the outcomes of test cases can be readily assessed, and (d) tunes controller parameters to achieve good results for multiple performance metrics. We conclude by discussing how our methodology can be extended, especially to designing controllers for distributed systems.&lt;/p&gt;

&lt;h3 id=&quot;uniqueness-and-reference-immutability-for-safe-parallelism-by-colin-s-gordon-matthew-parkinson-jared-parsons-aleks-bromfield--joe-duffy-alternative-link&quot;&gt;&lt;a href=&quot;http://dl.acm.org/citation.cfm?id=2384619&quot;&gt;&lt;strong&gt;‘Uniqueness and Reference Immutability for Safe Parallelism’ by Colin S. Gordon, Matthew Parkinson, Jared Parsons. Aleks Bromfield &amp;amp; Joe Duffy&lt;/strong&gt;&lt;/a&gt; (&lt;a href=&quot;https://www.microsoft.com/en-us/research/publication/uniqueness-and-reference-immutability-for-safe-parallelism/&quot;&gt;alternative link&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;
A key challenge for concurrent programming is that side-effects (memory operations) in one thread can affect the behavior of another thread. In this paper, we present a type system to restrict the updates to memory to prevent these unintended side-effects. We provide a novel combination of immutable and unique (isolated) types that ensures safe parallelism (race freedom and deterministic execution). The type system includes support for polymorphism over type qualifiers, and can easily create cycles of immutable objects. Key to the system’s flexibility is the ability to recover immutable or externally unique references after violating uniqueness without any explicit alias tracking. Our type system models a prototype extension to C# that is in active use by a Microsoft team. We describe their experiences building large systems with this extension. We prove the soundness of the type system by an embedding into a program logic.&lt;/p&gt;

&lt;h3 id=&quot;design-and-implementation-of-generics-for-the-net-common-language-runtime-by-andrew-kennedy-don-syme&quot;&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/research/publication/design-and-implementation-of-generics-for-the-net-common-language-runtime/&quot;&gt;&lt;strong&gt;‘Design and Implementation of Generics for the .NET Common Language Runtime’ by Andrew Kennedy, Don Syme&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;
The Microsoft .NET Common Language Runtime provides a shared type system, intermediate language and dynamic execution environment for the implementation and inter-operation of multiple source languages. In this paper we extend it with direct support for parametric polymorphism (also known as generics), describing the design through examples written in an extended version of the C# programming language, and explaining aspects of implementation by reference to a prototype extension to the runtime. Our design is very expressive, supporting parameterized types, polymorphic static, instance and virtual methods, “F-bounded” type parameters, instantiation at pointer and value types, polymorphic recursion, and exact run-time types. The implementation takes advantage of the dynamic nature of the runtime, performing justin-time type specialization, representation-based code sharing and novel techniques for efﬁcient creation and use of run-time types. Early performance results are encouraging and suggest that programmers will not need to pay an overhead for using generics, achieving performance almost matching hand-specialized code.&lt;/p&gt;

&lt;h3 id=&quot;securing-the-net-programming-model-industrial-application-by-andrew-kennedy&quot;&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/research/wp-content/uploads/2007/01/appsem-tcs.pdf&quot;&gt;&lt;strong&gt;‘Securing the .NET Programming Model (Industrial Application)’ by Andrew Kennedy&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;
The security of the .NET programming model is studied from the standpoint of fully abstract compilation of C#. A number of failures of full abstraction are identified, and fixes described. The most serious problems have recently been fixed for version 2.0 of the .NET Common Language Runtime.&lt;/p&gt;

&lt;h3 id=&quot;a-study-of-concurrent-real-time-garbage-collectors-by-filip-pizlo-erez-petrank--bjarne-steensgaard-this-features-work-done-as-part-of-midori&quot;&gt;&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.353.9594&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;&lt;strong&gt;‘A Study of Concurrent Real-Time Garbage Collectors’ by Filip Pizlo, Erez Petrank &amp;amp; Bjarne Steensgaard&lt;/strong&gt;&lt;/a&gt; (this features work done as &lt;a href=&quot;http://joeduffyblog.com/2015/12/19/safe-native-code/#gc&quot;&gt;part of Midori&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;
Concurrent garbage collection is highly attractive for real-time systems, because offloading the collection effort from the executing threads allows faster response, allowing for extremely short deadlines at the microseconds level. Concurrent collectors also offer much better scalability over incremental collectors. The main problem with concurrent real-time collectors is their complexity. The first concurrent real-time garbage collector that can support fine synchronization, STOPLESS, has recently been presented by Pizlo et al. In this paper, we propose two additional (and different) algorithms for concurrent real-time garbage collection: CLOVER and CHICKEN. Both collectors obtain reduced complexity over the first collector STOPLESS, but need to trade a benefit for it. We study the algorithmic strengths and weaknesses of CLOVER and CHICKEN and compare them to STOPLESS. Finally, we have implemented all three collectors on the Bartok compiler and runtime for C# and we present measurements to compare their efficiency and responsiveness.&lt;/p&gt;

&lt;h3 id=&quot;stopless-a-real-time-garbage-collector-for-multiprocessors-by-filip-pizlo-daniel-frampton-erez-petrank-bjarne-steensgaard&quot;&gt;&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.108.322&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;&lt;strong&gt;‘STOPLESS: A Real-Time Garbage Collector for Multiprocessors’ by Filip Pizlo, Daniel Frampton, Erez Petrank, Bjarne Steensgaard&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;
We present STOPLESS: a concurrent real-time garbage collector suitable for modern multiprocessors running parallel multithreaded applications. Creating a garbage-collected environment that supports real-time on modern platforms is notoriously hard, especially if real-time implies lock-freedom. Known real-time collectors either restrict the real-time guarantees to uniprocessors only, rely on special hardware, or just give up supporting atomic operations (which are crucial for lock-free software). STOPLESS is the first collector that provides real-time responsiveness while preserving lock-freedom, supporting atomic operations, controlling fragmentation by compaction, and supporting modern parallel platforms. 
STOPLESS is adequate for modern languages such as C# or Java. It was implemented on top of the Bartok compiler and runtime for C# and measurements demonstrate high responsiveness (a factor of a 100 better than previously published systems), virtually no pause times, good mutator utilization, and acceptable overheads.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Finally, a full list of MS Research publications related to &lt;a href=&quot;https://www.microsoft.com/en-us/research/research-area/programming-languages-software-engineering/?q&amp;amp;content-type=publications&amp;amp;sort_by=most-relevant&quot;&gt;‘programming languages and software engineering’&lt;/a&gt; is available if you want to explore more of this research yourself.&lt;/p&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=13335658&quot;&gt;Hacker News&lt;/a&gt;&lt;/p&gt;

     
     
     
     
   </content>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='Open Source' scheme='http://www.mattwarren.org/tags#Open Source'/>
   
     <category term='Research' scheme='http://www.mattwarren.org/tags#Research'/>
   
 </entry>
 
 <entry>
   <title>Open Source .NET – 2 years later</title>
   <link href="http://www.mattwarren.org/2016/11/23/open-source-net-2-years-later/"/>
   <updated>2016-11-23T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/11/23/open-source-net-2-years-later</id>
   <content type="html">
     
&lt;link rel=&quot;stylesheet&quot; href=&quot;/datavis/dotnet-oss.css&quot; /&gt;

&lt;script src=&quot;/datavis/dotnet-oss.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;

&lt;p&gt;A little over 2 years ago Microsoft announced that they were &lt;a href=&quot;http://www.hanselman.com/blog/AnnouncingNET2015NETAsOpenSourceNETOnMacAndLinuxAndVisualStudioCommunity.aspx&quot;&gt;open sourcing large parts of the .NET framework&lt;/a&gt; and as &lt;a href=&quot;https://twitter.com/shanselman&quot;&gt;Scott Hanselman&lt;/a&gt; said in his recent &lt;a href=&quot;https://channel9.msdn.com/Events/Connect/2016/Keynotes-Scott-Guthrie-and-Scott-Hanselman&quot;&gt;Connect keynote&lt;/a&gt;, the community has been contributing in a significant way:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/poweredbyaltnet/status/798942478195970048&quot;&gt;&lt;img src=&quot;/images/2016/11/Over 60 of the contributions to dotnetcore come from the community.jpg&quot; alt=&quot;Over 60% of the contribution to .NET Core come from the community&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see some more detail on this number in the talk &lt;a href=&quot;https://connectevent.microsoft.com/whats-new-in-the-net-platform/&quot;&gt;‘What’s New in the .NET Platform’&lt;/a&gt; by Scott Hunter:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/11/Connect talk - Community Contributions per month.png&quot; alt=&quot;Connect talk - Community Contributions per month&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This post aims to give more context to those numbers and allow you to explore patterns and trends across different repositories.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;repository-activity-over-time&quot;&gt;Repository activity over time&lt;/h3&gt;

&lt;p&gt;First we are going to see an overview of the level of activity in each repo, by looking at the total number of ‘Issues’ (created) or ‘Pull Requests’ (closed) per month. (&lt;a href=&quot;http://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=0001OR&quot;&gt;Yay sparklines FTW!!&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Numbers in &lt;span style=&quot;color:rgb(0,0,0);font-weight:bold;&quot;&gt;black&lt;/span&gt; are from the most recent month, with &lt;span style=&quot;color:#d62728;font-weight:bold;&quot;&gt;red&lt;/span&gt; showing the lowest and &lt;span style=&quot;color:#2ca02c;font-weight:bold;&quot;&gt;green&lt;/span&gt; the highest previous value. You can toggle between &lt;strong&gt;Issues&lt;/strong&gt; and &lt;strong&gt;Pull Requests&lt;/strong&gt; by clicking on the buttons, hover over individual sparklines to get a tooltip showing the per/month values and click on the project name to take you to the GitHub page for that repository.&lt;/p&gt;

&lt;section class=&quot;press&quot; align=&quot;center&quot;&gt;
&lt;!-- &lt;section class=&quot;gradient&quot; align=&quot;center&quot;&gt; --&gt;
  &lt;button id=&quot;btnIssues&quot; class=&quot;active&quot;&gt;Issues&lt;/button&gt;
  &lt;button id=&quot;btnPRs&quot;&gt;Pull Requests&lt;/button&gt;
&lt;/section&gt;

&lt;div id=&quot;textbox&quot; class=&quot;rChartHeader&quot;&gt;
  &lt;!-- The Start/End dates are setup dynamically, once the data is loaded --&gt;
  &lt;p id=&quot;dataStartDate&quot; class=&quot;alignleft&quot;&gt;&lt;/p&gt;
  &lt;p id=&quot;dataEndDate&quot; class=&quot;alignright&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;

&lt;!-- All the sparklines are added to this div --&gt;
&lt;div id=&quot;sparkLines&quot; class=&quot;rChart nvd3&quot;&gt;
&lt;/div&gt;

&lt;p&gt;The main trend I see across all repos is there’s a sustained level of activity for the entire 2 years, things didn’t start with a bang and then tailed off. In addition, many (but not all) repos have a trend of increased activity month-by-month. For instance the PR’s in &lt;strong&gt;CoreFX&lt;/strong&gt; or the Issues in &lt;strong&gt;Visual Studio Code (vscode)&lt;/strong&gt; are clear example of this, their best months have been the most recent.&lt;/p&gt;

&lt;p&gt;Finally one interesting ‘story’ that jumps out of this data is the contrasting levels of activity (PR’s) across the &lt;strong&gt;dnx&lt;/strong&gt;, &lt;strong&gt;cli&lt;/strong&gt; and &lt;strong&gt;msbuild&lt;/strong&gt; repositories, as highlighted in the image below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/11/Comparison of dnx v cli v msbuild.png&quot; alt=&quot;Comparison of dnx v cli v msbuild&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you don’t know the full story, initially all the cmd-line tooling was known as &lt;strong&gt;dnx&lt;/strong&gt;, but in RC2 was &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/articles/core/migrating-from-dnx&quot;&gt;migrated to .NET Core CLI&lt;/a&gt;. You can see this on the chart, activity in the &lt;strong&gt;dnx&lt;/strong&gt; repo decreased at the same time that work in &lt;strong&gt;cli&lt;/strong&gt; ramped up.&lt;/p&gt;

&lt;p&gt;Following that, in May this year, the whole idea of having ‘project.json’ files was &lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/&quot;&gt;abandoned in favour of sticking with ‘msbuild’&lt;/a&gt;, you can see this change happen towards the right of the chart, there is a marked increase in the &lt;strong&gt;msbuild&lt;/strong&gt; repo activity as any improvements that had been done in &lt;strong&gt;cli&lt;/strong&gt; were ported over.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;methodology---community-v-microsoft&quot;&gt;Methodology - Community v. Microsoft&lt;/h3&gt;

&lt;p&gt;But the main question I want to answer is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How much &lt;strong&gt;Community&lt;/strong&gt; involvement has there been since Microsoft open sourced large parts of the .NET framework?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(See my previous post to see how things &lt;a href=&quot;/2016/01/15/open-source-net-1-year-later-now-with-aspnet/&quot;&gt;looked after one year&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;To do this we need to look at who &lt;strong&gt;opened the Issue&lt;/strong&gt; or &lt;strong&gt;created the Pull Request (PR)&lt;/strong&gt; and specifically if they worked for  Microsoft or not. This is possible because (almost) all Microsoft employees have indicated where they work on their GitHub profile, for instance:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/davidfowl&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/157298/12374944/b686820c-bca4-11e5-86c8-cf9f1076b45e.png&quot; alt=&quot;David Fowler Profile&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are some notable exceptions, e.g. &lt;a href=&quot;https://github.com/shanselman&quot;&gt;@shanselman&lt;/a&gt; clearly works at Microsoft, but it’s easy enough to allow for cases like this. Before you ask, I only analysed this data, &lt;a href=&quot;https://www.troyhunt.com/8-million-github-profiles-were-leaked-from-geekedins-mongodb-heres-how-to-see-yours/&quot;&gt;I did not keep a copy of it in stored in MongoDB&lt;/a&gt; to sell to recruiters!!&lt;/p&gt;

&lt;h3 id=&quot;overall-participation---community-v-microsoft&quot;&gt;Overall Participation - Community v. Microsoft&lt;/h3&gt;

&lt;p&gt;This data represents the total participation from the last 2 years, i.e. &lt;strong&gt;November 2014&lt;/strong&gt; to &lt;strong&gt;October 2016&lt;/strong&gt;. All Pull Requests are Issues are treated equally, so a large PR counts the same as one that fixes a spelling mistake. Whilst this isn’t ideal it’s the simplest way to get an idea of the Microsoft/Community split.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can hover over the bars to get the actual numbers, rather than percentages.&lt;/p&gt;

&lt;body&gt;
  &lt;!-- TODO do this in css styles, not inline!! --&gt;
  &lt;div class=&quot;g-chart-issues&quot;&gt;
    &lt;span style=&quot;font-weight:bold;font-size:large;margin-left:150px;&quot;&gt; Issues: &lt;/span&gt;
    &lt;span style=&quot;color:#9ecae1;font-weight:bold;font-size:large;margin-left:5px;&quot;&gt; Microsoft &lt;/span&gt;
    &lt;span style=&quot;color:#3182bd;font-weight:bold;font-size:large;margin-left:5px;&quot;&gt; Community &lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;g-chart-pull-requests&quot;&gt;
    &lt;span style=&quot;font-weight:bold;font-size:large;margin-left:150px;&quot;&gt; Pull Requests: &lt;/span&gt;
    &lt;span style=&quot;color:#a1d99b;font-weight:bold;font-size:large;margin-left:5px;&quot;&gt; Microsoft &lt;/span&gt;
    &lt;span style=&quot;color:#31a354;font-weight:bold;font-size:large;margin-left:5px;&quot;&gt; Community &lt;/span&gt;
  &lt;/div&gt;
&lt;/body&gt;

&lt;p&gt;The general pattern these graphs show is that the Community is more likely to open an Issue than submit a PR, which I guess isn’t that surprising given the relative amount of work involved. However it’s clear that the Community is still contributing a considerable amount of work, for instance if you look at the &lt;strong&gt;CoreCLR&lt;/strong&gt; repo it &lt;em&gt;only&lt;/em&gt; has 21% of PRs from the Community, but this stills account for almost 900!&lt;/p&gt;

&lt;p&gt;There’s a few interesting cases that jump out here, for instance &lt;strong&gt;Roslyn&lt;/strong&gt; gets 35% of its issues from the Community, but only 6% of its PR’s, clearly getting code into the compiler is a tough task. Likewise it doesn’t seem like the Community is that interested in submitting code to &lt;strong&gt;msbuild&lt;/strong&gt;, although it does have my &lt;a href=&quot;https://github.com/Microsoft/msbuild/pull/1&quot;&gt;favourite PR ever&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Microsoft/msbuild/pull/1&quot;&gt;&lt;img src=&quot;/images/2016/11/Fix legacy msbuild issues.png&quot; alt=&quot;Fix legacy msbuild issues&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;participation-over-time---community-v-microsoft&quot;&gt;Participation over time - Community v. Microsoft&lt;/h3&gt;

&lt;p&gt;Finally we can see the ‘per-month’ data from the last 2 years, i.e. &lt;strong&gt;November 2014&lt;/strong&gt; to &lt;strong&gt;October 2016&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can inspect different repos by selecting them from the pull-down list, but be aware that the y-axis on the graphs are re-scaled, so the maximum value will change each time.&lt;/p&gt;

&lt;div id=&quot;issuesGraph&quot;&gt;
  &lt;!-- TODO do this in css styles, not inline!! --&gt;
  &lt;span style=&quot;font-weight:bold;font-size:larger;margin-left:30px;&quot;&gt; Issues: &lt;/span&gt;
  &lt;span style=&quot;color:#9ecae1;font-weight:bold;font-size:larger;margin-left:5px;&quot;&gt; Microsoft &lt;/span&gt;
  &lt;span style=&quot;color:#3182bd;font-weight:bold;font-size:larger;margin-left:5px;&quot;&gt; Community &lt;/span&gt;
  &lt;!-- &lt;form&gt;
    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;mode&quot; value=&quot;stacked&quot; checked&gt; Stacked&lt;/label&gt;
    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;mode&quot; value=&quot;grouped&quot;&gt; Grouped&lt;/label&gt;
  &lt;/form&gt; --&gt;
&lt;/div&gt;

&lt;div id=&quot;pullRequestsGraph&quot;&gt;
  &lt;!-- TODO do this in css styles, not inline!! --&gt;
  &lt;span style=&quot;font-weight:bold;font-size:larger;margin-left:30px;&quot;&gt; Pull Requests: &lt;/span&gt;
  &lt;span style=&quot;color:#a1d99b;font-weight:bold;font-size:larger;margin-left:5px;&quot;&gt; Microsoft &lt;/span&gt;
  &lt;span style=&quot;color:#31a354;font-weight:bold;font-size:larger;margin-left:5px;&quot;&gt; Community &lt;/span&gt;
  &lt;!-- &lt;form&gt;
    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;mode&quot; value=&quot;stacked&quot; checked&gt; Stacked&lt;/label&gt;
    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;mode&quot; value=&quot;grouped&quot;&gt; Grouped&lt;/label&gt;
  &lt;/form&gt; --&gt;
&lt;/div&gt;

&lt;p&gt;Whilst not every repo is growing month-by-month, the majority are and those that aren’t at least show sustained contributions across 2 years.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;I think that it’s clear to see that the Community has got on-board with the new Open-Source Microsoft, producing a sustained level of contributions over the last 2 years, lets hope it continues!&lt;/p&gt;

&lt;p&gt;Discuss this post in &lt;a href=&quot;https://www.reddit.com/r/programming/comments/5eh17t/open_source_net_2_years_later/&quot;&gt;/r/programming&lt;/a&gt;&lt;/p&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2016/11/23/open-source-net-2-years-later/&quot;&gt;Open Source .NET – 2 years later&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='Analytics' scheme='http://www.mattwarren.org/tags#Analytics'/>
   
     <category term='Open Source' scheme='http://www.mattwarren.org/tags#Open Source'/>
   
     <category term='Roslyn' scheme='http://www.mattwarren.org/tags#Roslyn'/>
   
     <category term='AspNet' scheme='http://www.mattwarren.org/tags#AspNet'/>
   
 </entry>
 
 <entry>
   <title>How does the 'fixed' keyword work?</title>
   <link href="http://www.mattwarren.org/2016/10/26/How-does-the-fixed-keyword-work/"/>
   <updated>2016-10-26T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/10/26/How-does-the-fixed-keyword-work</id>
   <content type="html">
     &lt;p&gt;Well it turns out that it’s a really nice example of collaboration between the main parts of the .NET runtime, here’s a list of all the components involved:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#compiler&quot;&gt;Compiler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jitter&quot;&gt;JITter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#clr&quot;&gt;CLR&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#garbage-collector&quot;&gt;Garbage Collector (GC)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you could argue that all of these are required to execute any C# code, but what’s interesting about the &lt;code class=&quot;highlighter-rouge&quot;&gt;fixed&lt;/code&gt; keyword is that they all have a &lt;em&gt;specific&lt;/em&gt; part to play.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;compiler&quot;&gt;Compiler&lt;/h3&gt;

&lt;p&gt;To start with let’s look at one of the most basic scenarios for using the &lt;code class=&quot;highlighter-rouge&quot;&gt;fixed&lt;/code&gt; keyword, directly accessing the contents of a C# &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;, (taken from a &lt;a href=&quot;https://github.com/dotnet/roslyn/blob/614299ff83da9959fa07131c6d0ffbc58873b6ae/src/Compilers/CSharp/Test/Emit/CodeGen/UnsafeTests.cs#L1467-L1515&quot;&gt;Roslyn unit test&lt;/a&gt;)&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fixed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which the compiler then turns into the following IL:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Code size       34 (0x22)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;maxstack&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;locals&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;V_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//p&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;pinned&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;V_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IL_0000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;nop&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IL_0001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;ldstr&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IL_0006&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;stloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IL_0007&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;ldloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IL_0008&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;conv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IL_0009&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;stloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IL_000a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;ldloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IL_000b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;brfalse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;IL_0015&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IL_000d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;ldloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IL_000e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;int System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData.get&quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IL_0013&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IL_0014&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;stloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IL_0015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;nop&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IL_0016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;ldloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IL_0017&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;ldind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;u2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IL_0018&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;void System.Console.WriteLine(char)&quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IL_001d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;nop&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IL_001e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;nop&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IL_001f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;ldnull&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IL_0020&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;stloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IL_0021&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note the &lt;code class=&quot;highlighter-rouge&quot;&gt;pinned string V_1&lt;/code&gt; that the compiler has created for us, it’s made a &lt;em&gt;hidden&lt;/em&gt; local variable that holds a reference to the &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; we are using in the &lt;code class=&quot;highlighter-rouge&quot;&gt;fixed&lt;/code&gt; statement, which in this case is the string “&lt;em&gt;hello&lt;/em&gt;”. The purpose of this pinned local variable will be explained in a moment.&lt;/p&gt;

&lt;p&gt;It’s also emitted an call to the &lt;code class=&quot;highlighter-rouge&quot;&gt;OffsetToStringData&lt;/code&gt; getter method (from &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Runtime.CompilerServices.RuntimeHelpers&lt;/code&gt;), which we will cover in more detail when we discuss the &lt;a href=&quot;#clr&quot;&gt;CLR’s role&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, as an aside the compiler is also performing an optimisation for us, normally it would &lt;em&gt;wrap&lt;/em&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;fixed&lt;/code&gt; statement in a &lt;code class=&quot;highlighter-rouge&quot;&gt;finally&lt;/code&gt; block to ensure the pinned local variable is nulled out after controls leaves the scope. But in this case it has determined that is can leave out the &lt;code class=&quot;highlighter-rouge&quot;&gt;finally&lt;/code&gt; statement entirely, from &lt;a href=&quot;https://github.com/dotnet/roslyn/blob/614299ff83da9959fa07131c6d0ffbc58873b6ae/src/Compilers/CSharp/Portable/Lowering/LocalRewriter/LocalRewriter_FixedStatement.cs#L49-L54&quot;&gt;LocalRewriter_FixedStatement.cs&lt;/a&gt; in the Roslyn source:&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// In principle, the cleanup code (i.e. nulling out the pinned variables) is always&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// in a finally block.  However, we can optimize finally away (keeping the cleanup&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// code) in cases where both of the following are true:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   1) there are no branches out of the fixed statement; and&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   2) the fixed statement is not in a try block (syntactic or synthesized).&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsInTryBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HasGotoOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rewrittenBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;what-is-this-pinned-identifier&quot;&gt;What is this pinned identifier?&lt;/h3&gt;

&lt;p&gt;Let’s start by looking at the authoritative source, from &lt;a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-335.htm&quot;&gt;Standard ECMA-335 Common Language Infrastructure (CLI)&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;II.7.1.2 pinned&lt;/strong&gt;
The signature encoding for &lt;strong&gt;pinned&lt;/strong&gt; shall appear only in signatures that describe local variables (§II.15.4.1.3). While a method with a &lt;strong&gt;pinned&lt;/strong&gt; local variable is executing, the VES shall not relocate the object to which the local refers. That is, if the implementation of the CLI uses a garbage collector that moves objects, the collector shall not move objects that are referenced by an active &lt;strong&gt;pinned&lt;/strong&gt; local variable.&lt;/p&gt;

  &lt;p&gt;[&lt;em&gt;Rationale&lt;/em&gt;: If unmanaged pointers are used to dereference managed objects, these objects shall be &lt;strong&gt;pinned&lt;/strong&gt;. This happens, for example, when a managed object is passed to a method designed to operate with unmanaged data. &lt;em&gt;end rationale&lt;/em&gt;]&lt;/p&gt;

  &lt;p&gt;VES = Virtual Execution System
CLI = Common Language Infrastructure
CTS = Common Type System&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But if you prefer an explanation in more human readable form (i.e. not from a spec), then this extract from &lt;a href=&quot;https://www.amazon.co.uk/NET-Assembler-Serge-Lidin/dp/1430267615/ref=as_li_ss_tl?ie=UTF8&amp;amp;linkCode=sl1&amp;amp;tag=mattonsoft-21&amp;amp;linkId=062fce40a5e1895bba51689c80a6a163&quot;&gt;.Net IL Assembler Paperback by Serge Lidin&lt;/a&gt; is helpful:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/10/Explanation of pinned from .NET IL Assembler book.png&quot; alt=&quot;Explanation of pinned from .NET IL Assembler book&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(Also available on &lt;a href=&quot;https://books.google.co.uk/books?id=Xv_0AwAAQBAJ&amp;amp;pg=PA140&amp;amp;lpg=PA140&amp;amp;dq=.net+il+pinned+local+variable&amp;amp;source=bl&amp;amp;ots=Yk262rHHNl&amp;amp;sig=nNmZtNncfcGAnMdBQ5uQLtggNQc&amp;amp;hl=en&amp;amp;sa=X&amp;amp;redir_esc=y#v=onepage&amp;amp;q&amp;amp;f=false&quot;&gt;Google Books&lt;/a&gt;)&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;clr&quot;&gt;CLR&lt;/h3&gt;

&lt;p&gt;Arguably the CLR has the easiest job to do (if you accept that it exists as a separate component from the JIT and GC), its job is to provide the offset of the raw &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; data via the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/ffeef85a626d7344fd3e2031f749c356db0628d3/src/mscorlib/src/System/Runtime/CompilerServices/RuntimeHelpers.cs#L177-L196&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OffsetToStringData&lt;/code&gt; method&lt;/a&gt; that is emitted by the compiler.&lt;/p&gt;

&lt;p&gt;Now you might be thinking that this method does some complex calculations to determine the exact offset, but nope, it’s hard-coded!! (I told you that &lt;a href=&quot;/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/&quot;&gt;Strings and the CLR have a &lt;em&gt;Special Relationship&lt;/em&gt;&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OffsetToStringData&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This offset is baked in by string indexer intrinsic, so there is no harm&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// in getting it baked in here as well.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Versioning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NonVersionable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Number of bytes from the address pointed to by a reference to&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// a String to the first 16-bit character in the String.  Skip &lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// over the MethodTable pointer, &amp;amp; String length.  Of course, the &lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// String reference points to the memory after the sync block, so &lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// don't count that. &lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// This property allows C#'s fixed statement to work on Strings.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// On 64 bit platforms, this should be 12 (8+4) and on 32 bit 8 (4+4).&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#if BIT64
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#else // 32
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif // BIT64
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;jitter&quot;&gt;JITter&lt;/h3&gt;

&lt;p&gt;For the &lt;code class=&quot;highlighter-rouge&quot;&gt;fixed&lt;/code&gt; keyword to work the role of the JITter is to provide information to the GC/Runtime about the lifetimes of variables within a method and in-particular if they are &lt;em&gt;pinned&lt;/em&gt; locals. It does this via the &lt;code class=&quot;highlighter-rouge&quot;&gt;GCInfo&lt;/code&gt; data it &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/Documentation/botr/ryujit-overview.md#gc-info&quot;&gt;creates for every method&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/Documentation/botr/ryujit-overview.md#gc-info&quot;&gt;&lt;img src=&quot;/images/2016/10/GC Info provided by the JIT.png&quot; alt=&quot;GC Info provided by the JIT&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To see this in action we have to enable the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/building/viewing-jit-dumps.md#useful-complus-variables&quot;&gt;correct magic flags&lt;/a&gt; and then we will see the following:&lt;/p&gt;

&lt;div class=&quot;language-racket highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;Compiling&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ConsoleApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Program::Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IL&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hsh=0x8d66958e&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; Assembly listing for method ConsoleApplication.Program:Main(ref)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; Emitting BLENDED_CODE for X64 CPU with AVX&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; optimized code&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; rsp based frame&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; partially interruptible&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; Final local variable assignments&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;* V00 arg0         [V00    ] (  0,   0  )     ref  -&amp;gt;  zero-ref   &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;  V01 loc0         [V01,T00] (  5,   4  )    long  -&amp;gt;  rcx        &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;  V02 loc1         [V02    ] (  3,   3  )     ref  -&amp;gt;  [rsp+0x20]   must-init pinned&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;  V03 tmp0         [V03,T01] (  2,   4  )    long  -&amp;gt;  rcx        &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;  V04 OutArgs      [V04    ] (  1,   1  )  lclBlk (32) [rsp+0x00]  &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; Lcl frame size = 40&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;G_M27250_IG01:&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;000000&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4883&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EC28&lt;/span&gt;             &lt;span class=&quot;nv&quot;&gt;sub&lt;/span&gt;      &lt;span class=&quot;nv&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;000004&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C0&lt;/span&gt;                 &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt;      &lt;span class=&quot;nv&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rax&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;000006&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4889442420&lt;/span&gt;           &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt;      &lt;span class=&quot;nv&quot;&gt;qword&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rsp+20H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rax&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;G_M27250_IG02:&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;00000&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;488&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B0C256830B412&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt;      &lt;span class=&quot;nv&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gword&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;12B43068H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;      &lt;span class=&quot;ss&quot;&gt;'hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;000013&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;48894&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C2420&lt;/span&gt;           &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt;      &lt;span class=&quot;nv&quot;&gt;gword&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rsp+20H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rcx&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;000018&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;488&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B4C2420&lt;/span&gt;           &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt;      &lt;span class=&quot;nv&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gword&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rsp+20H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;00001&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4885&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C9&lt;/span&gt;               &lt;span class=&quot;nv&quot;&gt;test&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rcx&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;000020&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7404&lt;/span&gt;                 &lt;span class=&quot;nv&quot;&gt;je&lt;/span&gt;       &lt;span class=&quot;nv&quot;&gt;SHORT&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;G_M27250_IG03&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;000022&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4883&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C10C&lt;/span&gt;             &lt;span class=&quot;nv&quot;&gt;add&lt;/span&gt;      &lt;span class=&quot;nv&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;G_M27250_IG03:&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;000026&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FB709&lt;/span&gt;               &lt;span class=&quot;nv&quot;&gt;movzx&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;word&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;000029&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;E842FCFFFF&lt;/span&gt;           &lt;span class=&quot;nv&quot;&gt;call&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Console:WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;00002&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C0&lt;/span&gt;                 &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt;      &lt;span class=&quot;nv&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rax&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;000030&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4889442420&lt;/span&gt;           &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt;      &lt;span class=&quot;nv&quot;&gt;gword&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rsp+20H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rax&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;G_M27250_IG04:&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;000035&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4883&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C428&lt;/span&gt;             &lt;span class=&quot;nv&quot;&gt;add&lt;/span&gt;      &lt;span class=&quot;nv&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;000039&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;C3&lt;/span&gt;                   &lt;span class=&quot;nv&quot;&gt;ret&lt;/span&gt;      

&lt;span class=&quot;c1&quot;&gt;; Total bytes of code 58, prolog size 11 for method ConsoleApplication.Program:Main(ref)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; ============================================================&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Outgoing&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Stack&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;slot&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pinned&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;untracked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Defining&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sites:&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;Offset&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x29&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See how in the section titled “&lt;em&gt;Final local variable assignments&lt;/em&gt;” is had indicated that the &lt;code class=&quot;highlighter-rouge&quot;&gt;V02 loc1&lt;/code&gt; variable is &lt;code class=&quot;highlighter-rouge&quot;&gt;must-init pinned&lt;/code&gt; and then down at the bottom is has this text:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Stack slot id for offset 32 (0x20) (sp) (pinned, untracked) = 0.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt;: The JIT has also done some extra work for us and optimised away the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;OffsetToStringData&lt;/code&gt; by inlining it as the assembly code &lt;code class=&quot;highlighter-rouge&quot;&gt;add rcx, 12&lt;/code&gt;. On a slightly related note, previously the &lt;code class=&quot;highlighter-rouge&quot;&gt;fixed&lt;/code&gt; keyword prevented a method from being inlined, but recently that changed, see &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/7774&quot;&gt;Support inlining method with pinned locals&lt;/a&gt; for the full details.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;garbage-collector&quot;&gt;Garbage Collector&lt;/h3&gt;

&lt;p&gt;Finally we come to the GC which has an important “&lt;em&gt;role to play&lt;/em&gt;”, or “&lt;em&gt;not to play&lt;/em&gt;” depending on which way you look at it.&lt;/p&gt;

&lt;p&gt;In effect the GC has to get out of the way and leave the pinned local variable alone for the life-time of the method. Normally the GC is concerned about which objects are &lt;em&gt;live&lt;/em&gt; or &lt;em&gt;dead&lt;/em&gt; so that it knows what it has to clean up. But with pinned objects it has to go one step further, not only must it &lt;em&gt;not clean up&lt;/em&gt; the object, but it must &lt;em&gt;not move it around&lt;/em&gt;. Generally the GC likes to relocate objects around during the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/garbage-collection.md#compact-phase&quot;&gt;Compact Phase&lt;/a&gt; to make memory allocations cheap, but pinning prevents that as the object is being accessed via a pointer and therefore its memory address &lt;em&gt;has&lt;/em&gt; to remain the same.&lt;/p&gt;

&lt;p&gt;There is a great visual explanation of what that looks like from the excellent presentation &lt;a href=&quot;http://slideplayer.com/slide/6084514/&quot;&gt;CLR: Garbage Collection Inside Out&lt;/a&gt; by &lt;a href=&quot;https://blogs.msdn.microsoft.com/maoni/&quot;&gt;Maoni Stephens&lt;/a&gt; (click for full-sized version):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/10/Fragmentation Problem Caused By Pinning.png&quot;&gt;&lt;img src=&quot;/images/2016/10/Fragmentation Problem Caused By Pinning.png&quot; alt=&quot;Fragmentation Problem Caused By Pinning&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note how the pinned blocks (marked with a ‘P’) have remained where they are, forcing the Gen 0/1/2 segments to start at awkard locations. This is why pinning too many objects and keeping them pinned for too long can cause GC overhead, it has to perform extra booking keeping and work around them.&lt;/p&gt;

&lt;p&gt;In reality, when using the &lt;code class=&quot;highlighter-rouge&quot;&gt;fixed&lt;/code&gt; keyword, your object will only remain pinned for a short period of time, i.e. until control leaves the scope. But if you are pinning object via the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.gchandle(v=vs.110).aspx&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCHandle&lt;/code&gt; class&lt;/a&gt; then the lifetime could be longer.&lt;/p&gt;

&lt;p&gt;So to finish, let’s get the final word on pinning from Maoni Stephens, from &lt;a href=&quot;https://blogs.msdn.microsoft.com/maoni/2004/12/19/using-gc-efficiently-part-3/&quot;&gt;Using GC Efficiently – Part 3&lt;/a&gt; (read the blog post for more details):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;When you do need to pin, here are some things to keep in mind:&lt;/strong&gt;&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;Pinning for a short time is cheap.&lt;/li&gt;
    &lt;li&gt;Pinning an older object is not as harmful as pinning a young object.&lt;/li&gt;
    &lt;li&gt;Creating pinned buffers that stay together instead of scattered around. This way you create fewer holes.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;So that’s it, simple really!!&lt;/p&gt;

&lt;p&gt;All the main parts of the .NET runtime do their bit and we get to use a handy feature that lets us drop-down and perform some bare-metal coding!!&lt;/p&gt;

&lt;p&gt;Discuss this post in &lt;a href=&quot;https://www.reddit.com/r/programming/comments/59qa94/how_does_the_c_fixed_keyword_work/&quot;&gt;/r/programming&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h3&gt;

&lt;p&gt;If you’ve read this far, you might find some of these links useful:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CoreCLR Repo Searches
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/search?q=pinned&amp;amp;utf8=%E2%9C%93&quot;&gt;‘pinned’&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/search?q=GC+lifetimes&amp;amp;utf8=%E2%9C%93&quot;&gt;‘GC lifetimes&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/search?q=path%3A%2Fsrc%2Fgc+pinned&amp;amp;type=Code&amp;amp;utf8=%E2%9C%93&quot;&gt;‘path:/src/gc pinned’&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/search?q=path%3A%2FDocumentation+pinned&amp;amp;type=Code&quot;&gt;‘path:/Documentation pinned’&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/search?q=path%3A%2FDocumentation+%22GC+Info%22&quot;&gt;‘path:/Documentation “GC Info”’&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/search?utf8=%E2%9C%93&amp;amp;q=path%3A%2FDocumentation+GCInfo&amp;amp;type=Code&quot;&gt;‘path:/Documentation GCInfo’&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/maoni/2004/11/04/clearing-up-some-confusion-over-finalization-and-other-areas-in-gc/&quot;&gt;Clearing up some confusion over finalization and other areas in GC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/maoni/2015/08/12/gen2-free-list-changes-in-clr-4-6-gc/&quot;&gt;Gen2 free list changes in CLR 4.6 GC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/7029&quot;&gt;Improve StringBuilder ctor(), ctor(int), and ToString() performance.&lt;/a&gt; - turns out doing &lt;code class=&quot;highlighter-rouge&quot;&gt;fixed (char* sourcePtr = &amp;amp;array[0])&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;fixed(char* sourcePtr = array)&lt;/code&gt; can be faster!!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/26927243/gc-behavior-when-pinning-an-object&quot;&gt;GC behavior when pinning an object&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2016/10/26/How-does-the-fixed-keyword-work/&quot;&gt;How does the 'fixed' keyword work?&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='JIT Compiler' scheme='http://www.mattwarren.org/tags#JIT Compiler'/>
   
     <category term='Garbage Collectors' scheme='http://www.mattwarren.org/tags#Garbage Collectors'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
 </entry>
 
 <entry>
   <title>Adding a verb to the dotnet CLI tooling</title>
   <link href="http://www.mattwarren.org/2016/10/03/Adding-a-verb-to-the-dotnet-CLI-tooling/"/>
   <updated>2016-10-03T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/10/03/Adding-a-verb-to-the-dotnet-CLI-tooling</id>
   <content type="html">
     &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet&lt;/code&gt; CLI tooling comes with several built-in cmds such as &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;, but it turns out it’s possible to add your own verb to that list.&lt;/p&gt;

&lt;h3 id=&quot;arbitrary-cmds&quot;&gt;Arbitrary cmds&lt;/h3&gt;

&lt;p&gt;From &lt;a href=&quot;https://github.com/dotnet/cli/blob/rel/1.0.0/Documentation/intro-to-cli.md#design&quot;&gt;Intro to .NET Core CLI - Design&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The way the &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet&lt;/code&gt; driver finds the command it is instructed to run using &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet {command}&lt;/code&gt; is via a convention; &lt;strong&gt;any executable that is placed in the PATH and is named &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet-{command}&lt;/code&gt; will be available to the driver&lt;/strong&gt;. For example, when you install the CLI toolchain there will be an executable called &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet-build&lt;/code&gt; in your PATH; when you run &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet build&lt;/code&gt;, the driver will run the &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet-build&lt;/code&gt; executable. All of the arguments following the command are passed to the command being invoked. So, in the invocation of &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet build --native&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;--native&lt;/code&gt; switch will be passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet-build&lt;/code&gt; executable that will do some action based on it (in this case, produce a single native binary).&lt;/p&gt;

  &lt;p&gt;This is also the basics of the current extensibility model of the toolchain. &lt;strong&gt;Any executable found in the PATH named in this way, that is as &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet-{command}&lt;/code&gt;, will be invoked by the &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet&lt;/code&gt; driver.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Fun fact:&lt;/strong&gt; This means that it’s actually possible to make a &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet go&lt;/code&gt; command! You just need to make a copy of &lt;code class=&quot;highlighter-rouge&quot;&gt;go.exe&lt;/code&gt; and rename it to &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet-go.exe&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/10/dotnet-go-cmd.png&quot; alt=&quot;dotnet go cmd&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yay &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet go&lt;/code&gt; (I know, completely useless, but fun none-the-less)!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/10/dotnet-go-cmd-output.png&quot; alt=&quot;dotnet go cmd output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(and yes before you ask, you can also make &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet dotnet&lt;/code&gt; work, but please don’t do that!!)&lt;/p&gt;

&lt;p&gt;With regards to documentation, there’s further information in the &lt;a href=&quot;https://github.com/dotnet/cli/blob/rel/1.0.0/Documentation/developer-guide.md#adding-a-command&quot;&gt;‘Adding a Command’ section&lt;/a&gt; of the Developer Guide. Also the &lt;a href=&quot;https://github.com/dotnet/cli/tree/rel/1.0.0/src/Microsoft.DotNet.Tools.Test&quot;&gt;source code&lt;/a&gt; of the &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet test&lt;/code&gt; command is a really useful reference and helped me out several times.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Before I go any further I just want to acknowledge the 2 blog posts listed below. They show you how to build a custom command that will compresses all the images in the current directory and how to make it available to the &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet&lt;/code&gt; tooling as a NuGet package:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://dotnetthoughts.net/using-nuget-packages-in-aspnet-core/&quot;&gt;Using nuget packages in ASP.NET Core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dotnetthoughts.net/building-a-custom-dotnet-cli-tool/&quot;&gt;Building a custom dotnet cli tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However they don’t explain how to interact with the current project or access it’s output. This is what I wanted to do, so this post will pick up where those posts left off.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;information-about-the-current-project&quot;&gt;Information about the current Project&lt;/h3&gt;

&lt;p&gt;Any effective &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet&lt;/code&gt; verb needs to know about the project it is running in and helpfully those kind developers at Microsoft have created some useful classes that will parse and examine a &lt;code class=&quot;highlighter-rouge&quot;&gt;project.json&lt;/code&gt; file (available in the &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.DotNet.ProjectModel&quot;&gt;Microsoft.DotNet.ProjectModel&lt;/a&gt; NuGet package). It’s pretty simple to work with, just a few lines of code and you’re able to access the entire &lt;a href=&quot;https://github.com/dotnet/cli/blob/rel/1.0.0/src/Microsoft.DotNet.ProjectModel/Project.cs&quot;&gt;Project model&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Project&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentDirectory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetCurrentDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProjectReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TryGetProject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SourceFiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Files:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SourceFiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;  {0}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Dependencies:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependancy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;  {0} - Line:{1}, Column:{2}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;dependancy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SourceFilePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;dependancy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SourceLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;dependancy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SourceColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;building-a-project&quot;&gt;Building a Project&lt;/h3&gt;

&lt;p&gt;In addition to knowing about the current project, we need to ensure it successfully builds before we can do anything else with it. Fortunately this is also simple thanks to the &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.DotNet.Cli.Utils/&quot;&gt;Microsoft.DotNet.Cli.Utils&lt;/a&gt; NuGet package (along with further help from &lt;code class=&quot;highlighter-rouge&quot;&gt;Microsoft.DotNet.ProjectModel&lt;/code&gt; which provides the &lt;code class=&quot;highlighter-rouge&quot;&gt;BuildWorkspace&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Create a workspace&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BuildWorkspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProjectReaderSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadFromEnvironment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Fetch the ProjectContexts&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;projectPath&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProjectFilePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtimeIdentifiers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;RuntimeEnvironmentRidExtensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAllCandidateRuntimeIdentifiers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;projectContexts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetProjectContextCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projectPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;EnsureValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projectPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FrameworkOnlyContexts&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetRuntimeContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtimeIdentifiers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Setup the build arguments&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;projectContextToBuild&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;projectContexts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;First&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmdArgs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;projectPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;--configuration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Release&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;--framework&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;projectContextToBuild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TargetFramework&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Build!!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Building Project for {0}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;projectContextToBuild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateDotNet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmdArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Build {0}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExitCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SUCCEEDED&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;FAILED&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When this runs you get the familiar &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet build&lt;/code&gt; output if it successfully builds or any error/diagnostic messages if not.&lt;/p&gt;

&lt;h3 id=&quot;integrating-with-benchmarkdotnet&quot;&gt;Integrating with BenchmarkDotNet&lt;/h3&gt;

&lt;p&gt;Now that we know the project has produced an .exe or .dll, we can finally wire-up &lt;a href=&quot;https://perfdotnet.github.io/BenchmarkDotNet&quot;&gt;BenchmarkDotNet&lt;/a&gt; and get it to execute the benchmarks for us:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Running BenchmarkDotNet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;benchmarkAssemblyPath&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;projectContextToBuild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetOutputPaths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeFiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;benchmarkAssembly&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;AssemblyLoadContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;LoadFromAssemblyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;benchmarkAssemblyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Successfully loaded: {0}\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;benchmarkAssembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;switcher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BenchmarkSwitcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;benchmarkAssembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;switcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error running BenchmarkDotNet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because BenchmarkDotNet is a command-line tool we don’t actually need to do much work. It’s just a case of creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;BenchmarkSwitcher&lt;/code&gt;, giving it a reference to the dll that contains the benchmarks and then passing in the command line arguments. BenchmarkDotNet will then do the rest of the work for us!&lt;/p&gt;

&lt;p&gt;However if you need to parse command line arguments yourself I’d recommend re-using the existing &lt;a href=&quot;https://github.com/dotnet/cli/tree/a3a58423d19b01f113af0cc2cc2731c0e6e67082/src/dotnet/CommandLine&quot;&gt;helper classes&lt;/a&gt; as they make life much easier and will ensure that your tool fits in with the &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet&lt;/code&gt; tooling ethos.&lt;/p&gt;

&lt;h3 id=&quot;the-final-result&quot;&gt;The final result&lt;/h3&gt;

&lt;p&gt;Finally, to test it out, we’ll use a &lt;a href=&quot;https://gist.github.com/mattwarren/7a9628105a85274cb7d3236d43274ce4&quot;&gt;simple test app&lt;/a&gt; from the BenchmarkDotNet &lt;a href=&quot;https://perfdotnet.github.io/BenchmarkDotNet/GettingStarted.htm&quot;&gt;Getting Started Guide&lt;/a&gt;, with the following in the &lt;a href=&quot;https://gist.github.com/mattwarren/74b1be5baf812cc692b86f0987efd873&quot;&gt;project.json&lt;/a&gt; file (note the added &lt;code class=&quot;highlighter-rouge&quot;&gt;tools&lt;/code&gt; section):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;version&quot;: &quot;1.0.0-*&quot;,
  &quot;buildOptions&quot;: {
    &quot;emitEntryPoint&quot;: true
  },
  &quot;dependencies&quot;: {
    &quot;Microsoft.NETCore.App&quot;: {
      &quot;type&quot;: &quot;platform&quot;,
      &quot;version&quot;: &quot;1.0.0-rc2-3002702&quot;
    },
    &quot;BenchmarkDotNet&quot;: &quot;0.9.9&quot;
  },
  &quot;frameworks&quot;: {
    &quot;netcoreapp1.0&quot;: {
      &quot;imports&quot;: &quot;dnxcore50&quot;
    }
  },
  &quot;tools&quot;: {
    &quot;BenchmarkCommand&quot;: &quot;1.0.0&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then after doing a &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet restore&lt;/code&gt;, we can finally run our new &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet benchmark&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ dotnet benchmark --class Md5VsSha256
Building Project - BenchmarkCommandTest
Project BenchmarkCommandTest (.NETCoreApp,Version=v1.0) will be compiled because expected outputs are missing
Compiling BenchmarkCommandTest for .NETCoreApp,Version=v1.0
Compilation succeeded.
    0 Warning(s)
    0 Error(s)
Time elapsed 00:00:00.9760886

Build SUCCEEDED

Running BenchmarkDotNet
C:\Projects\BenchmarkCommandTest\bin\Release\netcoreapp1.0\BenchmarkCommandTest.dll 
Successfully loaded: BenchmarkCommandTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

Target type: Md5VsSha256
// ***** BenchmarkRunner: Start   *****
// Found benchmarks:
//   Md5VsSha256_Sha256
//   Md5VsSha256_Md5
// Validating benchmarks:
// **************************
// Benchmark: Md5VsSha256_Sha256
// *** Generate ***
// Result = Success
// BinariesDirectoryPath = C:\Projects\BDN.Auto\binaries
// *** Build ***
// Result = Success
// *** Execute ***
// Launch: 1
// Benchmark Process Environment Information:
// CLR=CORE, Arch=64-bit ? [RyuJIT]
// GC=Concurrent Workstation

...

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you’ve used &lt;a href=&quot;https://perfdotnet.github.io/BenchmarkDotNet&quot;&gt;BenchmarkDotNet&lt;/a&gt; before you’ll recognise its output, if not it’s output is all the lines starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt;. A final note, currently the Console colours from the command aren’t displayed, but that &lt;a href=&quot;https://github.com/dotnet/cli/issues/1977#issuecomment-248635335&quot;&gt;should be fixed sometime soon&lt;/a&gt;, which is great because BenchmarkDotNet looks way better in full-colour!!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post in &lt;a href=&quot;https://www.reddit.com/r/csharp/comments/55oljz/adding_a_verb_to_the_dotnet_cli_tooling/&quot;&gt;/r/csharp&lt;/a&gt;&lt;/p&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2016/10/03/Adding-a-verb-to-the-dotnet-CLI-tooling/&quot;&gt;Adding a verb to the dotnet CLI tooling&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='CLI' scheme='http://www.mattwarren.org/tags#CLI'/>
   
     <category term='CoreCLR' scheme='http://www.mattwarren.org/tags#CoreCLR'/>
   
     <category term='Benchmarking' scheme='http://www.mattwarren.org/tags#Benchmarking'/>
   
 </entry>
 
 <entry>
   <title>Optimising LINQ</title>
   <link href="http://www.mattwarren.org/2016/09/29/Optimising-LINQ/"/>
   <updated>2016-09-29T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/09/29/Optimising-LINQ</id>
   <content type="html">
     &lt;h3 id=&quot;whats-the-problem-with-linq&quot;&gt;What’s the problem with LINQ?&lt;/h3&gt;

&lt;p&gt;As outlined by &lt;a href=&quot;https://twitter.com/xjoeduffyx&quot;&gt;Joe Duffy&lt;/a&gt;, LINQ introduces inefficiencies in the form of &lt;strong&gt;hidden allocations&lt;/strong&gt;, from &lt;a href=&quot;http://joeduffyblog.com/2010/09/06/the-premature-optimization-is-evil-myth/&quot;&gt;The ‘premature optimization is evil’ myth&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To take an example of a technology that I am quite supportive of, but that makes writing inefficient code very easy, let’s look at LINQ-to-Objects. Quick, how many inefficiencies are introduced by this code?&lt;/p&gt;

  &lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;
                 &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;Good question, who knows, probably only &lt;a href=&quot;http://stackoverflow.com/users?tab=Reputation&amp;amp;filter=all&quot;&gt;Jon Skeet&lt;/a&gt; can tell just by looking at the code!! So to fully understand the problem we need to take a look at what the compiler is doing for us &lt;em&gt;behind-the-scenes&lt;/em&gt;, the code above ends up looking something like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c__DisplayClass0_0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__locals0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__locals0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c__DisplayClass0_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__locals0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__locals0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__locals0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__locals0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b__0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__locals0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b__1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;[CompilerGenerated]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;c__DisplayClass0_0&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b__0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;b__1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see we have an extra &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; allocated and some &lt;code class=&quot;highlighter-rouge&quot;&gt;Func's&lt;/code&gt; to perform the actual logic. But this doesn’t even account for the overhead of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ToArray()&lt;/code&gt; call, using iterators and calling LINQ methods via dynamic dispatch. As an aside, if you are interested in finding out more about closures it’s worth reading Jon Skeet’s excellent blog post &lt;a href=&quot;http://csharpindepth.com/Articles/Chapter5/Closures.aspx&quot;&gt;“The Beauty of Closures”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So there’s &lt;em&gt;a lot&lt;/em&gt; going on behind the scenes, but it is actually possible to be shown these &lt;em&gt;hidden allocations&lt;/em&gt; directly in Visual Studio. If you install the excellent &lt;a href=&quot;https://blog.jetbrains.com/dotnet/2014/06/06/heap-allocations-viewer-plugin/&quot;&gt;Heap Allocation Viewer&lt;/a&gt; plugin for Resharper, you will get the following tool-tip right in the IDE:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/09/LINQ Optimisations - Heap Allocations Viewer - Joe Duffy Scale Method.png&quot;&gt;&lt;img src=&quot;/images/2016/09/LINQ Optimisations - Heap Allocations Viewer - Joe Duffy Scale Method.png&quot; alt=&quot;Heap Allocations Viewer - Joe Duffy Scale Method&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As useful as it is though, I wouldn’t recommend turning this on all the time as seeing all those &lt;font color=&quot;#FF0000&quot; style=&quot;font-weight: bold;&quot;&gt;red lines&lt;/font&gt; under your code tends to make you a bit paranoid!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt;: If you don’t have Resharper, there is a &lt;a href=&quot;https://github.com/mjsabby/RoslynClrHeapAllocationAnalyzer&quot;&gt;Roslyn based Heap Allocation Analyser&lt;/a&gt; available that provides similar functionality.&lt;/p&gt;

&lt;p&gt;Now before we look at some ways you can reduce the impact of LINQ, it’s worth pointing out that LINQ itself does some pretty neat tricks (HT to Oren Novotny for &lt;a href=&quot;https://twitter.com/onovotny/status/777785367718141952&quot;&gt;pointing this out to me&lt;/a&gt;). For instance the common pattern of having a &lt;code class=&quot;highlighter-rouge&quot;&gt;Where(..)&lt;/code&gt; followed by a &lt;code class=&quot;highlighter-rouge&quot;&gt;Select(..)&lt;/code&gt; is &lt;a href=&quot;https://github.com/dotnet/corefx/blob/master/src/System.Linq/src/System/Linq/Where.cs#L359-L422&quot;&gt;optimised so that only a single iterator is used&lt;/a&gt;, not two as you would expect. Likewise two &lt;code class=&quot;highlighter-rouge&quot;&gt;Select(..)&lt;/code&gt; statements in a row are combined, &lt;a href=&quot;https://github.com/dotnet/corefx/blob/master/src/System.Linq/src/System/Linq/Select.cs#L86-L89&quot;&gt;so that only a one iterator is needed&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;a-note-on-micro-optimisations&quot;&gt;A note on micro-optimisations&lt;/h3&gt;

&lt;p&gt;Whenever I write a post like this I inevitably get comments complaining that it’s an “&lt;em&gt;premature optimisation&lt;/em&gt;” or something similar. So this time I just want to add the following caveat:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I am &lt;strong&gt;not&lt;/strong&gt; in any way advocating that LINQ is a bad thing, I think it’s fantastic feature of the C# language!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Please &lt;strong&gt;do not&lt;/strong&gt; re-write any of your code based purely on the results of some micro-benchmarks!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As I explain in &lt;a href=&quot;http://www.skillsmatter.com/skillscasts/7809-performance-is-a-feature&quot;&gt;one of my talks&lt;/a&gt;, you should always &lt;strong&gt;profile&lt;/strong&gt; first and then &lt;strong&gt;benchmark&lt;/strong&gt;. If you do it the other way round there is a temptation to optimise where it’s not needed.&lt;/p&gt;

&lt;div style=&quot;text-align:center;&quot;&gt;
&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/LdInjrOoAs9K7U?startSlide=22&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/mattwarren/performance-is-a-feature-london-net-user-group&quot; title=&quot;Performance is a feature! - London .NET User Group&quot; target=&quot;_blank&quot;&gt;Performance is a feature! - London .NET User Group&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;//www.slideshare.net/mattwarren&quot;&gt;Matt Warren&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Having said all that, the C# Compiler (Roslyn) &lt;a href=&quot;https://github.com/dotnet/roslyn/wiki/Contributing-Code#coding-conventions&quot;&gt;coding guidelines&lt;/a&gt; do actually state the following:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Avoid allocations in compiler hot paths:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Avoid LINQ.&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;Avoid using foreach over collections that do not have a struct enumerator.&lt;/li&gt;
    &lt;li&gt;Consider using an object pool. There are many usages of object pools in the compiler to see an example.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which is slightly ironic considering this advice comes from the same people who conceived and designed LINQ in the first place! But as outlined in the excellent talk &lt;a href=&quot;https://channel9.msdn.com/Events/TechEd/NorthAmerica/2013/DEV-B333&quot;&gt;“Essential Truths Everyone Should Know about Performance in a Large Managed Codebase”&lt;/a&gt;, they found LINQ has a noticeable cost.&lt;/p&gt;

&lt;p&gt;Note: &lt;strong&gt;Hot paths&lt;/strong&gt; are another way of talking about the &lt;strong&gt;critical 3%&lt;/strong&gt; from the &lt;a href=&quot;http://c2.com/cgi/wiki?PrematureOptimization&quot;&gt;famous Donald Knuth quote&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. &lt;strong&gt;Yet we should not pass up our opportunities in that critical 3%.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;roslynlinqrewrite-and-linqoptimizer&quot;&gt;RoslynLinqRewrite and LinqOptimizer&lt;/h3&gt;

&lt;p&gt;Now clearly we could manually re-write any LINQ statement into an iterative version if we were concerned about performance, but wouldn’t it be much nicer if there were tools that could do the hard work for us? Well it turns out there are!&lt;/p&gt;

&lt;p&gt;First up is &lt;a href=&quot;https://github.com/antiufo/roslyn-linq-rewrite&quot;&gt;RoslynLinqRewrite&lt;/a&gt;, as per the project page:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This tool compiles C# code by first rewriting the syntax trees of LINQ expressions using plain procedural code, minimizing allocations and dynamic dispatch.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also available is the &lt;a href=&quot;http://nessos.github.io/LinqOptimizer/&quot;&gt;Nessos LinqOptimizer&lt;/a&gt; which is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An automatic query optimizer-compiler for Sequential and Parallel LINQ. LinqOptimizer compiles declarative LINQ queries into fast loop-based imperative code. The compiled code has fewer virtual calls and heap allocations, better data locality and speedups of up to 15x (Check the &lt;a href=&quot;https://github.com/nessos/LinqOptimizer/wiki/Performance&quot;&gt;Performance&lt;/a&gt; page).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At a high-level, the main differences between them are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RoslynLinqRewrite
    &lt;ul&gt;
      &lt;li&gt;works at &lt;strong&gt;compile&lt;/strong&gt; time (but prevents incremental compilation of your project)&lt;/li&gt;
      &lt;li&gt;no code changes, except if you want to opt out via &lt;code class=&quot;highlighter-rouge&quot;&gt;[NoLinqRewrite]&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;LinqOptimiser
    &lt;ul&gt;
      &lt;li&gt;works at &lt;strong&gt;run-time&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;forces you to add &lt;code class=&quot;highlighter-rouge&quot;&gt;AsQueryExpr().Run()&lt;/code&gt; to LINQ methods&lt;/li&gt;
      &lt;li&gt;optimises Parallel LINQ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the rest of the post will look at the tools in more detail and analyse their performance.&lt;/p&gt;

&lt;h3 id=&quot;comparison-of-linq-support&quot;&gt;Comparison of LINQ support&lt;/h3&gt;

&lt;p&gt;Obviously before choosing either tool you want to be sure that it’s actually going to optimise the LINQ statements you have in your code base. However neither tool supports the whole range of available &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/bb397927.aspx&quot;&gt;LINQ Query Expressions&lt;/a&gt;, as the chart below illustrates:&lt;/p&gt;

&lt;span class=&quot;compactTable&quot;&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Method&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/antiufo/roslyn-linq-rewrite#supported-linq-methods&quot;&gt;RoslynLinqRewrite&lt;/a&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/nessos/LinqOptimizer/blob/master/src/LinqOptimizer.CSharp/Extensions.cs#L304-L604&quot;&gt;LinqOptimiser&lt;/a&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Both?&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Select&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Where&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;ToList&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;ToArray&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Count&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;ForEach&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Reverse&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;False&quot;&gt;✗&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Cast&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;False&quot;&gt;✗&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;OfType&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;False&quot;&gt;✗&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;First/FirstOrDefault&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;False&quot;&gt;✗&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Single/SingleOrDefault&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;False&quot;&gt;✗&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Last/LastOrDefault&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;False&quot;&gt;✗&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;ToDictionary&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;False&quot;&gt;✗&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;LongCount&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;False&quot;&gt;✗&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Any&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;False&quot;&gt;✗&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;All&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;False&quot;&gt;✗&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;ElementAt/ElementAtOrDefault&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;False&quot;&gt;✗&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Contains&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;False&quot;&gt;✗&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Aggregate&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;False&quot;&gt;✗&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Sum&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;False&quot;&gt;✗&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;SelectMany&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;False&quot;&gt;✗&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Take/TakeWhile&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;False&quot;&gt;✗&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Skip/SkipWhile&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;False&quot;&gt;✗&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;GroupBy&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;False&quot;&gt;✗&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;OrderBy/OrderByDescending&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;False&quot;&gt;✗&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;ThenBy/ThenByDescending&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;False&quot;&gt;✗&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;span class=&quot;True&quot;&gt;✓&lt;/span&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;22&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;18&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;/span&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;performance-results&quot;&gt;Performance Results&lt;/h3&gt;

&lt;p&gt;Finally we get to the main point of this blog post, how do the different tools perform, do they achieve their stated goals of optimising LINQ queries and reducing allocations?&lt;/p&gt;

&lt;p&gt;Let’s start with a very common scenario, using LINQ to filter and map a sequence of numbers, i.e. in C#:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will compare the LINQ code above with the 2 optimised versions, plus an iterative form that will serve as our baseline. Here are the results:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/09/LINQ Optimisations - Where Select Benchmarks.png&quot;&gt;&lt;img src=&quot;/images/2016/09/LINQ Optimisations - Where Select Benchmarks.png&quot; alt=&quot;LINQ Optimisations - Where Select Benchmarks&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Full &lt;a href=&quot;https://gist.github.com/mattwarren/e528bc7c43864baad93ff33eb038005b&quot;&gt;benchmark code&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The first things that jumps out is that the &lt;strong&gt;LinqOptimiser&lt;/strong&gt; version is allocating &lt;strong&gt;a lot&lt;/strong&gt; of memory compared to the others. To see why this is happening we need to look at the code it generates, which looks something like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LinqOptimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nessos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LinqOptimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArrayCollector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;collector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This issue is that by default, &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayCollector&lt;/code&gt; allocates a &lt;code class=&quot;highlighter-rouge&quot;&gt;int[1024]&lt;/code&gt; as it’s &lt;a href=&quot;https://github.com/nessos/LinqOptimizer/blob/7ccb3a5c032daab18a1438299cae5a7a53e7fc26/src/LinqOptimizer.Core/Collector.fs#L19-L20&quot;&gt;backing storage&lt;/a&gt;, hence the excessive allocations!&lt;/p&gt;

&lt;p&gt;By contrast &lt;strong&gt;RoslynLinqRewrite&lt;/strong&gt; optimises the code like so:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RoslynLinqRewriteWhereSelect_ProceduralLinq1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_linqitems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_linqitems&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ArgumentNullException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_linqitems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_linqitem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_linqitems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_linqitem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_linqitem1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_linqitem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_linqitem1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which is much more sensible! By using the &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; keyword it gets the compiler to do the hard work and so doesn’t have to allocate a temporary list to store the results in. This means that it is &lt;em&gt;streaming&lt;/em&gt; the values, in the same way the original LINQ code does.&lt;/p&gt;

&lt;p&gt;Lastly we’ll look at one more example, this time using a &lt;code class=&quot;highlighter-rouge&quot;&gt;Count()&lt;/code&gt; expression, i.e.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we can clearly see that both tools significantly reduce the allocations compared to the original LINQ code:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/09/LINQ Optimisations - Count Benchmarks.png&quot;&gt;&lt;img src=&quot;/images/2016/09/LINQ Optimisations - Count Benchmarks.png&quot; alt=&quot;LINQ Optimisations - Count Benchmarks&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Full &lt;a href=&quot;https://gist.github.com/mattwarren/4c2b2e3585f8b9ad0f95a2a676c552bd&quot;&gt;benchmark code&lt;/a&gt;)&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;future-options&quot;&gt;Future options&lt;/h3&gt;

&lt;p&gt;However even though using &lt;strong&gt;RoslynLinqRewrite&lt;/strong&gt; or &lt;strong&gt;LinqOptimiser&lt;/strong&gt; is pretty painless, we still have to install a 3rd party library into our project.&lt;/p&gt;

&lt;p&gt;Wouldn’t it be even nicer if the .NET compiler, JITter and/or runtime did all the optimisations for us?&lt;/p&gt;

&lt;p&gt;Well it’s certainly possible, as Joe Duffy explains in his &lt;a href=&quot;https://www.infoq.com/news/2016/06/systems-programming-qcon&quot;&gt;QCon New York talk&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/6653&quot;&gt;work has already started&lt;/a&gt; so maybe we won’t have to wait too long!!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post in &lt;a href=&quot;https://www.reddit.com/r/programming/comments/551lqy/optimising_linq/&quot;&gt;/r/programming&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further Reading:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Options for LINQ optimisation from &lt;a href=&quot;https://github.com/dotnet/roslyn/issues/10378#issuecomment-247538865&quot;&gt;State / Direction of C# as a High-Performance Language&lt;/a&gt;:
    &lt;ul&gt;
      &lt;li&gt;Escape analysis only (JIT)&lt;/li&gt;
      &lt;li&gt;LINQ calls are optimized by the JIT&lt;/li&gt;
      &lt;li&gt;LINQ calls are optimized by the compiler&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;An attempt to &lt;a href=&quot;https://github.com/dotnet/roslyn/issues/10378#issuecomment-248556947&quot;&gt;manually optimise LINQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;LinqOptimiser &lt;a href=&quot;https://github.com/nessos/LinqOptimizer/wiki/Performance&quot;&gt;performance results&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;RoslynLinqRewrite
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/csharp/comments/5310m4/roslynlinqrewrite_compiles_linq_expressions_to/&quot;&gt;r/charp discussion&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/programming/comments/53nw6w/roslynlinqrewrite_optimize_linq_code_to/&quot;&gt;r/programming discussion&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=12544987&quot;&gt;HackerNews discussion&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2016/09/29/Optimising-LINQ/&quot;&gt;Optimising LINQ&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='LINQ' scheme='http://www.mattwarren.org/tags#LINQ'/>
   
     <category term='Benchmarking' scheme='http://www.mattwarren.org/tags#Benchmarking'/>
   
     <category term='Performance' scheme='http://www.mattwarren.org/tags#Performance'/>
   
     <category term='Optimisations' scheme='http://www.mattwarren.org/tags#Optimisations'/>
   
 </entry>
 
 <entry>
   <title>Compact strings in the CLR</title>
   <link href="http://www.mattwarren.org/2016/09/19/Compact-strings-in-the-CLR/"/>
   <updated>2016-09-19T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/09/19/Compact-strings-in-the-CLR</id>
   <content type="html">
     &lt;p&gt;In the CLR strings are stored as a sequence of UTF-16 code units, i.e. an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;char&lt;/code&gt; items. So if we have the string ‘testing’, in memory it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/09/Testing - Unicode or UTF-16.png&quot; alt=&quot;'Testing' - Unicode or UTF-16.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But look at all those zero’s, wouldn’t it be more efficient if it could be stored like this instead?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/09/Testing - ASCII or UTF-8.png&quot; alt=&quot;'Testing' - ASCII or UTF-8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now this is a contrived example, clearly not all strings are simple &lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt; text that can be compacted this way. Also, even though I’m an English speaker, I’m well aware that there are other languages with character sets than can only be expressed in &lt;code class=&quot;highlighter-rouge&quot;&gt;Unicode&lt;/code&gt;. However it turns out that even in a fully internationalised modern web-application, there are still a large amount of strings that could be expressed as &lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Urls&lt;/strong&gt; - &lt;a href=&quot;https://en.wikipedia.org/wiki/Percent-encoding&quot;&gt;Percent-encoding&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Http Headers&lt;/strong&gt; - &lt;a href=&quot;https://tools.ietf.org/html/rfc7230#section-3.2.4&quot;&gt;RFC 7230 3.2.4. Field Parsing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So there is still an overall memory saving if the CLR provided an implementation that stored some strings in a more compact encoding that only takes &lt;strong&gt;1 byte&lt;/strong&gt; per character (&lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt; or even &lt;code class=&quot;highlighter-rouge&quot;&gt;ISO-8859-1 (Latin-1)&lt;/code&gt;) and the rest as &lt;code class=&quot;highlighter-rouge&quot;&gt;Unicode&lt;/code&gt; (&lt;strong&gt;2 bytes&lt;/strong&gt; per character).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt; If you are wondering “Why does C# use UTF-16 for strings?” Eric Lippert has a &lt;a href=&quot;http://blog.coverity.com/2014/04/09/why-utf-16&quot;&gt;great post on this exact subject&lt;/a&gt; and Jon Skeet has something interesting to say about the subject in &lt;a href=&quot;http://codeblog.jonskeet.uk/2011/04/05/of-memory-and-strings/&quot;&gt;“Of Memory and Strings”&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;real-world-data&quot;&gt;Real-world data&lt;/h3&gt;

&lt;p&gt;In theory this is all well and good, but what about in practice, what about a real-world example?&lt;/p&gt;

&lt;p&gt;Well &lt;a href=&quot;https://twitter.com/nick_craver&quot;&gt;Nick Craver&lt;/a&gt; a developer at Stack Overflow was kind enough to run my &lt;a href=&quot;/2016/09/06/Analysing-.NET-Memory-Dumps-with-CLR-MD/&quot;&gt;Heap Analyser tool&lt;/a&gt; one of their memory dumps:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.NET Memory Dump Heap Analyser - created by Matt Warren - github.com/mattwarren

Found CLR Version: v4.6.1055.00

...

Overall 30,703,367 &quot;System.String&quot; objects take up 4,320,235,704 bytes (4,120.10 MB)
Of this underlying byte arrays (as Unicode) take up 3,521,948,162 bytes (3,358.79 MB)
Remaining data (object headers, other fields, etc) is 798,287,542 bytes (761.31 MB), at 26 bytes per object

Actual Encoding that the &quot;System.String&quot; could be stored as (with corresponding data size)
    3,347,868,352 bytes are ASCII
        5,078,902 bytes are ISO-8859-1 (Latin-1)
      169,000,908 bytes are Unicode (UTF-16)
Total: 3,521,948,162 bytes (expected: 3,521,948,162)

Compression Summary:
    1,676,473,627 bytes Compressed (to ISO-8859-1 (Latin-1))
      169,000,908 bytes Uncompressed (as Unicode/UTF-16)
       30,703,367 bytes EXTRA to enable compression (one byte field, per &quot;System.String&quot; object)
Total: 1,876,177,902 bytes, compared to 3,521,948,162 before compression
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(&lt;a href=&quot;https://gist.github.com/NickCraver/a5e8e307702f92d343f8ec86e71646e6&quot;&gt;The full output is available&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Here we can see that there are over &lt;strong&gt;30 million&lt;/strong&gt; strings in memory, taking up &lt;strong&gt;4,120 MB&lt;/strong&gt; out of a total heap size of &lt;strong&gt;13,232 MB&lt;/strong&gt; (just over 30%).&lt;/p&gt;

&lt;p&gt;Further more we can see that the raw data used by the strings (excluding the CLR Object headers) takes up &lt;strong&gt;3,358 MB&lt;/strong&gt; when encoded as &lt;code class=&quot;highlighter-rouge&quot;&gt;Unicode&lt;/code&gt;. However if the relevant strings were compacted to &lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;Latin-1&lt;/code&gt; only &lt;strong&gt;1,789 MB&lt;/strong&gt; would be needed to store them, a pretty impressive saving!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;a-proposal-for-compact-strings-in-the-clr&quot;&gt;A proposal for compact strings in the CLR&lt;/h3&gt;

&lt;p&gt;I learnt about the idea of “Compact Strings” when reading about how they were &lt;a href=&quot;http://openjdk.java.net/jeps/254&quot;&gt;implemented in Java&lt;/a&gt; and so I put together a proposal for &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/7083&quot;&gt;an implementation in the CLR&lt;/a&gt; (isn’t .NET OSS Great!!).&lt;/p&gt;

&lt;p&gt;Turns out that &lt;a href=&quot;https://blogs.msdn.microsoft.com/vancem/&quot;&gt;Vance Morrison&lt;/a&gt; (Performance Architect on the .NET Runtime Team) has been thinking about the same idea for quite a while:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To answer @mattwarren question on whether changing the internal representation of a string has been considered before, the short answer is YES. &lt;strong&gt;In fact it has been a pet desire of mine for probably over a decade now.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He also confirmed that they’ve done their homework and found that a significant amount of strings could be compacted:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What was clear now and has held true for quite sometime is that:
Typical apps have &lt;strong&gt;20% of their GC heap as strings&lt;/strong&gt;. Most of the 16 bit characters have 0 in their upper byte. &lt;strong&gt;Thus you can save 10% of typical heaps&lt;/strong&gt; by encoding in various ways that eliminate these pointless upper bytes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s worth reading &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/7083#issuecomment-246420765&quot;&gt;his entire response&lt;/a&gt; if you are interested in the full details of the proposal, including the trade-offs, benefits and drawbacks.&lt;/p&gt;

&lt;h3 id=&quot;implementation-details&quot;&gt;Implementation details&lt;/h3&gt;

&lt;p&gt;At a high-level the proposal would allow to strings to be stored in 2 formats:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Regular&lt;/strong&gt; - i.e. Unicode encoded, as they are currently stored by the CLR&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Compact&lt;/strong&gt; - ASCII, ISO-8859-1 (Latin-1) or even another format&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you create a string, the constructor would determine the most efficient encoding and encode the data in that format. The formant used would then be stored in a field, so that the encoding is always known (CLR strings are immutable). That means that each method within the string class can use this field to determine how it operates, for instance the pseudo-code for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Equals&lt;/code&gt; method is shown below:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASCII&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringASCII&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringLatinUTF16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This shows a nice property of having strings in two formats; some operations can be short-circuited, because we know that strings stored in different encodings won’t be the same.&lt;/p&gt;

&lt;h4 id=&quot;advantages&quot;&gt;Advantages&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;less overall &lt;strong&gt;memory usage&lt;/strong&gt; (as-per @davidfowl &lt;a href=&quot;https://twitter.com/davidfowl/status/767585518854938625&quot;&gt;“At the top of every ASP.NET profile… strings!”&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;strings become more &lt;strong&gt;cache-friendly&lt;/strong&gt;, which &lt;em&gt;may&lt;/em&gt; give better performance&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;disadvantages&quot;&gt;Disadvantages&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Makes some &lt;strong&gt;operations slower&lt;/strong&gt; due to the extra &lt;code class=&quot;highlighter-rouge&quot;&gt;if (type == ...)&lt;/code&gt; check needed&lt;/li&gt;
  &lt;li&gt;Breaks the &lt;code class=&quot;highlighter-rouge&quot;&gt;fixed&lt;/code&gt; keyword, as well as COM and P/Invoke interop that &lt;strong&gt;relies on the current string layout/format&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;If very few strings in the application can be compacted, this will have an &lt;strong&gt;overhead for no gain&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next steps&lt;/h3&gt;

&lt;p&gt;In his reply Vance Morrison highlighted that solving the issue with the &lt;code class=&quot;highlighter-rouge&quot;&gt;fixed&lt;/code&gt; keyword was a first step, because that has a hard dependency on the current string layout. Once that’s done the real work of making large, sweeping changes to the CLR can be done:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The main challenge is dealing with fixed, but there is also frankly at least a few man-months of simply dealing with the places in the runtime where we took a dependency on the layout of string (in the runtime, interop, and things like stringbuilder, and all the uses of ‘fixed’ in corefx).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Thus it IS doable, but it is at least moderately expensive (man months), and the payoff is non-trivial but not huge.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So stay tuned, one day we might have a more compact, more efficient implementation of strings in the CLR, yay!!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;An implementation of this idea done in the &lt;a href=&quot;http://www.mono-project.com/docs/advanced/runtime/docs/ascii-strings/&quot;&gt;Mono runtime&lt;/a&gt;, with &lt;a href=&quot;https://lists.dot.net/pipermail/mono-devel-list/2016-July/043744.html&quot;&gt;accompanying discussion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;More info from Eric Lippert on &lt;a href=&quot;https://blogs.msdn.microsoft.com/ericlippert/2011/07/19/strings-immutability-and-persistence/&quot;&gt;why .NET strings are laid out as they are&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corefxlab/tree/master/src/System.Text.Utf8/System/Text/Utf8&quot;&gt;UTF-8 string Library&lt;/a&gt; currently being developed in the CoreFX Labs.&lt;/li&gt;
  &lt;li&gt;Report produced by several Oracle Engineers: &lt;a href=&quot;http://cr.openjdk.java.net/~shade/density/string-density-report.pdf&quot;&gt;“String Density: Performance and Footprint”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Report on &lt;a href=&quot;http://cr.openjdk.java.net/~shade/density/state-of-string-density-v1.txt&quot;&gt;“State of String Density performance (May 5, 2015)”&lt;/a&gt; in Java&lt;/li&gt;
  &lt;li&gt;What was involved in &lt;a href=&quot;http://www.infoq.com/news/2016/02/compact-strings-Java-JDK9&quot;&gt;optimising the Java implementation&lt;/a&gt; (tl;dr quite a lot!!)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0393/&quot;&gt;Python’s Flexible String Representation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://www.reddit.com/r/programming/comments/53hzrx/compact_strings_in_the_clr_a_proposal/&quot;&gt;/r/programming&lt;/a&gt;&lt;/p&gt;

     
     
     
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
 </entry>
 
 <entry>
   <title>Subverting .NET Type Safety with 'System.Runtime.CompilerServices.Unsafe'</title>
   <link href="http://www.mattwarren.org/2016/09/14/Subverting-.NET-Type-Safety-with-System.Runtime.CompilerServices.Unsafe/"/>
   <updated>2016-09-14T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/09/14/Subverting-.NET-Type-Safety-with-System.Runtime.CompilerServices.Unsafe</id>
   <content type="html">
     &lt;h4 id=&quot;in-which-we-use-systemruntimecompilerservicesunsafe-a-generic-api-type-safe-but-still-unsafe-and-mess-with-the-c-type-system&quot;&gt;&lt;strong&gt;In which we use &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Runtime.CompilerServices.Unsafe&lt;/code&gt; a generic API (“type-safe” but still “unsafe”) and mess with the C# Type System!&lt;/strong&gt;&lt;/h4&gt;

&lt;hr /&gt;

&lt;p&gt;The post covers the following topics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#what-it-is-and-why-its-useful&quot;&gt;What it is and why it’s useful&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-it-works&quot;&gt;How it works&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#code-samples&quot;&gt;Code samples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tricks-you-can-do-with-it&quot;&gt;Tricks you can do with it&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-it-safely&quot;&gt;Using it safely&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;what-it-is-and-why-its-useful&quot;&gt;What it is and why it’s useful&lt;/h3&gt;

&lt;p&gt;The XML documentation comments for &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Runtime.CompilerServices.Unsafe&lt;/code&gt; state that it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Contains generic, low-level functionality for manipulating pointers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But we can get a better understanding of &lt;em&gt;what it is&lt;/em&gt; by looking at the actual API definition from the &lt;a href=&quot;https://www.nuget.org/packages/System.Runtime.CompilerServices.Unsafe/&quot;&gt;current NuGet package (4.0.0)&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Contains generic, low-level functionality for manipulating pointers.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unsafe&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Casts the given object to the specified type.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;As&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Returns a pointer to the given by-ref parameter.    &lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Copies a value of type T to the given location.    &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Copies a value of type T to the given location.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Copies bytes from the source address to the destination address.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CopyBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byteCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Initializes a block of memory at the given location with a given initial value.    &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InitBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byteCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Reads a value of type T from the given location.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Returns the size of an object of the given type parameter.    &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SizeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Writes a value of type T to the given location.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note: I edited the the XML doc-comments for brevity, the full versions are available &lt;a href=&quot;https://github.com/dotnet/corefx/blob/master/src/System.Runtime.CompilerServices.Unsafe/src/System.Runtime.CompilerServices.Unsafe.xml&quot;&gt;in the source&lt;/a&gt;. There are also some additional &lt;a href=&quot;https://github.com/dotnet/corefx/issues/10451&quot;&gt;methods that have been added to the API&lt;/a&gt;, but to make use of them you have to use a version of the C# compiler with &lt;a href=&quot;https://github.com/dotnet/roslyn/issues/118&quot;&gt;support for ref returns and locals&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However this doesn’t really tell us &lt;em&gt;why it’s useful&lt;/em&gt;, to get some background on that we can look at the GitHub issue &lt;a href=&quot;https://github.com/dotnet/corefx/issues/5474&quot;&gt;“Provide a generic API to read from and write to a pointer”&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dotnet/corefx/issues/5474&quot;&gt;&lt;img src=&quot;/images/2016/09/GitHub issue - Provide a generic API to read from and write to a pointer.png&quot; alt=&quot;GitHub issue - Provide a generic API to read from and write to a pointer&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So at a high-level the goals of the &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Runtime.CompilerServices.Unsafe&lt;/code&gt; library are to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Provide a &lt;em&gt;safer&lt;/em&gt; way of writing low-level &lt;code class=&quot;highlighter-rouge&quot;&gt;unsafe&lt;/code&gt; code&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Without this library you have to resort to &lt;code class=&quot;highlighter-rouge&quot;&gt;fixed&lt;/code&gt; and pointer manipulation, which can be error prone&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Allow access to functionality that can’t be expressed in C#, but is possible in IL&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;For instance &lt;code class=&quot;highlighter-rouge&quot;&gt;Unsafe.Sizeof&amp;lt;T&amp;gt;()&lt;/code&gt; allows access to the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.sizeof(v=vs.110).aspx&quot;&gt;Sizeof IL Opcode&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Save developers from having to repeatedly write the same &lt;code class=&quot;highlighter-rouge&quot;&gt;unsafe&lt;/code&gt; code&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;There are already &lt;a href=&quot;https://github.com/dotnet/corefxlab/pull/796&quot;&gt;code-bases making use of it&lt;/a&gt;, including the &lt;a href=&quot;https://github.com/aspnet/KestrelHttpServer/pull/1000&quot;&gt;Kestrel the high-performance web server, based on libuv.&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It’s also worth pointing out that the library is primarily for use with a Value Type (int, float, etc) rather than a &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; or Reference type. You can use it with classes, however you &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/23acw07k(v=vs.110).aspx&quot;&gt;have to pin them first&lt;/a&gt;, so they don’t move about in memory whilst you are working with the pointer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; It was pointed out to me that &lt;a href=&quot;https://github.com/nietras&quot;&gt;Niels&lt;/a&gt; wrote an initial implementation of this library &lt;a href=&quot;https://github.com/DotNetCross/Memory.Unsafe&quot;&gt;in a separate project&lt;/a&gt;, before Microsoft made their own version.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;how-it-works&quot;&gt;How it works&lt;/h3&gt;

&lt;p&gt;Because the library allows access to functionality that can’t be expressed in C#, it has to be &lt;a href=&quot;https://github.com/dotnet/corefx/blob/master/src/System.Runtime.CompilerServices.Unsafe/src/System.Runtime.CompilerServices.Unsafe.il&quot;&gt;written in raw IL&lt;/a&gt;, which is then compiled by a custom build-step. As an example we will look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;AsPointer&lt;/code&gt; method, which has the following signature:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The IL for this is shown below, note how the &lt;code class=&quot;highlighter-rouge&quot;&gt;ref&lt;/code&gt; keyword becomes &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; in IL and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;T&amp;gt;&lt;/code&gt; is expressed as &lt;code class=&quot;highlighter-rouge&quot;&gt;!!T&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.method public hidebysig static void* AsPointer&amp;lt;T&amp;gt;(!!T&amp;amp; 'value') cil managed aggressiveinlining
{
    .custom instance void System.Runtime.Versioning.NonVersionableAttribute::.ctor() = ( 01 00 00 00 )
    .maxstack 1
    ldarg.0
    conv.u
    ret
} // end of method Unsafe::AsPointer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we can see that it’s making use of the &lt;code class=&quot;highlighter-rouge&quot;&gt;conv.u&lt;/code&gt; IL instruction. For reference the explanation of this, along with some of the other op codes used by the library are shown below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.conv_u(v=vs.110).aspx&quot;&gt;Conv_U&lt;/a&gt; - Converts the value on top of the evaluation stack to &lt;strong&gt;unsigned native int&lt;/strong&gt;, and extends it to &lt;strong&gt;native int&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.ldobj(v=vs.110).aspx&quot;&gt;Ldobj&lt;/a&gt; - Copies the value type object pointed to by an address to the top of the evaluation stack.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.stobj(v=vs.110).aspx&quot;&gt;Stobj&lt;/a&gt; - Copies a value of a specified type from the evaluation stack into a supplied memory address.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After searching around I found several other places in the .NET Runtime that make use of raw IL in this way:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corefxlab/blob/master/src/System.Slices/System/Span.cs&quot;&gt;System.Slices/System/Span.cs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corefxlab/blob/master/src/System.Slices/System/PtrUtils.cs&quot;&gt;PtrUtils in CoreFX Labs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/joeduffy/slice.net/blob/master/src/PtrUtils.il&quot;&gt;Joe Duffy’s slice.net - PtrUtils.il&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;code-samples&quot;&gt;Code samples&lt;/h3&gt;

&lt;p&gt;There’s a &lt;a href=&quot;https://github.com/dotnet/corefx/blob/e34ffcd5875d44f8dad10efc07d357a78175b264/src/System.Runtime.CompilerServices.Unsafe/tests/UnsafeTests.cs&quot;&gt;nice set of unit tests&lt;/a&gt; that show the main use-cases for the library, for instance here is how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Unsafe.Write(..)&lt;/code&gt; to directly change the value of an &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; via a pointer.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;[Fact]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WriteInt32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unsafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AsPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Unsafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unsafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can write something similar by manipulating pointers directly, but it’s not as straightforward (unless you are familiar with C or C++)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int value = 10;
int* ptr = &amp;amp;value;
*ptr = 30;
Console.WriteLine(value); // prints &quot;30&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For a more real-world use case, the code below shows how you can access a &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyValuePair&amp;lt;DateTime, decimal&amp;gt;&lt;/code&gt; directly as a &lt;code class=&quot;highlighter-rouge&quot;&gt;byte []&lt;/code&gt; (taken from a &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/5870#issuecomment-240186556&quot;&gt;GitHub discussion&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyValuePair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asRefByte&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unsafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;As&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KeyValuePair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fixed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asRefByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Treat the KeyValuePair&amp;lt;DateTime, decimal&amp;gt; as if it were a byte []&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(this example is based on the StackOverflow question: &lt;a href=&quot;http://stackoverflow.com/questions/32864239/get-unsafe-pointer-to-array-of-keyvaluepairdatetime-decimal-in-c-sharp/38979981#38979981&quot;&gt;“Get unsafe pointer to array of KeyValuePair&amp;lt;DateTime,decimal&amp;gt; in C#”&lt;/a&gt;)&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;tricks-you-can-do-with-it&quot;&gt;Tricks you can do with it&lt;/h3&gt;

&lt;p&gt;Despite providing you with a nice strongly-typed API, you still have to mark your code as &lt;code class=&quot;highlighter-rouge&quot;&gt;unsafe&lt;/code&gt;, which it’s a bit of a give-away that you can use it to do things that normal C# can’t!&lt;/p&gt;

&lt;h4 id=&quot;breaking-immutability&quot;&gt;&lt;strong&gt;Breaking immutability&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Strings in C# are immutable and the runtime goes to great lengths to ensure you can’t bypass this behaviour. However under-the-hood the String data is just bytes which can be manipulated, indeed the runtime does this manipulation itself inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;So using &lt;code class=&quot;highlighter-rouge&quot;&gt;Unsafe.Write(..)&lt;/code&gt; we can modify the contents of a String - &lt;strong&gt;yay&lt;/strong&gt;!! However it needs to be pointed out that this code will potentially break the behaviour of the String class in many subtle ways, &lt;strong&gt;so don’t ever use it in a real application!!&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ABCDEFGHIJKLMNOPQRSTUVWXKZ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;String Length {0}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// prints 26&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Text: \&quot;{0}\&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;ABCDEFGHIJKLMNOPQRSTUVWXKZ&quot;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pinnedText&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GCHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GCHandleType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pinned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pinnedText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddrOfPinnedObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Make an immutable string think that it is shorter than it actually is!!!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Unsafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;String Length {0}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// prints 5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Text: \&quot;{0}\&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// prints &quot;ABCDE&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// change the 2nd character 'B' to '@'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Unsafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Text: \&quot;{0}\&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// prints &quot;A@CDE&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pinnedText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;messing-with-the-clr-type-system&quot;&gt;&lt;strong&gt;Messing with the CLR type-system&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;But we can go even further than that and do a really nasty trick to completely defeat the CLR type-system. This code is horrible and could potentially break the CLR in several ways, so as before &lt;strong&gt;don’t ever use it in a real application!!&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floatValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boxedInt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boxedFloat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floatValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pinnedFloat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GCHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boxedFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GCHandleType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pinned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pinnedInt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GCHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boxedInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GCHandleType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pinned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floatAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pinnedFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddrOfPinnedObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pinnedInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddrOfPinnedObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Type: {0}, Value: {1}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boxedInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boxedInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Make an int think it's a float!!!&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floatType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unsafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floatAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Unsafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floatType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Type: {0}, Value: {1}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boxedInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boxedInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pinnedFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pinnedInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which prints out:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Type: System.Int32, Value: 5&lt;/p&gt;

  &lt;p&gt;Type: System.Single, Value: 7.006492E-45&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yep, we’ve managed to convince a &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; (Int32) type that it’s actually a &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; (Single) and behave like one instead!!&lt;/p&gt;

&lt;p&gt;This works by overwriting the &lt;em&gt;Method Table&lt;/em&gt; pointer for the &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;, with the same value as the &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; one. So when it looks up it’s type or prints out it’s value, it uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; methods instead! Thanks to &lt;a href=&quot;https://github.com/Porges&quot;&gt;@Porges&lt;/a&gt; for the &lt;a href=&quot;https://gist.github.com/Porges/4b5fb3f0d66093105422e9892177754f&quot;&gt;example that motivated this&lt;/a&gt;, his code does the same thing using &lt;code class=&quot;highlighter-rouge&quot;&gt;fixed&lt;/code&gt; instead.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;using-it-safely&quot;&gt;Using it safely&lt;/h3&gt;

&lt;p&gt;Despite the library requiring you to annotate your code with &lt;code class=&quot;highlighter-rouge&quot;&gt;unsafe&lt;/code&gt;, there are still some &lt;em&gt;safe&lt;/em&gt; or maybe more accurately &lt;em&gt;safer&lt;/em&gt; ways to use it!&lt;/p&gt;

&lt;p&gt;Fortunately one of the main .NET runtime developers provided a nice list of &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/5870#issuecomment-227007187&quot;&gt;what you can and can’t do&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/09/Safely using System.Runtime.CompilerServices.Unsafe.png&quot;&gt;&lt;img src=&quot;/images/2016/09/Safely using System.Runtime.CompilerServices.Unsafe.png&quot; alt=&quot;Safely using System.Runtime.CompilerServices.Unsafe&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But as with all &lt;code class=&quot;highlighter-rouge&quot;&gt;unsafe&lt;/code&gt; code, you’re asking the runtime to let you do things that you are normally prevented from doing, things that it normally saves you from, so you have to be careful!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post in &lt;a href=&quot;https://www.reddit.com/r/csharp/comments/52qs09/subverting_net_type_safety_with/&quot;&gt;/r/csharp&lt;/a&gt; or &lt;a href=&quot;https://www.reddit.com/r/programming/comments/52viyd/subverting_net_type_safety_with/&quot;&gt;/r/programming&lt;/a&gt;&lt;/p&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2016/09/14/Subverting-.NET-Type-Safety-with-System.Runtime.CompilerServices.Unsafe/&quot;&gt;Subverting .NET Type Safety with 'System.Runtime.CompilerServices.Unsafe'&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='Debugging' scheme='http://www.mattwarren.org/tags#Debugging'/>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
 </entry>
 
 <entry>
   <title>Analysing .NET Memory Dumps with CLR MD</title>
   <link href="http://www.mattwarren.org/2016/09/06/Analysing-.NET-Memory-Dumps-with-CLR-MD/"/>
   <updated>2016-09-06T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/09/06/Analysing-.NET-Memory-Dumps-with-CLR-MD</id>
   <content type="html">
     &lt;p&gt;If you’ve ever spent time debugging .NET memory dumps in WinDBG you will be familiar with the commands shown below, which aren’t always the most straight-forward to work with!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.codeproject.com/Articles/23589/Get-Started-Debugging-Memory-Related-Issues-in-Net&quot;&gt;&lt;img src=&quot;http://www.codeproject.com/KB/debug/WinDBGAndSOS/SOSHelp.PNG&quot; alt=&quot;CodeProject - Debugging Memory Related Issues in .Net &quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However back in May 2013 Microsoft &lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2013/05/01/net-crash-dump-and-live-process-inspection/&quot;&gt;released the CLR MD library&lt;/a&gt;, describing it as:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… a set of advanced APIs for programmatically inspecting a crash dump of a .NET program much in the same way as the SOS Debugging Extensions (SOS). It allows you to write automated crash analysis for your applications and automate many common debugger tasks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This post explores some of the things you can achieve by instead using CLR MD, a C# library which is now available as a &lt;a href=&quot;https://github.com/Microsoft/clrmd&quot;&gt;NuGet Package&lt;/a&gt;. If you’re interested the &lt;a href=&quot;https://github.com/mattwarren/HeapStringAnalyser&quot;&gt;full source code&lt;/a&gt; for all the examples is available.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;getting-started-with-clr-md&quot;&gt;Getting started with CLR MD&lt;/h3&gt;

&lt;p&gt;This post isn’t meant to serve as a &lt;em&gt;Getting Started&lt;/em&gt; guide, there’s already a great set of Tutorials &lt;a href=&quot;https://github.com/Microsoft/clrmd#tutorials&quot;&gt;linked from project README&lt;/a&gt; that serve that purpose:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Microsoft/clrmd/blob/master/Documentation/GettingStarted.md&quot;&gt;Getting Started&lt;/a&gt; - A brief introduction to the API and how to create a CLRRuntime instance.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Microsoft/clrmd/blob/master/Documentation/ClrRuntime.md&quot;&gt;The CLRRuntime Object&lt;/a&gt; - Basic operations like enumerating AppDomains, Threads, the Finalizer Queue, etc.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Microsoft/clrmd/blob/master/Documentation/WalkingTheHeap.md&quot;&gt;Walking the Heap&lt;/a&gt; - Walking objects on the GC heap, working with types in CLR MD.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Microsoft/clrmd/blob/master/Documentation/TypesAndFields.md&quot;&gt;Types and Fields in CLRMD&lt;/a&gt; - More information about dealing with types and fields in CLRMD.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Microsoft/clrmd/blob/master/Documentation/MachineCode.md&quot;&gt;Machine Code in CLRMD&lt;/a&gt; - Getting access to the native code produced by the JIT or NGEN&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However we will be looking at what else CLR MD allows you to achieve.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;detailed-gc-heap-information&quot;&gt;Detailed GC Heap Information&lt;/h3&gt;

&lt;p&gt;I’ve previously written about the &lt;a href=&quot;/#Garbage-Collectors&quot;&gt;Garbage Collectors&lt;/a&gt;, so the first thing that we’ll do is see what GC related information we can obtain. The .NET GC creates 1 or more &lt;strong&gt;Heaps&lt;/strong&gt;, depending on the number of CPU cores available and the mode it is running in (Server/Workstation). These heaps are in-turn made up of several &lt;strong&gt;Segments&lt;/strong&gt;, for the different Generations (Gen0/Ephememral, Gen1, Gen2 and Large). Finally it’s worth pointing out that the GC initially &lt;strong&gt;Reserves&lt;/strong&gt; the memory it wants, but only &lt;strong&gt;Commits&lt;/strong&gt; it when it actually needs to. So using the &lt;a href=&quot;https://github.com/mattwarren/HeapStringAnalyser/blob/2161764b11d19a54ef1d0c2d78b796ee4c8bfd62/HeapStringAnalyser/HeapStringAnalyser/Program.cs#L318-L367&quot;&gt;code shown here&lt;/a&gt;, we can iterate through the different GC Heaps, printing out the information about their individual Segments as we go:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/09/HeapStringAnalyser - GC Info.png&quot;&gt;&lt;img src=&quot;/images/2016/09/HeapStringAnalyser - GC Info.png&quot; alt=&quot;HeapStringAnalyser - GC Info&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;analysing-string-usage&quot;&gt;Analysing String usage&lt;/h3&gt;

&lt;p&gt;But knowing what’s inside those heaps is more useful, as &lt;a href=&quot;https://github.com/davidfowl&quot;&gt;David Fowler&lt;/a&gt; nicely summed up in a tweet, strings often significantly contribute to memory usage:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/davidfowl/status/767585518854938625&quot;&gt;&lt;img src=&quot;/images/2016/09/David Fowler tweet about Strings.png&quot; alt=&quot;David Fowler tweet about Strings&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we could analyse the memory dump to produce a list of the most frequently occurring strings, as &lt;a href=&quot;http://nickcraver.com/&quot;&gt;Nick Craver&lt;/a&gt; did with a &lt;a href=&quot;https://twitter.com/Nick_Craver/status/752822131889729536&quot;&gt;memory dump from the App Pool of a Stack Overflow server&lt;/a&gt; (click for larger image):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/09/String frequency analysis of a Stack Overflow memory dump.jpg&quot;&gt;&lt;img src=&quot;/images/2016/09/String frequency analysis of a Stack Overflow memory dump.jpg&quot; alt=&quot;String frequency analysis of a Stack Overflow memory dump&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However we’re going to look more closely at the actual contents of the string and in-particular analyse what the underlying &lt;em&gt;encoding&lt;/em&gt; is, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ISO-8859-1 (Latin-1)&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Unicode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By default the .NET string Encoder, instead of giving an error, replaces any characters it can’t convert with ‘�’ (which is known as the &lt;em&gt;Unicode Replacement Character&lt;/em&gt;). So we will need to force it to throw an exception. This means we can detect the most &lt;em&gt;compact&lt;/em&gt; encoding possible, by trying to convert to the raw string data to &lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ISO-8859-1 (Latin-1)&lt;/code&gt; and then &lt;code class=&quot;highlighter-rouge&quot;&gt;Unicode&lt;/code&gt; (sequence of UTF-16 code units) in turn. To see this in action, below is the code from the &lt;a href=&quot;https://github.com/mattwarren/HeapStringAnalyser/blob/2161764b11d19a54ef1d0c2d78b796ee4c8bfd62/HeapStringAnalyser/HeapStringAnalyser/Program.cs#L165-L178&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IsASCII(..)&lt;/code&gt; function&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asciiEncoder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetEncoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ASCII&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EncodingName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;EncoderFallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionFallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;DecoderFallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionFallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IsASCII&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textAsBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unicodeBytes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unicode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;textAsBytes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unicode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asciiEncoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unicodeBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EncoderFallbackException&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*efEx*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;textAsBytes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next we run this on a memory dump of Visual Studio with the &lt;a href=&quot;https://github.com/mattwarren/HeapStringAnalyser&quot;&gt;HeapStringAnalyser source code&lt;/a&gt; solution loaded and get the following output:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/09/HeapStringAnalyser - String Info.png&quot;&gt;&lt;img src=&quot;/images/2016/09/HeapStringAnalyser - String Info.png&quot; alt=&quot;HeapStringAnalyser - String Info&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most interesting part is reproduced below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Overall 145,872 &quot;System.String&quot; objects take up 12,391,286 bytes (11.82 MB)
Of this underlying byte arrays (as Unicode) take up 10,349,078 bytes (9.87 MB)
Remaining data (object headers, other fields, etc) are 2,042,208 bytes (1.95 MB), at 14 bytes per object

Actual Encoding that the &quot;System.String&quot; could be stored as (with corresponding data size)
       10,339,638 bytes ( 145,505 strings) as ASCII
            3,370 bytes (      65 strings) as ISO-8859-1 (Latin-1)
            6,070 bytes (     302 strings) as Unicode
Total: 10,349,078 bytes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So in this case we can see that out of the 145,872 string objects in memory, 145,505 of them could actually be stored as &lt;code class=&quot;highlighter-rouge&quot;&gt;ASCII&lt;/code&gt;, a further 65 as &lt;code class=&quot;highlighter-rouge&quot;&gt;ISO-8859-1 (Latin-1)&lt;/code&gt; and only 302 need the full &lt;code class=&quot;highlighter-rouge&quot;&gt;Unicode&lt;/code&gt; encoding.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;additional-resources&quot;&gt;Additional resources&lt;/h2&gt;

&lt;p&gt;Hopefully this post has demonstrated that CLR MD is a powerful tool, if you want to find out more please refer to the links below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.microsoft.co.il/sasha/2013/05/20/traversing-the-gc-heap-with-clrmd/&quot;&gt;Traversing the GC Heap with ClrMd &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/goldshtn/msos&quot;&gt;msos&lt;/a&gt; - Command-line environment a-la WinDbg for executing SOS commands without having SOS available&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2013/05/01/net-crash-dump-and-live-process-inspection/&quot;&gt;.NET Crash Dump and Live Process Inspection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JeffCyr/ClrMD.Extensions&quot;&gt;ClrMD.Extensions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/kirillosenkov/2014/07/05/get-most-duplicated-strings-from-a-heap-dump-using-clrmd/&quot;&gt;Get most duplicated strings from a heap dump using ClrMD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jcdickinson/dumpty&quot;&gt;Dumpty - A Dump tool for .Net.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/22150259/how-to-properly-work-with-non-primitive-clrinstancefield-values-using-clrmd/22229543#22229543&quot;&gt;How to properly work with non-primitive ClrInstanceField values using ClrMD?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2016/09/06/Analysing-.NET-Memory-Dumps-with-CLR-MD/&quot;&gt;Analysing .NET Memory Dumps with CLR MD&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='Debugging' scheme='http://www.mattwarren.org/tags#Debugging'/>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
 </entry>
 
 <entry>
   <title>Analysing Optimisations in the Wire Serialiser</title>
   <link href="http://www.mattwarren.org/2016/08/23/Analysing-Optimisations-in-the-Wire-Serialiser/"/>
   <updated>2016-08-23T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/08/23/Analysing-Optimisations-in-the-Wire-Serialiser</id>
   <content type="html">
     &lt;p&gt;Recently &lt;a href=&quot;http://www.twitter.com/RogerAlsing&quot;&gt;Roger Johansson&lt;/a&gt; wrote a post titled &lt;a href=&quot;https://rogeralsing.com/2016/08/16/wire-writing-one-of-the-fastest-net-serializers/&quot;&gt;Wire – Writing one of the fastest .NET serializers&lt;/a&gt;, describing the optimisation that were implemented to make &lt;a href=&quot;https://github.com/akkadotnet/Wire&quot;&gt;Wire&lt;/a&gt; as fast as possible. He also followed up that post with a set of &lt;a href=&quot;https://twitter.com/RogerAlsing/status/767320145807147008&quot;&gt;benchmarks&lt;/a&gt;, showing how Wire compared to other .NET serialisers:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/08/Performance Graphs - Wire v. other Serialisers.jpg&quot;&gt;&lt;img src=&quot;/images/2016/08/Performance Graphs - Wire v. other Serialisers.jpg&quot; alt=&quot;Wire compared to other .NET serialisers&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using &lt;a href=&quot;https://perfdotnet.github.io/BenchmarkDotNet/&quot;&gt;BenchmarkDotNet&lt;/a&gt;, this post will analyse the individual optimisations and show how much faster each change is. For reference, the full list of optimisations in the &lt;a href=&quot;https://rogeralsing.com/2016/08/16/wire-writing-one-of-the-fastest-net-serializers/&quot;&gt;original blog post&lt;/a&gt; are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Looking up value serializers by type&lt;/li&gt;
  &lt;li&gt;Looking up types when deserializing&lt;/li&gt;
  &lt;li&gt;Byte buffers, allocations and GC&lt;/li&gt;
  &lt;li&gt;Clever allocations&lt;/li&gt;
  &lt;li&gt;Boxing, Unboxing and Virtual calls&lt;/li&gt;
  &lt;li&gt;Fast creation of empty objects&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;looking-up-value-serializers-by-type&quot;&gt;Looking up value serializers by type&lt;/h3&gt;

&lt;p&gt;This optimisation changed code like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueSerializer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetSerializerByType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ValueSerializer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_serializers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TryGetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
  &lt;span class=&quot;c1&quot;&gt;//more code to build custom type serializers.. ignore for now.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;into this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueSerializer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetSerializerByType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReferenceEquals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetTypeInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReflectionEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CoreAssembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//we simply keep a reference to each primitive type&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int32Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int32Serializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int64Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int64Serializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So it has replaced a &lt;code class=&quot;highlighter-rouge&quot;&gt;dictionary&lt;/code&gt; lookup with an &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statement. In addition it is caching the &lt;code class=&quot;highlighter-rouge&quot;&gt;Type&lt;/code&gt; instance of known types, rather than calculating them every time. As you can see the optimisation pays off in some circumstance but not in others, so it’s not a clear win. It depends on where the type is in the list of &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statements. If it’s near the beginning (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;System.String&lt;/code&gt;) it’ll be quicker than if it’s near the end (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Byte[]&lt;/code&gt;), which makes sense as all the other comparisons have to be done first.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/08/LookingUpValueSerializersByType-Results.png&quot;&gt;&lt;img src=&quot;/images/2016/08/LookingUpValueSerializersByType-Results.png&quot; alt=&quot;LookingUpValueSerializersByType-Results&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/af0319dc908449239cd3d135e76de4a8&quot;&gt;Full benchmark code and results&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;looking-up-types-when-deserializing&quot;&gt;Looking up types when deserializing&lt;/h3&gt;

&lt;p&gt;The 2nd optimisation works by removing all unnecessary memory allocations, it did this by:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; (value type) rather than a &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Pre-calculating a hash code once, rather than each time a comparison is needed.&lt;/li&gt;
  &lt;li&gt;Doing string comparisons with raw &lt;code class=&quot;highlighter-rouge&quot;&gt;byte []&lt;/code&gt;, rather than deserialising to a &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/08/LookingUpTypesWhenDeserializing-Results.png&quot;&gt;&lt;img src=&quot;/images/2016/08/LookingUpTypesWhenDeserializing-Results.png&quot; alt=&quot;LookingUpTypesWhenDeserializing-Results&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/da62343df8fbdc5378df21e49df6a7c3&quot;&gt;Full benchmark code and results&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; these results nicely demonstrate how BenchmarkDotNet can show you &lt;a href=&quot;/2016/02/17/adventures-in-benchmarking-memory-allocations/&quot;&gt;memory allocations&lt;/a&gt; as well as the time taken.&lt;/p&gt;

&lt;p&gt;Interestingly they hadn’t actually removed all memory allocations as the comparisons between &lt;code class=&quot;highlighter-rouge&quot;&gt;OptimisedLookup&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;OptimisedLookupCustomComparer&lt;/code&gt; show. To fix this I &lt;a href=&quot;https://github.com/akkadotnet/Wire/pull/76&quot;&gt;sent a P.R&lt;/a&gt; which removes unnecessary boxing, by using a Custom Comparer rather than the default &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; comparer.&lt;/p&gt;

&lt;h3 id=&quot;byte-buffers-allocations-and-gc&quot;&gt;Byte buffers, allocations and GC&lt;/h3&gt;

&lt;p&gt;Again removing unnecessary memory allocations were key in this optimisation, most of which can be seen in the &lt;a href=&quot;https://github.com/akkadotnet/Wire/blob/dev/Wire/NoAllocBitConverter.cs&quot;&gt;NoAllocBitConverter&lt;/a&gt;. Clearly serialisation spends &lt;em&gt;a lot&lt;/em&gt; of time converting from the in-memory representation of an object to the serialised version, i.e. a &lt;code class=&quot;highlighter-rouge&quot;&gt;byte []&lt;/code&gt;. So several tricks were employed to ensure that temporary memory allocations were either removed completely or if that wasn’t possible, they were done by re-using a buffer from a pool rather than allocating a new one each time (see &lt;a href=&quot;https://rogeralsing.com/2016/08/16/wire-writing-one-of-the-fastest-net-serializers/&quot;&gt;“Buffer recycling”&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/08/StringSerialisationDeserialisation-Results.png&quot;&gt;&lt;img src=&quot;/images/2016/08/StringSerialisationDeserialisation-Results.png&quot; alt=&quot;StringSerialisationDeserialisation-Results&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/e6856ab4625d4e306cc04b9349edd869&quot;&gt;Full benchmark code and results&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;clever-allocations&quot;&gt;Clever allocations&lt;/h3&gt;

&lt;p&gt;This optimisation is perhaps the most interesting, because it’s implemented by creating a custom data structure, tailored to the specific needs of Wire. So, rather than using the default &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/xfhwa508(v=vs.110).aspx&quot;&gt;.NET dictionary&lt;/a&gt;, they implemented &lt;a href=&quot;https://github.com/akkadotnet/Wire/blob/36b93703b003d70744fc97e3e400cca411dce1c9/Wire/FastDictionary.cs&quot;&gt;FastTypeUShortDictionary&lt;/a&gt;. In essence this data structure optimises for having only 1 item, but falls back to a regular dictionary when it grows larger. To see this in action, here is the code from the &lt;a href=&quot;https://github.com/akkadotnet/Wire/blob/36b93703b003d70744fc97e3e400cca411dce1c9/Wire/FastDictionary.cs#L13-L31&quot;&gt;TryGetValue(..) method&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TryGetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ushort&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_firstType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_firstValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TryGetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Like we’ve seen before, the performance gains aren’t clear-cut. For instance it depends on whether &lt;code class=&quot;highlighter-rouge&quot;&gt;FastTypeUShortDictionary&lt;/code&gt; contains the item you are looking for (&lt;code class=&quot;highlighter-rouge&quot;&gt;Hit&lt;/code&gt; v &lt;code class=&quot;highlighter-rouge&quot;&gt;Miss&lt;/code&gt;), but generally it is faster:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/08/FastTypeUShortDictionary-Alternative-Results.png&quot;&gt;&lt;img src=&quot;/images/2016/08/FastTypeUShortDictionary-Alternative-Results.png&quot; alt=&quot;FastTypeUShortDictionary-Alternative-Results&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/ed18d27c66e3e539b068371a0dca98f2&quot;&gt;Full benchmark code and results&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;boxing-unboxing-and-virtual-calls&quot;&gt;Boxing, Unboxing and Virtual calls&lt;/h3&gt;

&lt;p&gt;This optimisation is based on the widely used trick that I imagine almost all .NET serialisers employ. For a serialiser to be generic, is has to be able to handle any type of object that is passed to it. Therefore the first thing it does is use &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/f7ykdhsy(v=vs.110).aspx&quot;&gt;reflection&lt;/a&gt; to find the public fields/properties of that object, so that it knows the data is has to serialise. Doing reflection like this time-and-time again gets expensive, so the way to get round it is to do reflection once and then use &lt;a href=&quot;https://blogs.msdn.microsoft.com/csharpfaq/2009/09/14/generating-dynamic-methods-with-expression-trees-in-visual-studio-2010/&quot;&gt;dynamic code generation&lt;/a&gt; to compile a &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; than you can then call again and again.&lt;/p&gt;

&lt;p&gt;If you are interested in how to implement this, see the &lt;a href=&quot;https://github.com/akkadotnet/Wire/blob/dev/Wire/Compilation/Compiler.cs&quot;&gt;Wire compiler source&lt;/a&gt; or &lt;a href=&quot;http://stackoverflow.com/questions/17949208/whats-the-easiest-way-to-generate-code-dynamically-in-net-4-5/17949447#17949447&quot;&gt;this Stack Overflow question&lt;/a&gt;. As shown in the results below, compiling code dynamically is much faster than reflection and only a little bit slower than if you read/write the property directly in C# code:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/08/DynamicCodeGeneration-Results.png&quot;&gt;&lt;img src=&quot;/images/2016/08/DynamicCodeGeneration-Results.png&quot; alt=&quot;DynamicCodeGeneration-Results&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/9fb3084306f065e95b4712d51fe36217&quot;&gt;Full benchmark code and results&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;fast-creation-of-empty-objects&quot;&gt;Fast creation of empty objects&lt;/h3&gt;

&lt;p&gt;The final optimisation trick used is also based on dynamic code creation, but this time it is purely dealing with creating empty objects. Again this is something that a serialiser does many time, so any optimisations or savings are worth it.&lt;/p&gt;

&lt;p&gt;Basically the benchmark is comparing code like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;FormatterServices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetUninitializedObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;with dynamically generated code, based on &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/mt654263.aspx&quot;&gt;Expression trees&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newExpression&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExpressionEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetNewExpression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeToUse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optimisation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newExpression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However this trick only works if the &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt; of the type being created is empty, otherwise it has to fall back to the slow version. But as shown in the results below, we can see that the optimisation is a clear win and worth implementing:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/08/FastCreationOfEmptyObjects-Results.png&quot;&gt;&lt;img src=&quot;/images/2016/08/FastCreationOfEmptyObjects-Results.png&quot; alt=&quot;FastCreationOfEmptyObjects-Results&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/b48b3e5a720b174e64f16353d8ce9960&quot;&gt;Full benchmark code and results&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;So it’s obvious that &lt;a href=&quot;https://twitter.com/rogeralsing&quot;&gt;Roger Johansson&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/Scooletz&quot;&gt;Szymon Kulec&lt;/a&gt; (who also &lt;a href=&quot;https://blog.scooletz.com/2016/08/09/wire-improvements/&quot;&gt;contributed performance improvements&lt;/a&gt;) know their optimisations and as a result they have steadily made the Wire serialiser faster, which makes is an interesting project to learn from.&lt;/p&gt;


     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2016/08/23/Analysing-Optimisations-in-the-Wire-Serialiser/&quot;&gt;Analysing Optimisations in the Wire Serialiser&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='Benchmarking' scheme='http://www.mattwarren.org/tags#Benchmarking'/>
   
     <category term='Performance' scheme='http://www.mattwarren.org/tags#Performance'/>
   
     <category term='Optimisations' scheme='http://www.mattwarren.org/tags#Optimisations'/>
   
 </entry>
 
 <entry>
   <title>Preventing .NET Garbage Collections with the TryStartNoGCRegion API</title>
   <link href="http://www.mattwarren.org/2016/08/16/Preventing-dotNET-Garbage-Collections-with-the-TryStartNoGCRegion-API/"/>
   <updated>2016-08-16T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/08/16/Preventing-dotNET-Garbage-Collections-with-the-TryStartNoGCRegion-API</id>
   <content type="html">
     &lt;p&gt;Pauses are a known problem in runtimes that have a Garbage Collector (GC), such as Java or .NET. GC Pauses can last several milliseconds, during which your application is &lt;a href=&quot;/2016/08/08/GC-Pauses-and-Safe-Points/&quot;&gt;blocked or suspended&lt;/a&gt;. One way you can alleviate the pauses is to modify your code so that it doesn’t allocate, i.e. so the GC has nothing to do. But this can require lots of work and you really have to understand the runtime as many allocation are hidden.&lt;/p&gt;

&lt;p&gt;Another technique is to temporarily suspend the GC, during a critical region of your code where you don’t want any pauses and then start it up again afterwards. This is exactly what the &lt;code class=&quot;highlighter-rouge&quot;&gt;TryStartNoGCRegion&lt;/code&gt; API (&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2015/07/20/announcing-net-framework-4-6/&quot;&gt;added in .NET 4.6&lt;/a&gt;) allows you to do.&lt;/p&gt;

&lt;p&gt;From the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dn906201(v=vs.110).aspx&quot;&gt;MSDN docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;trystartnogcregion-in-action&quot;&gt;TryStartNoGCRegion in Action&lt;/h2&gt;

&lt;p&gt;To see how the API works, I ran some simple tests using the .NET GC &lt;strong&gt;Workstation&lt;/strong&gt; mode, on a 32-bit CPU. The test simply call &lt;code class=&quot;highlighter-rouge&quot;&gt;TryStartNoGCRegion&lt;/code&gt; and then verify how much memory can be allocated before a Collection happens. The &lt;a href=&quot;https://gist.github.com/mattwarren/c9a87c40301f12084d0ab9ba43c01908&quot;&gt;code is available&lt;/a&gt; if you want to try it out for yourself.&lt;/p&gt;

&lt;h3 id=&quot;test-1-regular-allocation-trystartnogcregion-not-called&quot;&gt;Test 1: Regular allocation, &lt;code class=&quot;highlighter-rouge&quot;&gt;TryStartNoGCRegion&lt;/code&gt; not called&lt;/h3&gt;

&lt;p&gt;You can see that a garbage collection happens after the 2nd allocation (indicated by “**”):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Prevent GC: False, Over Allocate: False
Allocated:   3.00 MB, Mode:  Interactive, Gen0: 0, Gen1: 0, Gen2: 0,
Allocated:   6.00 MB, Mode:  Interactive, Gen0: 1, Gen1: 1, Gen2: 1, **
Allocated:   9.00 MB, Mode:  Interactive, Gen0: 1, Gen1: 1, Gen2: 1,
Allocated:  12.00 MB, Mode:  Interactive, Gen0: 1, Gen1: 1, Gen2: 1,
Allocated:  15.00 MB, Mode:  Interactive, Gen0: 1, Gen1: 1, Gen2: 1,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;test-2-trystartnogcregion-with-size-set-to-15mb&quot;&gt;Test 2: &lt;code class=&quot;highlighter-rouge&quot;&gt;TryStartNoGCRegion(..)&lt;/code&gt; with size set to 15MB&lt;/h3&gt;

&lt;p&gt;Here we see that despite allocating the same amount as in the first test, no garbage collections are triggered during the run.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Prevent GC: True, Over Allocate: False
TryStartNoGCRegion: Size=15 MB (15,360 K or 15,728,640 bytes) SUCCEEDED
Allocated:   3.00 MB, Mode:   NoGCRegion, Gen0: 0, Gen1: 0, Gen2: 0,
Allocated:   6.00 MB, Mode:   NoGCRegion, Gen0: 0, Gen1: 0, Gen2: 0,
Allocated:   9.00 MB, Mode:   NoGCRegion, Gen0: 0, Gen1: 0, Gen2: 0,
Allocated:  12.00 MB, Mode:   NoGCRegion, Gen0: 0, Gen1: 0, Gen2: 0,
Allocated:  15.00 MB, Mode:   NoGCRegion, Gen0: 0, Gen1: 0, Gen2: 0,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;test-3-trystartnogcregion-size-of-15mb-but-allocating-more-than-15mb&quot;&gt;Test 3: &lt;code class=&quot;highlighter-rouge&quot;&gt;TryStartNoGCRegion(..)&lt;/code&gt; size of 15MB, but allocating more than 15MB&lt;/h3&gt;

&lt;p&gt;Finally we see that once we’ve allocated more that the &lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt; we asked for, the mode switches from &lt;code class=&quot;highlighter-rouge&quot;&gt;NoGCRegion&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Interactive&lt;/code&gt; and garbage collections can now happen.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Prevent GC: True, Over Allocate: True
TryStartNoGCRegion: Size=15 MB (15,360 K or 15,728,640 bytes) SUCCEEDED
Allocated:   3.00 MB, Mode:   NoGCRegion, Gen0: 0, Gen1: 0, Gen2: 0,
Allocated:   6.00 MB, Mode:   NoGCRegion, Gen0: 0, Gen1: 0, Gen2: 0,
Allocated:   9.00 MB, Mode:   NoGCRegion, Gen0: 0, Gen1: 0, Gen2: 0,
Allocated:  12.00 MB, Mode:   NoGCRegion, Gen0: 0, Gen1: 0, Gen2: 0,
Allocated:  15.00 MB, Mode:   NoGCRegion, Gen0: 0, Gen1: 0, Gen2: 0,
Allocated:  18.00 MB, Mode:   NoGCRegion, Gen0: 0, Gen1: 0, Gen2: 0,
Allocated:  21.00 MB, Mode:  Interactive, Gen0: 1, Gen1: 1, Gen2: 1, **
Allocated:  24.00 MB, Mode:  Interactive, Gen0: 1, Gen1: 1, Gen2: 1,
Allocated:  27.00 MB, Mode:  Interactive, Gen0: 2, Gen1: 2, Gen2: 2, **
Allocated:  30.00 MB, Mode:  Interactive, Gen0: 2, Gen1: 2, Gen2: 2,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So this shows that at least in the simple test we’ve done, the API works as advertised. As long as you don’t subsequently allocate more memory than you asked for, no Garbage Collections will take place.&lt;/p&gt;

&lt;h3 id=&quot;object-size&quot;&gt;Object Size&lt;/h3&gt;

&lt;p&gt;However there are a few caveats when using &lt;code class=&quot;highlighter-rouge&quot;&gt;TryStartNoGCRegion&lt;/code&gt;, the first of which is that you are required to know up-front, the total size in bytes of the objects you will be allocating. As we’ve seen &lt;a href=&quot;#test-3-trystartnogcregion-size-of-15mb-but-allocating-more-than-15mb&quot;&gt;previously&lt;/a&gt; if you allocate more than &lt;code class=&quot;highlighter-rouge&quot;&gt;totalSize&lt;/code&gt; bytes, the &lt;em&gt;No GC Region&lt;/em&gt; will no longer be active and it will then be possible for garbage collections to happen.&lt;/p&gt;

&lt;p&gt;It’s not straight forward to get the size of an object in .NET, it’s a managed-runtime and it tries it’s best to hide that sort of detail from you. To further complicate matters is varies depending on the CPU architecture and even the version of the runtime.&lt;/p&gt;

&lt;p&gt;But you do have a few options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Guess?!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/631825/net-object-size&quot;&gt;Search&lt;/a&gt; on &lt;a href=&quot;http://stackoverflow.com/questions/1128315/find-size-of-object-instance-in-bytes-in-c-sharp&quot;&gt;Stack&lt;/a&gt; &lt;a href=&quot;http://stackoverflow.com/questions/207592/getting-the-size-of-a-field-in-bytes-with-c-sharp&quot;&gt;Overflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Start-up &lt;a href=&quot;https://en.wikipedia.org/wiki/WinDbg&quot;&gt;WinDbg&lt;/a&gt; and use the &lt;code class=&quot;highlighter-rouge&quot;&gt;!objsize&lt;/code&gt; command on a memory dump of your process&lt;/li&gt;
  &lt;li&gt;Get a estimate using the technique that &lt;a href=&quot;https://codeblog.jonskeet.uk/2011/04/05/of-memory-and-strings/&quot;&gt;Jon Skeet proposes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Use &lt;a href=&quot;https://www.nuget.org/packages/DotNetEx/&quot;&gt;DotNetEx&lt;/a&gt;, which relies on inspecting the &lt;a href=&quot;https://github.com/mumusan/dotnetex/blob/master/System.Runtime.CLR/GCEx.cs#L67-L125&quot;&gt;internal fields of the CLR object&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Personally I would go with a variation of 3), use WinDbg, but automate it using the excellent &lt;a href=&quot;https://github.com/Microsoft/clrmd/blob/master/Documentation/WalkingTheHeap.md#a-non-linear-heap-walk&quot;&gt;CLRMD&lt;/a&gt; C# library.&lt;/p&gt;

&lt;h3 id=&quot;segment-size&quot;&gt;Segment Size&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; It turns out that I completely missed the section on segment sizes on the MSDN page, thanks to Maoni for &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/6809#issuecomment-241238416&quot;&gt;pointing this out to me&lt;/a&gt;. In the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ee787088(v=vs.110).aspx#generations&quot;&gt;section on “Generations”&lt;/a&gt; there is the following chart (which fortunately correlates with my findings below):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/08/Default Segment Sizes (from MSDN page).png&quot; alt=&quot;Default Segment Sizes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;However even when you know how many bytes will be allocated within the &lt;em&gt;No GC Region&lt;/em&gt;, you still need to ensure that it’s less that the maximum amount allowed, because if you specify a value too large an &lt;code class=&quot;highlighter-rouge&quot;&gt;ArgumentOutOfRangeException&lt;/code&gt; exception is thrown. From the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dn906201(v=vs.110).aspx&quot;&gt;MSDN docs&lt;/a&gt; (emphasis mine):&lt;/del&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;del&gt; The amount of memory in bytes to allocate without triggering a garbage collection. &lt;strong&gt;It must be less than or equal to the size of an ephemeral segment&lt;/strong&gt;. For information on the size of an ephemeral segment, see the “Ephemeral generations and segments” section in the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ee787088(v=vs.110).aspx&quot;&gt;Fundamentals of Garbage Collection article&lt;/a&gt;.&lt;/del&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;del&gt;However if you visit the linked article on &lt;em&gt;GC Fundamentals&lt;/em&gt;, it has no exact figure for the size of an &lt;em&gt;ephemeral segment&lt;/em&gt;, it does however have &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ee787088(v=vs.110).aspx#Anchor_2&quot;&gt;this stark warning&lt;/a&gt;:&lt;/del&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;del&gt;&lt;strong&gt;Important&lt;/strong&gt;
The size of segments allocated by the garbage collector is implementation-specific and is subject to change at any time, including in periodic updates. &lt;strong&gt;Your app should never make assumptions about or depend on a particular segment size&lt;/strong&gt;, nor should it attempt to configure the amount of memory available for segment allocations.&lt;/del&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;Excellent, that’s very helpful!?&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;So let me get this straight, to prevent &lt;code class=&quot;highlighter-rouge&quot;&gt;TryStartNoGCRegion&lt;/code&gt; from throwing an exception, we have to pass in a &lt;code class=&quot;highlighter-rouge&quot;&gt;totalSize&lt;/code&gt; value that isn’t larger than the size of an ephemeral segment, but we’re not allowed to know the actual value of an ephemeral segment, in-case we assume too much!!&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;So where does that leave us?&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;Well fortunately it’s possible to figure out the size of an ephemeral or Small Object Heap (SOH) segment using either &lt;a href=&quot;http://blogs.microsoft.co.il/sasha/2011/07/18/mapping-the-memory-usage-of-net-applications-part-2-vmmap-and-memorydisplay/&quot;&gt;VMMap&lt;/a&gt;, or the previously mentioned &lt;a href=&quot;https://github.com/Microsoft/clrmd/blob/master/Documentation/WalkingTheHeap.md&quot;&gt;CLRMD library&lt;/a&gt; (&lt;a href=&quot;https://gist.github.com/mattwarren/3dce1aea76c50da850af53a2d453e3c0&quot;&gt;code sample available&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Here are the results I got with the .NET Framework 4.6.1, running on a &lt;a href=&quot;http://ark.intel.com/products/75128/Intel-Core-i7-4800MQ-Processor-6M-Cache-up-to-3_70-GHz&quot;&gt;4 Core (HT) - Intel® Core™ i7-4800MQ&lt;/a&gt;, i.e. &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.environment.processorcount(v=vs.110).aspx&quot;&gt;Environment.ProcessorCount = 8&lt;/a&gt;. If you click on the links for each row heading, you can see the full breakdown as reported by &lt;a href=&quot;https://technet.microsoft.com/en-us/sysinternals/vmmap.aspx&quot;&gt;VMMap&lt;/a&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;GC Mode&lt;/th&gt;
      &lt;th&gt;CPU Arch&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;SOH Segment&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;LOH Segment&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Initial GC Size&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Largest &lt;em&gt;No GC Region&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;totalSize&lt;/code&gt; value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;/images/2016/08/GC Heaps - Workstation - 32-bit.png&quot;&gt;Workstation&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;32-bit&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16 MB&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16 MB&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;32 MB&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16 MB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;/images/2016/08/GC Heaps - Workstation - 64-bit.png&quot;&gt;Workstation&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;64-bit&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;256 MB&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;128 MB&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;384 MB&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;244 MB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;/images/2016/08/GC Heaps - Server - 32-bit.png&quot;&gt;Server&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;32-bit&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;32 MB&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16 MB&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;384 MB&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;256 MB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;/images/2016/08/GC Heaps - Server - 64-bit.png&quot;&gt;Server&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;64-bit&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2,048 MB&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;256 MB&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;18,423 MB&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16,384 MB&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The final column is the largest &lt;code class=&quot;highlighter-rouge&quot;&gt;totalSize&lt;/code&gt; value that can be passed into &lt;code class=&quot;highlighter-rouge&quot;&gt;TryStartNoGCRegion(long totalSize)&lt;/code&gt;, this was found by experimentation/trial-and-error.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The main difference between &lt;strong&gt;Server&lt;/strong&gt; and &lt;strong&gt;Workstation&lt;/strong&gt; is that in Workstation mode there is &lt;a href=&quot;/images/2016/08/GC Heaps - Workstation - 32-bit.png&quot;&gt;only one heap&lt;/a&gt;, whereas in Server mode there is &lt;a href=&quot;/images/2016/08/GC Heaps - Server - 32-bit.png&quot;&gt;one heap per logical CPU&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;trystartnogcregion-under-the-hood&quot;&gt;TryStartNoGCRegion under-the-hood&lt;/h2&gt;

&lt;p&gt;What’s nice is that the &lt;a href=&quot;https://github.com/dotnet/coreclr/commit/4f74a99e296d929945413c5a65d0c61bb7f2c32a&quot;&gt;entire feature is in a single Github commit&lt;/a&gt;, so it’s easy to see what code changes were made:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/08/Github commit for the feature.png&quot;&gt;&lt;img src=&quot;/images/2016/08/Github commit for the feature.png&quot; alt=&quot;Github commit for the feature&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Around half of the files modified (listed below) are the changes needed to set-up the plumbing and error handling involved in adding a API to the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.gc(v=vs.110).aspx()&quot;&gt;System.GC class&lt;/a&gt;, they also give an interesting overview of what’s involved in having the external &lt;code class=&quot;highlighter-rouge&quot;&gt;C#&lt;/code&gt; code talk to the internal &lt;code class=&quot;highlighter-rouge&quot;&gt;C++&lt;/code&gt; code in the CLR (click on a link to go directly to the diff):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/commit/4f74a99e296d929945413c5a65d0c61bb7f2c32a#diff-6dec79513185e5c912cb878e0858d41c&quot;&gt;src/mscorlib/src/System/GC.cs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/commit/4f74a99e296d929945413c5a65d0c61bb7f2c32a#diff-1817fbf34d63e01e6b9ae4908e459f36&quot;&gt;src/mscorlib/src/System/Runtime/GcSettings.cs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/commit/4f74a99e296d929945413c5a65d0c61bb7f2c32a#diff-ca326b8cd58d6642f56aa054c221c22a&quot;&gt;src/vm/comutilnative.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/commit/4f74a99e296d929945413c5a65d0c61bb7f2c32a#diff-b8ebb0f0bef52890d69facf86688870e&quot;&gt;src/vm/comutilnative.h&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/commit/4f74a99e296d929945413c5a65d0c61bb7f2c32a#diff-3667dffbd11675529c85670ef344242e&quot;&gt;src/vm/ecalllist.h&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rest of the changes are where the actual work takes place, with all the significant heavy-lifting happening in &lt;code class=&quot;highlighter-rouge&quot;&gt;gc.cpp&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/commit/4f74a99e296d929945413c5a65d0c61bb7f2c32a#diff-9b1cf8b32169db5abb15e28386d99a10&quot;&gt;src/gc/gc.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/commit/4f74a99e296d929945413c5a65d0c61bb7f2c32a#diff-f27aec4c298a7df8ff654eff47e7c0dd&quot;&gt;src/gc/gc.h&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/commit/4f74a99e296d929945413c5a65d0c61bb7f2c32a#diff-3001bb7a5fd2ac11b928c223e44a2b95&quot;&gt;src/gc/gcimpl.h&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/commit/4f74a99e296d929945413c5a65d0c61bb7f2c32a#diff-295f0ed467af7d7d972f659a633bf8b9&quot;&gt;src/gc/gcpriv.h&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;trystartnogcregion-implementation&quot;&gt;TryStartNoGCRegion Implementation&lt;/h3&gt;

&lt;p&gt;When you call &lt;code class=&quot;highlighter-rouge&quot;&gt;TryStartNoGCRegion&lt;/code&gt; the following things happen:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The maximum required heap sizes are calculated based on the &lt;code class=&quot;highlighter-rouge&quot;&gt;totalSize&lt;/code&gt; parameter passed in. These calculations take place in &lt;a href=&quot;https://github.com/dotnet/coreclr/commit/4f74a99e296d929945413c5a65d0c61bb7f2c32a#diff-9b1cf8b32169db5abb15e28386d99a10R15196&quot;&gt;gc_heap::prepare_for_no_gc_region&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;If the current heaps aren’t large enough to accommodate the new value, they are re-sized. To achieve this a full collection is triggered (see &lt;a href=&quot;https://github.com/dotnet/coreclr/commit/4f74a99e296d929945413c5a65d0c61bb7f2c32a#diff-9b1cf8b32169db5abb15e28386d99a10R34831&quot;&gt;GCHeap::StartNoGCRegion&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Due to the way the GC uses &lt;a href=&quot;#segment-size&quot;&gt;segments&lt;/a&gt;, it won’t always &lt;em&gt;allocate&lt;/em&gt; memory. It will however ensure that it &lt;em&gt;reserves&lt;/em&gt; the maximum amount of memory required, so that it can be &lt;em&gt;committed&lt;/em&gt; when actually needed.&lt;/p&gt;

&lt;p&gt;Then next time the GC wants to perform a collection it checks:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Is the current mode set to &lt;em&gt;No GC Region&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;By checking &lt;code class=&quot;highlighter-rouge&quot;&gt;gc_heap::settings.pause_mode == pause_no_gc&lt;/code&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/commit/4f74a99e296d929945413c5a65d0c61bb7f2c32a#diff-9b1cf8b32169db5abb15e28386d99a10R14638&quot;&gt;relevant code here&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Can we stay in the &lt;em&gt;No GC Region&lt;/em&gt; mode
    &lt;ul&gt;
      &lt;li&gt;This is done by calling &lt;a href=&quot;https://github.com/dotnet/coreclr/commit/4f74a99e296d929945413c5a65d0c61bb7f2c32a#diff-9b1cf8b32169db5abb15e28386d99a10R15448&quot;&gt;gc_heap::should_proceed_for_no_gc()&lt;/a&gt;, which performs a sanity-check to ensure that we haven’t allocated more than the # of bytes we asked for when &lt;code class=&quot;highlighter-rouge&quot;&gt;TryStartNoGCRegion&lt;/code&gt; was set-up&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If 1) and 2) are both true then a collection &lt;strong&gt;does not&lt;/strong&gt; take place because the GC knows that it has already &lt;em&gt;reserved&lt;/em&gt; enough memory to fulfil future allocations, so it doesn’t need to clean-up up any existing garbage to make space.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further Reading:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://thrivingapp.com/?p=33&quot;&gt;You can now tell the .NET GC to stop collecting during critical code paths&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/31560471/prevent-gc-collections-in-certain-spots-to-improve-performance/31561180#31561180&quot;&gt;Prevent GC Collections In Certain Spots To Improve Performance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/maoni/2005/10/04/so-whats-new-in-the-clr-2-0-gc/&quot;&gt;So, what’s new in the CLR 2.0 GC?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/tess/2008/04/17/how-does-the-gc-work-and-what-are-the-sizes-of-the-different-generations/&quot;&gt;How does the GC work and what are the sizes of the different generations?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/tess/2006/09/06/net-memory-usage-a-restaurant-analogy/&quot;&gt;.NET Memory usage – A restaurant analogy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2016/08/16/Preventing-dotNET-Garbage-Collections-with-the-TryStartNoGCRegion-API/&quot;&gt;Preventing .NET Garbage Collections with the TryStartNoGCRegion API&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='Garbage Collectors' scheme='http://www.mattwarren.org/tags#Garbage Collectors'/>
   
 </entry>
 
 <entry>
   <title>GC Pauses and Safe Points</title>
   <link href="http://www.mattwarren.org/2016/08/08/GC-Pauses-and-Safe-Points/"/>
   <updated>2016-08-08T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/08/08/GC-Pauses-and-Safe-Points</id>
   <content type="html">
     &lt;p&gt;GC pauses are a popular topic, if you do a &lt;a href=&quot;https://www.google.com/#q=gc+pauses+in+.net&quot;&gt;google search&lt;/a&gt;, you’ll see lots of articles explaining how to measure and more importantly how to reduce them. This issue is that in most runtimes that have a GC, allocating objects is a quick operation, but at some point in time the GC will need to clean up all the garbage and to do this is has to &lt;em&gt;pause&lt;/em&gt; the entire runtime (except if you happen to be using &lt;a href=&quot;https://www.azul.com/products/zing/pgc/&quot;&gt;Azul’s pauseless GC for Java&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The GC needs to pause the entire runtime so that it can move around objects as part of it’s &lt;em&gt;compaction&lt;/em&gt; phase. If these objects were being referenced by code that was simultaneously executing then all sorts of bad things would happen. So the GC can only make these changes when it knows that no other code is running, hence the need to &lt;em&gt;pause&lt;/em&gt; the entire runtime.&lt;/p&gt;

&lt;h2 id=&quot;gc-flow&quot;&gt;GC Flow&lt;/h2&gt;

&lt;p&gt;In a &lt;a href=&quot;/2016/06/20/Visualising-the-dotNET-Garbage-Collector/&quot;&gt;previous post&lt;/a&gt; I demonstrated how you can use ETW Events to visualise what the .NET Garbage Collector (GC) is doing. That post included the following GC flow for a Foreground/Blocking Collection (info taken from the &lt;a href=&quot;https://blogs.msdn.microsoft.com/maoni/2014/12/25/gc-etw-events-3/&quot;&gt;excellent blog post&lt;/a&gt; by &lt;a href=&quot;https://github.com/Maoni0/&quot;&gt;Maoni Stephens&lt;/a&gt; the main developer on the .NET GC):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCSuspendEE_V1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCSuspendEEEnd_V1&lt;/code&gt; &amp;lt;– &lt;strong&gt;suspension is done&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCStart_V1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCEnd_V1&lt;/code&gt; &amp;lt;– &lt;strong&gt;actual GC is done&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCRestartEEBegin_V1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCRestartEEEnd_V1&lt;/code&gt; &amp;lt;– &lt;strong&gt;resumption is done.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This post is going to be looking at &lt;strong&gt;how&lt;/strong&gt; the .NET Runtime brings all the threads in an application to a &lt;strong&gt;safe-point&lt;/strong&gt; so that the GC can do it’s work. This corresponds to what happens between step 1) &lt;code class=&quot;highlighter-rouge&quot;&gt;GCSuspendEE_V1&lt;/code&gt; and 2) &lt;code class=&quot;highlighter-rouge&quot;&gt;GCSuspendEEEnd_V1&lt;/code&gt; in the flow above.&lt;/p&gt;

&lt;p&gt;For some background this passage from the excellent &lt;a href=&quot;https://www.amazon.co.uk/Pro-NET-Performance-Optimize-Applications/dp/1430244585/ref=as_li_ss_tl?ie=UTF8&amp;amp;linkCode=ll1&amp;amp;tag=mattonsoft-21&amp;amp;linkId=f18fd47630f046ab8e28512acc728fbb&quot;&gt;Pro .NET Performance: Optimize Your C# Applications &lt;/a&gt; explains what’s going on:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://books.google.co.uk/books?id=fhpYTbos8OkC&amp;amp;pg=PA103&amp;amp;lpg=PA103&amp;amp;dq=GC+safepoints+.NET&amp;amp;source=bl&amp;amp;ots=OcEbYCaMor&amp;amp;sig=XNDl1pSuKRcDU_xc1M6Go64ot2Q&amp;amp;hl=en&amp;amp;sa=X&amp;amp;redir_esc=y#v=onepage&amp;amp;q&amp;amp;f=false&quot;&gt;&lt;img src=&quot;/images/2016/08/Suspending Threads for GC.png&quot; alt=&quot;Suspending Threads for GC&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Technically the GC itself doesn’t actually perform a suspension, it calls &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/gcenv.ee.cpp#L26-L36&quot;&gt;into the &lt;em&gt;Execution Engine&lt;/em&gt; (EE)&lt;/a&gt; and asks that to suspend all the running threads. This suspension needs to be as quick as possible, because the time taken contributes to the overall &lt;em&gt;GC pause&lt;/em&gt;. Therefore this &lt;em&gt;Time To Safe Point&lt;/em&gt; (TTSP) as it’s known, needs to be minimised, the CLR does this by using several techniques.&lt;/p&gt;

&lt;h2 id=&quot;gc-suspension-in-runtime-code&quot;&gt;GC suspension in Runtime code&lt;/h2&gt;

&lt;p&gt;Inside code that it controls, the runtime inserts method calls to ensure that threads can regularly &lt;em&gt;poll&lt;/em&gt; to determine when they need to suspend. For instance take a look at the following code snippet from the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/deb00ad58acf627763b6c0a7833fa789e3bb1cd0/src/classlibnative/bcltype/stringnative.cpp#L351-L400&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IndexOfCharArray()&lt;/code&gt;&lt;/a&gt; method (which is called internally by &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.string.indexofany(v=vs.110).aspx&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;String.IndexOfAny(..)&lt;/code&gt;&lt;/a&gt;). Notice that it contains multiple calls to the macro &lt;code class=&quot;highlighter-rouge&quot;&gt;FC_GC_POLL_RET()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;FCIMPL4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INT32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COMString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IndexOfCharArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thisRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHARArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// &amp;lt;OTHER CODE REMOVED&amp;gt;
&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// use probabilistic map, see (code:InitializeProbabilisticMap)
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;charMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PROBABILISTICMAP_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;InitializeProbabilisticMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;charMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueChars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;WCHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thisChar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thisChars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProbablyContains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;charMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thisChar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArrayContains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thisChars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueChars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;FC_GC_POLL_RET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;FC_GC_POLL_RET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The are &lt;a href=&quot;https://github.com/dotnet/coreclr/search?utf8=%E2%9C%93&amp;amp;q=FC_GC_POLL+FC_GC_POLL_RET&amp;amp;type=Code&quot;&gt;lots of other places&lt;/a&gt; in the runtime where these calls are inserted, to ensure that a GC suspension can happen as soon as possible. However having these calls spread throughout the code has an overhead, so the runtime uses a special trick to ensure the cost is only paid when a suspension has actually been requested, From &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/deb00ad58acf627763b6c0a7833fa789e3bb1cd0/src/vm/i386/jithelp.asm#L472-L480&quot;&gt;jithelp.asm&lt;/a&gt; you can see that the method call is re-written to a &lt;code class=&quot;highlighter-rouge&quot;&gt;nop&lt;/code&gt; routine when not needed and only calls the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/deb00ad58acf627763b6c0a7833fa789e3bb1cd0/src/vm/jithelpers.cpp#L6331-L6536&quot;&gt;actual &lt;code class=&quot;highlighter-rouge&quot;&gt;JIT_PollGC()&lt;/code&gt; function&lt;/a&gt; when absolutely required:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;; Normally (when we're not trying to suspend for GC), the 
; CORINFO_HELP_POLL_GC helper points to this nop routine.  When we're 
; ready to suspend for GC, we whack the Jit Helper table entry to point 
; to the real helper. When we're done with GC we whack it back.
PUBLIC @JIT_PollGC_Nop@0
@JIT_PollGC_Nop@0 PROC
ret
@JIT_PollGC_Nop@0 ENDP
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;FC_GC_POLL&lt;/code&gt; need to be carefully inserted in the correct locations, too few and the EE won’t be able to suspend quickly enough and this will cause excessive GC pauses, as this comment from one of the .NET JIT devs confirms:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/36#discussion_r24088949&quot;&gt;&lt;img src=&quot;/images/2016/08/FC_GC_POLL call location.png&quot; alt=&quot;FC_GC_POLL call location&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;gc-suspension-in-user-code&quot;&gt;GC suspension in User code&lt;/h2&gt;

&lt;p&gt;Alternatively, in code that the runtime doesn’t control things are a bit different. Here the JIT analyses the code and classifies it as either:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Partially interruptible&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fully interruptible&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Partially interruptible&lt;/strong&gt; code can only be suspended at explicit GC poll locations (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;FC_GC_POLL&lt;/code&gt; calls) or when it calls into other methods. On the other hand &lt;strong&gt;fully interruptible&lt;/strong&gt; code can be interrupted or suspended at any time, as every line within the method is considered a GC safe-point.&lt;/p&gt;

&lt;p&gt;I’m not going to talk about how the &lt;em&gt;thread-hijacking&lt;/em&gt; mechanism works (used with &lt;em&gt;fully interruptible&lt;/em&gt; code), as it’s a complex topic, but as always there’s an in-depth &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/775003a4c72f0acc37eab84628fcef541533ba4e/Documentation/botr/threading.md#hijacking&quot;&gt;section in the BOTR&lt;/a&gt; that gives all the gory details. If you don’t want to read the whole thing, in summary it suspends the underlying native thread, via the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ms686345(v=vs.85).aspx&quot;&gt;Win32 SuspendThread API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can see &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/deb00ad58acf627763b6c0a7833fa789e3bb1cd0/src/jit/flowgraph.cpp#L7382-L7462&quot;&gt;some of the heuristics&lt;/a&gt; that the JIT uses to decide whether code is fully or partially interruptible as it seeks to find the best trade-off between code quality/size and GC suspension latency. But as a concrete example, if we take the following code that accumulates a counter in a tight loop:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TestMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Loop exited, counter = {0:N0}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then execute it with the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/building/viewing-jit-dumps.md#useful-complus-variables&quot;&gt;JIT diagnostics turned on&lt;/a&gt; you get the following output, which shows that this code is classified as &lt;em&gt;fully interruptible&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;; Assembly listing for method ConsoleApplication.Program:TestMethod():long
; Emitting BLENDED_CODE for X64 CPU with AVX
; optimized code
; rsp based frame
; fully interruptible
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(&lt;a href=&quot;https://gist.github.com/mattwarren/71adb255e4b35a92a060029aef4d1728#file-testmethod-fully-interruptible-md&quot;&gt;full JIT diagnostic output of &lt;strong&gt;Fully&lt;/strong&gt; Interruptible method&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Now, if we run the same test again, but tweak the code by adding a few &lt;code class=&quot;highlighter-rouge&quot;&gt;Console.WriteLine(..)&lt;/code&gt; methods calls:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TestMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Inside Inner Loop, counter = {0:N0}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;After Inner Loop, counter = {0:N0}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Thread loop exited cleanly, counter = {0:N0}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The method is then classified as &lt;em&gt;Partially Interruptible&lt;/em&gt;, due to the additional &lt;code class=&quot;highlighter-rouge&quot;&gt;Console.WriteLine(..)&lt;/code&gt; calls:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;; Assembly listing for method ConsoleApplication.Program:TestMethod():long
; Emitting BLENDED_CODE for X64 CPU with AVX
; optimized code
; rsp based frame
; partially interruptible
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(&lt;a href=&quot;https://gist.github.com/mattwarren/06dd970b5364c80d445da4252558a5d3#file-testmethod-partially-interruptible-md&quot;&gt;full JIT diagnostic output of &lt;strong&gt;Partially&lt;/strong&gt; Interruptible method&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Interesting enough there seems to be functionality that enables &lt;code class=&quot;highlighter-rouge&quot;&gt;JIT_PollGC()&lt;/code&gt; calls to be inserted into &lt;strong&gt;user&lt;/strong&gt; code as they are compiled by the .NET JIT, this is controlled by the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/clr-configuration-knobs.md&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCPollType&lt;/code&gt; CLR Configuration flag&lt;/a&gt;. However by default it’s disabled and in my tests turning it on causes the CoreCLR to exit with some interesting errors. So it appears that currently, the default or supported behaviour is to use thread-hijacking on user code, rather than inserting explicit &lt;code class=&quot;highlighter-rouge&quot;&gt;JIT_PollGC()&lt;/code&gt; calls.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.microsoft.co.il/sasha/2013/11/05/modern-garbage-collection-in-theory-and-practice/&quot;&gt;Modern Garbage Collection in Theory and Practice&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://flyingfrogblog.blogspot.co.uk/2012/03/gc-safe-points-mutator-suspension-and.html&quot;&gt;GC-safe points, mutator suspension and barriers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/30416520/how-local-variable-usage-infomation-is-maintained-in-net-clr-source-code&quot;&gt;How local variable usage infomation is maintained in .net clr source code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/678ysw69(v=vs.110).aspx&quot;&gt;Thread.Suspend, Garbage Collection, and Safe Points&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://llvm.org/devmtg/2015-04/slides/LLILC_Euro_LLVM_2015.pptx&quot;&gt;LLVM as a code generator for the CoreCLR - With a particular emphasis on GC
&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/6f26329518b08055c090315eee5db533e42f39ae/src/vm/threadsuspend.cpp#L4784-L4822&quot;&gt;Comments on “SuspendRuntime” and “Redirection vs. Hijacking:” in &lt;code class=&quot;highlighter-rouge&quot;&gt;threadsuspend.cpp&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/6f26329518b08055c090315eee5db533e42f39ae/src/vm/threads.h#L36-L132&quot;&gt;Comments on “Suspending The Runtime”, “Cooperative Mode” and “Partially/Fully Interuptible Code” in &lt;code class=&quot;highlighter-rouge&quot;&gt;threads.h&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://geekswithblogs.net/akraus1/archive/2014/03/24/155766.aspx&quot;&gt;What Every Developer Must Know About Fast Garbage Collection (+ more)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/16655948/does-the-net-garbage-collectors-stop-the-world-effect-halt-or-delay-the-execut&quot;&gt;Does the .NET Garbage Collector’s stop-the-world effect halt or delay the execution of unmanaged threads and timer callbacks?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/8404245/gc-behavior-and-clr-thread-hijacking/8405187#8405187&quot;&gt;GC Behavior and CLR Thread Hijacking&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/4418356/safely-pausing-of-thread-during-gc-in-net/4418520#4418520&quot;&gt;Safely pausing of thread during GC in .NET&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://osdir.com/ml/windows.devel.dotnet.rotor/2002-08/msg00006.html&quot;&gt;CLR and Thread Safe Points&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/maoni/2006/06/07/suspending-and-resuming-threads-for-gc/&quot;&gt;Suspending and resuming threads for GC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2016/08/08/GC-Pauses-and-Safe-Points/&quot;&gt;GC Pauses and Safe Points&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='Garbage Collectors' scheme='http://www.mattwarren.org/tags#Garbage Collectors'/>
   
 </entry>
 
 <entry>
   <title>How the dotnet CLI tooling runs your code</title>
   <link href="http://www.mattwarren.org/2016/07/04/How-the-dotnet-CLI-tooling-runs-your-code/"/>
   <updated>2016-07-04T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/07/04/How-the-dotnet-CLI-tooling-runs-your-code</id>
   <content type="html">
     &lt;p&gt;Just over a week ago the &lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2016/06/27/announcing-net-core-1-0/&quot;&gt;official 1.0 release of .NET Core&lt;/a&gt; was announced, the release includes:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;the .NET Core runtime, libraries and tools and the ASP.NET Core libraries.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However alongside a completely new, revamped, xplat version of the .NET runtime, the development experience has been changed, with the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/articles/core/tools/dotnet&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet&lt;/code&gt; based tooling&lt;/a&gt; now available (&lt;strong&gt;Note&lt;/strong&gt;: the &lt;em&gt;tooling&lt;/em&gt; itself is currently still in preview and it’s &lt;a href=&quot;https://github.com/dotnet/core/blob/master/roadmap.md#planned-11-features&quot;&gt;expected to be RTM&lt;/a&gt; later this year)&lt;/p&gt;

&lt;p&gt;So you can now write:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotnet new
dotnet restore
dotnet run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and at the end you’ll get the following output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s the &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet&lt;/code&gt; CLI (Command Line Interface) tooling that is the focus of this post and more specifically &lt;em&gt;how it actually runs your code&lt;/em&gt;, although if you want a &lt;strong&gt;tl;dr&lt;/strong&gt; version see this tweet from &lt;a href=&quot;https://twitter.com/citizenmatt&quot;&gt;@citizenmatt&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/citizenmatt/status/747874853135466496&quot;&gt;&lt;img src=&quot;/images/2016/07/Tweet explaining dotnet CLI runtime.png&quot; alt=&quot;Tweet explaining dotnet CLI runtime&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;traditional-way-of-running-net-executables&quot;&gt;Traditional way of running .NET executables&lt;/h2&gt;

&lt;p&gt;As a brief reminder, .NET executables can’t be run directly (they’re just &lt;a href=&quot;https://en.wikipedia.org/wiki/Common_Intermediate_Language&quot;&gt;IL&lt;/a&gt;, not machine code), therefore the Windows OS has always needed to do a few tricks to execute them, from &lt;a href=&quot;http://amzn.to/29baVly&quot;&gt;CLR via C#&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;After Windows has examined the EXE file’s header to determine whether to create a 32-bit process, a 64-bit process, or a WoW64 process, Windows loads the x86, x64, or IA64 version of MSCorEE.dll into the process’s address space.
…
Then, the process’ primary thread calls a method defined inside MSCorEE.dll. This method initializes the CLR, loads the EXE assembly, and then calls its entry point method (Main). At this point, the managed application is up and running.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;new-way-of-running-net-executables&quot;&gt;New way of running .NET executables&lt;/h2&gt;

&lt;h3 id=&quot;dotnet-run&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet run&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;So how do things work now that we have the new CoreCLR and the CLI tooling? Firstly to understand what is going on under-the-hood, we need to set a few environment variables (&lt;code class=&quot;highlighter-rouge&quot;&gt;COREHOST_TRACE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DOTNET_CLI_CAPTURE_TIMING&lt;/code&gt;) so that we get a more verbose output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/07/dotnet run - with cli timings and verbose output.png&quot; alt=&quot;dotnet run - with cli timings and verbose output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, amongst all the pretty ASCII-art, we can see that &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet run&lt;/code&gt; actually executes the following cmd:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet exec --additionalprobingpath C:\Users\matt\.nuget\packages c:\dotnet\bin\Debug\netcoreapp1.0\myapp.dll&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: this is what happens when running a Console Application. The CLI tooling &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/articles/core/app-types&quot;&gt;supports other scenarios&lt;/a&gt;, such as self-hosted web sites, which work differently.&lt;/p&gt;

&lt;h3 id=&quot;dotnet-exec-and-corehost&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet exec&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;corehost&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Up-to this point everything was happening within managed code, however once &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet exec&lt;/code&gt; is called we &lt;a href=&quot;https://github.com/dotnet/core-setup/blob/release/1.0.0/src/corehost/corehost.cpp#L105-L119&quot;&gt;jump over to unmanaged code&lt;/a&gt; within &lt;a href=&quot;https://github.com/dotnet/core-setup/tree/release/1.0.0/src/corehost&quot;&gt;the corehost application&lt;/a&gt;. In addition several other .dlls are loaded, the last of which is the CoreCLR runtime itself (click to go to the main source file for each module):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/core-setup/blob/release/1.0.0/src/corehost/cli/hostpolicy.cpp&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hostpolicy.dll&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/core-setup/blob/release/1.0.0/src/corehost/cli/fxr/hostfxr.cpp&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hostfxr.dll&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;coreclr.dll&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main task that the &lt;code class=&quot;highlighter-rouge&quot;&gt;corehost&lt;/code&gt; application performs is to calculate and locate all the dlls needed to run the application, along with their dependencies. The full &lt;a href=&quot;https://gist.github.com/mattwarren/f527b06c4579ebb414d6e182b910c474&quot;&gt;output is available&lt;/a&gt;, but in summary it processes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;99 &lt;strong&gt;Managed&lt;/strong&gt; dlls &lt;a href=&quot;https://gist.github.com/mattwarren/428234f1f4508486f4ba3a4e6543bf2e&quot;&gt;(“Adding runtime asset..”)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;136 &lt;strong&gt;Native&lt;/strong&gt; dlls &lt;a href=&quot;https://gist.github.com/mattwarren/919f54d760f045c47b4833a345abde57&quot;&gt;(“Adding native asset..”)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are so many individual files because the CoreCLR operates on a “pay-for-play” model, from &lt;a href=&quot;https://docs.asp.net/en/1.0.0-rc1/conceptual-overview/dotnetcore.html#motivation-behind-net-core&quot;&gt;Motivation Behind .NET Core&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;By factoring the CoreFX libraries and allowing individual applications to pull in only those parts of CoreFX they require (a so-called &lt;strong&gt;“pay-for-play” model&lt;/strong&gt;), server-based applications built with ASP.NET 5 can minimize their dependencies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, once all the housekeeping is done control is handed off to &lt;a href=&quot;https://github.com/dotnet/core-setup/blob/release/1.0.0/src/corehost/corehost.cpp&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;corehost&lt;/code&gt;&lt;/a&gt;, but not before the following &lt;a href=&quot;https://github.com/dotnet/core-setup/blob/release/1.0.0/src/corehost/cli/hostpolicy.cpp#L91-L123&quot;&gt;properties are set&lt;/a&gt; to control the execution of the CoreCLR itself:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;TRUSTED_PLATFORM_ASSEMBLIES&lt;/strong&gt; =
    &lt;ul&gt;
      &lt;li&gt;Paths to 235 .dlls (99 managed, 136 native), from &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0-rc2-3002702&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;APP_PATHS&lt;/strong&gt; =
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;c:\dotnet\bin\Debug\netcoreapp1.0&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;APP_NI_PATHS&lt;/strong&gt; =
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;c:\dotnet\bin\Debug\netcoreapp1.0&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NATIVE_DLL_SEARCH_DIRECTORIES&lt;/strong&gt; =
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0-rc2-3002702&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;c:\dotnet\bin\Debug\netcoreapp1.0&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PLATFORM_RESOURCE_ROOTS&lt;/strong&gt; =
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;c:\dotnet\bin\Debug\netcoreapp1.0&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0-rc2-3002702&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AppDomainCompatSwitch&lt;/strong&gt; =
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UseLatestBehaviorWhenTFMNotSpecified&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;APP_CONTEXT_BASE_DIRECTORY&lt;/strong&gt; =
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;c:\dotnet\bin\Debug\netcoreapp1.0&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;APP_CONTEXT_DEPS_FILES&lt;/strong&gt; =
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;c:\dotnet\bin\Debug\netcoreapp1.0\dotnet.deps.json&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0-rc2-3002702\Microsoft.NETCore.App.deps.json&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;FX_DEPS_FILE&lt;/strong&gt; =
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0-rc2-3002702\Microsoft.NETCore.App.deps.json&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can also run your app by invoking &lt;code class=&quot;highlighter-rouge&quot;&gt;corehost.exe&lt;/code&gt; directly with the following command:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;corehost.exe C:\dotnet\bin\Debug\netcoreapp1.0\myapp.dll&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;executing-a-net-assembly&quot;&gt;Executing a .NET Assembly&lt;/h3&gt;

&lt;p&gt;At last we get to the point at which the .NET dll/assembly is loaded and executed, via the code shown below, taken from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/release/1.0.0/src/dlls/mscoree/unixinterface.cpp#L156-L244&quot;&gt;unixinterface.cpp&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;hr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetStartupFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startupFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IfFailRet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IfFailRet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateAppDomainWithManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;appDomainFriendlyNameW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Flags:
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// APPDOMAIN_ENABLE_PLATFORM_SPECIFIC_APPS
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// - By default CoreCLR only allows platform neutral assembly to be run. To allow
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//   assemblies marked as platform specific, include this flag
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// APPDOMAIN_ENABLE_PINVOKE_AND_CLASSIC_COMINTEROP
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// - Allows sandboxed applications to make P/Invoke calls and use COM interop
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// APPDOMAIN_SECURITY_SANDBOXED
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// - Enables sandboxing. If not set, the app is considered full trust
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// APPDOMAIN_IGNORE_UNHANDLED_EXCEPTION
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// - Prevents the application from being torn down if a managed exception is unhandled
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;APPDOMAIN_ENABLE_PLATFORM_SPECIFIC_APPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;APPDOMAIN_ENABLE_PINVOKE_AND_CLASSIC_COMINTEROP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;APPDOMAIN_DISABLE_TRANSPARENCY_ENFORCEMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Name of the assembly that contains the AppDomainManager implementation
&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The AppDomainManager implementation type name
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;propertyCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;propertyKeysW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;propertyValuesW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;domainId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is making use of the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms164408(v=vs.110).aspx&quot;&gt;ICLRRuntimeHost Interface&lt;/a&gt;, which is part of the COM based hosting API for the CLR. Despite the file name, it is actually from the Windows version of the CLI tooling. In the xplat world of the CoreCLR the hosting API that was originally written for Unix has been replicated across all the platforms so that a common interface is available for any tools that want to use it, see the following GitHub issues for more information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/1234&quot;&gt;Refactor the Unix hosting API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/1256&quot;&gt;Expose the Unix hosting API on Windows too&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/pull/1295&quot;&gt;Expose Unix hosting API on Windows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/dlls/mscoree/mscorwks_ntdef.src#L20-L24&quot;&gt;Unix Hosting API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;And that’s it, your .NET code is now running, simple really!!&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;additional-information&quot;&gt;Additional information:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/articles/core/tools/dotnet-run&quot;&gt;Official dotnet cli tooling documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/cli/blob/rel/1.0.0/Documentation/specs/corehost.md&quot;&gt;corehost runtime assembly resolution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/cli/blob/rel/1.0.0/Documentation/specs/runtime-configuration-file.md&quot;&gt;Runtime Configuration File specification&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/cli/blob/rel/1.0.0/Documentation/specs/runtime-configuration-file.md#sections&quot;&gt;CoreCLR runtime options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2016/07/04/How-the-dotnet-CLI-tooling-runs-your-code/&quot;&gt;How the dotnet CLI tooling runs your code&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='CLI' scheme='http://www.mattwarren.org/tags#CLI'/>
   
     <category term='CoreCLR' scheme='http://www.mattwarren.org/tags#CoreCLR'/>
   
 </entry>
 
 <entry>
   <title>Visualising the .NET Garbage Collector</title>
   <link href="http://www.mattwarren.org/2016/06/20/Visualising-the-dotNET-Garbage-Collector/"/>
   <updated>2016-06-20T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/06/20/Visualising-the-dotNET-Garbage-Collector</id>
   <content type="html">
     &lt;p&gt;As part of an ongoing attempt to learn more about how a real-life Garbage Collector (GC) works (see &lt;a href=&quot;/2016/02/04/learning-how-garbage-collectors-work-part-1/&quot;&gt;part 1&lt;/a&gt;) and after being inspired by &lt;a href=&quot;https://twitter.com/b0rk&quot;&gt;Julia Evans’&lt;/a&gt; excellent post &lt;a href=&quot;http://jvns.ca/blog/2013/10/24/day-16-gzip-plus-poetry-equals-awesome/&quot;&gt;gzip + poetry = awesome&lt;/a&gt; I spent a some time writing a tool to enable a live visualisation of the .NET GC in action.&lt;/p&gt;

&lt;p&gt;The output from the tool is shown below, click to Play/Stop (&lt;a href=&quot;/images/2016/06/GC Visualisation.gif&quot;&gt;direct link to gif&lt;/a&gt;). The &lt;a href=&quot;https://github.com/mattwarren/GCVisualisation&quot;&gt;full source is available&lt;/a&gt; if you want to take a look.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;gifplayer&quot; data-label=&quot;Play&quot; gifid=&quot;GC-Visualisation&quot; src=&quot;/images/2016/06/GC Visualisation.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/06/Key to visualisation symbols.png&quot; alt=&quot;Key to visualisation symbols&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;capturing-gc-events-in-net&quot;&gt;Capturing GC Events in .NET&lt;/h2&gt;

&lt;p&gt;Fortunately there is a straight-forward way to capture the raw GC related events, using the excellent &lt;a href=&quot;https://blogs.msdn.microsoft.com/vancem/2013/08/15/traceevent-etw-library-published-as-a-nuget-package/&quot;&gt;TraceEvent library&lt;/a&gt; that provides a wrapper over the underlying &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ff356162(v=vs.110).aspx&quot;&gt;ETW Events&lt;/a&gt; the .NET GC outputs.&lt;/p&gt;

&lt;p&gt;It’s a simple as writing code like this :&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GCAllocationTick&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocationData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessIdsUsedInRuns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allocationData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;totalBytesAllocated&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocationData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AllocationAmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we are wiring up a callback each time a &lt;code class=&quot;highlighter-rouge&quot;&gt;GCAllocationTick&lt;/code&gt; event is fired, other events that are available include &lt;code class=&quot;highlighter-rouge&quot;&gt;GCStart&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;GCEnd&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;GCSuspendEEStart&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;GCRestartEEStart&lt;/code&gt; and &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ff356162(v=vs.110).aspx&quot;&gt;many more&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As well outputting a visualisation of the raw events, they are also aggregated so that a summary can be produced:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Memory Allocations:
        1,065,720 bytes currently allocated
    1,180,308,804 bytes have been allocated in total
GC Collections:
  16 in total (12 excluding B/G)
     2 - generation 0
     9 - generation 1
     1 - generation 2
     4 - generation 2 (B/G)
Time in GC: 1,300.1 ms (108.34 ms avg)
Time under test: 3,853 ms (33.74 % spent in GC)
Total GC Pause time: 665.9 ms
Largest GC Pause: 75.99 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;gc-pauses&quot;&gt;GC Pauses&lt;/h2&gt;

&lt;p&gt;Most of the visualisation and summary information is relatively easy to calculate, however the timings for the GC &lt;em&gt;pauses&lt;/em&gt; are not always straight-forward. Since .NET 4.5 the Server GC has 2 main modes available the new &lt;strong&gt;Background&lt;/strong&gt; GC mode and the existing &lt;strong&gt;Foreground/Non-Concurrent&lt;/strong&gt; one. The .NET Workstation GC has had a &lt;strong&gt;Background&lt;/strong&gt; GC mode since .NET 4.0 and a &lt;strong&gt;Concurrent&lt;/strong&gt; mode before that.&lt;/p&gt;

&lt;p&gt;The main benefit of the &lt;strong&gt;Background&lt;/strong&gt; mode is that it reduces &lt;em&gt;GC pauses&lt;/em&gt;, or more specifically it reduces the time that the GC has to suspend all the user threads running inside the CLR. The problem with these “stop-the-world” pauses, as they are also known, is that during this time your application can’t continue with whatever it was doing and if the pauses last long enough &lt;a href=&quot;http://blog.marcgravell.com/2011/10/assault-by-gc.html&quot;&gt;users will notice&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As you can see in the image below (courtesy of the &lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2012/07/20/the-net-framework-4-5-includes-new-garbage-collector-enhancements-for-client-and-server-apps/&quot;&gt;.NET Blog&lt;/a&gt;) , with the newer &lt;strong&gt;Background&lt;/strong&gt; mode in .NET 4.5 the time during which user-threads are &lt;em&gt;suspended&lt;/em&gt; is much smaller (the dark blue arrows). They only need to be suspended for part of the GC process, not the entire duration.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/06/Background GC - .NET 4.0 v 4.5.png&quot;&gt;&lt;img src=&quot;/images/2016/06/Background GC - .NET 4.0 v 4.5.png&quot; alt=&quot;Background GC - .NET 4.0 v 4.5&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;foreground-blocking-gc-flow&quot;&gt;Foreground (Blocking) GC flow&lt;/h3&gt;

&lt;p&gt;So calculating the pauses for a &lt;strong&gt;Foreground&lt;/strong&gt; GC (this means all Gen 0/1 GCs and full blocking GCs) is relatively straightforward, using the info from the &lt;a href=&quot;https://blogs.msdn.microsoft.com/maoni/2014/12/25/gc-etw-events-3/&quot;&gt;excellent blog post&lt;/a&gt; by &lt;a href=&quot;https://github.com/Maoni0/&quot;&gt;Maoni Stephens&lt;/a&gt; the main developer on the .NET GC:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCSuspendEE_V1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCSuspendEEEnd_V1&lt;/code&gt; &amp;lt;– &lt;strong&gt;suspension is done&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCStart_V1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCEnd_V1&lt;/code&gt; &amp;lt;– &lt;strong&gt;actual GC is done&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCRestartEEBegin_V1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCRestartEEEnd_V1&lt;/code&gt; &amp;lt;– &lt;strong&gt;resumption is done.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So the pause is just the difference between the timestamp of the &lt;code class=&quot;highlighter-rouge&quot;&gt;GCSuspendEEEnd_V1&lt;/code&gt; event and that of the &lt;code class=&quot;highlighter-rouge&quot;&gt;GCRestartEEEnd_V1&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;background-gc-flow&quot;&gt;Background GC flow&lt;/h3&gt;

&lt;p&gt;However for &lt;strong&gt;Background&lt;/strong&gt; GC (Gen 2) it is more complicated, again from &lt;a href=&quot;https://blogs.msdn.microsoft.com/maoni/2014/12/25/gc-etw-events-3/&quot;&gt;Maoni’s blog post&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCSuspendEE_V1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCSuspendEEEnd_V1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCStart_V1&lt;/code&gt; &amp;lt;– &lt;strong&gt;Background GC starts&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCRestartEEBegin_V1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCRestartEEEnd_V1&lt;/code&gt; &amp;lt;– &lt;strong&gt;done with the initial suspension&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCSuspendEE_V1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCSuspendEEEnd_V1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCRestartEEBegin_V1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCRestartEEEnd_V1&lt;/code&gt; &amp;lt;– &lt;strong&gt;done with Background GC’s own suspension&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCSuspendEE_V1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCSuspendEEEnd_V1&lt;/code&gt; &amp;lt;– &lt;strong&gt;suspension for Foreground GC is done&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCStart_V1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCEnd_V1&lt;/code&gt; &amp;lt;– &lt;strong&gt;Foreground GC is done&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCRestartEEBegin_V1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCRestartEEEnd_V1&lt;/code&gt; &amp;lt;– &lt;strong&gt;resumption for Foreground GC is done&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCEnd_V1&lt;/code&gt; &amp;lt;– &lt;strong&gt;Background GC ends&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It’s a bit easier to understand these steps by using an annotated version of the image from the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ee787088(v=vs.110).aspx#background_garbage_collection&quot;&gt;MSDN page on GC&lt;/a&gt; (the numbers along the bottom correspond to the steps above)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/06/BackgroundGarbageCollection-Annotated.jpeg&quot;&gt;&lt;img src=&quot;/images/2016/06/BackgroundGarbageCollection-Annotated.jpeg&quot; alt=&quot;Background Garbage Collection&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But there’s a few caveats that make it &lt;a href=&quot;https://blogs.msdn.microsoft.com/maoni/2014/12/25/gc-etw-events-3/&quot;&gt;trickier to calculate the actual time&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Of course there could be more than one foreground GC, there could be 0+ between line 5) and 6), and more than one between line 9) and 16).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;We may also decide to do an ephemeral GC before we start the BGC (as BGC is meant for gen2) so you might also see an ephemeral GC between line 3) and 4) – the only difference between it and a normal ephemeral GC is you wouldn’t see its own suspension and resumption events as we already suspended/resumed for BGC purpose.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;age-of-ascent---gc-pauses&quot;&gt;Age of Ascent - GC Pauses&lt;/h3&gt;

&lt;p&gt;Finally, if you want a more dramatic way of visualising a “&lt;em&gt;Stop the World&lt;/em&gt;” or more accurately a “&lt;em&gt;Stop the Universe&lt;/em&gt;” GC pause, take a look at the video below. The GC pause starts at around 7 seconds in (credit to &lt;a href=&quot;https://twitter.com/ben_a_adams&quot;&gt;Ben Adams&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/ageofascent&quot;&gt;Age of Ascent&lt;/a&gt;)&lt;/p&gt;

&lt;iframe width=&quot;774&quot; height=&quot;435&quot; src=&quot;https://www.youtube.com/embed/BTHimgTauwQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=11941874&quot;&gt;Hacker News&lt;/a&gt;&lt;/p&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2016/06/20/Visualising-the-dotNET-Garbage-Collector/&quot;&gt;Visualising the .NET Garbage Collector&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='Garbage Collectors' scheme='http://www.mattwarren.org/tags#Garbage Collectors'/>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
 </entry>
 
 <entry>
   <title>Strings and the CLR - a Special Relationship</title>
   <link href="http://www.mattwarren.org/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/"/>
   <updated>2016-05-31T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/05/31/Strings-and-the-CLR-a-Special-Relationship</id>
   <content type="html">
     &lt;p&gt;Strings and the Common Language Runtime (CLR) have a &lt;em&gt;special relationship&lt;/em&gt;, but it’s a bit different (and way less political) than the UK &amp;lt;-&amp;gt; US &lt;em&gt;special relationship&lt;/em&gt; that is often talked about.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.bbc.com/news/uk-36084672&quot;&gt;&lt;img src=&quot;/images/2016/05/UK and US - Special Relationship.png&quot; alt=&quot;UK and US - Special Relationship&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This relationship means that &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.string(v=vs.110).aspx&quot;&gt;Strings&lt;/a&gt; can do things that aren’t possible in the C# code that you and I can write and they also get a helping hand from the runtime to achieve maximum performance, which makes sense when you consider how ubiquitous they are in .NET applications.&lt;/p&gt;

&lt;h2 id=&quot;string-layout-in-memory&quot;&gt;String layout in memory&lt;/h2&gt;

&lt;p&gt;Firstly strings differ from any other data type in the CLR (other than arrays) in that their size isn’t fixed. Normally the .NET GC knows the size of an object when it’s being allocated, because it’s based on the size of the fields/properties within the object and they don’t change. However in .NET a string object doesn’t contain a pointer to the actual string data, which is then stored elsewhere on the heap. That raw data, the actual bytes that make up the text are contained within the string object itself. That means that the memory representation of a string looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/05/Memory Layout - CLR String.png&quot; alt=&quot;Memory Layout - CLR String&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The benefit is that this gives excellent memory locality and ensures that when the CLR wants to access the raw string data it doesn’t have to do another pointer lookup. For more information, see the Stack Overflow questions &lt;a href=&quot;http://stackoverflow.com/questions/5240971/where-does-net-place-the-string-value&quot;&gt;“Where does .NET place the String value?”&lt;/a&gt; and Jon Skeet’s excellent post on &lt;a href=&quot;http://csharpindepth.com/Articles/General/Strings.aspx&quot;&gt;strings&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Whereas if you were to implement your own string class, like so:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyString&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If would look like this in memory:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/05/Memory Layout - Custom String.png&quot; alt=&quot;Memory Layout - Custom String&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this case, the actual string data would be held in the &lt;code class=&quot;highlighter-rouge&quot;&gt;byte []&lt;/code&gt;, located elsewhere in memory and would therefore require a pointer reference and lookup to locate it.&lt;/p&gt;

&lt;p&gt;This is summarised nicely in the excellent BOTR, in in the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/mscorlib.md#interface-between-managed--clr-code&quot;&gt;mscorlib section&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The managed mechanism for calling into native code must also support the special managed calling convention used by &lt;strong&gt;String’s constructors, where the constructor allocates the memory used by the object&lt;/strong&gt; (instead of the typical convention where the constructor is called after the GC allocates memory).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;implemented-in-un-managed-code&quot;&gt;Implemented in un-managed code&lt;/h2&gt;

&lt;p&gt;Despite the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/String.cs&quot;&gt;String class&lt;/a&gt; being a managed C# source file, large parts of it are implemented in un-managed code, that is in C++ or even Assembly. For instance there are 15 methods in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/String.cs&quot;&gt;String.cs&lt;/a&gt; that have no method body, are marked as &lt;code class=&quot;highlighter-rouge&quot;&gt;extern&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;[MethodImplAttribute(MethodImplOptions.InternalCall)]&lt;/code&gt; applied to them. This indicates that their implementations are provided elsewhere by the runtime. Again from the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/mscorlib.md#calling-from-managed-to-native-code&quot;&gt;mscorlib section of the BOTR&lt;/a&gt; (emphasis mine)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We have two techniques for calling into the CLR from managed code. FCall allows you to call directly into the CLR code, and provides a lot of flexibility in terms of manipulating objects, though it is easy to cause GC holes by not tracking object references correctly. QCall allows you to call into the CLR via the P/Invoke, and is much harder to accidentally mis-use than FCall. &lt;strong&gt;FCalls are identified in managed code as extern methods with the MethodImplOptions.InternalCall bit set&lt;/strong&gt;. QCalls are static extern methods that look like regular P/Invokes, but to a library called “QCall”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;types-with-a-managedunmanaged-duality&quot;&gt;Types with a Managed/Unmanaged Duality&lt;/h3&gt;

&lt;p&gt;A consequence of Strings being implemented in unmanaged and managed code is that they &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/mscorlib.md#types-with-a-managedunmanaged-duality&quot;&gt;have to be defined in both&lt;/a&gt; and those definitions must be kept in sync:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Certain managed types must have a representation available in both managed &amp;amp; native code. You could ask whether the canonical definition of a type is in managed code or native code within the CLR, but the answer doesn’t matter – the key thing is they must both be identical. &lt;strong&gt;This will allow the CLR’s native code to access fields within a managed object in a very fast, easy to use manner&lt;/strong&gt;. There is a more complex way of using essentially the CLR’s equivalent of Reflection over MethodTables &amp;amp; FieldDescs to retrieve field values, but this probably doesn’t perform as well as you’d like, and it isn’t very usable. For commonly used types, it makes sense to declare a data structure in native code &amp;amp; attempt to keep the two in sync.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/19a88d8a92e08c8506f6e69c3964dc77329c108a/src/mscorlib/src/System/String.cs#L50-L56&quot;&gt;String.cs&lt;/a&gt; we can see:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//NOTE NOTE NOTE NOTE&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//These fields map directly onto the fields in an EE StringObject.  &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//See object.h for the layout.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[NonSerialized]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;m_stringLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[NonSerialized]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_firstChar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which corresponds to the following in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/19a88d8a92e08c8506f6e69c3964dc77329c108a/src/vm/object.h#L1095-L1101&quot;&gt;object.h&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;m_StringLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;WCHAR&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;m_Characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;fast-string-allocations&quot;&gt;Fast String Allocations&lt;/h2&gt;

&lt;p&gt;In a typical .NET program, one of the most common ways that you would allocate strings dynamically is either via &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;String.Format&lt;/code&gt; (which uses &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; under the hood).&lt;/p&gt;

&lt;p&gt;So you may have some code like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Some text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{0}, {1}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, when the &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ToString()&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/19a88d8a92e08c8506f6e69c3964dc77329c108a/src/mscorlib/src/System/Text/StringBuilder.cs#L336&quot;&gt;method is called&lt;/a&gt;, it internally calls the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/19a88d8a92e08c8506f6e69c3964dc77329c108a/src/mscorlib/src/System/String.cs#L1556&quot;&gt;FastAllocateString&lt;/a&gt; on the String class, which is declared like so:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;[System.Security.SecurityCritical]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// auto-generated&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[MethodImplAttribute(MethodImplOptions.InternalCall)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FastAllocateString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This method is marked as &lt;code class=&quot;highlighter-rouge&quot;&gt;extern&lt;/code&gt; and has the &lt;code class=&quot;highlighter-rouge&quot;&gt;[MethodImplAttribute(MethodImplOptions.InternalCall)]&lt;/code&gt; attribute applied and as we saw earlier this implies it will be implemented in un-managed code by the CLR. It turns out that eventually the call stack ends up in a hand-written assembly function, called &lt;strong&gt;AllocateStringFastMP_InlineGetThread&lt;/strong&gt; from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/19a88d8a92e08c8506f6e69c3964dc77329c108a/src/vm/amd64/JitHelpers_InlineGetThread.asm#L159-L204&quot;&gt;JitHelpers_InlineGetThread.asm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This also shows something else we talked about earlier. The assembly code is actually allocating the memory needed for the string, based on the required length that was passed in by the calling code.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;LEAF_ENTRY&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AllocateStringFastMP_InlineGetThread,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_TEXT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; We were passed the number of characters in ECX&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; we need to load the method table for string from the global&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r9,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g_pStringClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; Instead of doing elaborate overflow checks, we just limit the number of elements&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; to (LARGE_OBJECT_SIZE - 256)/sizeof(WCHAR) or less.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; This will avoid avoid all overflow problems, as well as making sure&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; big string objects are correctly allocated in the big object heap.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ecx,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ASM_LARGE_OBJECT_SIZE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;/2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jae&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OversizedString&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edx,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r9&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OFFSET__MethodTable__m_BaseSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; Calculate the final size to allocate.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; We need to calculate baseSize + cnt*2, &lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; then round that up by adding 7 and anding ~7.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lea&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edx,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ecx*2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edx,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-8&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PATCHABLE_INLINE_GETTHREAD&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r11,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AllocateStringFastMP_InlineGetThread__PatchTLSOffset&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r10,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r11&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OFFSET__Thread__m_alloc_context__alloc_limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r11&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OFFSET__Thread__m_alloc_context__alloc_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdx,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdx,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r10&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AllocFailed&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r11&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OFFSET__Thread__m_alloc_context__alloc_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r9&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mov&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OFFSETOF__StringObject__m_StringLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifdef&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DEBUG&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEBUG_TrialAllocSetAppDomain_NoScratchArea&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; _DEBUG&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OversizedString&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AllocFailed&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jmp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FramedAllocateString&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LEAF_END&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AllocateStringFastMP_InlineGetThread,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_TEXT&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is also a less optimised version called &lt;strong&gt;AllocateStringFastMP&lt;/strong&gt; from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/19a88d8a92e08c8506f6e69c3964dc77329c108a/src/vm/amd64/JitHelpers_Slow.asm#L274-L322&quot;&gt;JitHelpers_Slow.asm&lt;/a&gt;. The reason for the different versions is explained in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/19a88d8a92e08c8506f6e69c3964dc77329c108a/src/vm/jitinterfacegen.cpp#L31-L46&quot;&gt;jinterfacegen.cpp&lt;/a&gt; and then at run-time the decision is made as to which one to use, &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/19a88d8a92e08c8506f6e69c3964dc77329c108a/src/vm/jitinterfacegen.cpp#L234-L254&quot;&gt;depending on the state of the Thread-local storage&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// These are the fastest(?) versions of JIT helpers as they have the code to 
// GetThread patched into them that does not make a call.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXTERN_C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JIT_TrialAllocSFastMP_InlineGetThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CORINFO_CLASS_HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeHnd_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXTERN_C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JIT_BoxFastMP_InlineGetThread&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CORINFO_CLASS_HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unboxedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXTERN_C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AllocateStringFastMP_InlineGetThread&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLR_I4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXTERN_C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JIT_NewArr1OBJ_MP_InlineGetThread&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CORINFO_CLASS_HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrayTypeHnd_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT_PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXTERN_C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JIT_NewArr1VC_MP_InlineGetThread&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CORINFO_CLASS_HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrayTypeHnd_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT_PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// This next set is the fast version that invoke GetThread but is still faster 
// than the VM implementation (i.e. the &quot;slow&quot; versions).
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXTERN_C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JIT_TrialAllocSFastMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CORINFO_CLASS_HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeHnd_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXTERN_C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JIT_TrialAllocSFastSP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CORINFO_CLASS_HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeHnd_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXTERN_C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JIT_BoxFastMP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CORINFO_CLASS_HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unboxedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXTERN_C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JIT_BoxFastUP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CORINFO_CLASS_HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unboxedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXTERN_C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AllocateStringFastMP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLR_I4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXTERN_C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AllocateStringFastUP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLR_I4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;optimised-string-length&quot;&gt;Optimised String Length&lt;/h2&gt;

&lt;p&gt;The final example of the “special relationship” is shown by how the string &lt;code class=&quot;highlighter-rouge&quot;&gt;Length&lt;/code&gt; property is optimised by the run-time. Finding the length of a string is a very common operation and because .NET &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/362314fe.aspx&quot;&gt;strings are immutable&lt;/a&gt; should also be very quick, because the value can be calculated once and then cached.&lt;/p&gt;

&lt;p&gt;As we can see in the comment from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/19a88d8a92e08c8506f6e69c3964dc77329c108a/src/mscorlib/src/System/String.cs#L963-L975&quot;&gt;String.cs&lt;/a&gt;, the CLR ensures that this is true by implementing it in such a way that the JIT can optimise for it:&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Gets the length of this string&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// This is a EE implemented function so that the JIT can recognise is specially&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// and eliminate checks on character fetches in a loop like:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;///        for(int i = 0; i &amp;lt; str.Length; i++) str[i]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// The actually code generated for this will be one instruction and will be inlined.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Spec#: Add postcondition in a contract assembly.  Potential perf problem.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Security&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SecuritySafeCritical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// auto-generated&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MethodImplAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodImplOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InternalCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code is implemented in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/19a88d8a92e08c8506f6e69c3964dc77329c108a/src/classlibnative/bcltype/stringnative.cpp#L492-L504&quot;&gt;stringnative.cpp&lt;/a&gt;, which in turn calls &lt;code class=&quot;highlighter-rouge&quot;&gt;GetStringLength&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;FCIMPL1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INT32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COMString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FCALL_CONTRACT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;FC_GC_POLL_NOT_NEEDED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;FCThrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kNullReferenceException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;FCUnique&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetStringLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FCIMPLEND&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which is a &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/19a88d8a92e08c8506f6e69c3964dc77329c108a/src/vm/object.h#L1113&quot;&gt;simple method call&lt;/a&gt; that the JIT can inline:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt;   &lt;span class=&quot;nf&quot;&gt;GetStringLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LIMITED_METHOD_DAC_CONTRACT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_StringLength&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;why-have-a-special-relationship&quot;&gt;Why have a special relationship?&lt;/h2&gt;

&lt;p&gt;In one word &lt;strong&gt;performance&lt;/strong&gt;, strings are widely used in .NET programs and therefore need to be as optimised, space efficient and cache-friendly as possible. That’s why the CLR developers have gone to great lengths to make this happen, including implementing methods in assembly and ensuring that the JIT can optimise code as much as possible.&lt;/p&gt;

&lt;p&gt;Interestingly enough one of the .NET developers recently made a comment about this on a &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/4703#issuecomment-216071622&quot;&gt;GitHub issue&lt;/a&gt;, in response to a query asking why more string functions weren’t implemented in managed code they said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We have looked into this in the past and moved everything that could be moved without significant perf loss. Moving more depends on having pretty good managed optimizations for all coreclr architectures.
This makes sense to consider only once RyuJIT or better codegen is available for all architectures that coreclr runs on (x86, x64, arm, arm64).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;Discuss this post on &lt;a href=&quot;https://news.ycombinator.com/item?id=11811061&quot;&gt;Hacker News&lt;/a&gt; or &lt;a href=&quot;https://www.reddit.com/r/programming/comments/4ly6uy/strings_and_the_clr_a_special_relationship/&quot;&gt;/r/programming&lt;/a&gt;&lt;/p&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/&quot;&gt;Strings and the CLR - a Special Relationship&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='Internals' scheme='http://www.mattwarren.org/tags#Internals'/>
   
 </entry>
 
 <entry>
   <title>Adventures in Benchmarking - Performance Golf</title>
   <link href="http://www.mattwarren.org/2016/05/16/adventures-in-benchmarking-performance-golf/"/>
   <updated>2016-05-16T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/05/16/adventures-in-benchmarking-performance-golf</id>
   <content type="html">
     &lt;p&gt;Recently &lt;a href=&quot;http://nickcraver.com&quot;&gt;Nick Craver&lt;/a&gt; one of the developers at Stack Overflow has been &lt;a href=&quot;https://twitter.com/hashtag/StackCode?src=hash&quot;&gt;tweeting snippets of code&lt;/a&gt; from their source, the other week the following code was posted:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;A daily screenshot from the Stack Overflow codebase (checking strings for tokens without allocations). &lt;a href=&quot;https://twitter.com/hashtag/StackCode?src=hash&quot;&gt;#StackCode&lt;/a&gt; &lt;a href=&quot;https://t.co/sDPqviHgD0&quot;&gt;pic.twitter.com/sDPqviHgD0&lt;/a&gt;&lt;/p&gt;&amp;mdash; Nick Craver (@Nick_Craver) &lt;a href=&quot;https://twitter.com/Nick_Craver/status/722741298575319040&quot;&gt;April 20, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;This code is an optimised version of what you would normally write, specifically written to ensure that is doesn’t allocate memory. Previously Stack Overflow have encountered issues with &lt;a href=&quot;http://blog.marcgravell.com/2011/10/assault-by-gc.html&quot;&gt;large pauses caused by the .NET GC&lt;/a&gt;, so it appears that where appropriate, they make a concerted effort to write code that doesn’t needlessly allocate.&lt;/p&gt;

&lt;p&gt;I also have to give Nick credit for making me aware of the term &lt;a href=&quot;https://twitter.com/Nick_Craver/status/722795460302385153&quot;&gt;“Performance Golf”&lt;/a&gt;, I’ve heard of &lt;a href=&quot;http://stackoverflow.com/questions/tagged/code-golf&quot;&gt;Code Golf&lt;/a&gt;, but not the Performance version.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt; If you want to see the full discussion and the code for all the different entries, take a look at &lt;a href=&quot;https://gist.github.com/mattwarren/f0594a9f3afa9377a4bbc2bcf8e573c5&quot;&gt;this gist&lt;/a&gt;. Also for a really in-depth explanation of what the fastest version is actually doing, I really recommend checking out &lt;a href=&quot;https://twitter.com/kevinmontrose&quot;&gt;Kevin Montrose’s&lt;/a&gt; blog post &lt;a href=&quot;https://kevinmontrose.com/2016/04/26/an-optimization-exercise/&quot;&gt;“An Optimisation Exercise”&lt;/a&gt;, there’s some very cool tricks in there, although by this point he is basically writing C/C++ code rather than anything you would recognise as C#!&lt;/p&gt;

&lt;h2 id=&quot;good-benchmarking-tools&quot;&gt;Good Benchmarking Tools&lt;/h2&gt;

&lt;p&gt;In this post I’m not going to concentrate too much on this particular benchmark, but instead I’m going to use it as an example of what I believe a good benchmarking library should provide for you. Full disclaimer, I’m one of the authors of &lt;a href=&quot;https://github.com/PerfDotNet/BenchmarkDotNet#team&quot;&gt;BenchmarkDotNet&lt;/a&gt;, so I admit I might be biased!&lt;/p&gt;

&lt;p&gt;I think that a good benchmarking tool should offer the following features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#benchmark-scaffolding&quot;&gt;Benchmark Scaffolding&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#diagnose-what-is-going-on&quot;&gt;Diagnose what is going on&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#consistent-reliable-and-clear-results&quot;&gt;Consistent, Reliable and Clear Results&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;benchmark-scaffolding&quot;&gt;Benchmark Scaffolding&lt;/h3&gt;

&lt;p&gt;By using &lt;a href=&quot;https://www.nuget.org/packages/BenchmarkDotNet/&quot;&gt;BenchmarkDotNet&lt;/a&gt;, or indeed any benchmarking tool, you can just get on with the business of actually writing the benchmark and not worry about any of the mechanics of accurately measuring the code. This is important because often when someone has posted an optimisation and accompanying benchmark on Stack Overflow, several of the comments then point out why their measurements are inaccurate or plain wrong.&lt;/p&gt;

&lt;p&gt;In the case of BenchmarkDotNet, it’s as simple as adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;[Benchmark]&lt;/code&gt; attribute to the methods that you want to benchmark and then a few lines of code to launch the run:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;[Benchmark(Baseline = true)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StringSplit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delimeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BenchmarkRunner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It also offers a few more tools for advanced scenarios, for instance you can decorate a field/property with the &lt;code class=&quot;highlighter-rouge&quot;&gt;[Params]&lt;/code&gt; attribute like so:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Foo;Bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s&quot;&gt;&quot;Foo;FooBar;Whatever&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s&quot;&gt;&quot;Bar;blaat;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s&quot;&gt;&quot;blaat;foo;Bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s&quot;&gt;&quot;foo;Bar;Blaat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s&quot;&gt;&quot;foo;FooBar;Blaat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s&quot;&gt;&quot;Bar1;Bar2;Bar3;Bar4;Bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s&quot;&gt;&quot;Bar1;Bar2;Bar3;Bar4;NoMatch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s&quot;&gt;&quot;Foo;FooBar;Whatever&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s&quot;&gt;&quot;Some;Other;Really;Interesting;Tokens&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;     
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then each benchmark will be run multiples times, with &lt;code class=&quot;highlighter-rouge&quot;&gt;Value&lt;/code&gt; set to the different strings. This gives you a really easy way of trying out benchmarks across different inputs. For instance some methods were consistently fast, whereas other performed badly on inputs that were a worse-case scenario for them.&lt;/p&gt;

&lt;h3 id=&quot;diagnose-what-is-going-on&quot;&gt;Diagnose what is going on&lt;/h3&gt;

&lt;p&gt;If you state that the aim of optimising you code is to “check a string for tokens, &lt;strong&gt;without&lt;/strong&gt; allocations”, you would really like to be able to prove if that is true or not. I’ve previously written about how BenchmarkDotNet can &lt;a href=&quot;/2016/02/17/adventures-in-benchmarking-memory-allocations/&quot;&gt;give you this information&lt;/a&gt; and in this case we get the following results (click for full-size image):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/05/Results showing memory allocations.png&quot;&gt;&lt;img src=&quot;/images/2016/05/Results showing memory allocations.png&quot; alt=&quot;Results showing memory allocations&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So you can see that the &lt;code class=&quot;highlighter-rouge&quot;&gt;ContainTokenFransBouma&lt;/code&gt; benchmark isn’t allocation free, which in the scenario is a problem.&lt;/p&gt;

&lt;h3 id=&quot;consistent-reliable-and-clear-results&quot;&gt;Consistent, Reliable and Clear Results&lt;/h3&gt;

&lt;p&gt;Another important aspect is that you should be able to rely on the results. Part of this is trusting the tool and hopefully people will come to &lt;a href=&quot;https://github.com/PerfDotNet/BenchmarkDotNet/wiki/People-using-BenchmarkDotNet&quot;&gt;trust BenchmarkDotNet over time&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also you should be able to get clear results, so in as well as providing a text-based result table that you can easily paste into a GitHub issue or Stack Overflow answer, BenchmarkDotNet will provide several graphs using the &lt;a href=&quot;https://www.r-project.org/&quot;&gt;R statistics and graphing  library&lt;/a&gt;. Sometimes a wall of text isn’t the easiest thing to interpret, but colourful graphs can help (click for full image).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/05/Graph of different benchmarks - with varying inputs - large.png&quot;&gt;&lt;img src=&quot;/images/2016/05/Graph of different benchmarks - with varying inputs.png&quot; alt=&quot;Graph of different benchmarks - with varying inputs&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we can see that the original &lt;code class=&quot;highlighter-rouge&quot;&gt;ContainsToken&lt;/code&gt; code is “slower” in some scenarios (although it’s worth pointing out that the Y-axis is in nanoseconds).&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Would I recommend writing code like any of these optimisations for normal day-to-day scenarios? No.&lt;/p&gt;

&lt;p&gt;Without exception the optimised versions of the code are less readable, harder to debug and probably contain more errors. Certainly, by the time you get to the &lt;a href=&quot;https://gist.github.com/mattwarren/f0594a9f3afa9377a4bbc2bcf8e573c5#file-containstokenbenchmark-cs-L201-L363&quot;&gt;fastest version&lt;/a&gt; you are no longer writing recognisable C# code, it’s basically C++/C masquerading as C#.&lt;/p&gt;

&lt;p&gt;However, for the purposes of learning, a bit of fun or just because you like a spot of competition, then it’s fine. Just make sure you use a decent tool that lets you get on with the fun part of writing the most optimised code possible!&lt;/p&gt;


     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2016/05/16/adventures-in-benchmarking-performance-golf/&quot;&gt;Adventures in Benchmarking - Performance Golf&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='Adventures in Benchmarking' scheme='http://www.mattwarren.org/tags#Adventures in Benchmarking'/>
   
     <category term='Benchmarking' scheme='http://www.mattwarren.org/tags#Benchmarking'/>
   
     <category term='Performance' scheme='http://www.mattwarren.org/tags#Performance'/>
   
     <category term='Optimisations' scheme='http://www.mattwarren.org/tags#Optimisations'/>
   
 </entry>
 
 <entry>
   <title>Coz: Finding Code that Counts with Causal Profiling - An Introduction</title>
   <link href="http://www.mattwarren.org/2016/03/30/Coz-Finding-Code-that-Counts-with-Causal-Profiling/"/>
   <updated>2016-03-30T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/03/30/Coz-Finding-Code-that-Counts-with-Causal-Profiling</id>
   <content type="html">
     &lt;p&gt;A while ago I came across an interesting and very readable paper titled &lt;a href=&quot;http://sigops.org/sosp/sosp15/current/2015-Monterey/printable/090-curtsinger.pdf&quot;&gt;“COZ Finding Code that Counts with Causal Profiling”&lt;/a&gt; that was presented at &lt;a href=&quot;http://www.ssrc.ucsc.edu/sosp15/&quot;&gt;SOSP 2015&lt;/a&gt; (and was recipient of a Best Paper Award). This post is my attempt to provide an introduction to &lt;em&gt;Causal Profiling&lt;/em&gt; for anyone who doesn’t want to go through the entire paper.&lt;/p&gt;

&lt;h2 id=&quot;what-is-causal-profiling&quot;&gt;What is “Causal Profiling”&lt;/h2&gt;

&lt;p&gt;Here’s the explanation from the paper itself:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unlike past profiling approaches, causal profiling indicates exactly where programmers should focus their optimization efforts, and quantifies their potential impact. Causal profiling works by running &lt;em&gt;performance experiments&lt;/em&gt; during program execution.
Each experiment calculates the impact of any potential optimization by &lt;em&gt;virtually  speeding&lt;/em&gt; up code: inserting pauses that slow down all other code running concurrently. The key insight is that this slowdown has the same &lt;em&gt;relative&lt;/em&gt; effect as running that line faster, thus “virtually” speeding it up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or if you prefer, below is an image from the paper explaining what it does (click to enlarge)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/03/Coz - virtual speedup explanation - large.png&quot;&gt;&lt;img src=&quot;/images/2016/03/Coz - virtual speedup explanation.png&quot; alt=&quot;Virtual speedup explanation&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The key part is that it tries to find the &lt;strong&gt;effect&lt;/strong&gt; of speeding up a given block of code on the &lt;strong&gt;overall&lt;/strong&gt; running time of the program. But being able to speed up arbitrary pieces of code is very hard and if the authors could do that, then then would be better off making lots of money selling code optimisation tools. So instead of &lt;strong&gt;speeding up&lt;/strong&gt; a given piece of code, they &lt;strong&gt;artificially slow-down&lt;/strong&gt; all the other code that is running at the same time, which has exactly the same &lt;strong&gt;relative&lt;/strong&gt; effect.&lt;/p&gt;

&lt;p&gt;In the diagram above Coz is trying to determine the effect that optimising the code in block &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; would have on the overall runtime. Instead of making &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; run quicker, as shown in part (b), they instead make &lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt; run slower by inserting pauses, see part (c). Then Coz is able to infer that the speed-up seen in (c) will have the same relative effect if &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; was to run faster, therefore the “Actual Speedup” as shown in (b) is possible.&lt;/p&gt;

&lt;p&gt;Unfortunately Coz doesn’t tell you how to speed up your code, that’s left up to you, but it does tell you which parts of the code you should focus on to get the best overall improvements. Or another way of saying it is, Coz tells you:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;If you speed up a given block of code by this much, the program will run this much faster&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;existing-profilers&quot;&gt;Existing profilers&lt;/h2&gt;

&lt;p&gt;In the paper, the authors argue that existing profilers only tell you about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Frequently executed code (# of calls)&lt;/li&gt;
  &lt;li&gt;Code that runs for a long time (% of total time)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What they don’t help you with is finding important code in parallel programs and this is the problem that Coz solves. The (contrived) example they give is:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ˜6.7 seconds
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ˜6.4 seconds
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1900000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Spawn both threads and wait for them.
&lt;/span&gt;    &lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which they state is a:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;.. simple multi-threaded program that illustrates the shortcomings of existing profilers. Optimizing f&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; will improve performance by no more than 4.5%, while optimizing f&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; would have no effect on performance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As shown in the comparison below (click for larger version), a regular profiler shows that f&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and f&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; both comprise similar fractions of the total runtime (55.20% and 45.19% respectively). However by using a Causal Profiler, it predicts that optimising line 2 from f&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; will increase the overall runtime by 4-6%, whereas optimising f&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; will only increase it by &amp;lt; 2%.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/03/Profiling - Conventional  v Causal - large.png&quot;&gt;&lt;img src=&quot;/images/2016/03/Profiling - Conventional  v Causal.png&quot; alt=&quot;Profiling - Conventional  v Causal&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;p&gt;However their research was not only done on contrived programs, they also looked at several real-world projects including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://parsec.cs.princeton.edu/overview.htm&quot;&gt;PARSEC benchmark suite&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;dedup - Next-generation compression with data deduplication&lt;/li&gt;
      &lt;li&gt;ferred - Content similarity search server&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Results taken from a &lt;a href=&quot;http://www.cs.grinnell.edu/~curtsinger/files/coz_slides.pdf&quot;&gt;presentation by Charlie Curtsinger&lt;/a&gt; (one of the authors of Coz) show that there are several situations where Coz identifies an area for optimisation that a conventional profiler would miss. For instance they identified a function in SQLite that when optimised provided a 25% speed-up, however very little time was actually spent in the function, only 0.15%, so it would not have shown up in the output from a conventional profiler.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Project&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;strong&gt;Speedup with Coz&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;strong&gt;% Runtime reported via a Profiler&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;SQLite&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;25%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.15%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;dedup&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14.38%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ferred&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;21%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.00%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can explore these results in the &lt;a href=&quot;http://plasma-umass.github.io/coz/&quot;&gt;interactive viewer&lt;/a&gt; that has been developed alongside the tool. For instance the image below shows the lines on code in the SQLite source base that Coz identifies as having the maximum impact, positive or negative (click for full-size version):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2016/03/SQLite - lines of code with max impact.png&quot;&gt;&lt;img src=&quot;/images/2016/03/SQLite - lines of code with max impact.png&quot; alt=&quot;SQLite - lines of code with max impact&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;It’s worth pointing out that Coz is currently a &lt;em&gt;prototype&lt;/em&gt; causal profiler, that at the moment only runs on Linux, but doesn’t require you to modify your executable. However the ideas presented in the paper could be ported to other OSes, programming languages or runtimes. For instance work has already begun on a &lt;a href=&quot;https://morsmachine.dk/causalprof&quot;&gt;Go version&lt;/a&gt; that only required a &lt;a href=&quot;https://github.com/golang/go/compare/master...DanielMorsing:causalprof&quot;&gt;few modifications to the runtime&lt;/a&gt; to get a prototype up and running.&lt;/p&gt;

&lt;p&gt;It would be great to see something like this for .NET, any takers?&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;further-information&quot;&gt;Further Information&lt;/h2&gt;

&lt;p&gt;If you want to find out any more information about Coz, here is a list of useful links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Coz paper &lt;a href=&quot;http://sigops.org/sosp/sosp15/current/2015-Monterey/printable/090-curtsinger.pdf&quot;&gt;“Finding Code that Counts with Causal Profiling”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.acolyer.org/2015/10/14/coz-finding-code-that-counts-with-causal-profling/&quot;&gt;Comprehensive (and more in-depth) write-up&lt;/a&gt; on the paper from “the morning paper” blog&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/plasma-umass/coz&quot;&gt;Coz GitHub repository&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/plasma-umass/coz#using-coz&quot;&gt;Getting started with Coz&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/plasma-umass/coz#profiling-modes&quot;&gt;Coz profiling modes&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Presentation by &lt;a href=&quot;http://www.cs.grinnell.edu/~curtsinger/research/&quot;&gt;Charlie Curtsinger&lt;/a&gt; (one of the authors of Coz)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=jE0V-p1odPg&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.cs.grinnell.edu/~curtsinger/files/coz_slides.pdf&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://morsmachine.dk/causalprof&quot;&gt;Causal Profiling for Go&lt;/a&gt; is an attempt to implement Coz within the Go runtime&lt;/li&gt;
&lt;/ul&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2016/03/30/Coz-Finding-Code-that-Counts-with-Causal-Profiling/&quot;&gt;Coz: Finding Code that Counts with Causal Profiling - An Introduction&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='Profiling' scheme='http://www.mattwarren.org/tags#Profiling'/>
   
     <category term='Research' scheme='http://www.mattwarren.org/tags#Research'/>
   
 </entry>
 
 <entry>
   <title>Adventures in Benchmarking - Method Inlining</title>
   <link href="http://www.mattwarren.org/2016/03/09/adventures-in-benchmarking-method-inlining/"/>
   <updated>2016-03-09T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/03/09/adventures-in-benchmarking-method-inlining</id>
   <content type="html">
     &lt;p&gt;In a &lt;a href=&quot;/2016/02/17/adventures-in-benchmarking-memory-allocations/&quot;&gt;previous post&lt;/a&gt; I looked at how you can use &lt;a href=&quot;https://github.com/PerfDotNet/BenchmarkDotNet/&quot;&gt;BenchmarkDotNet&lt;/a&gt; to help diagnose &lt;em&gt;why&lt;/em&gt; one benchmark is running slower than another. The post outlined how ETW Events are used to give you an accurate measurement of the &lt;em&gt;# of Bytes allocated&lt;/em&gt; and the &lt;em&gt;# of GC Collections&lt;/em&gt; per benchmark.&lt;/p&gt;

&lt;h3 id=&quot;inlining&quot;&gt;Inlining&lt;/h3&gt;

&lt;p&gt;In addition to memory allocation, BenchmarkDotNet can also give you information about which methods were inlined by the JITter. &lt;a href=&quot;http://en.wikipedia.org/wiki/Inline_expansion&quot;&gt;Inlining&lt;/a&gt; is the process by which code is copied from one function (the &lt;em&gt;inlinee&lt;/em&gt;) directly into the body of another function (the &lt;em&gt;inliner&lt;/em&gt;). The reason for this is to save the overhead of a method call and the associated work that needs to be done when control is passed from one method to another.&lt;/p&gt;

&lt;p&gt;To see this in action we are going to run the following benchmark:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;[Benchmark]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Calc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WithoutStarg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0x11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WithStarg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0x12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WithoutStarg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WithStarg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;BenchmarkDotNet also gives you the ability to run Benchmarks against different versions of the .NET JITter and on various CPU Platforms. So in this test will will ask it to run against the following configurations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Legacy JIT - x86&lt;/li&gt;
  &lt;li&gt;Legacy JIT - x64&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once this is all set-up, we can run the benchmark and we get the following results:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/03/Method Inlining - Benchmark Results.png&quot; alt=&quot;Method Inlining - Benchmark Results&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The interesting thing to note is that &lt;code class=&quot;highlighter-rouge&quot;&gt;Legacy JIT - x64&lt;/code&gt; runs significantly faster than than the &lt;code class=&quot;highlighter-rouge&quot;&gt;x86&lt;/code&gt; version, even though they are both running the same C# code (from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Calc()&lt;/code&gt; function above).&lt;/p&gt;

&lt;p&gt;So now we are going to ask BenchmarkDotNet to give us the JIT inlining diagnostics. These diagnostics are available &lt;a href=&quot;https://msdn.microsoft.com/library/ff356158(v=vs.100).aspx&quot;&gt;via ETW Events&lt;/a&gt; and are collected, parsed and displayed at the end of the output, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/03/Method Inlining - Explanation.png&quot; alt=&quot;Method Inlining - Explanation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we can that when the &lt;code class=&quot;highlighter-rouge&quot;&gt;x64&lt;/code&gt; JITter runs the &lt;code class=&quot;highlighter-rouge&quot;&gt;WithStarg()&lt;/code&gt; function is successfully inlined into the &lt;code class=&quot;highlighter-rouge&quot;&gt;Calc()&lt;/code&gt; function, whereas with &lt;code class=&quot;highlighter-rouge&quot;&gt;x86&lt;/code&gt; version it is not. So the same code is being executed, but because the &lt;code class=&quot;highlighter-rouge&quot;&gt;WithStarg()&lt;/code&gt; function is relatively simple, when it is not inlined the cost of the method call dominates and causes the &lt;code class=&quot;highlighter-rouge&quot;&gt;Calc()&lt;/code&gt; function to take more time. For a comparison the &lt;code class=&quot;highlighter-rouge&quot;&gt;WithoutStarg()&lt;/code&gt; function is always inlined, because it doesn’t do anything with the &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; that is passed into it.&lt;/p&gt;

&lt;p&gt;For a full-explanation of why there is a difference in behaviour between the 2 version of the JITter, I recommend reading &lt;a href=&quot;http://aakinshin.net/en/blog/dotnet/inlining-and-starg/&quot;&gt;Andrey Akinhin’s blog post on the subject&lt;/a&gt;. But in summary the &lt;code class=&quot;highlighter-rouge&quot;&gt;x64&lt;/code&gt; version is more efficient and it’s a bug/regression that the &lt;code class=&quot;highlighter-rouge&quot;&gt;x86&lt;/code&gt; version doesn’t have the same behaviour.&lt;/p&gt;

&lt;h2 id=&quot;net-jit-inlining-rules&quot;&gt;.NET JIT inlining rules&lt;/h2&gt;

&lt;p&gt;In this case the specific reason that the &lt;code class=&quot;highlighter-rouge&quot;&gt;Legacy JIT - x86&lt;/code&gt; gives for not inlining the &lt;code class=&quot;highlighter-rouge&quot;&gt;WithStarg()&lt;/code&gt; method is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Fail Reason: Inlinee writes to an argument.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For reference, there is a comprehensive list of &lt;a href=&quot;https://blogs.msdn.microsoft.com/clrcodegeneration/2009/10/21/jit-etw-inlining-event-fail-reasons/&quot;&gt;JIT ETW Inlining Event Fail Reasons&lt;/a&gt; available on MSDN, although interestingly enough it doesn’t include this reason!&lt;/p&gt;

&lt;p&gt;However, inlining isn’t always a win-win scenario. Because you are copying the same code to 2 locations, it can bloat the amount of memory that your programs needs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; A more recent list of justifications that the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/jit/inline.def&quot;&gt;.NET JITter provides for not inlining a method&lt;/a&gt; is available, thanks to &lt;a href=&quot;https://github.com/AndyAyersMS&quot;&gt;Andy Ayers&lt;/a&gt; from Microsoft for pointing it out to me.&lt;/p&gt;

&lt;p&gt;So there are some rules that the .NET JITter follows &lt;a href=&quot;https://blogs.msdn.microsoft.com/davidnotario/2004/11/01/jit-optimizations-inlining-ii/&quot;&gt;when deciding whether or not to inline a method&lt;/a&gt; (Note this list is from 2004, so the rules may well have changed since then)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;These are some of the reasons for which we won’t inline a method:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Method is marked as not inline&lt;/strong&gt; with the CompilerServices.MethodImpl attribute.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Size of inlinee is limited to 32 bytes of IL&lt;/strong&gt;: This is a heuristic, the rationale behind it is that usually, when you have methods bigger than that, the overhead of the call will not be as significative compared to the work the method does. Of course, as a heuristic, it fails in some situations. There have been suggestions for us adding an attribute to control these threshold. For Whidbey, that attribute has not been added (it has some very bad properties: it’s x86 JIT specific and it’s longterm value, as compilers get smarter, is dubious).&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Virtual calls&lt;/strong&gt;: We don’t inline across virtual calls. The reason for not doing this is that we don’t know the final target of the call. We could potentially do better here (for example, if 99% of calls end up in the same target, you can generate code that does a check on the method table of the object the virtual call is going to execute on, if it’s not the 99% case, you do a call, else you just execute the inlined code), but unlike the J language, most of the calls in the primary languages we support, are not virtual, so we’re not forced to be so aggressive about optimizing this case.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Valuetypes&lt;/strong&gt;: We have several limitations regarding value types an inlining. We take the blame here, this is a limitation of our JIT, we could do better and we know it. Unfortunately, when stack ranked against other features of Whidbey, getting some statistics on how frequently methods cannot be inlined due to this reason and considering the cost of making this area of the JIT significantly better, we decided that it made more sense for our customers to spend our time working in other optimizations or CLR features. Whidbey is better than previous versions in one case: value types that only have a pointer size int as a member, this was (relatively) not expensive to make better, and helped a lot in common value types such as pointer wrappers (IntPtr, etc).&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;MarshalByRef&lt;/strong&gt;: Call targets that are in MarshalByRef classes won’t be inlined (call has to be intercepted and dispatched). We’ve got better in Whidbey for this scenario&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;VM restrictions&lt;/strong&gt;: These are mostly security, the JIT must ask the VM for permission to inline a method (see CEEInfo::canInline in Rotor source to get an idea of what kind of things the VM checks for).&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Complicated flowgraph&lt;/strong&gt;: We don’t inline loops, methods with exception handling regions, etc…&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;If basic block that has the call is &lt;strong&gt;deemed as it won’t execute frequently&lt;/strong&gt; (for example, a basic block that has a throw, or a static class constructor), inlining is much less aggressive (as the only real win we can make is code size)&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Other&lt;/strong&gt;: Exotic IL instructions, security checks that need a method frame, etc…&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;So we can see that BenchmarkDotNet will display multiple pieces of information that allow you to diagnosing why your benchmarks take the time they do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Amount of Bytes allocated per Benchmark&lt;/li&gt;
  &lt;li&gt;Number of GC Collections triggered (Gen 0/1/2)&lt;/li&gt;
  &lt;li&gt;Whether a method was inlined or not&lt;/li&gt;
&lt;/ol&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2016/03/09/adventures-in-benchmarking-method-inlining/&quot;&gt;Adventures in Benchmarking - Method Inlining&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='Adventures in Benchmarking' scheme='http://www.mattwarren.org/tags#Adventures in Benchmarking'/>
   
     <category term='Benchmarking' scheme='http://www.mattwarren.org/tags#Benchmarking'/>
   
     <category term='Garbage Collectors' scheme='http://www.mattwarren.org/tags#Garbage Collectors'/>
   
     <category term='ETW' scheme='http://www.mattwarren.org/tags#ETW'/>
   
 </entry>
 
 <entry>
   <title>Adventures in Benchmarking - Memory Allocations</title>
   <link href="http://www.mattwarren.org/2016/02/17/adventures-in-benchmarking-memory-allocations/"/>
   <updated>2016-02-17T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/02/17/adventures-in-benchmarking-memory-allocations</id>
   <content type="html">
     &lt;p&gt;For a while now I’ve been involved in the Open Source &lt;a href=&quot;https://github.com/PerfDotNet/BenchmarkDotNet&quot;&gt;BenchmarkDotNet&lt;/a&gt; library along with &lt;a href=&quot;https://github.com/AndreyAkinshin&quot;&gt;Andrey Akinshin&lt;/a&gt; the project owner. Our goal has been to produce a .NET Benchmarking library that is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Accurate&lt;/li&gt;
  &lt;li&gt;Easy-to-use&lt;/li&gt;
  &lt;li&gt;Helpful&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First and foremost we do everything we can to ensure that BenchmarkDotNet gives you accurate measurements, everything else is just &lt;a href=&quot;http://www.brainyquote.com/quotes/quotes/p/paulwalker185136.html&quot;&gt;“sprinkles on the sundae”&lt;/a&gt;. That is, without accurate measurements, a benchmarking library is pretty useless, especially one that displays results in nanoseconds.&lt;/p&gt;

&lt;p&gt;But once point 1) &lt;a href=&quot;https://github.com/PerfDotNet/BenchmarkDotNet#how-it-works&quot;&gt;has been dealt with&lt;/a&gt;, 2) it a bit more subjective. Using BenchmarkDotNet involves little more than adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;[Benchmark]&lt;/code&gt; attribute to your method and then running it as per the &lt;a href=&quot;https://github.com/PerfDotNet/BenchmarkDotNet#getting-started&quot;&gt;Step-by-step guide&lt;/a&gt; in the GitHub README. I’ll let you decide if that is &lt;em&gt;easy-to-use&lt;/em&gt; or not, but again it’s something we strive for. Once you’re done with the “Getting Started” guide, there is also a complete set of &lt;a href=&quot;https://github.com/PerfDotNet/BenchmarkDotNet/tree/master/BenchmarkDotNet.Samples/Intro&quot;&gt;Tutorial Benchmarks&lt;/a&gt; available, as well as some more &lt;a href=&quot;https://github.com/PerfDotNet/BenchmarkDotNet/tree/master/BenchmarkDotNet.Samples&quot;&gt;real-word examples&lt;/a&gt; for you to take a look at.&lt;/p&gt;

&lt;h2 id=&quot;being-helpful&quot;&gt;Being “Helpful”&lt;/h2&gt;

&lt;p&gt;But this post isn’t going to be a general BenchmarkDotNet tutorial, instead I’m going to focus on some of the specific tools that it gives you to diagnose what is going on in a benchmark, or to put it another way, to help you answer the question “Why is Benchmark A slower than Benchmark B?”&lt;/p&gt;

&lt;h3 id=&quot;string-concat-vs-stringbuilder&quot;&gt;String Concat vs StringBuilder&lt;/h3&gt;

&lt;p&gt;Let’s start with a simple benchmark:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Framework_StringConcatVsStringBuilder&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Loops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Benchmark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StringConcat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Loops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Benchmark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Loops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note: In case it’s not obvious the &lt;code class=&quot;highlighter-rouge&quot;&gt;[Params(..)]&lt;/code&gt; attribute lets you run the same benchmark for a set of different input values. In this case the &lt;code class=&quot;highlighter-rouge&quot;&gt;Loops&lt;/code&gt; field is set to each of the values in turn, i.e.  &lt;code class=&quot;highlighter-rouge&quot;&gt;1, 2, 3, 4, 5, 10, 15, 20&lt;/code&gt;, before another instance of the benchmark is run.&lt;/p&gt;

&lt;p&gt;If you’ve been programming in C# for long enough, you’ll have no doubt have been given the guidance &lt;a href=&quot;http://www.yoda.arachsys.com/csharp/stringbuilder.html&quot;&gt;“use StringBuilder to concatenate strings”&lt;/a&gt;, but what is the actual difference?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/02/Framework_StringConcatVsStringBuilder - Basic Results.png&quot; alt=&quot;StringConcat Vs StringBuilder - Basic Results&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well in terms of time taken there &lt;em&gt;is&lt;/em&gt; a difference, but even with &lt;code class=&quot;highlighter-rouge&quot;&gt;20&lt;/code&gt; loops it’s not huge, we are talking about roughly &lt;code class=&quot;highlighter-rouge&quot;&gt;500 ns&lt;/code&gt;, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0005 ms&lt;/code&gt;, so you would have to be doing it &lt;em&gt;alot&lt;/em&gt; to notice a slow-down.&lt;/p&gt;

&lt;p&gt;However, this time lets see what the results would look like if we have the BenchmarkDotNet “Garbage Collection” (GC) Diagnostics enabled:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/02/Framework_StringConcatVsStringBuilder - GC Results - cutdown.png&quot; alt=&quot;StringConcat Vs StringBuilder - Results with GC Diagnostic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we can clearly see a difference between the benchmarks. Once we get beyond 10 loops, the &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; benchmark is way more efficient compared to &lt;code class=&quot;highlighter-rouge&quot;&gt;StringConcat&lt;/code&gt;. It causes way less “Generation 0” collections and allocates roughly 50% less bytes for each &lt;code class=&quot;highlighter-rouge&quot;&gt;Operation&lt;/code&gt;, i.e. each invocation of the benchmark method.&lt;/p&gt;

&lt;p&gt;It’s worth noting that &lt;strong&gt;in this case&lt;/strong&gt;, 10 loops is the break-even point. Before that point &lt;code class=&quot;highlighter-rouge&quot;&gt;StringConcat&lt;/code&gt; is marginally faster and allocates less memory, but after that point &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; is more efficient. The reason is that there is a memory overhead for the &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; class itself, which dominates the cost when you are only appending a few short strings (as we are in this particular benchmark). Interesting enough the .NET Runtime developers noticed this overhead and so &lt;a href=&quot;http://referencesource.microsoft.com/#mscorlib/system/text/stringbuildercache.cs,a6dbe82674916ac0&quot;&gt;introduced a StringBuilder Cache&lt;/a&gt;, to enable re-use of existing instances, rather than allocating a new one every time.&lt;/p&gt;

&lt;h3 id=&quot;dictionary-vs-idictionary&quot;&gt;Dictionary vs IDictionary&lt;/h3&gt;

&lt;p&gt;But what about a less well-known example. Imagine after some re-factoring you noticed that your application was triggering a lot more Gen 0/1/2 collections (you do monitor this in your live systems right?) After looking at the recent code commits and carrying out some profiling you narrow the problem down to a refactoring that changed a variable declaration from &lt;code class=&quot;highlighter-rouge&quot;&gt;Dictionary&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;IDictionary&lt;/code&gt;, i.e. exactly the type of refactoring that this &lt;a href=&quot;http://stackoverflow.com/questions/1595498/a-difference-in-style-idictionary-vs-dictionary&quot;&gt;Stack Overflow question is discussing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To benchmark what’s actually going on here, we can write some code like so:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Framework_DictionaryVsIDictionary&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;IDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;idict&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Benchmark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DictionaryEnumeration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Benchmark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IDictionaryEnumeration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note: we are deliberately not doing anything with the items inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;foreach&lt;/code&gt; loop because we just want to see what the difference in iteration of the 2 collections is. Also note that we are using the &lt;strong&gt;same underlying data structure&lt;/strong&gt;, we are just accessing via an &lt;code class=&quot;highlighter-rouge&quot;&gt;IDictionary&lt;/code&gt; cast in the 2nd benchmark.&lt;/p&gt;

&lt;p&gt;So what results do we get:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/02/Dictionary v IDictionary - GC Results.png&quot; alt=&quot;Dictionary v IDictionary - GC Results.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nice and clear, accessing the same data via the &lt;code class=&quot;highlighter-rouge&quot;&gt;IDictionary&lt;/code&gt; interface causes a lot of extra allocations, roughly 22 bytes per &lt;code class=&quot;highlighter-rouge&quot;&gt;foreach&lt;/code&gt; loop. This in turn triggers a lot of extra GC collections. It’s worth pointing out that when BenchmarkDotNet executes, it will run the same benchmark method, &lt;code class=&quot;highlighter-rouge&quot;&gt;IDictionaryEnumeration()&lt;/code&gt; in this case, millions of times, so that we can obtain an accurate measurment. Therefore the actual # of &lt;code class=&quot;highlighter-rouge&quot;&gt;Gen 0&lt;/code&gt; collections isn’t so important, it is the relative amount compared to the &lt;code class=&quot;highlighter-rouge&quot;&gt;DictionaryEnumeration()&lt;/code&gt; benchmark that should be looked at.&lt;/p&gt;

&lt;p&gt;Now this scenario might seem a bit contrived and I have to admit that I knew the answer before I started investigating it, however it did originate from a real-life issue, discovered by &lt;a href=&quot;https://twitter.com/ben_a_adams&quot;&gt;Ben Adams&lt;/a&gt;. For the full background take a look at the CoreCLR GitHub issue, &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/1579&quot;&gt;Avoid enumeration allocation via interface&lt;/a&gt;, but as shown below this was identified because in Kestrel/ASP.NET the request/resposne headers are kept in an &lt;code class=&quot;highlighter-rouge&quot;&gt;IDictionary&lt;/code&gt; data structure and so cause an additional 128 MBytes of garbage per second, when running at 1 Million requests per/second.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/issues/1579#issuecomment-141432753&quot;&gt;&lt;img src=&quot;/images/2016/02/Dictionary v IDictionary - In Kestrel and ASPNET.png&quot; alt=&quot;Dictionary v IDictionary - In Kestrel and ASPNET&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, what is the technical explanation of the additional allocations, quoting from &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/1579#issuecomment-141133843&quot;&gt;Stephen Toub of Microsoft&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… But when accessed via the interface, you’re using the interface method that’s typed to return &lt;code class=&quot;highlighter-rouge&quot;&gt;IEnumerator&amp;lt;KeyValuePair&amp;lt;TKey,TValue&amp;gt;&amp;gt;&lt;/code&gt; rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;Dictionary&amp;lt;TKey, TValue&amp;gt;.Enumerator&lt;/code&gt;, &lt;strong&gt;so the struct gets boxed&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and then &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/1579#issuecomment-142953036&quot;&gt;further down the same issue&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Yes, the issue isn’t just enumerator allocations, it’s also interface-based dispatch. In addition to boxing the enumerator, the &lt;code class=&quot;highlighter-rouge&quot;&gt;MoveNext&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Current&lt;/code&gt; calls made per element &lt;strong&gt;go from being potentially-inlineable non-virtual calls to being interface calls&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;implementation-details&quot;&gt;Implementation Details&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Update Feb 2017&lt;/strong&gt; - This section is now out-of-date as the implementation details have now changed, please see Adam Sitnik’s &lt;a href=&quot;http://adamsitnik.com/the-new-Memory-Diagnoser/&quot;&gt;blog post&lt;/a&gt; for all the details&lt;/p&gt;

&lt;p&gt;This is all made possible be the excellent &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ff356162(v=vs.110).aspx&quot;&gt;Gargage Collection ETW Events&lt;/a&gt; that the .NET runtime produces. In particular the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ff356162(v=vs.110).aspx#gcallocationtick_v2_event&quot;&gt;GCAllocationTick_V2 Event&lt;/a&gt; that is fired each time approximately 100 KB is allocated. An xml representation of a typical event is shown below, you can see that &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1A060&lt;/code&gt; or 106,592 bytes have just been allocated.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;UserData&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;GCAllocationTick_V3&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'myNs'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllocationAmount&amp;gt;&lt;/span&gt;0x1A060&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllocationAmount&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllocationKind&amp;gt;&lt;/span&gt;0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllocationKind&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ClrInstanceID&amp;gt;&lt;/span&gt;34&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ClrInstanceID&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllocationAmount64&amp;gt;&lt;/span&gt;0x1A060&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllocationAmount64&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TypeID&amp;gt;&lt;/span&gt;0xEE05D18&lt;span class=&quot;nt&quot;&gt;&amp;lt;/TypeID&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TypeName&amp;gt;&lt;/span&gt;LibGit2Sharp.Core.GitDiffFile&lt;span class=&quot;nt&quot;&gt;&amp;lt;/TypeName&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;HeapIndex&amp;gt;&lt;/span&gt;0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/HeapIndex&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Address&amp;gt;&lt;/span&gt;0x32056CD0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Address&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/GCAllocationTick_V3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/UserData&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To collect these events BenchmarkDotNet uses the &lt;a href=&quot;https://technet.microsoft.com/en-gb/library/cc753820.aspx&quot;&gt;logman tool&lt;/a&gt; that is built into Windows. This runs in the background and collects the specified ETW events until you ask it to stop. These events are continuously written to an &lt;code class=&quot;highlighter-rouge&quot;&gt;.etl&lt;/code&gt; file that can then be read by tools such as &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/hardware/hh448170.aspx&quot;&gt;Windows Performance Analyzer&lt;/a&gt;. Once the ETW events have been collected, BenchmarkDotNet then parses them using the excellent &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Diagnostics.Tracing.TraceEvent&quot;&gt;TraceEvent&lt;/a&gt; library, using code like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ETWTraceEventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GCAllocationTick&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gcData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statsPerProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ContainsKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gcData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;statsPerProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gcData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AllocatedBytes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gcData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AllocationAmount64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GCStart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gcData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statsPerProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ContainsKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gcData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;genCounts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statsPerProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gcData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GenCounts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gcData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Depth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gcData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Depth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;genCounts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ignore calls to GC.Collect(..) from BenchmarkDotNet itself&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gcData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reason&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GCReason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Induced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;genCounts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gcData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]++;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;Hopefully this has shown you some of the power of BenchmarkDotNet, please consider giving it a go next time you need to (micro-)benchmark some .NET code, hopefully it will save you from having to hand-roll your own benchmarking code.&lt;/p&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2016/02/17/adventures-in-benchmarking-memory-allocations/&quot;&gt;Adventures in Benchmarking - Memory Allocations&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='Adventures in Benchmarking' scheme='http://www.mattwarren.org/tags#Adventures in Benchmarking'/>
   
     <category term='Benchmarking' scheme='http://www.mattwarren.org/tags#Benchmarking'/>
   
     <category term='Garbage Collectors' scheme='http://www.mattwarren.org/tags#Garbage Collectors'/>
   
     <category term='ETW' scheme='http://www.mattwarren.org/tags#ETW'/>
   
 </entry>
 
 <entry>
   <title>Technically Speaking - Anniversary Mentoring</title>
   <link href="http://www.mattwarren.org/2016/02/16/technically-speaking-anniversary-mentoring/"/>
   <updated>2016-02-16T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/02/16/technically-speaking-anniversary-mentoring</id>
   <content type="html">
     &lt;p&gt;I’ve been reading the excellent &lt;a href=&quot;https://tinyletter.com/techspeak/archive&quot;&gt;Technically Speaking&lt;/a&gt; newsletter for a while now and when they announced they would be running a &lt;a href=&quot;http://www.catehuston.com/blog/2015/12/07/running-a-mentoring-program/&quot;&gt;mentoring program&lt;/a&gt;, I jumped at the chance and applied straight away. The idea was that each applicant had to set themselves speaking goals or identify areas they wanted to improve and then if you were selected &lt;a href=&quot;https://twitter.com/techspeakdigest&quot;&gt;@techspeakdigest&lt;/a&gt; would set you up with a mentor.&lt;/p&gt;

&lt;p&gt;I was fortunate enough to be chosen and assigned to &lt;a href=&quot;https://twitter.com/catehstn&quot;&gt;Cate&lt;/a&gt; one of the authors of the newsletter, who is also a prolific &lt;a href=&quot;http://www.catehuston.com/blog/talks/&quot;&gt;conference speaker&lt;/a&gt;. As part of scheme I had to identify the areas that I wanted to improve during the hour-long mentoring session, which for me were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Turning an outline into a good abstract.&lt;/li&gt;
  &lt;li&gt;Tips for getting a talk accepted via a CFP submission&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve previously done &lt;a href=&quot;/speaking&quot;&gt;some talks&lt;/a&gt; and they seemed to be well received, but I wanted to expand the range of topics I talked about and try and speak at some other conferences.&lt;/p&gt;

&lt;h2 id=&quot;writing-a-good-abstract&quot;&gt;Writing a Good Abstract&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;At the start of the session Cate looked through an existing submission and offered some advice, which started with the initial comment of:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Good idea, not well pitched&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;She then went onto offer some really great tips about what conferences were looking for and how I could develop my abstract. I’ve put the rest of my notes below and left them as I wrote them down, so they are a bit jumbled, but they reflect what happened during the conversation!&lt;/p&gt;

&lt;h3 id=&quot;tips-for-an-abstract-after-reading-mine&quot;&gt;Tips for an abstract (after reading mine):&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Be pragmatic, too much “&lt;em&gt;one true way&lt;/em&gt;” can put people off. Maybe a bit too opinionated.&lt;/li&gt;
  &lt;li&gt;Don’t tie your talk to just one library, might alienate people too much.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;talk-outlinestructure&quot;&gt;Talk outline/structure&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Explain&lt;/strong&gt; - what does it mean to write faster code&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Situate&lt;/strong&gt; - optimisation - what is it? how do you do it? benchmark, etc&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Apply&lt;/strong&gt; - specific examples&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;other-suggestions&quot;&gt;Other suggestions&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;If listeners (or conference organisation committee) &lt;strong&gt;agree with your assumptions&lt;/strong&gt;, they might be more likely to choose your pitch&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Be careful about being too specific in the abstract&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Don’t put too much in the abstract, leave some specifics out&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;be compelling, but a little big vague&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;1 or 2 examples of what &lt;strong&gt;not&lt;/strong&gt; to do is okay, but must give them something to &lt;strong&gt;do&lt;/strong&gt; afterwards, otherwise you could put them off.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Broad v. Narrow talks
    &lt;ul&gt;
      &lt;li&gt;Most conferences will want “&lt;em&gt;broader talks&lt;/em&gt;”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bio&lt;/strong&gt; is pitch for you
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Abstract&lt;/strong&gt; is pitch for you talk&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Finally, as well as offering general advice, Cate also took the time to help me re-write an existing abstract I’d put together. I’ve included the “before” and “after” below, so you can see the difference. Whilst it’s hard to see someone pick apart what you’re written, I do agree that the “after” reads much better and sounds more compelling than the “before”!&lt;/p&gt;

&lt;h3 id=&quot;before&quot;&gt;Before&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Microbenchmarks and Optimisations&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;We all want to write faster code right, but how do we know it really is faster, how do we measure it correctly?&lt;/p&gt;

  &lt;p&gt;During this talk we will look at what mistakes to avoid when benchmarking .NET code and how to do it accurately. Along the way we will also discover some surprising code optimisations and explore why they are happening&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;after&quot;&gt;After&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Where the Wild Things Are - Finding Performance Problems Before They Bite You&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;You don’t want to prematurely optimize, but sometimes you want to optimize, the question is - where to start? Benchmarking can help you figure out what your application is doing and where performance problems could arise - allowing you to find (and fix!) them before your customers do.&lt;/p&gt;

  &lt;p&gt;If you aren’t already benchmarking your code this talk will offer some starting points. We’ll look at how to accurately benchmark in .NET and things to avoid. Along the way we’ll also discover some surprising code optimisations!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-end-result&quot;&gt;The End Result&lt;/h2&gt;

&lt;p&gt;After the mentoring with Cate took place I was accepted to talk at &lt;a href=&quot;http://www.progscon.co.uk/talks&quot;&gt;ProgSCon London 2016&lt;/a&gt;, so obviously the tips and re-write of my abstract made a big difference!!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.progscon.co.uk/program&quot;&gt;&lt;img src=&quot;/images/2016/02/Talk at ProgSCon London.png&quot; alt=&quot;Talk at ProgSCon London&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So thanks to &lt;a href=&quot;https://twitter.com/chiuki&quot;&gt;Chiu-Ki Chan&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/catehstn&quot;&gt;Cate&lt;/a&gt; for producing Technically Speaking every week, it’s certainly helped me out!&lt;/p&gt;

     
     
     
     
   </content>
   
     <category term='Speaking' scheme='http://www.mattwarren.org/tags#Speaking'/>
   
 </entry>
 
 <entry>
   <title>Learning How Garbage Collectors Work - Part 1</title>
   <link href="http://www.mattwarren.org/2016/02/04/learning-how-garbage-collectors-work-part-1/"/>
   <updated>2016-02-04T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/02/04/learning-how-garbage-collectors-work-part-1</id>
   <content type="html">
     &lt;p&gt;This series is an attempt to learn more about how a real-life “Garbage Collector” (GC) works internally, i.e. not so much “&lt;em&gt;what it does&lt;/em&gt;”, but “&lt;em&gt;how it does it&lt;/em&gt;” at a low-level. I will be mostly be concentrating on the .NET GC, because I’m a .NET developer and also because it’s recently been &lt;a href=&quot;/2015/12/08/open-source-net-1-year-later/&quot;&gt;Open Sourced&lt;/a&gt; so we can actually look at the code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you do want to learn about what a GC does, I really recommend the talk &lt;a href=&quot;https://vimeo.com/113632451&quot;&gt;Everything you need to know about .NET memory&lt;/a&gt; by Ben Emmett, it’s a fantastic talk that uses lego to explain what the .NET GC does (the &lt;a href=&quot;http://www.slideshare.net/benemmett/net-memory-management-ndc-london&quot;&gt;slides are also available&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Well, trying to understand what the .NET GC does by looking at the source was my original plan, but if you go and take a look at the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/gc/gc.cpp&quot;&gt;code on GitHub&lt;/a&gt; you will be presented with the message “&lt;em&gt;This file has been truncated,…&lt;/em&gt;”:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/gc/gc.cpp&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/157298/12352478/49f74242-bb7e-11e5-8028-5df72943f58a.png&quot; alt=&quot;gc.cpp on GitHub&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is because the file is &lt;strong&gt;36,915&lt;/strong&gt; lines long and &lt;strong&gt;1.19MB&lt;/strong&gt; in size! Now before you send a PR to Microsoft that chops it up into smaller bits, you might want to read this &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/408&quot;&gt;discussion on reorganizing gc.cpp&lt;/a&gt;. It turns out you are not the only one who’s had that idea and your PR will probably be rejected, for some &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/408#issuecomment-78014795&quot;&gt;specific reasons&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;goals-of-the-gc&quot;&gt;Goals of the GC&lt;/h2&gt;

&lt;p&gt;So, as I’m not going to be able to read and understand a 36 KLOC .cpp source file any time soon, instead I tried a different approach and started off by looking through the excellent Book-of-the-Runtime (BOTR) section on the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/garbage-collection.md#design-of-the-collector&quot;&gt;“Design of the Collector”&lt;/a&gt;. This very helpfully lists the following goals of the .NET GC (&lt;strong&gt;emphasis&lt;/strong&gt; mine):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The GC strives to manage memory &lt;strong&gt;extremely efficiently&lt;/strong&gt; and require &lt;strong&gt;very little effort from people who write managed code&lt;/strong&gt;. Efficient means:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;GCs should occur often enough to &lt;strong&gt;avoid the managed heap containing a significant amount (by ratio or absolute count) of unused but allocated objects&lt;/strong&gt; (garbage), and therefore use memory unnecessarily.&lt;/li&gt;
    &lt;li&gt;GCs should happen as &lt;strong&gt;infrequently as possible to avoid using otherwise useful CPU time&lt;/strong&gt;, even though frequent GCs would result in lower memory usage.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;A GC should be productive&lt;/strong&gt;. If GC reclaims a small amount of memory, then the GC (including the associated CPU cycles) was wasted.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Each GC should be fast&lt;/strong&gt;. Many workloads have low latency requirements.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Managed code developers shouldn’t need to know much about the GC to achieve good memory utilization&lt;/strong&gt; (relative to their workload). – The GC should tune itself to satisfy different memory usage patterns.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;So there’s some interesting points in there, in particular they twice included the goal of ensuring developers don’t have to know much about the GC to make it efficient. This is probably one of the main differences between the .NET and Java GC implementations, as explained in an answer to the Stack Overflow question &lt;a href=&quot;http://stackoverflow.com/questions/492703/net-vs-java-garbage-collector/492821#492821&quot;&gt;“&lt;em&gt;.Net vs Java Garbage Collector&lt;/em&gt;”&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A difference between Oracle’s and Microsoft’s GC implementation ‘ethos’ is one of configurability.&lt;/p&gt;

  &lt;p&gt;Oracle provides a vast number of options (at the command line) to tweak aspects of the GC or switch it between different modes. Many options are of the -X or -XX to indicate their lack of support across different versions or vendors. The CLR by contrast provides next to no configurability; your only real option is the use of the server or client collectors which optimise for throughput verses latency respectively.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;net-gc-sample&quot;&gt;.NET GC Sample&lt;/h2&gt;

&lt;p&gt;So now we have an idea about what the goals of the GC are, lets take a look at how it goes about things. Fortunately those nice developers at Microsoft released a &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/gc/sample/GCSample.cpp&quot;&gt;GC Sample&lt;/a&gt; that shows you, at a basic level, how you can use the full .NET GC in your own code. After building the sample (and &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/2582&quot;&gt;finding a few bugs in the process&lt;/a&gt;), I was able to get a simple, single-threaded Workstation GC up and running.&lt;/p&gt;

&lt;p&gt;What’s interesting about the sample application is that it clearly shows you what actions the &lt;a href=&quot;https://github.com/mattwarren/GCSample/blob/master/sample/GCSample.cpp#L11-L37&quot;&gt;.NET Runtime has to perform to make the GC work&lt;/a&gt;. So for instance, at a high-level the runtime needs to go through the following process to allocate an object:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AllocateObject(..)&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;See below for the code and explanation of the allocation process&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CreateGlobalHandle(..)&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;If we want to store the object in a “strong handle/reference”, as opposed to a “weak” one. In C# code this would typically be a static variable. This is what tells the GC that the object is referenced, so that is can know that it shouldn’t be cleaned up when a GC collection happens.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ErectWriteBarrier(..)&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;For more information see “Marking the Card Table” below&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;allocating-an-object&quot;&gt;Allocating an Object&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/gc/sample/GCSample.cpp#L55-L79&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AllocateObject(..)&lt;/code&gt; code from GCSample.cpp&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AllocateObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodTable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pMT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alloc_context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acontext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAllocContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pMT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetBaseSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acontext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alloc_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;advance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;advance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acontext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alloc_limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;acontext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alloc_ptr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;advance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GCHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetGCHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acontext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;RawSetMethodTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pMT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To understand what’s going on here, the BOTR again comes in handy as it gives us a clear overview of the process, from &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/garbage-collection.md#design-of-allocator&quot;&gt;“Design of Allocator”&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When the GC gives out memory to the allocator, it does so in terms of allocation contexts. The size of an allocation context is defined by the allocation quantum.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Allocation contexts are smaller regions of a given heap segment that are each dedicated for use by a given thread. On a single-processor (meaning 1 logical processor) machine, a single context is used, which is the generation 0 allocation context.&lt;/li&gt;
    &lt;li&gt;The Allocation quantum is the size of memory that the allocator allocates each time it needs more memory, in order to perform object allocations within an allocation context. The allocation is typically 8k and the average size of managed objects are around 35 bytes, enabling a single allocation quantum to be used for many object allocations.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;This shows how is is possible for the .NET GC to make allocating an object (or memory) such a cheap operation. Because of all the work that it has done in the background, the majority of the time an  object allocation happens, it is just a case of incrementing a pointer by the number of bytes needed to hold the new object. This is what the code in the first half of the &lt;code class=&quot;highlighter-rouge&quot;&gt;AllocateObject(..)&lt;/code&gt; function (above) is doing, it’s bumping up the free-space pointer (&lt;code class=&quot;highlighter-rouge&quot;&gt;acontext-&amp;gt;alloc_ptr&lt;/code&gt;) and giving out a pointer to the newly created space in memory.&lt;/p&gt;

&lt;p&gt;It’s only when the current &lt;strong&gt;allocation context&lt;/strong&gt; doesn’t have enough space that things get more complicated and potentially more expensive. At this point &lt;code class=&quot;highlighter-rouge&quot;&gt;GCHeap::GetGCHeap()-&amp;gt;Alloc(..)&lt;/code&gt; is called which may in turn trigger a GC collection before a new allocation context can be provided.&lt;/p&gt;

&lt;p&gt;Finally, it’s worth looking at the goals that the allocator was designed to achieve, again from the BOTR:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Triggering a GC when appropriate:&lt;/strong&gt; The allocator triggers a GC when the allocation budget (a threshold set by the collector) is exceeded or when the allocator can no longer allocate on a given segment. The allocation budget and managed segments are discussed in more detail later.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Preserving object locality:&lt;/strong&gt; Objects allocated together on the same heap segment will be stored at virtual addresses close to each other.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Efficient cache usage:&lt;/strong&gt; The allocator allocates memory in allocation quantum units, not on an object-by-object basis. It zeroes out that much memory to warm up the CPU cache because there will be objects immediately allocated in that memory. The allocation quantum is usually 8k.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Efficient locking:&lt;/strong&gt; The thread affinity of allocation contexts and quantums guarantee that there is only ever a single thread writing to a given allocation quantum. As a result, there is no need to lock for object allocations, as long as the current allocation context is not exhausted.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Memory integrity:&lt;/strong&gt; The GC always zeroes out the memory for newly allocated objects to prevent object references pointing at random memory.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Keeping the heap crawlable:&lt;/strong&gt; The allocator makes sure to make a free object out of left over memory in each allocation quantum. For example, if there is 30 bytes left in an allocation quantum and the next object is 40 bytes, the allocator will make the 30 bytes a free object and get a new allocation quantum.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the interesting items this highlights is an advantage of GC systems, namely that you get efficient &lt;a href=&quot;http://mechanical-sympathy.blogspot.co.uk/2012/08/memory-access-patterns-are-important.html&quot;&gt;CPU cache usage or good object locality&lt;/a&gt; because memory is allocated in units. This means that objects created one after the other (on the same thread), will sit next to each other in memory.&lt;/p&gt;

&lt;h3 id=&quot;marking-the-card-table&quot;&gt;Marking the “Card Table”&lt;/h3&gt;

&lt;p&gt;The 3rd part of the process of allocating an object was a call to &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/gc/sample/GCSample.cpp#L90-L105&quot;&gt;ErectWriteBarrier(..)
&lt;/a&gt;, which looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;inline void ErectWriteBarrier(Object ** dst, Object * ref)
{
    // if the dst is outside of the heap (unboxed value classes) then we simply exit
    if (((uint8_t*)dst &amp;lt; g_lowest_address) || ((uint8_t*)dst &amp;gt;= g_highest_address))
        return;
        
    if ((uint8_t*)ref &amp;gt;= g_ephemeral_low &amp;amp;&amp;amp; (uint8_t*)ref &amp;lt; g_ephemeral_high)
    {
        // volatile is used here to prevent fetch of g_card_table from being reordered 
        // with g_lowest/highest_address check above. 
        uint8_t* pCardByte = (uint8_t *)*(volatile uint8_t **)(&amp;amp;g_card_table) + 
                             card_byte((uint8_t *)dst);
        if(*pCardByte != 0xFF)
            *pCardByte = 0xFF;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now explaining what is going on here is probably an entire post on it’s own and fortunately other people have already done the work for me, if you are interested in finding our more take a look at the &lt;a href=&quot;#further-information&quot;&gt;links at the end of this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But in summary, the card-table is an optimisation that allows the GC to collect a single Generation (e.g. Gen 0), but still know about objects that are referenced from other, older generations. For instance if you had an array, &lt;code class=&quot;highlighter-rouge&quot;&gt;myArray = new MyClass[100]&lt;/code&gt; that was in Gen 1 and you wrote the following code &lt;code class=&quot;highlighter-rouge&quot;&gt;myArray[5] = new MyClass()&lt;/code&gt;, a write barrier would be set-up to indicate that the &lt;code class=&quot;highlighter-rouge&quot;&gt;MyClass&lt;/code&gt; object was referenced by a given section of Gen 1 memory.&lt;/p&gt;

&lt;p&gt;Then, when the GC wants to perform the mark phase for a Gen 0, in order to find all the live-objects it uses the card-table to tell it in which memory section(s) of other Generations it needs to look. This way it can find references from those older objects to the ones stored in Gen 0. This is a space/time tradeoff, the card-table represents 4KB sections of memory, so it still has to scan through that 4KB chunk, but it’s better than having to scan the entire contents of the Gen 1 memory when it wants to carry of a Gen 0 collection.&lt;/p&gt;

&lt;p&gt;If it didn’t do this extra check (via the card-table), then any Gen 0 objects that were only referenced by older objects (i.e. those in Gen 1/2) would not be considered “live” and would then be collected. See the image below for what this looks like in practice:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://msdnshared.blob.core.windows.net/media/TNBlogsFS/BlogFileStorage/blogs_msdn/abhinaba/WindowsLiveWriter/BackToBasicsGenerationalGarbageCollectio_115F4/image_18.png&quot; alt=&quot;Write barrier + card-table&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Image taken from &lt;a href=&quot;http://blogs.msdn.com/b/abhinaba/archive/2009/03/02/back-to-basics-generational-garbage-collection.aspx&quot;&gt;Back To Basics: Generational Garbage Collection&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;gc-and-execution-engine-interaction&quot;&gt;GC and Execution Engine Interaction&lt;/h2&gt;

&lt;p&gt;The final part of the GC sample that I will be looking at is the way in which the GC needs to interact with the .NET Runtime Execution Engine (EE). The EE is responsible for actually running or coordinating all the low-level things that the .NET runtime needs to-do, such as creating threads, reserving memory and so it acts as an interface to the OS, via &lt;a href=&quot;https://github.com/mattwarren/GCSample/blob/master/sample/gcenv.windows.cpp&quot;&gt;Windows&lt;/a&gt; and &lt;a href=&quot;https://github.com/mattwarren/GCSample/blob/master/sample/gcenv.unix.cpp&quot;&gt;Unix&lt;/a&gt; implementations.&lt;/p&gt;

&lt;p&gt;To understand this interaction between the GC and the EE, it’s helpful to look at all the functions the GC expects the EE to make available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void SuspendEE(GCToEEInterface::SUSPEND_REASON reason)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void RestartEE(bool bFinishedGC)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void GcScanRoots(promote_func* fn, int condemned, int max_gen, ScanContext* sc)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void GcStartWork(int condemned, int max_gen)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void AfterGcScanRoots(int condemned, int max_gen, ScanContext* sc)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void GcBeforeBGCSweepWork()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void GcDone(int condemned)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bool RefCountedHandleCallbacks(Object * pObject)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bool IsPreemptiveGCDisabled(Thread * pThread)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void EnablePreemptiveGC(Thread * pThread)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void DisablePreemptiveGC(Thread * pThread)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void SetGCSpecial(Thread * pThread)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alloc_context * GetAllocContext(Thread * pThread)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bool CatchAtSafePoint(Thread * pThread)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void AttachCurrentThread()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void GcEnumAllocContexts (enum_alloc_context_func* fn, void* param)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void SyncBlockCacheWeakPtrScan(HANDLESCANPROC, uintptr_t, uintptr_t)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void SyncBlockCacheDemote(int /*max_gen*/)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void SyncBlockCachePromotionsGranted(int /*max_gen*/)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to see how the .NET Runtime performs these “tasks”, you can take a look at the &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/vm/gcenv.ee.cpp&quot;&gt;real implementation&lt;/a&gt;. However in the GC Sample these methods are mostly &lt;a href=&quot;https://github.com/mattwarren/GCSample/blob/90d07fdff32d370a3977978854d2d221027e1780/sample/gcenv.ee.cpp#L147-L165&quot;&gt;stubbed out&lt;/a&gt; as no-ops. So that I could get an idea of the flow of the GC during a collection, I added simple &lt;code class=&quot;highlighter-rouge&quot;&gt;print(..)&lt;/code&gt; statements to each one, then when I ran the GC Sample I got the following output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SuspendEE(SUSPEND_REASON = 1)
GcEnumAllocContexts(..)
GcStartWork(condemned = 0, max_gen = 2)
GcScanRoots(condemned = 0, max_gen = 2)
AfterGcScanRoots(condemned = 0, max_gen = 2)
GcScanRoots(condemned = 0, max_gen = 2)
GcDone(condemned = 0)
RestartEE(bFinishedGC = TRUE)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which fortunately corresponds nicely with the GC phases for &lt;strong&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/botr/garbage-collection.md#wks-gc-with-concurrent-gc-off&quot;&gt;WKS GC with concurrent GC off&lt;/a&gt;&lt;/strong&gt; as outlined in the BOTR:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;User thread runs out of allocation budget and triggers a GC.&lt;/li&gt;
    &lt;li&gt;GC calls SuspendEE to suspend managed threads.&lt;/li&gt;
    &lt;li&gt;GC decides which generation to condemn.&lt;/li&gt;
    &lt;li&gt;Mark phase runs.&lt;/li&gt;
    &lt;li&gt;Plan phase runs and decides if a compacting GC should be done.&lt;/li&gt;
    &lt;li&gt;If so relocate and compact phase runs. Otherwise, sweep phase runs.&lt;/li&gt;
    &lt;li&gt;GC calls RestartEE to resume managed threads.&lt;/li&gt;
    &lt;li&gt;User thread resumes running.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;further-information&quot;&gt;Further Information&lt;/h2&gt;

&lt;p&gt;If you want to find out any more information about Garbage Collectors, here is a list of useful links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;General
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/&quot;&gt;Baby’s First Garbage Collector&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://web.engr.illinois.edu/%7Emaplant2/gc.html&quot;&gt;Writing a Simple Garbage Collector in C&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Marking the Card Table
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms973837.aspx&quot;&gt;Making Generations Work with Write Barriers&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://patshaughnessy.net/2013/10/30/generational-gc-in-python-and-ruby&quot;&gt;Generational GC in Python and Ruby&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/dotmemory/help/NET_Memory_Management_Concepts.html&quot;&gt;NET Memory Management Concepts&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://blogs.msdn.com/b/abhinaba/archive/2009/03/02/back-to-basics-generational-garbage-collection.aspx&quot;&gt;Back-to-basics Generational GC&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.devx.com/Java/Article/21977&quot;&gt;Garbage Collection in the Java HotSpot Virtual Machine&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.cncoders.net/article/6981/&quot;&gt;Understanding GC pauses in JVM, HotSpot’s minor GC&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;gc-sample-code-layout-for-reference&quot;&gt;GC Sample Code Layout (for reference)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GC Sample Code (under \sample)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GCSample.cpp&lt;/li&gt;
  &lt;li&gt;gcenv.h&lt;/li&gt;
  &lt;li&gt;gcenv.ee.cpp&lt;/li&gt;
  &lt;li&gt;gcenv.windows.cpp&lt;/li&gt;
  &lt;li&gt;gcenv.unix.cpp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;GC Sample Environment (under \env)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;common.cpp&lt;/li&gt;
  &lt;li&gt;common.h&lt;/li&gt;
  &lt;li&gt;etmdummy.g&lt;/li&gt;
  &lt;li&gt;gcenv.base.h&lt;/li&gt;
  &lt;li&gt;gcenv.ee.h&lt;/li&gt;
  &lt;li&gt;gcenv.interlocked.h&lt;/li&gt;
  &lt;li&gt;gcenv.interlocked.inl&lt;/li&gt;
  &lt;li&gt;gcenv.object.h&lt;/li&gt;
  &lt;li&gt;gcenv.os.h&lt;/li&gt;
  &lt;li&gt;gcenv.structs.h&lt;/li&gt;
  &lt;li&gt;gcenv.sync.h&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;GC Code (top-level folder)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;gc.cpp (36,911 lines long!!)&lt;/li&gt;
  &lt;li&gt;gc.h&lt;/li&gt;
  &lt;li&gt;gccommon.cpp&lt;/li&gt;
  &lt;li&gt;gcdesc.h&lt;/li&gt;
  &lt;li&gt;gcee.cpp&lt;/li&gt;
  &lt;li&gt;gceewks.cpp&lt;/li&gt;
  &lt;li&gt;gcimpl.h&lt;/li&gt;
  &lt;li&gt;gcrecord.h&lt;/li&gt;
  &lt;li&gt;gcscan.cpp&lt;/li&gt;
  &lt;li&gt;gcscan.h&lt;/li&gt;
  &lt;li&gt;gcsvr.cpp&lt;/li&gt;
  &lt;li&gt;gcwks.cpp&lt;/li&gt;
  &lt;li&gt;handletable.h&lt;/li&gt;
  &lt;li&gt;handletable.inl&lt;/li&gt;
  &lt;li&gt;handletablecache.cpp&lt;/li&gt;
  &lt;li&gt;gandletablecore.cpp&lt;/li&gt;
  &lt;li&gt;handletablepriv.h&lt;/li&gt;
  &lt;li&gt;handletablescan.cpp&lt;/li&gt;
  &lt;li&gt;objecthandle.cpp&lt;/li&gt;
  &lt;li&gt;objecthandle.h&lt;/li&gt;
&lt;/ul&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2016/02/04/learning-how-garbage-collectors-work-part-1/&quot;&gt;Learning How Garbage Collectors Work - Part 1&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='Garbage Collectors' scheme='http://www.mattwarren.org/tags#Garbage Collectors'/>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
 </entry>
 
 <entry>
   <title>Open Source .NET – 1 year later - Now with ASP.NET</title>
   <link href="http://www.mattwarren.org/2016/01/15/open-source-net-1-year-later-now-with-aspnet/"/>
   <updated>2016-01-15T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2016/01/15/open-source-net-1-year-later-now-with-aspnet</id>
   <content type="html">
     &lt;p&gt;In the &lt;a href=&quot;/2015/12/08/open-source-net-1-year-later/&quot;&gt;previous post&lt;/a&gt; I looked at the community involvement in the year since Microsoft open-sourced large parts of the .NET framework.&lt;/p&gt;

&lt;p&gt;As a follow-up I’m going to repeat that analysis, but this time focussing on the repositories that sit under the &lt;a href=&quot;https://github.com/aspnet&quot;&gt;&lt;strong&gt;ASP.NET&lt;/strong&gt;&lt;/a&gt; umbrella project:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aspnet/mvc/&quot;&gt;&lt;strong&gt;MVC&lt;/strong&gt;&lt;/a&gt; - Model view controller framework for building dynamic web sites with clean separation of concerns, including the merged MVC, Web API, and Web Pages w/ Razor.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aspnet/dnx/&quot;&gt;&lt;strong&gt;DNX&lt;/strong&gt;&lt;/a&gt; - The DNX (a .NET Execution Environment) contains the code required to bootstrap and run an application, including the compilation system, SDK tools, and the native CLR hosts.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aspnet/EntityFramework/&quot;&gt;&lt;strong&gt;EntityFramework&lt;/strong&gt;&lt;/a&gt; - Microsoft’s recommended data access technology for new applications in .NET.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aspnet/KestrelHttpServer/&quot;&gt;&lt;strong&gt;KestrelHttpServer&lt;/strong&gt;&lt;/a&gt; - A web server for ASP.NET 5 based on libuv.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;methodology&quot;&gt;&lt;a name=&quot;Methodology&quot;&gt;&lt;/a&gt;&lt;strong&gt;Methodology&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;In the first part I classified the Issues/PRs as &lt;strong&gt;Owner&lt;/strong&gt;, &lt;strong&gt;Collaborator&lt;/strong&gt; or &lt;strong&gt;Community&lt;/strong&gt;. However this turned out to have some problems, as was pointed out to me in the comments. There are several people who are non Microsoft employees, but have been made “Collaborators” due to their extensive contributions to a particular repository, for instance &lt;a href=&quot;https://github.com/kangaroo&quot;&gt;@kangaroo&lt;/a&gt; and &lt;a href=&quot;https://github.com/benpye/&quot;&gt;@benpye&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To address this, I decided to change to just the following 2 categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Microsoft&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Community&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is possible because (almost) all Microsoft employees have indicated where they work on their GitHub profile, for instance:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/davidfowl&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/157298/12374944/b686820c-bca4-11e5-86c8-cf9f1076b45e.png&quot; alt=&quot;David Fowler Profile&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are some notable exceptions, e.g. &lt;a href=&quot;https://github.com/shanselman&quot;&gt;@shanselman&lt;/a&gt; clearly works at Microsoft, but it’s easy enough to allow for cases like this.&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;&lt;a name=&quot;Results&quot;&gt;&lt;/a&gt;Results&lt;/h2&gt;

&lt;p&gt;So after all this analysis, what results did I get. Well overall, the Community involvement accounts for just over &lt;strong&gt;60%&lt;/strong&gt; over the “Issues Created” and &lt;strong&gt;33%&lt;/strong&gt; of the “Merged Pull Requests (PRs)”. However the amount of PRs is skewed by Entity Framework which has a much higher involvement from Microsoft employees, if this is ignored the Community proportion of PRs increases to &lt;strong&gt;44%&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;issues-created-nov-2013---dec-2015&quot;&gt;Issues Created (Nov 2013 - Dec 2015)&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Project&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;strong&gt;Microsoft&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;strong&gt;Community&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;aspnet/&lt;strong&gt;MVC&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;716&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1380&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2096&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;aspnet/&lt;strong&gt;dnx&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;897&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1206&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2103&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;aspnet/&lt;strong&gt;EntityFramework&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1066&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1427&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2493&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;aspnet/&lt;strong&gt;KestrelHttpServer&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;89&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;176&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;265&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;2768&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;4189&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;6957&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;merged-pull-requests-nov-2013---dec-2015&quot;&gt;Merged Pull Requests (Nov 2013 - Dec 2015)&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Project&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;strong&gt;Microsoft&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;strong&gt;Community&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;aspnet/&lt;strong&gt;MVC&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;385&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;228&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;613&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;aspnet/&lt;strong&gt;dnx&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;406&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;368&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;774&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;aspnet/&lt;strong&gt;EntityFramework&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;937&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;225&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1162&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;aspnet/&lt;strong&gt;KestrelHttpServer&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;69&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;88&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;157&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;1798&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;909&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;2706&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Note: I included the &lt;a href=&quot;https://github.com/aspnet/KestrelHttpServer&quot;&gt;Kestrel Http Server&lt;/a&gt; because it is an interesting case. Currently the #1 contributor is not a Microsoft employee, it is &lt;a href=&quot;https://twitter.com/ben_a_adams/status/684503094810525696/photo/1&quot;&gt;Ben Adams&lt;/a&gt;, who is doing a great job of &lt;a href=&quot;http://www.hanselman.com/blog/WhenDidWeStopCaringAboutMemoryManagement.aspx&quot;&gt;improving the memory usage&lt;/a&gt; and in the process helping Kestrel handle more and more requests per/second.&lt;/p&gt;

&lt;p&gt;By looking at the results over time, you can see that there is a clear and sustained Community involvement (the lighter section of the bars) over the past 2 years (Nov 2013 - Dec 2015) and it doesn’t look like it’s going to stop.&lt;/p&gt;

&lt;h3 id=&quot;issues-per-month---by-submitter-click-for-full-size-image&quot;&gt;&lt;a name=&quot;IssuesPerMonthBySubmitter&quot;&gt;&lt;/a&gt;&lt;strong&gt;Issues Per Month - By Submitter (click for full-size image)&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.githubusercontent.com/assets/157298/12142495/6f746e92-b470-11e5-97fd-bf0d59a74875.png&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/157298/12142495/6f746e92-b470-11e5-97fd-bf0d59a74875.png&quot; alt=&quot;Issues Per Month - By Submitter (Microsoft or Community)&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, whilst the Community involvement is easier to see with the Issues per/month, it is still visible in the Merged PRs and again it looks like it has being sustained over the 2 years.&lt;/p&gt;

&lt;h3 id=&quot;merged-pull-request-per-month---by-submitter-click-for-full-size-image&quot;&gt;&lt;a name=&quot;MergedPullRequestPerMonthBySubmitter&quot;&gt;&lt;/a&gt;&lt;strong&gt;Merged Pull Request Per Month - By Submitter (click for full-size image)&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.githubusercontent.com/assets/157298/12142522/9f72726a-b470-11e5-8333-aec772ff9f6b.png&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/157298/12142522/9f72726a-b470-11e5-8333-aec772ff9f6b.png&quot; alt=&quot;Merged Pull Requests Per Month - By Submitter (Microsoft or Community)&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;total-number-of-people-contributing&quot;&gt;&lt;a name=&quot;TotalNumberOfPeopleContributing&quot;&gt;&lt;/a&gt;&lt;strong&gt;Total Number of People Contributing&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;It’s also interesting to look at the total number of different people who contributed to each project. By doing this you get a real sense of the size of the Community contribution, it’s not just a small amount of people doing a lot of work, it’s spread across a large amount of people.&lt;/p&gt;

&lt;p&gt;This table shows the number of different GitHub users (per project) who opened an Issue or created a PR that was Merged:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Project&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;strong&gt;Microsoft&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;strong&gt;Community&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;aspnet/&lt;strong&gt;MVC&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;39&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;395&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;434&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;aspnet/&lt;strong&gt;dnx&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;46&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;421&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;467&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;aspnet/&lt;strong&gt;EntityFramework&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;31&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;570&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;601&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;aspnet/&lt;strong&gt;KestrelHttpServer&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;22&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;95&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;117&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;138&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;1481&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;1619&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;-fsharp&quot;&gt;&lt;a name=&quot;FSharp&quot;&gt;&lt;/a&gt; &lt;strong&gt;FSharp&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;In the comments of my first post, Isaac Abraham correctly pointed out:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;parts of .NET have been open source for quite a bit more than a year – the F# compiler and FSharp.Core have been for quite a while now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, to address this, I will take a quick look at the main FSharp repositories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/microsoft/visualfsharp&quot;&gt;&lt;strong&gt;microsoft/visualfsharp&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fsharp/fsharp&quot;&gt;&lt;strong&gt;fsharp/fsharp&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As Isaac explained, their relationship is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… visualfsharp is the Microsoft-owned repo Visual F#. The other is the community owned one. The former one feeds directly into tools like Visual F# tooling in Visual Studio etc.; the latter feeds into things like Xamarin etc. There’s a (slightly out of date) &lt;a href=&quot;http://fsharp.github.io/2014/06/18/fsharp-contributions.html&quot;&gt;diagram that explains the relationship&lt;/a&gt;, and this is another useful resource http://fsharp.github.io/.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;fsharp---issues-created-dec-2010---dec-2015&quot;&gt;FSharp - Issues Created (Dec 2010 - Dec 2015)&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Project&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;strong&gt;Microsoft&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;strong&gt;Community&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;fsharp/fsharp&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;312&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;321&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;microsoft/visualfsharp&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;161&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;367&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;528&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;170&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;679&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;849&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;fsharp---merged-pull-requests-may-2011---dec-2015&quot;&gt;FSharp - Merged Pull Requests (May 2011 - Dec 2015)&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Project&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;strong&gt;Microsoft&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;strong&gt;Community&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;fsharp/fsharp&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;27&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;134&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;161&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;microsoft/visualfsharp&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;36&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;33&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;69&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;63&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;167&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;230&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a name=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I think that it’s fair to say that the Community has responded to Microsoft making more and more of their code Open Source. There have been a significant amount of Community contributions across several projects, over a decent amount of time. Whilst you could argue that it took Microsoft a long time to open source their code, it seems that .NET developers are happy they have done it, as shown by a sizeable Community response.&lt;/p&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2016/01/15/open-source-net-1-year-later-now-with-aspnet/&quot;&gt;Open Source .NET – 1 year later - Now with ASP.NET&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='Analytics' scheme='http://www.mattwarren.org/tags#Analytics'/>
   
     <category term='Open Source' scheme='http://www.mattwarren.org/tags#Open Source'/>
   
     <category term='AspNet' scheme='http://www.mattwarren.org/tags#AspNet'/>
   
 </entry>
 
 <entry>
   <title>Open Source .NET – 1 year later</title>
   <link href="http://www.mattwarren.org/2015/12/08/open-source-net-1-year-later/"/>
   <updated>2015-12-08T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2015/12/08/open-source-net-1-year-later</id>
   <content type="html">
     &lt;p&gt;A little over a year ago Microsoft announced that they were &lt;a href=&quot;http://www.hanselman.com/blog/AnnouncingNET2015NETAsOpenSourceNETOnMacAndLinuxAndVisualStudioCommunity.aspx&quot;&gt;open sourcing large parts of the .NET framework&lt;/a&gt;. At the time Scott Hanselman did a &lt;a href=&quot;http://www.hanselman.com/blog/TheNETCoreCLRIsNowOpenSourceSoIRanTheGitHubRepoThroughMicrosoftPowerBI.aspx&quot;&gt;nice analysis of the source&lt;/a&gt;, using Microsoft Power BI. Inspired by this and now that a year has passed, I wanted to try and answer the question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How much &lt;strong&gt;Community&lt;/strong&gt; involvement has there been since Microsoft open sourced large parts of the .NET framework?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I will be looking at the 3 following projects, as they are all highly significant parts of the .NET ecosystem and are also some of the &lt;a href=&quot;https://github.com/dotnet/&quot;&gt;most active/starred/forked projects&lt;/a&gt; within the .NET Foundation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/&quot;&gt;&lt;strong&gt;Roslyn&lt;/strong&gt;&lt;/a&gt; - The .NET Compiler Platform (“Roslyn”) provides open-source C# and Visual Basic compilers with rich code analysis APIs.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr/&quot;&gt;&lt;strong&gt;CoreCLR&lt;/strong&gt;&lt;/a&gt; - the .NET Core runtime, called CoreCLR, and the base library, called mscorlib. It includes the garbage collector, JIT compiler, base .NET data types and many low-level classes.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/corefx/&quot;&gt;&lt;strong&gt;CoreFX&lt;/strong&gt;&lt;/a&gt; the .NET Core foundational libraries, called CoreFX. It includes classes for collections, file systems, console, XML, async and many others.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;available-data&quot;&gt;&lt;a name=&quot;AvailableData&quot;&gt;&lt;/a&gt;&lt;strong&gt;Available Data&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;GitHub itself has some nice graphs built-in, for instance you can see the &lt;strong&gt;Commits per Month&lt;/strong&gt; over an entire year:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/graphs/contributors&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/157298/11634181/f451abce-9d06-11e5-8940-d133d1931422.png&quot; alt=&quot;Commits Per Month&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also you can get a nice dashboard showing the &lt;strong&gt;Monthly Pulse&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/pulse/monthly&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/157298/11634411/35085a4a-9d08-11e5-8995-02c65d9ee12d.png&quot; alt=&quot;github stats - monthly pulse&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However to answer the question above, I needed more data. Fortunately GitHub provides a &lt;a href=&quot;https://developer.github.com/v3/&quot;&gt;really comprehensive API&lt;/a&gt;, which combined with the excellent &lt;a href=&quot;https://github.com/octokit/octokit.net&quot;&gt;Octokit.net library&lt;/a&gt; and the &lt;a href=&quot;https://www.linqpad.net/&quot;&gt;brilliant LINQPad&lt;/a&gt;, meant I was able to easily get all the data I needed. Here’s a &lt;a href=&quot;https://gist.github.com/mattwarren/894aa5f46ca62a63764a&quot;&gt;sample LINQPad script&lt;/a&gt; if you want to start playing around with the API yourself.&lt;/p&gt;

&lt;p&gt;However, knowing the “&lt;em&gt;# of Issues&lt;/em&gt;” or “&lt;em&gt;Merged Pull Requests&lt;/em&gt;” per/month on it’s own isn’t that useful, it doesn’t tell us anything about &lt;em&gt;who&lt;/em&gt; created the issue or submitted the PR. Fortunately GitHub classifies users into categories, for instance in the image below from &lt;a href=&quot;https://github.com/dotnet/roslyn/issues/670&quot;&gt;Roslyn Issue #670&lt;/a&gt; we can see what type of user posted each comment, an “Owner”, “Collaborator” or blank which signifies a “Community” member, i.e. someone who (AFAICT) doesn’t work at Microsoft.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.githubusercontent.com/assets/157298/11634101/8abd7210-9d06-11e5-82b0-570f296cf433.png&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/157298/11634101/8abd7210-9d06-11e5-82b0-570f296cf433.png&quot; alt=&quot;owner collaborator or community&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;&lt;a name=&quot;Results&quot;&gt;&lt;/a&gt;&lt;strong&gt;Results&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;So now that we can get the data we need, what results do we get.&lt;/p&gt;

&lt;h3 id=&quot;total-issues---by-submitter&quot;&gt;&lt;a name=&quot;TotalIssuesBySubmitter&quot;&gt;&lt;/a&gt;&lt;strong&gt;Total Issues - By Submitter&lt;/strong&gt;&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Project&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Owner&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Collaborator&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Community&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Roslyn&lt;/td&gt;
      &lt;td&gt;481&lt;/td&gt;
      &lt;td&gt;1867&lt;/td&gt;
      &lt;td&gt;1596&lt;/td&gt;
      &lt;td&gt;3944&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CoreCLR&lt;/td&gt;
      &lt;td&gt;86&lt;/td&gt;
      &lt;td&gt;298&lt;/td&gt;
      &lt;td&gt;487&lt;/td&gt;
      &lt;td&gt;871&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CoreFX&lt;/td&gt;
      &lt;td&gt;334&lt;/td&gt;
      &lt;td&gt;911&lt;/td&gt;
      &lt;td&gt;735&lt;/td&gt;
      &lt;td&gt;1980&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;901&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;3076&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;2818&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;6795&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Here you can see that the Owners and Collaborators do in some cases dominate, e.g. in Roslyn where almost 60% of the issues were opened by them. But in other cases the Community is very active, especially in CoreCLR where Community members are opening more issues than Owners/Collaborators combined. Part of the reason for this is the nature of the different repositories, CoreCLR is the most visible part of the .NET framework as it encompasses most of the libraries that .NET developers would use on a day-to-day basis, so it’s not surprising that the Community has lots of suggestions for improvements or bug fixes. In addition, the CoreCLR has been around for a much longer time and so the Community has had more time to use it and find out the parts it doesn’t like. Whereas Roslyn is a much newer project so there has been less time to use it, plus finding bugs in a compiler is by its nature harder to do.&lt;/p&gt;

&lt;h3 id=&quot;total-merged-pull-requests---by-submitter&quot;&gt;&lt;a name=&quot;TotalMergedPullRequestsBySubmitter&quot;&gt;&lt;/a&gt;&lt;strong&gt;Total Merged Pull Requests - By Submitter&lt;/strong&gt;&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Project&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Owner&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Collaborator&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Community&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Roslyn&lt;/td&gt;
      &lt;td&gt;465&lt;/td&gt;
      &lt;td&gt;2093&lt;/td&gt;
      &lt;td&gt;118&lt;/td&gt;
      &lt;td&gt;2676&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CoreCLR&lt;/td&gt;
      &lt;td&gt;378&lt;/td&gt;
      &lt;td&gt;567&lt;/td&gt;
      &lt;td&gt;201&lt;/td&gt;
      &lt;td&gt;1146&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CoreFX&lt;/td&gt;
      &lt;td&gt;516&lt;/td&gt;
      &lt;td&gt;1409&lt;/td&gt;
      &lt;td&gt;464&lt;/td&gt;
      &lt;td&gt;2389&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;1359&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;4069&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;783&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;6211&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;However if we look at Merged Pull Requests, we can see that that the overall amount of Community contributions across the 3 projects is much lower, only accounting for roughly 12%. This however isn’t that surprising, there’s a much higher bar for getting a pull request accepted. Firstly, if the project is using this mechanism, you have to pick an issue that is &lt;a href=&quot;https://github.com/dotnet/corefx/labels/up%20for%20grabs&quot;&gt;“&lt;em&gt;up for grabs&lt;/em&gt;”&lt;/a&gt;, then you have to get any &lt;a href=&quot;http://blogs.msdn.com/b/dotnet/archive/2015/01/08/api-review-process-for-net-core.aspx&quot;&gt;API changes through a review&lt;/a&gt;, then finally you have to meet any comparability/performance/correctness issues that come up during the code review itself. So actually 12% is a pretty good result as there is a non–trivial amount of work involved in getting your PR merged, especially considering most Community members will be working in their spare time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I was wrong about the “up for grabs” requirement, see &lt;a href=&quot;/2015/12/08/open-source-net-1-year-later/#comment-7091&quot;&gt;this comment&lt;/a&gt; from &lt;a href=&quot;https://github.com/davkean&quot;&gt;David Kean&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/leppie/status/674285812146675714&quot;&gt;this tweet&lt;/a&gt; for more information. “Up for grabs” is a guideline and meant to help new users, but it is not a requirement, you can submit PRs for issues that don’t have that label.&lt;/p&gt;

&lt;p&gt;Finally if you look at the amount per/month (see the 2 graphs below, click for larger images), it’s hard to pick up any definite trends or say if the Community is &lt;em&gt;definitely&lt;/em&gt; contributing more or less over time. But you can say that over a year the Community has consistently contributed and it doesn’t look like that contribution is going to end. It is not just an initial burst that only happened straight after the projects were open sourced, it is a sustained level of contributions over an entire year.&lt;/p&gt;

&lt;h3 id=&quot;issues-per-month---by-submitter&quot;&gt;&lt;a name=&quot;IssuesPerMonthBySubmitter&quot;&gt;&lt;/a&gt;&lt;strong&gt;Issues Per Month - By Submitter&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.githubusercontent.com/assets/157298/11596712/ad28f518-9aae-11e5-81d9-42bc22903d09.png&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/157298/11596712/ad28f518-9aae-11e5-81d9-42bc22903d09.png&quot; alt=&quot;Issues Per Month - By Submitter (Owner, Collaborator or Community)&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;merged-pull-request-per-month---by-submitter&quot;&gt;&lt;a name=&quot;MergedPullRequestPerMonthBySubmitter&quot;&gt;&lt;/a&gt;&lt;strong&gt;Merged Pull Request Per Month - By Submitter&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.githubusercontent.com/assets/157298/11652755/785d0d20-9d91-11e5-9802-834bb3955718.png&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/157298/11652755/785d0d20-9d91-11e5-9802-834bb3955718.png&quot; alt=&quot;Merged Pull Requests Per Month - By Submitter (Owner, Collaborator or Community)&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;top-20-issue-labels&quot;&gt;&lt;a name=&quot;Top20IssuesLabels&quot;&gt;&lt;/a&gt;&lt;strong&gt;Top 20 Issue Labels&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The last thing that I want to do whilst I have the data is to take a look at the most popular &lt;em&gt;Issue Labels&lt;/em&gt; and see what they tell us about the &lt;em&gt;type&lt;/em&gt; of work that has been going on since the 3 projects were open sourced.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.githubusercontent.com/assets/157298/11633496/8505205a-9d03-11e5-89fd-33384b20306c.png&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/157298/11633496/8505205a-9d03-11e5-89fd-33384b20306c.png&quot; alt=&quot;Top 20 Issue Labels&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are a few observations about the results:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Having &lt;a href=&quot;https://github.com/dotnet/coreclr/labels/CodeGen&quot;&gt;&lt;strong&gt;CodeGen&lt;/strong&gt;&lt;/a&gt; so high on the list is not that surprising considering that &lt;a href=&quot;http://blogs.msdn.com/b/dotnet/archive/2013/09/30/ryujit-the-next-generation-jit-compiler.aspx&quot;&gt;RyuJIT - the next-gen .NET JIT Compiler&lt;/a&gt; was only released 2 years ago. However, it’s a bit worrying that were so &lt;em&gt;many&lt;/em&gt; issues, especially considering that some of them have &lt;a href=&quot;https://github.com/dotnet/coreclr/issues/1296&quot;&gt;severe consequences&lt;/a&gt; as the &lt;a href=&quot;http://nickcraver.com/blog/2015/07/27/why-you-should-wait-on-dotnet-46/&quot;&gt;devs at Stack Overflow&lt;/a&gt; found out! (On a related note, if you want to find out lots of low-level details about what the JIT does, just take a look at all the issues that &lt;a href=&quot;https://github.com/dotnet/coreclr/issues?utf8=%E2%9C%93&amp;amp;q=commenter%3Amikedn+type%3Aissue+label%3Acodegen+&quot;&gt;@MikeDN has commented on&lt;/a&gt;, unbelievably for someone with that much knowledge he doesn’t actually work on the product itself, or even another team at Microsoft!!)&lt;/li&gt;
  &lt;li&gt;It’s nice to see that all 3 projects have a lots of &lt;strong&gt;“Up for Grabs”&lt;/strong&gt; issues, see &lt;a href=&quot;https://github.com/dotnet/roslyn/labels/Up%20for%20Grabs&quot;&gt;Roslyn&lt;/a&gt;, &lt;a href=&quot;https://github.com/dotnet/coreclr/labels/up-for-grabs&quot;&gt;CoreCLR&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/corefx/labels/up%20for%20grabs&quot;&gt;CoreFX&lt;/a&gt;, plus the Community seems to be &lt;a href=&quot;https://github.com/dotnet/corefx/labels/grabbed%20by%20community&quot;&gt;grabbing them back!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Finally, I love the fact that &lt;a href=&quot;https://github.com/dotnet/corefx/labels/performance&quot;&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/coreCLR/labels/optimization&quot;&gt;&lt;strong&gt;Optimisation&lt;/strong&gt;&lt;/a&gt; are being taken seriously, after all &lt;a href=&quot;/speaking/&quot;&gt;Performance is a Feature!!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Discuss on &lt;a href=&quot;https://www.reddit.com/r/programming/comments/3vyezb/open_source_net_1_year_later/&quot;&gt;/r/programming&lt;/a&gt; and &lt;a href=&quot;https://news.ycombinator.com/item?id=10697993&quot;&gt;Hacker News&lt;/a&gt;&lt;/p&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2015/12/08/open-source-net-1-year-later/&quot;&gt;Open Source .NET – 1 year later&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='.NET' scheme='http://www.mattwarren.org/tags#.NET'/>
   
     <category term='Analytics' scheme='http://www.mattwarren.org/tags#Analytics'/>
   
     <category term='Open Source' scheme='http://www.mattwarren.org/tags#Open Source'/>
   
     <category term='Roslyn' scheme='http://www.mattwarren.org/tags#Roslyn'/>
   
 </entry>
 
 <entry>
   <title>The Stack Overflow Tag Engine – Part 3</title>
   <link href="http://www.mattwarren.org/2015/10/29/the-stack-overflow-tag-engine-part-3/"/>
   <updated>2015-10-29T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2015/10/29/the-stack-overflow-tag-engine-part-3</id>
   <content type="html">
     &lt;p&gt;This is the part 3 of a mini-series looking at what it &lt;em&gt;might&lt;/em&gt; take to build the Stack Overflow Tag Engine, if you haven’t read &lt;a href=&quot;/2014/11/01/the-stack-overflow-tag-engine-part-1/&quot;&gt;part 1&lt;/a&gt; or &lt;a href=&quot;/2015/08/19/the-stack-overflow-tag-engine-part-2/&quot;&gt;part 2&lt;/a&gt;, I recommend reading them first.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;complex-boolean-queries&quot;&gt;&lt;a name=&quot;ComplexBooleanQueries&quot;&gt;&lt;/a&gt;&lt;strong&gt;Complex boolean queries&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;One of the most powerful features of the Stack Overflow Tag Engine is that it allows you to do complex boolean queries against multiple Tag, for instance:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/tagged/.net+or+jquery-&quot;&gt;.net OR (NOT jquery)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/tagged/.net+or+jquery-+javascript&quot;&gt;.net OR (NOT jquery) AND javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A simple way of implementing this is to write code like below, which makes use of a &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/bb359438(v=vs.110).aspx&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HashSet&lt;/code&gt;&lt;/a&gt; to let us efficiently do lookups to see if a particular questions should be included or excluded.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Question&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pageSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;andHashSet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HastSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queryInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;baseQueryCounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tagsToExclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;excludedCounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;andHashSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemsSkipped&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;itemsSkipped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The main problem is that we have to scan through all the ids for &lt;code class=&quot;highlighter-rouge&quot;&gt;tag1&lt;/code&gt; until we have enough matches, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;foreach (var id in queryInfo[tag1])&lt;/code&gt;. In addition we have to initially load up the &lt;code class=&quot;highlighter-rouge&quot;&gt;HashSet&lt;/code&gt; with all the ids for &lt;code class=&quot;highlighter-rouge&quot;&gt;tag2&lt;/code&gt;, so that we can check matches. So this method takes longer as we skip more and more questions, i.e. for larger value of &lt;code class=&quot;highlighter-rouge&quot;&gt;skip&lt;/code&gt; or if there are a large amount of &lt;code class=&quot;highlighter-rouge&quot;&gt;tagsToExclude&lt;/code&gt; (i.e. “&lt;em&gt;Ignored Tags&lt;/em&gt;”), see &lt;a href=&quot;/2015/08/19/the-stack-overflow-tag-engine-part-2/#IgnoredTags&quot;&gt;Part 2 for more infomation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;bitmaps&quot;&gt;&lt;a name=&quot;Bitmaps&quot;&gt;&lt;/a&gt;&lt;strong&gt;Bitmaps&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;So can we do any better, well yes, there is a fairly established mechanism for doing these types of queries, known as &lt;a href=&quot;http://lemire.me/blog/archives/2008/08/20/the-mythical-bitmap-index/&quot;&gt;&lt;strong&gt;Bitmap indexes&lt;/strong&gt;&lt;/a&gt;. To use these you have to pre-calculate an index in which each bit is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; to indicate a match and &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; otherwise. In our scenario this looks so:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2015/10/bit-map-indexing-explanation.png&quot;&gt;&lt;img src=&quot;/images/2015/10/bit-map-indexing-explanation.png&quot; alt=&quot;Bit Map Indexing explanation&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then it is just a case of doing the relevant bitwise operations against the bits (a &lt;code class=&quot;highlighter-rouge&quot;&gt;byte&lt;/code&gt; at a time), for example if you want to get the questions that have the &lt;code class=&quot;highlighter-rouge&quot;&gt;C#&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;AND&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Java&lt;/code&gt; Tags, you do the following:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numBits&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitSetCSharp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitSetJava&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The main drawback is that we have to create a Bitmap index for &lt;em&gt;each&lt;/em&gt; tag (&lt;code class=&quot;highlighter-rouge&quot;&gt;C#&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.NET&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Java&lt;/code&gt;, etc) for &lt;em&gt;every&lt;/em&gt; sort order (&lt;code class=&quot;highlighter-rouge&quot;&gt;LastActivityDate&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CreationDate&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Score&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewCount&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;AnswerCount&lt;/code&gt;), so we soon use up a &lt;em&gt;lot&lt;/em&gt; of memory. The Sept 2014 Stack Overflow dataset contains just under 8 million questions and so at 8 questions per byte, a single Bitmap needs 976KB or 0.95MB. This adds up to an impressive &lt;strong&gt;149GB&lt;/strong&gt; (0.95MB * 32,000 Tags * 5 sort orders).&lt;/p&gt;

&lt;h2 id=&quot;compressed-bitmaps&quot;&gt;&lt;a name=&quot;CompressedBitmaps&quot;&gt;&lt;/a&gt;&lt;strong&gt;Compressed Bitmaps&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Fortunately there is a way to heavily compress the Bitmaps using a form of &lt;a href=&quot;http://en.wikipedia.org/wiki/Run-length_encoding&quot;&gt;Run-length encoding&lt;/a&gt;, to do this I made use of the &lt;a href=&quot;https://github.com/lemire/csharpewah&quot;&gt;C# version&lt;/a&gt; of the excellent &lt;a href=&quot;https://github.com/lemire/javaewah&quot;&gt;EWAH library&lt;/a&gt;. This library is based on the research carried out in the paper &lt;a href=&quot;http://arxiv.org/abs/0901.3751&quot;&gt;Sorting improves word-aligned bitmap indexes&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/lemire&quot;&gt;Daniel Lemire&lt;/a&gt; and others. By using EWAH it has the added benefit that you don’t need to uncompress the Bitmap to perform the bitwise operations, they can be done in-place (for an idea of how this is done take a look at &lt;a href=&quot;https://github.com/mattwarren/StackOverflowTagServer/commit/20561e60e1b7d90ff0bb023ec8cf89494d0705f5&quot;&gt;this commit where I added a single in-place &lt;code class=&quot;highlighter-rouge&quot;&gt;AndNot&lt;/code&gt; function&lt;/a&gt; to the existing library).&lt;/p&gt;

&lt;p&gt;However if you don’t want to read the &lt;a href=&quot;http://arxiv.org/abs/0901.3751&quot;&gt;research paper&lt;/a&gt;, the diagram below shows how the Bitmap is compressed into 64-bit &lt;code class=&quot;highlighter-rouge&quot;&gt;words&lt;/code&gt; that have 1 or more bits set, plus runs of repeating zeros or ones. So &lt;code class=&quot;highlighter-rouge&quot;&gt;31 0x00&lt;/code&gt; indicates that 31 instances of a &lt;code class=&quot;highlighter-rouge&quot;&gt;64-bit word&lt;/code&gt; (with all the bits set to &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;) have be encoded as a single value, rather than as 31 individual &lt;code class=&quot;highlighter-rouge&quot;&gt;words&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 0x00
1 words
        [   0]=                   17,  2 bits set -&amp;gt;
        {0000000000000000000000000000000000000000000000000000000000010001}
31 0x00
1 words
        [   0]=        2199023255552,  1 bits set -&amp;gt;
        {0000000000000000000000100000000000000000000000000000000000000000}
18 0x01
1 words
        [   0]=                   64,  1 bits set -&amp;gt;
        {0000000000000000000000000000000000000000000000000000000001000000}
48 0x01
3 words
        [   0]=              1048576,  1 bits set -&amp;gt;
        {0000000000000000000000000000000000000000000100000000000000000000}
        [   1]=     9007199254740992,  1 bits set -&amp;gt;
        {0000000000100000000000000000000000000000000000000000000000000000}
        [   2]=     9007199304740992,  13 bits set -&amp;gt;
        {0000000000100000000000000000000000000010111110101111000010000000}
131 0x00
1 words
        [   0]=            536870912,  1 bits set -&amp;gt;
        {0000000000000000000000000000000000100000000000000000000000000000}
....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To give an idea of the space savings that can be achieved, the table below shows the size in bytes for compressed Bitmaps that have varying amounts of individual bit set to &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; (for comparision uncompressed Bitmaps are 1,000,000 bytes or 0.95MB)&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;# Bits Set&lt;/th&gt;
      &lt;th&gt;Size in Bytes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;168&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;408&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;808&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;1,608&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;200&lt;/td&gt;
      &lt;td&gt;3,208&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;400&lt;/td&gt;
      &lt;td&gt;6,408&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;800&lt;/td&gt;
      &lt;td&gt;12,808&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1,600&lt;/td&gt;
      &lt;td&gt;25,608&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;32,000&lt;/td&gt;
      &lt;td&gt;512,008&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;64,000&lt;/td&gt;
      &lt;td&gt;1,000,008&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;128,000&lt;/td&gt;
      &lt;td&gt;1,000,008&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As you can see it’s not until we get over 64,000 bits (62,016 to be precise) that we match the size of the regular Bitmaps. &lt;strong&gt;Note:&lt;/strong&gt; in these tests I was setting the bits with an evenly spaced distribution across the entire range of 8 million possible bits. The compression is also dependant on which bits are set, so this is a worse case. The more the bits are clumped together (within the same &lt;code class=&quot;highlighter-rouge&quot;&gt;byte&lt;/code&gt;), the more it will be compressed.&lt;/p&gt;

&lt;p&gt;So over the entire Stack Overflow data set of 32,000 Tags, the Bitmaps compress down to  an impressive &lt;strong&gt;1.17GB&lt;/strong&gt;, compared to 149GB uncompressed!&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;&lt;a name=&quot;Results&quot;&gt;&lt;/a&gt;&lt;strong&gt;Results&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;But do queries against compressed Bitmaps actually perform faster than the naive queries using &lt;code class=&quot;highlighter-rouge&quot;&gt;HashSets&lt;/code&gt; (see code above). Well yes they do and in some cases the difference is significant.&lt;/p&gt;

&lt;p&gt;As you can see below, for &lt;code class=&quot;highlighter-rouge&quot;&gt;AND NOT&lt;/code&gt; queries they are much faster, especially compared to the worse-case where the regular/naive code takes over 150 ms and the compressed Bitmap code takes ~5 ms (the x-axis is &lt;code class=&quot;highlighter-rouge&quot;&gt;# of excluded/skipped questions&lt;/code&gt; and the y-axis is &lt;code class=&quot;highlighter-rouge&quot;&gt;time in milliseconds&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2015/10/and-not-queries-with-exclusions.png&quot;&gt;&lt;img src=&quot;/images/2015/10/and-not-queries-with-exclusions.png&quot; alt=&quot;AND NOT Queries with Exclusions&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For reference there are 194,384 questions tagged with &lt;code class=&quot;highlighter-rouge&quot;&gt;.net&lt;/code&gt; and 528,490 tagged with &lt;code class=&quot;highlighter-rouge&quot;&gt;jquery&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To ensure I’m being fair, I should point out that the compressed Bitmap queries are &lt;em&gt;slower&lt;/em&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;OR&lt;/code&gt; queries, as shown below. But note the scale, they take ~5 ms compared to ~1-2 ms for the regular queries, so the compressed Bitmap queries are still fast! The nice things about the compressed Bitmap queries is that they take the same amount of time, regardless of how many questions we skip, whereas the regular queries get slower as &lt;code class=&quot;highlighter-rouge&quot;&gt;# of excluded/skipped questions&lt;/code&gt; increases.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2015/10/or-queries-with-exclusions.png&quot;&gt;&lt;img src=&quot;/images/2015/10/or-queries-with-exclusions.png&quot; alt=&quot;OR Queries with Exclusions&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are interested the results for all the query types are available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/images/2015/10/and-queries-with-exclusions.png&quot;&gt;AND Queries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/images/2015/10/and-not-queries-with-exclusions.png&quot;&gt;AND NOT Queries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/images/2015/10/or-queries-with-exclusions.png&quot;&gt;OR Queries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/images/2015/10/or-not-queries-with-exclusions.png&quot;&gt;OR NOT Queries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/images/2015/10/or-not-queries-with-exclusions.png&quot;&gt;OR NOT Queries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;&lt;a name=&quot;FurtherReading&quot;&gt;&lt;/a&gt;&lt;strong&gt;Further Reading&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Bitmaps
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://lemire.me/blog/archives/2008/08/20/the-mythical-bitmap-index/&quot;&gt;The mythical bitmap index&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roaringbitmap.org/&quot;&gt;Roaring Bitmaps&lt;/a&gt; (a newer/faster compressed Bit Map implementation)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://lemire.me/blog/archives/2012/10/23/when-is-a-bitmap-faster-than-an-integer-list/&quot;&gt;When is a bitmap faster than an integer list&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://kellabyte.com/2013/03/05/using-bitmap-indexes-in-databases/&quot;&gt;Using bitmap indexes in databases&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=8796997&quot;&gt;Interesting Hacker News discussion on Roaring Bitmaps&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://ascr-discovery.science.doe.gov/2008/12/more-than-a-bit-faster/&quot;&gt;Research into different Bitmap implementations&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Real-world usage
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://githubengineering.com/counting-objects/&quot;&gt;How GitHub used Bitmaps to speed up repository cloning&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/blog/frame-of-reference-and-roaring-bitmaps&quot;&gt;Roaring Bitmap implementation in Elastic Search&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-5983&quot;&gt;Usage of Bitmaps indexes in Lucene&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://groups.google.com/forum/m/#!topic/druid-development/_kw2jncIlp0&quot;&gt;Compressed Bitmaps implemented in Druid&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;future-posts&quot;&gt;&lt;a name=&quot;FuturePosts&quot;&gt;&lt;/a&gt;&lt;strong&gt;Future Posts&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;But there’s still more things to implement, in future posts I hope to cover the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Currently my implementation doesn’t play nicely with the Garbage Collector and it does lots of allocations. I will attempt to replicate the “no-allocations” rule that Stack Overflow have after &lt;a href=&quot;http://blog.marcgravell.com/2011/10/assault-by-gc.html&quot;&gt;their battle with the .NET GC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/Nick_Craver/status/636516399435923456&quot;&gt;&lt;img src=&quot;/images/2015/10/nick_craver-tweet.png&quot; alt=&quot;Nick_Craver Tweet&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackstatus.net/post/107352821074/outage-postmortem-january-6th-2015&quot;&gt;How a DDOS attack on TagServer&lt;/a&gt; &lt;em&gt;might&lt;/em&gt; have been caused&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;In October, we had a situation where a flood of crafted requests were causing high resource utilization on our Tag Engine servers, which is our internal application for associating questions and tags in a high-performance way.&lt;/p&gt;
&lt;/blockquote&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2015/10/29/the-stack-overflow-tag-engine-part-3/&quot;&gt;The Stack Overflow Tag Engine – Part 3&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='indexing' scheme='http://www.mattwarren.org/tags#indexing'/>
   
     <category term='Stack Overflow' scheme='http://www.mattwarren.org/tags#Stack Overflow'/>
   
     <category term='Tag Engine' scheme='http://www.mattwarren.org/tags#Tag Engine'/>
   
 </entry>
 
 <entry>
   <title>The Stack Overflow Tag Engine – Part 2</title>
   <link href="http://www.mattwarren.org/2015/08/19/the-stack-overflow-tag-engine-part-2/"/>
   <updated>2015-08-19T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2015/08/19/the-stack-overflow-tag-engine-part-2</id>
   <content type="html">
     &lt;p&gt;I’ve added a &lt;a href=&quot;/resources/&quot;&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;/speaking/&quot;&gt;&lt;strong&gt;Speaking&lt;/strong&gt;&lt;/a&gt; page to my site, check them out if you want to learn more. There’s also a video available of my NDC London 2014 talk &lt;a href=&quot;/speaking/#NDCLondon2014&quot;&gt;“Performance is a Feature!”&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;recap-of-stack-overflow-tag-engine&quot;&gt;&lt;a name=&quot;Recap&quot;&gt;&lt;/a&gt;&lt;strong&gt;Recap of Stack Overflow Tag Engine&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;This is the long-delayed part 2 of a mini-series looking at what it &lt;em&gt;might&lt;/em&gt; take to build the Stack Overflow Tag Engine, if you haven’t read &lt;a href=&quot;/2014/11/01/the-stack-overflow-tag-engine-part-1/&quot; target=&quot;_blank&quot;&gt;part 1&lt;/a&gt;, I recommend reading it first.&lt;/p&gt;

&lt;p&gt;Since the first part was published, Stack Overflow published a nice performance report, giving some more stats on the Tag Engine Servers. As you can see they run the Tag Engine on some pretty powerful servers, but only have a peak CPU usage of 10%, which means there’s plenty of overhead available. It’s a nice way of being able to cope with surges in demand or busy times of the day.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackexchange.com/performance&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2015/08/tag-server-infographic.png&quot; alt=&quot;Tag Engine infographic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;ignored-tag-preferences&quot;&gt;&lt;a name=&quot;IgnoredTags&quot;&gt;&lt;/a&gt;&lt;strong&gt;Ignored Tag Preferences&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;/2014/11/01/the-stack-overflow-tag-engine-part-1/&quot; target=&quot;_blank&quot;&gt;part 1&lt;/a&gt;, I only really covered the simple things, i.e. a basic search for all the questions that contain a given tag, along with multiple sort orders (by score, view count, etc). But the real Tag Engine does much more than that, for instance:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/marcgravell/status/522515630248189953&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2015/08/tweet-wildcard-exclusions.png&quot; alt=&quot;Tweet - Wildcard exclusions&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is he talking about here? Well any time you do a &lt;em&gt;tag&lt;/em&gt; search, after the actual search has been done per-user exclusions can then be applied. These exclusions are configurable and allow you to set &lt;em&gt;“Ignored Tags”&lt;/em&gt;, i.e. tags that you don’t want to see questions for. Then when you do a search, it will exclude these questions from the results.&lt;/p&gt;

&lt;p&gt;Note: it will let you know if there were questions excluded due to your preferences, which is a pretty nice user-experience. If that happens, you get this message: (it can also be configured so that matching questions are greyed out instead):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2015/08/questions-hidden-due-to-ignored-tag-preferences.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2015/08/questions-hidden-due-to-ignored-tag-preferences.png&quot; alt=&quot;Questions hidden due to Ignored Tag preferences&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now most people probably have just a few exclusions and maybe 10’s at most, but fortunately &lt;a href=&quot;https://twitter.com/leppie&quot; target=&quot;_blank&quot;&gt;@leppie&lt;/a&gt; a Stack Overflow &lt;a href=&quot;http://stackoverflow.com/users/15541/leppie&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;power-user&lt;/em&gt;&lt;/a&gt; got in touch with me and shared his list of preferences.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leppie/4d9b84abd8c2d06d6ef4.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;You’ll need to scroll across to appreciate this full extent of this list, but here’s some statistics to help you:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;It contains &lt;strong&gt;3,753&lt;/strong&gt; items, of which &lt;strong&gt;210&lt;/strong&gt; are wildcards (e.g. cocoa* or *hibernate*)&lt;/li&gt;
    &lt;li&gt;The tags and wildcards expand to &lt;strong&gt;7,677&lt;/strong&gt; tags in total (out of a possible 30,529 tags)&lt;/li&gt;
    &lt;li&gt;There are &lt;strong&gt;6,428,251&lt;/strong&gt; questions (out of 7,990,787) that have at least one of the 7,677 tags in them!&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;wildcards&quot;&gt;&lt;a name=&quot;Wildcards&quot;&gt;&lt;/a&gt;&lt;strong&gt;Wildcards&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;If you want to see the wildcard expansion in action you can visit the url’s below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/tagged/*java*?sort=votes&quot; target=&quot;_blank&quot;&gt;*java*&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;[facebook-javascript-sdk] [java]  [java.util.scanner] [java-7] [java-8] [javabeans] [javac] [javadoc] [java-ee] [java-ee-6] [javafx] [javafx-2] [javafx-8] [java-io] [javamail] [java-me] [javascript] [javascript-events] [javascript-objects] [java-web-start]&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/tagged/.net*?sort=votes&quot; target=&quot;_blank&quot;&gt;.net*&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;[.net] [.net-1.0] [.net-1.1] [.net-2.0] [.net-3.0] [.net-3.5] [.net-4.0] [.net-4.5] [.net-4.5.2] [.net-4.6] [.net-assembly] [.net-cf-3.5] [.net-client-profile] [.net-core] [.net-framework-version] [.net-micro-framework] [.net-reflector] [.net-remoting] [.net-security] [.nettiers]&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now a simple way of doing these matches is the following, i.e. loop through the wildcards and compare each one with every single tag to see if it could be expanded to match that tag. (&lt;code class=&quot;highlighter-rouge&quot;&gt;IsActualMatch(..)&lt;/code&gt; is a simple method that does a basic string &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/baketfxw(v=vs.110).aspx&quot; target=&quot;_blank&quot;&gt;StartsWith&lt;/a&gt;, &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/2333wewz(v=vs.110).aspx&quot; target=&quot;_blank&quot;&gt;EndsWith&lt;/a&gt; or &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dy85x1sa(v=vs.110).aspx&quot; target=&quot;_blank&quot;&gt;Contains&lt;/a&gt; as appropriate)&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expandedTags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wildcard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wildcardsToExpand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsWildCard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tagToExpand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawTagPattern&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tagToExpand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allTags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsActualMatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tagToExpand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawTagPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;expandedTags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allTags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ContainsKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tagToExpand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;expandedTags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tagToExpand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This works fine with a few wildcards, but it’s not very efficient. Even on a relatively small data-set containing 32,000 tags, it’s slow when comparing it to 210 &lt;code class=&quot;highlighter-rouge&quot;&gt;wildcardsToExpand&lt;/code&gt;, taking over a second. After chatting to a few of the Stack Overflow developers on Twitter, they consider a Tag Engine query that takes longer than 500 milliseconds to be slow, so a second just to apply the wildcards is unacceptable.&lt;/p&gt;

&lt;h2 id=&quot;trigram-index&quot;&gt;&lt;a name=&quot;TrigramIndex&quot;&gt;&lt;/a&gt;&lt;strong&gt;Trigram Index&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;So can we do any better? Well it turns out that that there is a really nice technique for doing &lt;a href=&quot;https://swtch.com/~rsc/regexp/regexp4.html&quot; target=&quot;_blank&quot;&gt;Regular Expression Matching with a Trigram Index&lt;/a&gt; that is used in &lt;a href=&quot;https://code.google.com/p/chromium/codesearch&quot; target=&quot;_blank&quot;&gt;Google Code Search&lt;/a&gt;. I’m not going to explain all the details, the linked page has a very readable explanation. But basically what you do is create an &lt;em&gt;inverted index&lt;/em&gt; of the tags and search the index instead. That way you aren’t affected so much by the amount of wilcards, because you are only searching via an index rather than a full search that runs over the whole list of tags.&lt;/p&gt;

&lt;p&gt;For instance when using Trigrams, the tags are initially split into 3 letter chunks, for instance the expansion for the tag &lt;em&gt;javascript&lt;/em&gt; is shown below (‘_’ is added to denote the start/end of a word):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;_ja, jav, ava, vas, asc, scr, cri, rip, ipt, pt_&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next you create an index of all the tags as trigrams and include the position of tag they came from so that you can reference back to it later:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;_ja -&amp;gt; { 0, 5, 6 }&lt;/li&gt;
    &lt;li&gt;jav -&amp;gt; { 0, 5, 12 }&lt;/li&gt;
    &lt;li&gt;ava -&amp;gt; { 0, 5, 6 }&lt;/li&gt;
    &lt;li&gt;va_ -&amp;gt; { 0, 5, 11, 13 }&lt;/li&gt;
    &lt;li&gt;_ne -&amp;gt; { 1, 10, 12 }&lt;/li&gt;
    &lt;li&gt;net -&amp;gt; { 1, 10, 12, 15 }&lt;/li&gt;
    &lt;li&gt;…&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example if you want to match any tags that contain &lt;em&gt;java&lt;/em&gt; any where in the tag, i.e. a *java* wildcard query, you fetch the index values for &lt;code class=&quot;highlighter-rouge&quot;&gt;jav&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ava&lt;/code&gt;, which gives you (from above) these 2 matching index items:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;jav -&amp;gt; { 0, 5, 12 }&lt;/li&gt;
    &lt;li&gt;ava -&amp;gt; { 0, 5, 6 }&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;and you now know that the tags with index &lt;em&gt;0&lt;/em&gt; and &lt;em&gt;5&lt;/em&gt; are the only matches because they have &lt;code class=&quot;highlighter-rouge&quot;&gt;jav&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ava&lt;/code&gt; (&lt;em&gt;6&lt;/em&gt; and &lt;em&gt;12&lt;/em&gt; don’t have both)&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;&lt;a name=&quot;Results&quot;&gt;&lt;/a&gt;&lt;strong&gt;Results&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;On my laptop I get the results shown below, where &lt;code class=&quot;highlighter-rouge&quot;&gt;Contains&lt;/code&gt; is the naive way shown above and &lt;code class=&quot;highlighter-rouge&quot;&gt;Regex&lt;/code&gt; is an &lt;em&gt;attempt&lt;/em&gt; to make it faster by using compiled Regex queries (which was actually slower)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Expanded to 7,677 tags (Contains), took 721.51 ms
Expanded to 7,677 tags (Regex), took 1,218.69 ms
Expanded to 7,677 tags (Trigrams), took  54.21 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the inverted index using Trigrams is a clear winner. If you are interested, the &lt;a href=&quot;https://github.com/mattwarren/StackOverflowTagServer/blob/master/TagServer/WildcardProcessor.cs&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt; is available on GitHub.&lt;/p&gt;

&lt;p&gt;In this post I showed &lt;em&gt;one way&lt;/em&gt; that the Tag Engine could implement wildcards matching. As I don’t work at Stack Overflow there’s no way of knowing if they use the same method or not, but at the very least my method is pretty quick!&lt;/p&gt;

&lt;h2 id=&quot;future-posts&quot;&gt;&lt;a name=&quot;FuturePosts&quot;&gt;&lt;/a&gt;&lt;strong&gt;Future Posts&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;But there’s still more things to implement, in future posts I hope to cover the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/tagged/.net+or+jquery-&quot; target=&quot;_blank&quot;&gt;Complex boolean queries&lt;/a&gt;, i.e. questions tagged “c# OR .NET”, “.net AND (NOT jquery)” and how to make them fast&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackstatus.net/post/107352821074/outage-postmortem-january-6th-2015&quot; target=&quot;_blank&quot;&gt;How a DDOS attack on TagServer&lt;/a&gt; &lt;em&gt;might&lt;/em&gt; have been caused&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;In October, we had a situation where a flood of crafted requests were causing high resource utilization on our Tag Engine servers, which is our internal application for associating questions and tags in a high-performance way.&lt;/p&gt;
&lt;/blockquote&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2015/08/19/the-stack-overflow-tag-engine-part-2/&quot;&gt;The Stack Overflow Tag Engine – Part 2&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='indexing' scheme='http://www.mattwarren.org/tags#indexing'/>
   
     <category term='Stack Overflow' scheme='http://www.mattwarren.org/tags#Stack Overflow'/>
   
     <category term='Tag Engine' scheme='http://www.mattwarren.org/tags#Tag Engine'/>
   
 </entry>
 
 <entry>
   <title>The Stack Overflow Tag Engine – Part 1</title>
   <link href="http://www.mattwarren.org/2014/11/01/the-stack-overflow-tag-engine-part-1/"/>
   <updated>2014-11-01T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2014/11/01/the-stack-overflow-tag-engine-part-1</id>
   <content type="html">
     &lt;p&gt;I’ve added a &lt;a href=&quot;/resources/&quot;&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;/speaking/&quot;&gt;&lt;strong&gt;Speaking&lt;/strong&gt;&lt;/a&gt; page to my site, check them out if you want to learn more.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;stack-overflow-tag-engine&quot;&gt;&lt;a name=&quot;Introduction&quot;&gt;&lt;/a&gt;&lt;strong&gt;Stack Overflow Tag Engine&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;I first heard about the Stack Overflow &lt;a href=&quot;http://samsaffron.com/archive/2011/10/28/in-managed-code-we-trust-our-recent-battles-with-the-net-garbage-collector&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Tag engine of doom&lt;/em&gt;&lt;/a&gt; when I read about &lt;a href=&quot;http://blog.marcgravell.com/2011/10/assault-by-gc.html&quot; target=&quot;_blank&quot;&gt;their battle with the .NET Garbage Collector&lt;/a&gt;. If you haven’t heard of it before I recommend reading the previous links and then this interesting &lt;a href=&quot;http://blog.marcgravell.com/2014/04/technical-debt-case-study-tags.html&quot; target=&quot;_blank&quot;&gt;case-study on technical debt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But if you’ve ever visited &lt;a href=&quot;http://www.stackoverflow.com&quot; target=&quot;_blank&quot;&gt;Stack Overflow&lt;/a&gt; you will have used it, maybe without even realising. It powers the pages under &lt;code class=&quot;highlighter-rouge&quot;&gt;stackoverflow.com/questions/tagged&lt;/code&gt;, for instance you can find the questions tagged &lt;a href=&quot;http://stackoverflow.com/questions/tagged/.net&quot; target=&quot;_blank&quot;&gt;.NET&lt;/a&gt;, &lt;a href=&quot;http://stackoverflow.com/questions/tagged/c%23&quot; target=&quot;_blank&quot;&gt;C#&lt;/a&gt; or &lt;a href=&quot;http://stackoverflow.com/questions/tagged/java&quot; target=&quot;_blank&quot;&gt;Java&lt;/a&gt; and you get a page like this (note the related tags down the right-hand side):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/tagged/.net&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/10/dotnet-tag.png&quot; alt=&quot;dotNet Tag&quot; class=&quot;aligncenter&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;tag-api&quot;&gt;&lt;a name=&quot;TagAPI&quot;&gt;&lt;/a&gt;&lt;strong&gt;Tag API&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;As well as simple searches, you can also tailor the results with more complex queries (you may need to be logged into the site for these links to work), so you can search for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/tagged/.net+or+jquery-&quot; target=&quot;_blank&quot;&gt;questions tagged with .NET but not jQuery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/tagged/c%23?order=desc&amp;amp;sort=votes&quot; target=&quot;_blank&quot;&gt;the most popular C# questions (by votes)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/tagged/xml?sort=frequent&amp;amp;page=10&amp;amp;pagesize=5&quot; target=&quot;_blank&quot;&gt;page 10 of the most frequently linked to XML question&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/tagged/.net?page=197709&amp;amp;sort=newest&amp;amp;pagesize=1&quot; target=&quot;_blank&quot;&gt;the oldest .NET question&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s worth noting that all these searches take your personal preferences into account. So if you have asked to have any tags excluded, questions containing these tags are filtered out. You can see your preferences by going to your account page and clicking on &lt;em&gt;Preferences&lt;/em&gt;, the &lt;em&gt;Ignored Tags&lt;/em&gt; are then listed at the bottom of the page. Apparently some power-users on the site have 100’s of ignored tags, so dealing with these is a non-trivial problem.&lt;/p&gt;

&lt;h2 id=&quot;publicly-available-question-data-set&quot;&gt;&lt;a name=&quot;DataSet&quot;&gt;&lt;/a&gt;&lt;strong&gt;Publicly available Question Data set&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;As I said I wanted to see what was involved in building a version of the Tag Engine. Fortunately, data from &lt;a href=&quot;https://archive.org/details/stackexchange&quot; target=&quot;_blank&quot;&gt;all the Stack Exchange sites&lt;/a&gt; is available to download. To keep things simple I just worked with the posts (not their entire history of edits), so I downloaded &lt;a href=&quot;https://archive.org/download/stackexchange/stackoverflow.com-Posts.7z&quot; target=&quot;_blank&quot;&gt;stackoverflow.com-Posts.7z&lt;/a&gt; (warning direct link to 5.7 GB file), which appears to contain data up-to the middle of September 2014. To give an idea of what is in the data set, a typical question looks like the .xml below. For the Tag Engine we only need the items highlighted in red, because it is only providing an index into the actual questions themselves, so we ignore any &lt;strong&gt;content&lt;/strong&gt; and just look at the &lt;strong&gt;meta-data&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2014/10/sample-question-parts-used-highlighted-in-red.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/10/sample-question-parts-used-highlighted-in-red.png&quot; alt=&quot;Sample Question&quot; class=&quot;aligncenter&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below is the output of the code that runs on start-up and processes the data, you can see there are just over 7.9 millions questions in the data set, taking up just over 2GB of memory, when read into a &lt;a href=&quot;https://github.com/mattwarren/StackOverflowTagServer/blob/master/Shared/Question.cs&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;Question&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Took 00:00:31.623 to DE-serialise 7,990,787 Stack Overflow Questions, used 2136.50 MB
Took 00:01:14.229 (74,229 ms) to group all the tags, used 2799.32 MB
Took 00:00:34.148 (34,148 ms) to create all the &quot;related&quot; tags info, used 362.57 MB
Took 00:01:31.662 (91,662 ms) to sort the 191,025 arrays
After SETUP - Using 4536.21 MB of memory in total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So it takes roughly &lt;em&gt;31 seconds&lt;/em&gt; to de-serialise the data from disk (yay &lt;a href=&quot;https://code.google.com/p/protobuf-net/&quot;&gt;protobuf-net&lt;/a&gt;!) and another &lt;em&gt;3 1/2 minutes&lt;/em&gt; to process and sort it. At the end we are using roughly 4.5GB of memory.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Max LastActivityDate 14/09/2014 03:07:29
Min LastActivityDate 18/08/2008 03:34:29
Max CreationDate 14/09/2014 03:06:45
Min CreationDate 31/07/2008 21:42:52
Max Score 8596 (Id 11227809)
Min Score -147
Max ViewCount 1917888 (Id 184618)
Min ViewCount 1
Max AnswerCount 518 (Id 184618)
Min AnswerCount 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yes that’s right, there is actually a Stack Overflow questions with &lt;a href=&quot;http://stackoverflow.com/questions/184618/what-is-the-best-comment-in-source-code-you-have-ever-encountered&quot; target=&quot;_blank&quot;&gt;1.9 million views&lt;/a&gt;, not surprisingly it’s locked for editing, but it’s also considered “not constructive”! The same question also has 518 answers, the most of any on the site and if you’re wondering, the question with the highest score has an impressive 8192 votes and is titled &lt;a href=&quot;http://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-an-unsorted-array&quot; target=&quot;_blank&quot;&gt;Why is processing a sorted array faster than an unsorted array?&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;creating-an-index&quot;&gt;&lt;a name=&quot;CreatingAnIndex&quot;&gt;&lt;/a&gt;&lt;strong&gt;Creating an Index&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;So what does the index actually look like, well it’s basically a series of sorted lists (&lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;int&amp;gt;&lt;/code&gt;) that contain an offset into the main &lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;Question&amp;gt;&lt;/code&gt; that contains all the &lt;a href=&quot;https://github.com/mattwarren/StackOverflowTagServer/blob/master/Shared/Question.cs&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Question&lt;/code&gt;&lt;/a&gt; data. Or in a diagram, something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2014/09/indexing-explanation.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/09/indexing-explanation.png&quot; alt=&quot;Indexing explanation&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is very similar to the way that &lt;a href=&quot;http://lucene.apache.org/&quot; target=&quot;_blank&quot;&gt;Lucene&lt;/a&gt; indexes data.&lt;/p&gt;

&lt;p&gt;It turns out the the code to do this isn’t that complex:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// start with a copy of the main array, with Id's in order, { 0, 1, 2, 3, 4, 5, ..... }&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tagsByLastActivityDate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;]&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupedTags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byLastActivityDate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byLastActivityDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LastActivityDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Where the comparer is as simple as the following (note that is sorting the &lt;code class=&quot;highlighter-rouge&quot;&gt;byLastActiviteDate&lt;/code&gt; array, using the values in the &lt;code class=&quot;highlighter-rouge&quot;&gt;question&lt;/code&gt; array to determine the sort order.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LastActivityDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LastActivityDate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LastActivityDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CompareId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Compare LastActivityDate DESCENDING, i.e. most recent is first&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LastActivityDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CompareTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LastActivityDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So once we’ve created the sorted list on the left and right of the diagram above (&lt;code class=&quot;highlighter-rouge&quot;&gt;Last Edited&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Score&lt;/code&gt;), we can just traverse them &lt;em&gt;in order&lt;/em&gt; to get the indexes of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Questions&lt;/code&gt;. For instance if we walk through the &lt;code class=&quot;highlighter-rouge&quot;&gt;Score&lt;/code&gt; array in order &lt;code class=&quot;highlighter-rouge&quot;&gt;(1, 2, .., 7, 8)&lt;/code&gt;, collecting the Id’s as we go, we end up with &lt;code class=&quot;highlighter-rouge&quot;&gt;{ 8, 4, 3, 5, 6, 1, 2, 7 }&lt;/code&gt;, which are the array indexes for the corresponding &lt;code class=&quot;highlighter-rouge&quot;&gt;Questions&lt;/code&gt;. The code to do this is the following, taking account of the &lt;code class=&quot;highlighter-rouge&quot;&gt;pageSize&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;skip&lt;/code&gt; values:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Skip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pageSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once that’s all done, I ended up with an API that you can query in the browser. Note that the timing is the time taken on the server-side, but it is correct, basic queries against a single tag are lightening quick!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2014/10/API Usage in Chrome.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/10/API Usage in Chrome.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;next-time&quot;&gt;&lt;a name=&quot;NextTime&quot;&gt;&lt;/a&gt;&lt;strong&gt;Next time&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Now that the basic index is setup, next time I’ll be looking at how to handle:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Complex boolean queries &lt;code class=&quot;highlighter-rouge&quot;&gt;.net or jquery- and c#&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Power users who have 100’s of excluded tags&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and anything else that I come up with in the meantime.&lt;/p&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2014/11/01/the-stack-overflow-tag-engine-part-1/&quot;&gt;The Stack Overflow Tag Engine – Part 1&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='indexing' scheme='http://www.mattwarren.org/tags#indexing'/>
   
     <category term='lucene' scheme='http://www.mattwarren.org/tags#lucene'/>
   
     <category term='Stack Overflow' scheme='http://www.mattwarren.org/tags#Stack Overflow'/>
   
     <category term='Tag Engine' scheme='http://www.mattwarren.org/tags#Tag Engine'/>
   
 </entry>
 
 <entry>
   <title>The Art of Benchmarking (Updated 2014-09-23)</title>
   <link href="http://www.mattwarren.org/2014/09/19/the-art-of-benchmarking/"/>
   <updated>2014-09-19T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2014/09/19/the-art-of-benchmarking</id>
   <content type="html">
     &lt;h4 id=&quot;tldr&quot;&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Benchmarking is hard, it’s very easy to end up “&lt;em&gt;not measuring, what you think you are measuring&lt;/em&gt;”&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Update (2014-09-23):&lt;/strong&gt; Sigh - I made a pretty big mistake in these benchmarks, fortunately Reddit user &lt;a href=&quot;http://www.reddit.com/user/zvrba&quot; target=&quot;_blank&quot;&gt;zvrba&lt;/a&gt; corrected me:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.reddit.com/r/programming/comments/2guj0t/the_art_of_benchmarking_aka_fighting_the_jit/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/09/reddit-post-showing-my-mistake.png&quot; alt=&quot;Reddit post showing my mistake&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yep, can’t argue with that, see &lt;a href=&quot;#results&quot;&gt;Results&lt;/a&gt; and &lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt; below for the individual updates.&lt;/p&gt;

&lt;h4 id=&quot;-intro-to-benchmarks&quot;&gt;&lt;a name=&quot;intro_to_benchmarks&quot;&gt;&lt;/a&gt; &lt;strong&gt;Intro to Benchmarks&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;To start with, lets clarify what types of benchmarks we are talking about. Below is a table from the &lt;a href=&quot;http://shipilev.net/talks/devoxx-Nov2013-benchmarking.pdf&quot; target=&quot;_blank&quot;&gt;DEVOXX talk&lt;/a&gt; by &lt;a href=&quot;http://shipilev.net/&quot; target=&quot;_blank&quot;&gt;Aleksey Shipilev&lt;/a&gt;, who works on the &lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh/&quot; target=&quot;_blank&quot;&gt;Java Micro-benchmarking Harness&lt;/a&gt; (JMH)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;kilo: &amp;gt; 1000 s, Linpack&lt;/li&gt;
  &lt;li&gt;????: 1…1000 s, SPECjvm2008, SPECjbb2013&lt;/li&gt;
  &lt;li&gt;milli: 1…1000 ms, SPECjvm98, SPECjbb2005&lt;/li&gt;
  &lt;li&gt;micro: 1…1000 us, single webapp request&lt;/li&gt;
  &lt;li&gt;nano: 1…1000 ns, single operations&lt;/li&gt;
  &lt;li&gt;pico: 1…1000 ps, pipelining&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;He then goes on to say:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Milli&lt;/strong&gt;benchmarks are not really hard&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Micro&lt;/strong&gt;benchmarks are challenging, but OK&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Nano&lt;/strong&gt;benchmarks are the damned beasts!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Pico&lt;/strong&gt;benchmarks…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post is talking about &lt;strong&gt;micro&lt;/strong&gt; and &lt;strong&gt;nano&lt;/strong&gt; benchmarks, that is ones where the code we are measuring takes &lt;strong&gt;microseconds&lt;/strong&gt; or &lt;strong&gt;nanoseconds&lt;/strong&gt; to execute.&lt;/p&gt;

&lt;h4 id=&quot;-first-attempt&quot;&gt;&lt;a name=&quot;first_attempt&quot;&gt;&lt;/a&gt; &lt;strong&gt;First attempt&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Let’s start with a &lt;a href=&quot;http://stackoverflow.com/questions/1047218/benchmarking-small-code-samples-in-c-can-this-implementation-be-improved/1048708#1048708&quot; target=&quot;_blank&quot;&gt;nice example&lt;/a&gt; available from Stack Overflow:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// clean up&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WaitForPendingFinalizers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// warm up &lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stopwatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StartNew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Time Elapsed {0} ms&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                      &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Elapsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TotalMilliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You then use it like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;Profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;how_many_iterations_to_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// ... code being profiled&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now there is a lot of good things that this code sample is doing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Eliminating the overhead of the .NET GC (as much as possible), by making sure it has run before the timing takes place&lt;/li&gt;
  &lt;li&gt;Calling the function that is being profiled, outside the timing loop, so that the overhead of the .NET JIT Compiler isn’t included in the benchmark itself. The first time a function is called the JITter steps in and converts the code from IL into machine code, so that it can actually be executed by the CPU.&lt;/li&gt;
  &lt;li&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;Stopwatch&lt;/code&gt; rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime.Now&lt;/code&gt;, Stopwatch is a high-precision timer with a low-overhead, DateTime.Now isn’t!&lt;/li&gt;
  &lt;li&gt;Running a lot of iterations of the code (100,000’s), to give an accurate measurement&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now far be it from me to criticise a highly voted Stack Overflow answer, but that’s exactly what I’m going to do! I should add that for a whole range of scenarios the Stack Overflow code is absolutely fine, but it does have it’s limitations. There are several situations where this code doesn’t work, because it fails to actually profile the code you want it to.&lt;/p&gt;

&lt;h4 id=&quot;-baseline-benchmark&quot;&gt;&lt;a name=&quot;baseline_benchmark&quot;&gt;&lt;/a&gt; &lt;strong&gt;Baseline benchmark&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;But first let’s take a step back and look at the simplest possible case, with all the code inside the function. We’re going to measure the time that &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.math.sqrt(v=vs.110).aspx&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Math.Sqrt(..)&lt;/code&gt;&lt;/a&gt; takes to execute, nice and simple:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProfileDirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// clean up&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WaitForPendingFinalizers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// warm up&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;123.456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Stopwatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;123.456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ProfileDirect - &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;{0:0.00} ms ({1:N0} ticks) (over {2:N0} iterations), {3:N0} ops/milliseconds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElapsedMilliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElapsedTicks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElapsedMilliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the results:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ProfileDirect - 2.00 ms (7,822 ticks) (over 10,000,000 iterations), &lt;strong&gt;5,000,000 ops/millisecond&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s 5 million operations per millisecond, I know CPU’s are fast, but that seems quite high!&lt;/p&gt;

&lt;p&gt;For reference, the assembly code that the JITter produced is below, from this you can see that there is no &lt;code class=&quot;highlighter-rouge&quot;&gt;sqrt&lt;/code&gt; instruction as we’d expect there to be. So in effect we are timing an empty loop!&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;;   91:             var watch = new Stopwatch();
000000a6  lea         rcx,[5D3EBA90h] 
000000ad  call        000000005F6722F0 
000000b2  mov         r12,rax 
000000b5  mov         rcx,r12 
000000b8  call        000000005D284EF0 
;   92:             watch.Start();
000000bd  mov         rcx,r12 
000000c0  call        000000005D284E60 
;   93:             for (int i = 0; i &amp;lt; iterations; i++)
000000c5  mov         r13d,dword ptr [rbp+58h] 
000000c9  test        r13d,r13d 
000000cc  jle         00000000000000D7 
000000ce  xor         eax,eax 
000000d0  inc         eax 
000000d2  cmp         eax,r13d 
000000d5  jl          00000000000000D0 
;   97:             }
;   98:             watch.Stop();
000000d7  mov         rcx,r12 
000000da  call        000000005D32CBD0 
;   99:             Console.WriteLine(description + &quot; (ProfileDirect)&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To be able to get the optimised version of the assembly code that JITter produces, see &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms241594.aspx&quot; target=&quot;_blank&quot;&gt;this MSDN page&lt;/a&gt;. If you just debug the code normally in Visual Studio, you only get the un-optimised code, which doesn’t help at all.&lt;/p&gt;

&lt;h4 id=&quot;-dead-code-elimination&quot;&gt;&lt;a name=&quot;dead_code_elimination&quot;&gt;&lt;/a&gt; &lt;strong&gt;Dead-code elimination&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;One of the main problems with writing benchmarks is that you are often fighting against the just-in-time (JIT) compiler, which is trying to optimise the code as much as it can. One of the many things is does, is to remove code that it thinks is not needed, or to be more specific, code it thinks has no &lt;em&gt;side-effects&lt;/em&gt;. This is non-trivial to do, there’s some really tricky &lt;a href=&quot;http://stackoverflow.com/questions/10943370/could-the-net-jitter-optimise-away-a-while-xmlreader-read-loop/10943403#10943403&quot; target=&quot;_blank&quot;&gt;edge-cases to worry about&lt;/a&gt;, aside from the more obvious problem of knowing which code causes side-effects and which doesn’t. But this is exactly what is happening in the original profiling code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt; For a full list of all the optimisations that the .NET JIT Compiler performs, see this &lt;a href=&quot;http://stackoverflow.com/questions/4043821/performance-differences-between-debug-and-release-builds/4045073#4045073&quot; target=&quot;_blank&quot;&gt;very thorough SO answer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So let’s fix the original code, by storing the result of &lt;code class=&quot;highlighter-rouge&quot;&gt;Math.Sqrt&lt;/code&gt; in a variable:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProfileDirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// clean up&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WaitForPendingFinalizers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// warm up&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;123.456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Stopwatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;123.456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ProfileDirect - &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;{0:0.00} ms ({1:N0} ticks) (over {2:N0} iterations), {3:N0} ops/milliseconds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElapsedMilliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElapsedTicks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElapsedMilliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; has to be a class-level field, it can’t be local to the method, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;double result = Math.Sqrt(123.456)&lt;/code&gt;. This is because the JITter is clever enough to figure out that the local field isn’t accessed outside of the method and optimise it away, again you are always fighting against the JITter.&lt;/p&gt;

&lt;p&gt;So now the results look like this, which is a bit more sane!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ProfileDirectWithStore - 68.00 ms (180,801 ticks) (over 10,000,000 iterations), &lt;strong&gt;147,059 ops/millisecond&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;loop-unrolling&quot;&gt;&lt;strong&gt;Loop-unrolling&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;One other thing you have to look out for is whether or not the time spent running the loop is dominating the code you want to profile. In this case &lt;code class=&quot;highlighter-rouge&quot;&gt;Math.Sqrt()&lt;/code&gt; ends up as a few assembly instructions, so less time is spent executing that, compared to the instructions needed to make &lt;code class=&quot;highlighter-rouge&quot;&gt;for (..)&lt;/code&gt; loop happen.&lt;/p&gt;

&lt;p&gt;To fix this we can unroll the loop, so that we execute &lt;code class=&quot;highlighter-rouge&quot;&gt;Math.Sqrt(..)&lt;/code&gt; multiple times per loop, but to compensate we run the loop less times. The code now looks like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProfileDirectWithStoreUnrolledx10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// clean up&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WaitForPendingFinalizers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// warm up&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;123.456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Stopwatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loops&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;123.456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;123.456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;123.456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;123.456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;123.456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;123.456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;123.456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;123.456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;123.456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;123.456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ProfileDirectWithStoreUnrolled x10 - &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;{0:0.00} ms ({1:N0} ticks) (over {2:N0} iterations), {3:N0} ops/milliseconds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElapsedMilliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElapsedTicks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElapsedMilliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now the result is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ProfileDirectWithStoreUnrolled x10 -
47.00 ms (124,582 ticks) (over 10,000,000 iterations), &lt;strong&gt;212,766 ops/millisecond&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So we are now doing 212,766 ops/millisecond, compared to 147,059 when we didn’t unroll the loop. I did some further tests to see if unrolling the loop 20 or 40 times made any further difference and if did continue to get slightly faster, but the change was not significant.&lt;/p&gt;

&lt;h4 id=&quot;-results&quot;&gt;&lt;a name=&quot;results&quot;&gt;&lt;/a&gt; &lt;strong&gt;Results&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;These results were produced by running the code in RELEASE mode and launching the application from outside Visual Studio, also the .exe’s were explicitly compiled in x86/x64 mode and optimisations were turned on. To ensure I didn’t mess up, I included some &lt;a href=&quot;https://gist.github.com/mattwarren/69070616cf0efbb68a79#file-benchmarking-cs-L344&quot; target=&quot;_blank&quot;&gt;diagnostic code in the application&lt;/a&gt;, that prints out a message in red if anything is setup wrong. Finally these tests were run with .NET 4.5, so the results will be different under other versions, the JIT compilers have brought in more and more optimisations over time.&lt;/p&gt;

&lt;p&gt;As seen in the chart below the best results for &lt;strong&gt;64-bit&lt;/strong&gt; (red) were achieved when we unrolled the loop (“ProfileDirectWithStoreUnrolled”). There are other other results that were faster, but in these the actual code we wanted to profile was optimised away by the JITter (“Profile via an Action”, “ProfileDirect” and “ProfileDirectWithConsume”).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2014/09/math-sqrt-results-graph.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/09/math-sqrt-results-graph.png&quot; alt=&quot;Math.Sqrt() - results graph&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update (2014-09-23):&lt;/strong&gt; The correct results are in the chart below&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2014/09/math-sqrt-results-graph-after-reddit-fixes.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/09/math-sqrt-results-graph-after-reddit-fixes.png&quot; alt=&quot;Math.Sqrt() - results graph - AFTER Reddit fixes&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;clr-jit-compiler---32-bit-v-64-bit&quot;&gt;&lt;strong&gt;CLR JIT Compiler - 32-bit v. 64-bit&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;You might have noticed that the 32-bit and 64-bit results in the graph vary per test, why is this? Well one reason is the fundamental difference between 32-bit and 64-bit, 64-bit has 8 byte pointers compared to 4 byte ones in 32-bit. But the larger difference is that in .NET there are &lt;a href=&quot;http://blogs.msdn.com/b/dotnet/archive/2013/09/30/ryujit-the-next-generation-jit-compiler.aspx&quot; target=&quot;_blank&quot;&gt;2 different JIT compilers, with different goals&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The .NET 64-bit JIT was originally designed to &lt;strong&gt;produce very efficient code throughout the long run of a server process&lt;/strong&gt;. This differs from the .NET x86 JIT, which was optimized to &lt;strong&gt;produce code quickly so that the program starts up fast&lt;/strong&gt;. Taking time to compile efficient code made sense when 64-bit was primarily for server code. But “server code” today includes web apps that have to start fast. The 64-bit JIT currently in .NET isn’t always fast to compile your code, meaning you have to rely on other technologies such as NGen or background JIT to achieve fast program startup.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However one benefit of &lt;a href=&quot;http://blogs.msdn.com/b/dotnet/archive/2013/09/30/ryujit-the-next-generation-jit-compiler.aspx&quot; target=&quot;_blank&quot;&gt;RyuJIT (the next generation JIT Compiler)&lt;/a&gt; is that it’s a common code base for 32-bit and 64-bit, so when it comes out, everything may change! (BTW &lt;em&gt;RyuJIT&lt;/em&gt;, &lt;a href=&quot;https://twitter.com/matthewwarren/status/512176548678742016&quot; target=&quot;_blank&quot;&gt;what a great name&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;For reference the assembly code that is generated in both cases is available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/c44a08eedb46c01aad51&quot; target=&quot;_blank&quot;&gt;32-bit version&lt;/a&gt; where the &lt;a href=&quot;http://x86.renejeschke.de/html/file_module_x86_id_116.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;fsqrt&lt;/strong&gt; instruction&lt;/a&gt; is used&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/faa0ebf6a1b5ff81a08e&quot; target=&quot;_blank&quot;&gt;64-bit version&lt;/a&gt; where the &lt;a href=&quot;http://x86.renejeschke.de/html/file_module_x86_id_300.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;sqrtsd&lt;/strong&gt; instruction&lt;/a&gt; is used&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;-but-theres-still-more-to-do&quot;&gt;&lt;a name=&quot;still_more_to_do&quot;&gt;&lt;/a&gt; &lt;strong&gt;But there’s still more to do&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Even though this post is over 2000 words longs, it still hasn’t covered:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How you store and present the results&lt;/li&gt;
  &lt;li&gt;How users can write their own benchmarks&lt;/li&gt;
  &lt;li&gt;Multi-threaded benchmarks&lt;/li&gt;
  &lt;li&gt;Allowing state in benchmarks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And there’s even more than that to worry about, see the complete list below, taken from &lt;a href=&quot;https://groups.google.com/d/msg/mechanical-sympathy/m4opvy4xq3U/7lY8x8SvHgwJ&quot; target=&quot;_blank&quot;&gt;this discussion thread&lt;/a&gt; on the excellent &lt;em&gt;mechanical sympathy&lt;/em&gt; group:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Dynamic selection of benchmarks.&lt;/li&gt;
  &lt;li&gt;Loop optimizations.&lt;/li&gt;
  &lt;li&gt;Dead-code elimination.&lt;/li&gt;
  &lt;li&gt;Constant foldings&lt;/li&gt;
  &lt;li&gt;Non-throughput measures&lt;/li&gt;
  &lt;li&gt;Synchronize iterations&lt;/li&gt;
  &lt;li&gt;Multi-threaded sharing&lt;/li&gt;
  &lt;li&gt;Multi-threaded setup/teardown&lt;/li&gt;
  &lt;li&gt;False-sharing&lt;/li&gt;
  &lt;li&gt;Asymmetric benchmarks&lt;/li&gt;
  &lt;li&gt;Inlining&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note: these are only the headings, the discussion goes into a lot of detail about how these issues are solved in JMH. But whilst the JVM and the CLR do differ in a number of ways, a lot of what is said applies to writing benchmarks for the CLR.&lt;/p&gt;

&lt;p&gt;The summary from &lt;a href=&quot;https://twitter.com/shipilev&quot; target=&quot;_blank&quot;&gt;Aleksey&lt;/a&gt; sums it all up really!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The benchmarking harness business is &lt;strong&gt;very hard, and very non-obvious&lt;/strong&gt;. My own
experience tells me even the smartest people make horrible mistakes in them,
myself included. We try to get around that by fixing more and more things
in JMH as we discover more, even if that means significant API changes….&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;The job for a benchmark harness it to provide [a] reliable benchmarking 
environment&lt;/strong&gt; …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;-resources&quot;&gt;&lt;a name=&quot;resources&quot;&gt;&lt;/a&gt; &lt;strong&gt;Resources&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Here’s a list of all the code samples and other data used in making this post:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/69070616cf0efbb68a79&quot; target=&quot;_blank&quot;&gt;The full benchmarking code&lt;/a&gt; &lt;strong&gt;Updated (2014-09-23)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/69070616cf0efbb68a79#file-benchmarking-cs-L94&quot; target=&quot;_blank&quot;&gt;Profile via an &lt;code class=&quot;highlighter-rouge&quot;&gt;Action&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/69070616cf0efbb68a79#file-benchmarking-cs-L248&quot;&gt;Profile Direct&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/69070616cf0efbb68a79#file-benchmarking-cs-L270&quot; target=&quot;_blank&quot;&gt;Profile Direct, storing the result (BROKEN)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/69070616cf0efbb68a79#file-benchmarking-cs-L292&quot; target=&quot;_blank&quot;&gt;Profile Direct, storing the result (FIXED)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/69070616cf0efbb68a79#file-benchmarking-cs-L339&quot; target=&quot;_blank&quot;&gt;Profile Direct, storing the result, unrolled 10 times&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/images/2014/09/benchmark-results-math-sqrt1.xlsx&quot; target=&quot;_blank&quot;&gt;Spreadsheet of results&lt;/a&gt; &lt;strong&gt;Updated (2014-09-23)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Generated assembly code &lt;strong&gt;Updated (2014-09-23)&lt;/strong&gt;:&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/02ca1567cecbd6ea68a0&quot; target=&quot;_blank&quot;&gt;Profile via a &lt;code class=&quot;highlighter-rouge&quot;&gt;Action&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/dcd546babf76986125ea&quot; target=&quot;_blank&quot;&gt;Profile Direct&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/e2bdb25a17eb785295d1&quot; target=&quot;_blank&quot;&gt;Profile Direct and storing the result (BROKEN)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mattwarren/0a5a52c57bb82d296f16&quot; target=&quot;_blank&quot;&gt;Profile Direct and storing the result (FIXED)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;-further-reading&quot;&gt;&lt;a name=&quot;further_reading&quot;&gt;&lt;/a&gt; &lt;strong&gt;Further Reading&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;There’s lots of really good information out there related to writing benchmarks and understanding what the .NET JIT compiler is doing, below are just some of the links I’ve found:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Writing good benchmarks&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;http://www.yoda.arachsys.com/csharp/benchmark.html&lt;/li&gt;
      &lt;li&gt;http://blogs.msmvps.com/jonskeet/2009/01/26/benchmarking-made-easy/&lt;/li&gt;
      &lt;li&gt;http://blogs.msdn.com/b/vancem/archive/2009/02/06/measureit-update-tool-for-doing-microbenchmarks.aspx&lt;/li&gt;
      &lt;li&gt;http://measureitdotnet.codeplex.com/&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;JIT Optimisations, including method in-lining and dead code eliminations&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;http://blogs.microsoft.co.il/sasha/2007/02/27/jit-optimizations-inlining-and-interface-method-dispatching-part-1-of-n/&lt;/li&gt;
      &lt;li&gt;http://blogs.microsoft.co.il/sasha/2007/08/12/jit-optimizations-inlining-and-interface-method-dispatching-part-2-of-n/&lt;/li&gt;
      &lt;li&gt;http://blogs.microsoft.co.il/sasha/2012/01/20/aggressive-inlining-in-the-clr-45-jit/&lt;/li&gt;
      &lt;li&gt;http://blogs.microsoft.co.il/sasha/2012/06/22/micro-benchmarking-done-wrong-and-for-the-wrong-reasons/&lt;/li&gt;
      &lt;li&gt;http://blogs.msdn.com/b/ericgu/archive/2004/01/29/64717.aspx&lt;/li&gt;
      &lt;li&gt;http://blogs.msdn.com/b/jmstall/archive/2006/03/13/dead-code-elimination.aspx&lt;/li&gt;
      &lt;li&gt;http://blogs.msdn.com/b/vancem/archive/2008/08/19/to-inline-or-not-to-inline-that-is-the-question.aspx&lt;/li&gt;
      &lt;li&gt;http://stackoverflow.com/questions/4043821/performance-differences-between-debug-and-release-builds/4045073#4045073&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Inspecting generated assembly code&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;http://blogs.msdn.com/b/vancem/archive/2006/02/20/535807.aspx&lt;/li&gt;
      &lt;li&gt;http://www.cuttingedge.it/blogs/steven/downloads/Program_InlinableMethodTests.cs&lt;/li&gt;
      &lt;li&gt;http://www.philosophicalgeek.com/2014/07/25/using-windbg-to-answer-implementation-questions-for-yourself-can-a-delegate-invocation-be-inlined/&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2014/09/19/the-art-of-benchmarking/&quot;&gt;The Art of Benchmarking (Updated 2014-09-23)&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='Benchmarking' scheme='http://www.mattwarren.org/tags#Benchmarking'/>
   
     <category term='JIT Compiler' scheme='http://www.mattwarren.org/tags#JIT Compiler'/>
   
     <category term='Performance' scheme='http://www.mattwarren.org/tags#Performance'/>
   
 </entry>
 
 <entry>
   <title>Stack Overflow - performance lessons (part 2)</title>
   <link href="http://www.mattwarren.org/2014/09/05/stack-overflow-performance-lessons-part-2/"/>
   <updated>2014-09-05T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2014/09/05/stack-overflow-performance-lessons-part-2</id>
   <content type="html">
     &lt;p&gt;In &lt;a href=&quot;/2014/09/01/stackoverflow-performance-lessons-part-1/&quot; target=&quot;_blank&quot;&gt;Part 1&lt;/a&gt; I looked at some of the more general performance issues that can be learnt from Stack Overflow (the team/product), in Part 2 I’m looking at some of the examples of &lt;strong&gt;coding&lt;/strong&gt; performance lessons.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Please don’t take these blog posts as blanket recommendations of techniques that you should go away and apply to your code base. They are specific optimisations that you can use if you want to squeeze every last drop of performance out of your CPU.&lt;/p&gt;

&lt;p&gt;Also, don’t optimise anything unless you have measured and profiled first, you will probably optimise the wrong thing!&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;battles-with-the-net-garbage-collector&quot;&gt;&lt;strong&gt;Battles with the .NET Garbage Collector&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;I first learnt about the performance work done in Stack Overflow (the site/company), when I read the post on their &lt;a href=&quot;http://samsaffron.com/archive/2011/10/28/in-managed-code-we-trust-our-recent-battles-with-the-net-garbage-collector&quot; target=&quot;_blank&quot;&gt;battles with the .NET Garbage Collector (GC)&lt;/a&gt;. If you haven’t read it, the short summary is that they were experiencing page load times that would suddenly spike to the 100’s of msecs, compared to the normal sub 10 msecs they were use to. After investigating for a few days they narrowed the problem down to the behaviour of the GC. GC pauses are a real issue and even the new modes available in .NET 4.5 don’t fully eliminate them, see my &lt;a href=&quot;/2014/06/23/measuring-the-impact-of-the-net-garbage-collector-an-update/&quot; target=&quot;_blank&quot;&gt;previous investigation for more information&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One thing to remember is that to make this all happen, they needed the following items in place:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Monitoring in production&lt;/strong&gt; - these issues would only show up under load, once the application had been running for a while, so they would be very hard to recreate in staging or during development.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Multiple measurements&lt;/strong&gt; - they recorded both ASP.NET and IIS web server response times and were able to cross-reference them (see image below).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Storing outliers&lt;/strong&gt; - these spikes rarely happened so &lt;a href=&quot;http://blog.serverfault.com/2011/07/25/a-non-foolish-consistency/&quot; target=&quot;_blank&quot;&gt;having detailed metrics was needed&lt;/a&gt;, averages hide too much information.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Good knowledge of the .NET GC&lt;/strong&gt; - according to the article, it took them 3 weeks to identify and fix this issue &lt;em&gt;“So Marc and I set off on a 3 week adventure to resolve the memory pressure.”&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://samsaffron.com/archive/2011/10/28/in-managed-code-we-trust-our-recent-battles-with-the-net-garbage-collector&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/09/Stack Overflow - Battle with the .NET GC.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can read all the gory details of the fix and the follow-up in the posts below, but the &lt;strong&gt;tl;dr&lt;/strong&gt; is that they removed of all the work that the .NET Garbage Collector had to do, thus eliminating the pauses:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://samsaffron.com/archive/2011/10/28/in-managed-code-we-trust-our-recent-battles-with-the-net-garbage-collector&quot; target=&quot;_blank&quot;&gt;In managed code we trust, our recent battles with the .NET Garbage Collector&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.marcgravell.com/2011/10/assault-by-gc.html&quot; target=&quot;_blank&quot;&gt;Assault by GC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.marcgravell.com/2014/04/technical-debt-case-study-tags.html&quot; target=&quot;_blank&quot;&gt;Technical Debt, a case study : tags&lt;/a&gt; (a follow-up post)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;jil---a-fast-json-deserializer-with-a-number-of-somewhat-crazy-optimization-tricks&quot;&gt;&lt;strong&gt;Jil - A fast JSON (de)serializer, with a number of somewhat crazy optimization tricks.&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;But if you think that the &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; based code they wrote is crazy, their JSON serialisation library, Jil, takes things to a new level. This is all in the pursuit of the maximum performance and based on their benchmarks, it seems to be working!
Note: protobuf-net is a binary serialisation library, but doesn’t support JSON, it’s only included is a base-line:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kevin-montrose/Jil#deserialization&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/09/Jil Benchmarks.png&quot; class=&quot;aligncenter&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For instance, instead of writing code like this&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serialise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isJSONP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isJSONP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// code to handle JSONP&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// code to handle regular JSON&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;They write code like this, which is a classic &lt;a href=&quot;https://github.com/kevin-montrose/Jil#trade-memory-for-speed&quot; target=&quot;_blank&quot;&gt;memory/speed trade-off&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISerialiser&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetSerialiser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isJSONP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isJSONP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SerialiseWithJSONP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Serialiser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SerialiserWithJSONP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISerialiser&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serialiser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// code to handle JSONP  &lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Serialiser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISerialiser&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serialise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// code to handle regular JSON&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This means that during serialisation there doesn’t need to be any &lt;em&gt;“feature switches”&lt;/em&gt;, they just emit the different versions of the code at &lt;em&gt;creation time&lt;/em&gt; and based on the options you specify, hand you the correct one. Of course the classes (&lt;code class=&quot;highlighter-rouge&quot;&gt;SerialiserWithJSONP&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Serialiser&lt;/code&gt; in this case) are dynamically created just once and then cached for later re-use, so the cost of the dymanic code generation is only paid once.&lt;/p&gt;

&lt;p&gt;By doing this the code plays nicely with &lt;a href=&quot;//stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-an-unsorted-array/11227902#11227902&quot;&gt;CPU branch prediction&lt;/a&gt;, because it has a nice predictable pattern that the CPU can easily work with. It also has the added benefit of making the methods smaller, which &lt;em&gt;may&lt;/em&gt; make then candidates for &lt;a href=&quot;http://blogs.msdn.com/b/ericgu/archive/2004/01/29/64717.aspx&quot; target=&quot;_blank&quot;&gt;in-lining by the the .NET JITter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more examples of optimisations used, see the links below&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kevin-montrose/Jil/commit/de8d5d49722a0eb3b5f3791ee67f1d55c1d4e3a1&quot; target=&quot;_blank&quot;&gt;fast skip white space optimisation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kevin-montrose/Jil/commit/11e5dd8049225cb81352178517d55315b92705cf&quot; target=&quot;_blank&quot;&gt;signed integers optimisation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;jil---marginal-gains&quot;&gt;&lt;strong&gt;Jil - Marginal Gains.&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;On top of this the measure everything to ensure that the optimisations actually work! These tests are all run as unit-tests, allowing easy generation of the results, take a look at &lt;a href=&quot;https://github.com/kevin-montrose/Jil/blob/master/JilTests/SpeedProofTests.cs#L266&quot; target=&quot;_blank&quot;&gt;ReorderMembers&lt;/a&gt; for instance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All the times are in milliseconds, but timed over &lt;strong&gt;1000’s of runs&lt;/strong&gt;, not per call.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Feature name&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Original&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Improved&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Difference&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ReorderMembers&lt;/td&gt;
      &lt;td&gt;2721&lt;/td&gt;
      &lt;td&gt;2712&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SkipNumberFormatting&lt;/td&gt;
      &lt;td&gt;166&lt;/td&gt;
      &lt;td&gt;163&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UseCustomIntegerToString&lt;/td&gt;
      &lt;td&gt;589&lt;/td&gt;
      &lt;td&gt;339&lt;/td&gt;
      &lt;td&gt;250&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SkipDateTimeMathMethods&lt;/td&gt;
      &lt;td&gt;108&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UseCustomISODateFormatting&lt;/td&gt;
      &lt;td&gt;399&lt;/td&gt;
      &lt;td&gt;269&lt;/td&gt;
      &lt;td&gt;130&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UseFastLists&lt;/td&gt;
      &lt;td&gt;277&lt;/td&gt;
      &lt;td&gt;267&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UseFastArrays&lt;/td&gt;
      &lt;td&gt;486&lt;/td&gt;
      &lt;td&gt;469&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UseFastGuids&lt;/td&gt;
      &lt;td&gt;744&lt;/td&gt;
      &lt;td&gt;304&lt;/td&gt;
      &lt;td&gt;440&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AllocationlessDictionaries&lt;/td&gt;
      &lt;td&gt;134&lt;/td&gt;
      &lt;td&gt;127&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PropagateConstants&lt;/td&gt;
      &lt;td&gt;77&lt;/td&gt;
      &lt;td&gt;35&lt;/td&gt;
      &lt;td&gt;42&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AlwaysUseCharBufferForStrings&lt;/td&gt;
      &lt;td&gt;63&lt;/td&gt;
      &lt;td&gt;56&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UseHashWhenMatchingMembers&lt;/td&gt;
      &lt;td&gt;141&lt;/td&gt;
      &lt;td&gt;131&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DynamicDeserializer_UseFastNumberParsing&lt;/td&gt;
      &lt;td&gt;94&lt;/td&gt;
      &lt;td&gt;51&lt;/td&gt;
      &lt;td&gt;43&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DynamicDeserializer_UseFastIntegerConversion&lt;/td&gt;
      &lt;td&gt;131&lt;/td&gt;
      &lt;td&gt;131&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UseHashWhenMatchingEnums&lt;/td&gt;
      &lt;td&gt;38&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UseCustomWriteIntUnrolledSigned&lt;/td&gt;
      &lt;td&gt;2182&lt;/td&gt;
      &lt;td&gt;1765&lt;/td&gt;
      &lt;td&gt;417&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This is very similar to the “&lt;a href=&quot;http://www.bbc.co.uk/sport/0/olympics/19174302&quot; target=&quot;_blank&quot;&gt;Marginal Gains&lt;/a&gt;” approach that worked so well for British Cycling in the last Olympics:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There’s fitness and conditioning, of course, but there are other things that might seem on the periphery, like sleeping in the right position, having the same pillow when you are away and training in different places. 
Do you really know how to clean your hands? Without leaving the bits between your fingers? If you do things like that properly, you will get ill a little bit less.
&lt;strong&gt;“They’re tiny things but if you clump them together it makes a big difference.”&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;summary&quot;&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;All-in-all there is a lot to be learnt from code and blog posts that have come from Stack Overflow developers, I’m glad they’ve shared everything so openly. Also by having a high-profile website running on .NET, it stops the argument that .NET is inherently slow.&lt;/p&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2014/09/05/stack-overflow-performance-lessons-part-2/&quot;&gt;Stack Overflow - performance lessons (part 2)&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='Performance' scheme='http://www.mattwarren.org/tags#Performance'/>
   
     <category term='Performance Lessons' scheme='http://www.mattwarren.org/tags#Performance Lessons'/>
   
 </entry>
 
 <entry>
   <title>Stack Overflow - performance lessons (part 1)</title>
   <link href="http://www.mattwarren.org/2014/09/01/stackoverflow-performance-lessons-part-1/"/>
   <updated>2014-09-01T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2014/09/01/stackoverflow-performance-lessons-part-1</id>
   <content type="html">
     &lt;p&gt;This post is part of a semi-regular series, you can find the other entries &lt;a href=&quot;/2014/06/05/roslyn-code-base-performance-lessons-part-1/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;/2014/06/10/roslyn-code-base-performance-lessons-part-2/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Before diving into any of the technical or coding aspects of performance, it is really important to understand that the main lesson to take-away from Stack Overflow (the team/product) is that they &lt;strong&gt;take performance seriously&lt;/strong&gt;. You can see this from the &lt;a href=&quot;http://blog.codinghorror.com/performance-is-a-feature/&quot; target=&quot;_blank&quot;&gt;blog post&lt;/a&gt; that Jeff Atwood wrote, it’s a part of their culture and has been from the beginning:
&lt;a href=&quot;http://blog.codinghorror.com/performance-is-a-feature/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/08/performance-is-a-feature-coding-horror-blog.png&quot; alt=&quot;performance is a feature - coding horror blog&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But anyone can come up with a catchy line like &lt;strong&gt;“Performance is a Feature!!”&lt;/strong&gt;, it only means something if you actually carry it out. Well it’s clear that Stack Overflow have done just this, not only is it a &lt;a href=&quot;http://www.alexa.com/siteinfo/stackoverflow.com&quot; target=&quot;_blank&quot;&gt;Top 100 website&lt;/a&gt;, but they’ve done the whole thing with &lt;a href=&quot;http://highscalability.com/blog/2014/7/21/stackoverflow-update-560m-pageviews-a-month-25-servers-and-i.html&quot; target=&quot;_blank&quot;&gt;very few servers&lt;/a&gt; and several of those are running &lt;a href=&quot;http://blog.cellfish.se/2014/07/lying-with-statistics-and-stackoverflow.html&quot; target=&quot;_blank&quot;&gt;at only 15% of their capacity&lt;/a&gt;, so they can scale up if needed and/or deal with large traffic bursts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update (2/9/2014 9:25:35 AM):&lt;/strong&gt; Nick Craver &lt;a href=&quot;https://twitter.com/Nick_Craver/status/506452974647140352&quot; target=&quot;_blank&quot;&gt;tweeted me&lt;/a&gt; to say that the High Scalability post is a bad summarisation (apparently they have got things wrong before), so take what it says with a grain of salt!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt; If you want even more information about their set-up, I definitely recommend reading the &lt;a href=&quot;https://news.ycombinator.com/item?id=8064534&quot; target=&quot;_blank&quot;&gt;Hacker News discussion&lt;/a&gt; and &lt;a href=&quot;http://nickcraver.com/blog/2013/11/22/what-it-takes-to-run-stack-overflow/&quot; target=&quot;_blank&quot;&gt;this post&lt;/a&gt; from &lt;a href=&quot;https://twitter.com/Nick_Craver&quot; target=&quot;_blank&quot;&gt;Nick Craver&lt;/a&gt;, one of the Stack Overflow developers.&lt;/p&gt;

&lt;p&gt;Interestingly they have gone for &lt;strong&gt;scale-up&lt;/strong&gt; rather than &lt;strong&gt;scale-out&lt;/strong&gt;, by building their own servers instead of using cloud hosting. The reason for this, &lt;a href=&quot;http://blog.codinghorror.com/building-servers-for-fun-and-prof-ok-maybe-just-for-fun/&quot; target=&quot;_blank&quot;&gt;just to get better performance&lt;/a&gt;!&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Why do I choose to build and colocate servers? &lt;strong&gt;Primarily to achieve maximum performance&lt;/strong&gt;. That’s the one thing you consistently just do not get from cloud hosting solutions unless you are willing to pay a massive premium, per month, forever: raw, unbridled performance….&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;taking-performance-seriously&quot;&gt;&lt;strong&gt;Taking performance seriously&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;It’s also worth noting that they are even prepared to sacrifice the ability to unit test their code, &lt;a href=&quot;http://highscalability.com/blog/2014/7/21/stackoverflow-update-560m-pageviews-a-month-25-servers-and-i.html&quot; target=&quot;_blank&quot;&gt;because it gives them better performance.&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Garbage collection driven programming.&lt;/strong&gt; SO goes to great lengths to reduce garbage collection costs, skipping practices like TDD, avoiding layers of abstraction, and using static methods. While extreme, the result is highly performing code. When you’re doing hundreds of millions of objects in a short window, you can actually measure pauses in the app domain while GC runs. These have a pretty decent impact on request performance.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, this isn’t for everyone and even suggesting that unit testing isn’t needed or useful tends to produce &lt;a href=&quot;http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html&quot; target=&quot;_blank&quot;&gt;strong reactions&lt;/a&gt;. But you can see that they are making an informed trade-off and they are prepared to go against the conventional wisdom (&lt;em&gt;“write code that is unit-testing friendly”&lt;/em&gt;), because it gives them the extra performance they want. One caveat is that they are in a fairly unique position, they have passionate users that are willing to act as beta-testers, so having less unit test might not harm them, not everyone has that option!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;To get around garbage collection problems, only one copy of a class used in templates are created and kept in a cache. &lt;strong&gt;Everything is measured, including GC operation,&lt;/strong&gt; from statistics it is known that layers of indirection increase GC pressure to the point of noticeable slowness.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;For a more detailed discussion on why this approach to coding can make a difference to GC pressure, see &lt;a href=&quot;https://news.ycombinator.com/item?id=8065987&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://news.ycombinator.com/item?id=8066394&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;sharing-and-doing-everything-out-in-the-open&quot;&gt;&lt;strong&gt;Sharing and doing everything out in the open&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Another non-technical lesson is that Stack Overflow are committed to doing things out in the open and sharing what they create as code or &lt;em&gt;lessons-learnt&lt;/em&gt; blog posts. Their list of open source projects includes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.marcgravell.com/2011/04/practical-profiling.html&quot; target=&quot;_blank&quot;&gt;MiniProfiler&lt;/a&gt; - which gives developers an overview of where the time is being spent when a page renders (front-end, back-end, database, etc)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://samsaffron.com/archive/2011/03/30/How+I+learned+to+stop+worrying+and+write+my+own+ORM&quot; target=&quot;_blank&quot;&gt;Dapper&lt;/a&gt; - developed because Entity Framework imposed too large an overhead when materialising the results of a SQL query into &lt;a href=&quot;http://en.wikipedia.org/wiki/Plain_Old_CLR_Object&quot; target=&quot;_blank&quot;&gt;POCO’s&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kevin-montrose/Jil&quot; target=&quot;_blank&quot;&gt;Jil&lt;/a&gt; - a newly release JSON serialisation/library, developed so that they can get the best possible performance. JSON parsing and serialisation must be a very common operation across their web-servers, so shaving off &lt;a href=&quot;https://github.com/kevin-montrose/Jil#serialization&quot; target=&quot;_blank&quot;&gt;microseconds from the existing libraries&lt;/a&gt; is justified.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.marcgravell.com/2014/04/technical-debt-case-study-tags.html&quot; target=&quot;_blank&quot;&gt;TagServer&lt;/a&gt; - a custom .NET service that was written to make the &lt;a href=&quot;http://stackoverflow.com/tags&quot; target=&quot;_blank&quot;&gt;complex tag searches&lt;/a&gt; quicker than they would be if done directly in SQL Server.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/opserver/Opserver&quot; target=&quot;_blank&quot;&gt;Opserver&lt;/a&gt; - fully featured monitoring tool, giving their operation engineers a deep-insight into what their servers are doing in production.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://miniprofiler.com&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/08/MiniProfiler.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All these examples show that they are not afraid to write their own tools when the existing ones aren’t up-to scratch, don’t have the features they need or don’t give the performance they require.&lt;/p&gt;

&lt;h3 id=&quot;measure-profile-and-display&quot;&gt;&lt;strong&gt;Measure, profile and display&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;As shown by the development of Opserver, they care about measuring performance accurately even (or especially) in production. Take a look at the images below and you can see not only the detailed level of information they keep, but how it is displayed in a way that makes is easy to see what is going on (there are also &lt;a href=&quot;http://imgur.com/a/dawwf&quot; target=&quot;_blank&quot;&gt;more screenshots&lt;/a&gt; available).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://imgur.com/a/dawwf&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/08/opserver-MiniProfiler.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://imgur.com/a/dawwf&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/08/opserver.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally I really like their guidelines for achieving good observability in a production system. They serve as a really good check-list of things you need to do if you want to have any chance of knowing what your system up to in production. I would image these steps and the resulting screens they designed into Opserver have been built up over several years of monitoring and fixing issues in the Stack Overflow sites, so they are battle-hardened!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;5 Steps to Achieving Good Observability:&lt;/strong&gt;
In order to achieve good observability an SRE team (often in conduction with the rest of the organization) needs to do the following steps.&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Instrument your systems by publishing metrics and events&lt;/li&gt;
    &lt;li&gt;Gather those metrics and events in a queryable data store(s)&lt;/li&gt;
    &lt;li&gt;Make that data readily accessible&lt;/li&gt;
    &lt;li&gt;Highlight metrics that are, or are trending towards abnormal or out of bounds behavior&lt;/li&gt;
    &lt;li&gt;Establish the resources to drill down into abnormal or out of bounds behavior&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;next-time&quot;&gt;&lt;strong&gt;Next time&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Next time I’ll look at some concrete examples of performance lessons for the open source projects that SO have set-up, including the crazy tricks they use in Jil, their &lt;a href=&quot;https://github.com/kevin-montrose/Jil&quot; target=&quot;_blank&quot;&gt;JSON serialisation library&lt;/a&gt;.&lt;/p&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2014/09/01/stackoverflow-performance-lessons-part-1/&quot;&gt;Stack Overflow - performance lessons (part 1)&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='Open Source' scheme='http://www.mattwarren.org/tags#Open Source'/>
   
     <category term='Performance' scheme='http://www.mattwarren.org/tags#Performance'/>
   
     <category term='Performance Lessons' scheme='http://www.mattwarren.org/tags#Performance Lessons'/>
   
     <category term='Stack Overflow' scheme='http://www.mattwarren.org/tags#Stack Overflow'/>
   
 </entry>
 
 <entry>
   <title>How to mock sealed classes and static methods</title>
   <link href="http://www.mattwarren.org/2014/08/14/how-to-mock-sealed-classes-and-static-methods/"/>
   <updated>2014-08-14T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2014/08/14/how-to-mock-sealed-classes-and-static-methods</id>
   <content type="html">
     &lt;p&gt;&lt;a href=&quot;http://www.typemock.com/&quot; target=&quot;_blank&quot;&gt;Typemock&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://www.telerik.com/products/mocking.aspx&quot; target=&quot;_blank&quot;&gt;JustMock&lt;/a&gt; are 2 commercially available mocking tools that let you achieve something that should be impossible. Unlike all other mocking frameworks, they let you mock &lt;strong&gt;sealed classes, static&lt;/strong&gt; and &lt;strong&gt;non-virtual methods&lt;/strong&gt;, but how do they do this?&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;Dynamic Proxies&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Firstly it’s worth covering how regular mocking frameworks work with virtual methods or interfaces. Suppose you have a class you want to mock, like so:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestingMocking&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MockMe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At runtime the framework will generate a &lt;em&gt;mocked&lt;/em&gt; class like the one below. As it inherits from &lt;code&gt;TestingMocking&lt;/code&gt; you can use it instead of your original class, but the &lt;em&gt;mocked&lt;/em&gt; method will be called instead.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DynamicProxy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestingMocking&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MockMe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is achieved using the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.reflection.emit.dynamicmethod(v=vs.110).aspx&quot; target=&quot;_blank&quot;&gt;DynamicMethod&lt;/a&gt; class available in &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/System.Reflection.Emit(v=vs.110).aspx&quot; target=&quot;_blank&quot;&gt;System.Reflection.Emit&lt;/a&gt;, this &lt;a href=&quot;http://www.mindscapehq.com/blog/index.php/2011/11/27/reflection-performance-and-runtime-code-generation/&quot; target=&quot;_blank&quot;&gt;blog post&lt;/a&gt; contains a nice overview and &lt;a href=&quot;https://twitter.com/billwagner&quot; target=&quot;_blank&quot;&gt;Bill Wagner&lt;/a&gt; has put together a &lt;a href=&quot;https://bitbucket.org/BillWagner/codemashstuntcoding/src/c449bf1c6b703b34d1e086f1a0f527757f4720c2/StuntCodingUtilities/DynamicConverter.cs?at=default#cl-14&quot; target=&quot;_blank&quot;&gt;more complete example&lt;/a&gt; that gives you a better idea of what is involved. I found that once you discover dynamic code generation is possible, you realise that it is used everywhere, for instance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://samsaffron.com/archive/2011/03/30/How+I+learned+to+stop+worrying+and+write+my+own+ORM&quot; target=&quot;_blank&quot;&gt;Dapper&lt;/a&gt; (see &lt;a href=&quot;https://gist.github.com/SamSaffron/893878&quot; target=&quot;_blank&quot;&gt;this gist&lt;/a&gt; for ver1)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.codingodyssey.com/2010/04/08/viewing-generated-proxy-code-in-the-entity-framework/&quot; target=&quot;_blank&quot;&gt;Entity Framework&lt;/a&gt; (it enables lazy-loading when doing Code-First)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mgravell/protobuf-net/blob/15174a09ee3223c8805b3ef81c1288879c746dfa/protobuf-net/Compiler/CompilerContext.cs#L309&quot; target=&quot;_blank&quot;&gt;protobuf-net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/JamesNK/Newtonsoft.Json/blob/bbe7eaf852b41ecdfb4817b9bd2f1fc9432abc1a/Src/Newtonsoft.Json/Utilities/DynamicReflectionDelegateFactory.cs#L43&quot; target=&quot;_blank&quot;&gt;Json.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/AutoMapper/AutoMapper/blob/f6bce50e7040db6142f19eef5dff9dd4e6071168/src/AutoMapper/Mappers/DataReaderMapper.cs#L121&quot; target=&quot;_blank&quot;&gt;AutoMapper&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;and many more!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;BTW if you ever find yourself needing to dynamically emit IL code, I’d recommend using the &lt;a href=&quot;http://kevinmontrose.com/2013/02/14/sigil-adding-some-more-magic-to-il/&quot; target=&quot;_blank&quot;&gt;Sigil library&lt;/a&gt; that was created by some of the developers at StackOverflow. It takes away a lot of the pain associated with writing and debugging IL.&lt;/p&gt;

&lt;p&gt;However dynamically generated proxies will always run into the limitation that &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/aa645767(v=vs.71).aspx&quot; target=&quot;_blank&quot;&gt;you can’t override non-virtual methods&lt;/a&gt; and they also can’t do anything with static methods or sealed class (i.e. classes that can’t be inherited).&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;.NET Profiling API and JITCompilationStarted() Method&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;How Typemock and JustMock achieve what they do is hinted at in a &lt;a href=&quot;http://stackoverflow.com/questions/5556115/open-source-free-alternative-of-typemock-isolator/5563750#5563750&quot; target=&quot;_blank&quot;&gt;StackOverflow answer by a Typemock employee&lt;/a&gt; and is also discussed in &lt;a href=&quot;http://www.codethinked.com/static-method-interception-in-net-with-c-and-monocecil&quot; target=&quot;_blank&quot;&gt;this blog post&lt;/a&gt;. But they only talk about the solution, I wanted to actually write a small proof-of-concept myself, to see what is involved.&lt;/p&gt;

&lt;p&gt;To start with the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms404386(v=vs.110).aspx&quot; target=&quot;_blank&quot;&gt;.NET profiling API&lt;/a&gt; is what makes this possible, but a word of warning, it is a C++ API and it requires you to write a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb384493(v=vs.110).aspx#com&quot; target=&quot;_blank&quot;&gt;COM component&lt;/a&gt; to be able to interact with it, you can’t work with it from C#. To get started I used the excellent &lt;a href=&quot;https://github.com/sawilde/DDD2011_ProfilerDemo&quot; target=&quot;_blank&quot;&gt;profiler demo project&lt;/a&gt; from Shaun Wilde. If you want to learn more about the profiling API and in particular how you can use it to re-write methods, I really recommend looking at this code step-by-step and also reading the &lt;a href=&quot;http://www.slideshare.net/shaun_wilde/net-profilers-and-il-rewriting-ddd-melbourne-2&quot; target=&quot;_blank&quot;&gt;accompanying slides&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By using the profiling API and in particular the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms230586(v=vs.110).aspx&quot; target=&quot;_blank&quot;&gt;JITCompilationStarted method&lt;/a&gt;, we are able to modify the IL of any method being run by the CLR (user code or the .NET runtime), before the JITer compiles it to machine code and it is executed. This means that we can modify a method that originally looks like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassToMock&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StaticMethodToMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;StaticMethodToMock called, returning 42&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So that instead it does this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassToMock&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StaticMethodToMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Inject the IL to do this instead!!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mocked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ShouldMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Profilier.ClassToMock.StaticMethodToMock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mocked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MockedMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;StaticMethodToMock called, returning 42&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For reference, the original IL looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;IL_0000 ( 0) nop
IL_0001 ( 1) ldstr (70)00023F    //&quot;StaticMethodToMockWhatWeWantToDo called, returning 42&quot;
IL_0006 ( 6) call (06)000006     //call Console.WriteLine(..)
IL_000B (11) nop
IL_000C (12) ldc.i4.s 2A         //return 42;
IL_000E (14) stloc.0
IL_000F (15) br IL_0014
IL_0014 (20) ldloc.0
IL_0015 (21) ret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and after code injection, it ends up like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;IL_0000 ( 0) ldstr (70)000135
IL_0005 ( 5) call (0A)00001B     //call ShouldMock(string methodNameAndPath)
IL_000A (10) brfalse.s IL_0012
IL_000C (12) call (0A)00001C     //call MockedMethod()
IL_0011 (17) ret
IL_0012 (18) nop
IL_0013 (19) ldstr (70)00023F    //&quot;StaticMethodToMockWhatWeWantToDo called, returning 42&quot;
IL_0018 (24) call (06)000006     //call Console.WriteLine(..)
IL_001D (29) nop
IL_001E (30) ldc.i4.s 2A         //return 42;
IL_0020 (32) stloc.0
IL_0021 (33) br IL_0026
IL_0026 (38) ldloc.0
IL_0027 (39) ret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that is the basics of how you can modify any .NET method, it seems relatively simple when you know how! In my simple demo I just add in the relevant IL so that a mocked method is called instead, you can see the C++ code needed to achieve this &lt;a href=&quot;https://github.com/mattwarren/DDD2011_ProfilerDemo/blob/master/step5_main_injected_method_object_array/DDDProfiler/CodeInjection.cpp#L279&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Of course in reality it’s much more complicated, my &lt;a href=&quot;https://github.com/mattwarren/DDD2011_ProfilerDemo/commit/9f804cec8ef11b802e020e648180b436a429833f&quot; target=&quot;_blank&quot;&gt;simple demo&lt;/a&gt; only deals with a very simplistic scenario, a static method that returns an &lt;code&gt;int&lt;/code&gt;. The commercial products that do this are way more powerful and have to deal with all the issues that you can encounter when you are &lt;strong&gt;re-writing code at the IL level&lt;/strong&gt;, for instance if you aren’t careful you get exceptions like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/matthewwarren/status/497876741650907136&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/12/exception-when-things-go-wrong.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;Running the demo code&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;If you want to run my demo, you need to open the solution file under &lt;a href=&quot;https://github.com/mattwarren/DDD2011_ProfilerDemo/tree/master/step5_main_injected_method_object_array&quot; target=&quot;_blank&quot;&gt;step5_main_injected_method_object_array&lt;/a&gt; and set “ProfilerHost” as the “Start-up Project” (right-click on the project in VS) before you run. When you run it, you should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2014/12/mocking-in-action.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/12/mocking-in-action.png&quot; alt=&quot;Mocking in action&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see the C# code that controls the mocking below. At the moment the API in the demo is fairly limited, it only lets you turn mocking on/off and set the value that is returned from the mocked method.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Without mocking enabled (the default)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'#'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Calling ClassToMock.StaticMethodToMock() (a static method in a sealed class)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassToMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StaticMethodToMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Result: &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'#'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// With mocking enabled, doesn't call the static method, calls mocked version instead&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'#'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Mocked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetReturnValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Turning ON mocking of Profilier.ClassToMock.StaticMethodToMock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Mocked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ProfilerTarget.ClassToMock.StaticMethodToMock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Calling ClassToMock.StaticMethodToMock() (a static method in a sealed class)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassToMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StaticMethodToMock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Result: &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'#'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4&gt;&lt;strong&gt;Other Uses for IL re-writing&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Again once you learn about this mechanism, you realise that it is used in lots of places, for instance&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;profilers, see &lt;a href=&quot;http://stackoverflow.com/questions/6527597/how-does-the-redgate-profiler-actually-work/6528758#6528758&quot; target=&quot;_blank&quot;&gt;this SO answer&lt;/a&gt; for more info (&lt;a href=&quot;http://www.red-gate.com/products/dotnet-development/ants-performance-profiler/&quot; target=&quot;_blank&quot;&gt;Ants&lt;/a&gt; and &lt;a href=&quot;http://www.jetbrains.com/profiler/&quot; target=&quot;_blank&quot;&gt;JetBrains&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;test coverage (&lt;a href=&quot;http://www.ncover.com/&quot; target=&quot;_blank&quot;&gt;NCover&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;productions monitoring systems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://www.reddit.com/r/csharp/comments/2dk0zt/how_to_mock_sealed_classes_and_static_methods/&quot; target=&quot;_blank&quot;&gt;Discuss on /r/csharp&lt;/a&gt;&lt;/p&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2014/08/14/how-to-mock-sealed-classes-and-static-methods/&quot;&gt;How to mock sealed classes and static methods&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='CLR Profiling' scheme='http://www.mattwarren.org/tags#CLR Profiling'/>
   
     <category term='dynamic code generation' scheme='http://www.mattwarren.org/tags#dynamic code generation'/>
   
     <category term='Mocking' scheme='http://www.mattwarren.org/tags#Mocking'/>
   
 </entry>
 
 <entry>
   <title>Know thy .NET object memory layout (Updated 2014-09-03)</title>
   <link href="http://www.mattwarren.org/2014/07/04/know-thy-net-object-memory-layout/"/>
   <updated>2014-07-04T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2014/07/04/know-thy-net-object-memory-layout</id>
   <content type="html">
     &lt;p&gt;Apologies to &lt;a href=&quot;https://twitter.com/nitsanw&quot; target=&quot;_blank&quot;&gt;Nitsan Wakart&lt;/a&gt;, from whom I shamelessly stole the &lt;a href=&quot;http://psy-lob-saw.blogspot.co.uk/2013/05/know-thy-java-object-memory-layout.html&quot; target=&quot;_blank&quot;&gt;title of this post&lt;/a&gt;!&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;The .NET port of &lt;a href=&quot;https://github.com/HdrHistogram/HdrHistogram&quot; target=&quot;_blank&quot;&gt;HdrHistogram&lt;/a&gt; can control the field layout within a class, using the same technique that the original Java code does.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Recently I’ve spent some time porting HdrHistogram from &lt;a href=&quot;https://github.com/HdrHistogram/HdrHistogram/tree/master/src/main/java/org/HdrHistogram&quot; target=&quot;_blank&quot;&gt;Java&lt;/a&gt; to &lt;a href=&quot;https://github.com/HdrHistogram/HdrHistogram/tree/master/src/main/csharp&quot; target=&quot;_blank&quot;&gt;.NET&lt;/a&gt;, it’s been great to learn a bit more about Java and get a better understanding of some low-level code. In case you’re not familiar with it, the goals of HdrHistogram are to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Provide an accurate mechanism for measuring latency at a full-range of percentiles (99.9%, 99.99% etc)&lt;/li&gt;
&lt;li&gt;Minimising the overhead needed to perform the measurements, so as to not impact your application&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can find a full explanation of what is does and how point 1) is achieved in the &lt;a href=&quot;http://giltene.github.io/HdrHistogram/&quot; target=&quot;_blank&quot;&gt;project readme&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Minimising overhead&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;But it’s the 2nd of the points that I’m looking at in this post, by answering the question&lt;/p&gt;

&lt;blockquote&gt;
  How does HdrHistogram minimise its overhead?
&lt;/blockquote&gt;

&lt;p&gt;But first it makes sense to start with the why, well it turns out it’s pretty simple. HdrHistogram is meant for measuring low-latency applications, if it had a large overhead or caused the GC to do extra work, then it would negatively affect the performance of the application is was meant to be measuring.&lt;/p&gt;

&lt;p&gt;Also imagine for a minute that HdrHistogram took &lt;em&gt;1/10,000th&lt;/em&gt; of a second (0.1 milliseconds or 100,000 nanoseconds) to record a value. If this was the case you could only hope to accurately record events lasting down to a millisecond (&lt;em&gt;1/1,000th&lt;/em&gt; of a second), anything faster would not be possible as the overhead of recording the measurement would take up too much time.&lt;/p&gt;

&lt;p&gt;As it is HdrHistogram is much faster than that, so we don’t have to worry! From the &lt;a href=&quot;http://giltene.github.io/HdrHistogram/&quot; target=&quot;_blank&quot;&gt;readme&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  Measurements show value recording times as low as 3-6 nanoseconds on modern (circa 2012) Intel CPUs.
&lt;/blockquote&gt;

&lt;p&gt;So how does it achieve this, well it does a few things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It doesn't do any memory allocations when storing a value, all allocations are done up front when you create the histogram. Upon creation you have to specify the range of measurements you would like to record and the precision. For instance if you want to record timings covering the range from 1 nanosecond (ns) to 1 hour (3,600,000,000,000 ns), with 3 decimal places of resolution, you would do the following:&lt;br /&gt;
&lt;code&gt;Histogram histogram = new Histogram(3600000000000L, 3);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Uses a few low-level tricks to ensure that storing a value can be done as fast as possible. For instance putting the value in the right bucket (array location) is a &lt;a href=&quot;https://github.com/HdrHistogram/HdrHistogram/blob/master/src/main/csharp/AbstractHistogram.cs#L1600&quot; target=&quot;_blank&quot;&gt;constant lookup&lt;/a&gt; (no searching required) and on top of that it makes use of some nifty &lt;a href=&quot;https://github.com/HdrHistogram/HdrHistogram/blob/master/src/main/csharp/Utilities/MiscUtilities.cs#L16&quot; target=&quot;_blank&quot;&gt;bit-shifting&lt;/a&gt; to ensure it happens as fast as possible.&lt;/li&gt;
&lt;li&gt;Implements a slightly strange class-hierarchy to ensure that fields are laid out in the right location. It you look at the source you have &lt;a href=&quot;https://github.com/HdrHistogram/HdrHistogram/blob/master/src/main/java/org/HdrHistogram/AbstractHistogram.java#L78&quot; target=&quot;_blank&quot;&gt;AbstractHistogram&lt;/a&gt; and then the seemingly redundant class &lt;a href=&quot;https://github.com/HdrHistogram/HdrHistogram/blob/master/src/main/java/org/HdrHistogram/AbstractHistogram.java#L32&quot; target=&quot;_blank&quot;&gt;AbstractHistogramBase&lt;/a&gt;, why split up the fields up like that? &lt;del datetime=&quot;2014-09-03T08:35:56+00:00&quot;&gt;Well the comments give it away a little bit, it's due to &lt;strong&gt;false-sharing&lt;/strong&gt;&lt;/del&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;&lt;strong&gt;False sharing&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Update (2014-09-03):&lt;/strong&gt; As pointed out by Nitsan in &lt;a href=&quot;/2014/07/04/know-thy-net-object-memory-layout/comment-page-1/#comment-152&quot;&gt;the comments&lt;/a&gt;, I got the wrong end of the stick with this entire section. It’s not about false-sharing at all, it’s the opposite, I’ll quote him to make sure I get it right this time!&lt;/p&gt;

&lt;blockquote&gt;
  The effort made in HdrHistogram towards controlling field ordering is not about False Sharing but rather towards ensuring certain fields are more likely to be loaded together as they are clumped together, thus avoiding a potential extra read miss.
&lt;/blockquote&gt;

&lt;p&gt;&lt;del datetime=&quot;2014-09-03T08:35:56+00:00&quot;&gt;So what is false sharing, to find out more I recommend reading Martin Thompson’s &lt;a href=&quot;http://mechanical-sympathy.blogspot.co.uk/2011/07/false-sharing.html&quot; target=&quot;_blank&quot;&gt;excellent post&lt;/a&gt; and this &lt;a href=&quot;http://psy-lob-saw.blogspot.co.uk/2014/06/notes-on-false-sharing.html&quot; target=&quot;_blank&quot;&gt;equally good one&lt;/a&gt; from Nitsan Wakart. But if you’re too lazy to do that, it’s summed up by the image below (from Martin’s post).&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mechanical-sympathy.blogspot.co.uk/2011/07/false-sharing.html&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/07/8ad85-cache-line.png&quot; alt=&quot;CPU Cache lines&quot; class=&quot;aligncenter&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;b&gt;Image from the Mechanical Sympathy blog&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;del datetime=&quot;2014-09-03T08:35:56+00:00&quot;&gt;The problem is that a CPU pulls data into its cache in lines, even if your code only wants to read a single variable/field. If 2 threads are reading from 2 fields (X and Y in the image) that are next to each other in memory, the CPU running a thread will invalidate the cache of the other CPU when it pulls in a line of memory. This invalidation costs time and in high-performance situations can slow down your program.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del datetime=&quot;2014-09-03T08:35:56+00:00&quot;&gt;The opposite is also true, you can gain performance by ensuring that fields you know are accessed in succession are located together in memory. This means that once the first field is pulled into the CPU cache, subsequent accesses will be cheaper as the fields will be &lt;em&gt;“Hot”&lt;/em&gt;. It is this scenario HdrHistogram is trying to achieve, but how do you know that fields in a .NET object are located together in memory?&lt;/del&gt;&lt;/p&gt;

&lt;h3&gt;&lt;a name=&quot;analysing_memory_layout&quot;&gt;&lt;/a&gt; &lt;strong&gt;Analysing the memory layout of a .NET Object&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;To do this you need to drop down into the debugger and use the excellent &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb190764(v=vs.110).aspx&quot; target=&quot;_blank&quot;&gt;SOS or Son-of-Strike extension&lt;/a&gt;. This is because the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ht8ecch6(v=vs.90).aspx&quot; target=&quot;_blank&quot;&gt;.NET JITter&lt;/a&gt; is free to reorder fields as it sees fit, so the order you put the fields in your class does not determine the order they end up. The JITter changes the layout to minimise the space needed for the object and to make sure that fields are aligned on byte boundaries, it does this by packing them in the most efficient way.&lt;/p&gt;

&lt;p&gt;To test out the difference between the Histogram with a class-hierarchy and without, the following code was written (you can find HistogramAllInOneClass in &lt;a href=&quot;//gist.github.com/mattwarren/d7e56a3709d347862141&quot; target=&quot;_blank&quot;&gt;this gist&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Histogram&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testHistogram&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Histogram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3600000000000L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HistogramAllInOneClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combinedHistogram&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HistogramAllInOneClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Debugger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Launch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;GC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;KeepAlive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;combinedHistogram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// put a breakpoint on this line&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;KeepAlive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testHistogram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then to actually test it, you need to perform the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set the build to &lt;strong&gt;Release&lt;/strong&gt; and &lt;strong&gt;x86&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Build the test and then launch your .exe from &lt;strong&gt;OUTSIDE&lt;/strong&gt; Visual Studio (VS), i.e. by double-clicking on it in Windows Explorer. You must not be debugging in VS when it starts up, otherwise the .NET JITter won't perform any optimisations.&lt;/li&gt;
&lt;li&gt;When the &quot;Just-In-Time Debugger&quot; prompt pops up, select the instance of VS that is already opened (not a NEW one)&lt;/li&gt;
&lt;li&gt;Then check &quot;Manually choose the debugging engines.&quot; and click &quot;Yes&quot;&lt;/li&gt;
&lt;li&gt;Finally make sure &quot;Managed (...)&quot;, &quot;Native&quot; AND &lt;strong&gt;&quot;Managed Compatibility Mode&quot;&lt;/strong&gt; are checked&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once the debugger has connected back to VS, you can type the following commands in the “Immediate Window”:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;.load sos&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!DumpStackObjects&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DumpObj &amp;lt;ADDRESS&amp;gt;&lt;/code&gt; (where ADDRESS is the the value from the &quot;Object&quot; column in Step 2.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If all that works, you will end up with an output like below:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2014/07/hdrhistogram-field-layout.png&quot;&gt;&lt;img src=&quot;/images/2014/07/hdrhistogram-field-layout.png&quot; alt=&quot;HdrHistogram - field layout&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Update (2014-09-03)&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Since first writing this blog post, I came across a really clever technique for getting the offsets of fields &lt;strong&gt;in code&lt;/strong&gt;, something that I initially thought was impossible. The full &lt;a href=&quot;https://github.com/kevin-montrose/Jil/blob/519a0c552e9fb93a4df94eed0b2f9804271f2fef/Jil/Serialize/Utils.cs#L320&quot; target=&quot;_blank&quot;&gt;code to achieve this&lt;/a&gt; comes from the Jil JSON serialiser and was written to ensure that it accessed fields in the &lt;a href=&quot;https://github.com/kevin-montrose/Jil#optimizing-member-access-order&quot; target=&quot;_blank&quot;&gt;most efficient order&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is based on a very clever trick, it dynamically emits IL code, making use of the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.ldflda(v=vs.110).aspx&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Ldflda&lt;/strong&gt;&lt;/a&gt; instruction. This is code you could not write in C#, but are able to write directly in IL.&lt;/p&gt;

&lt;blockquote&gt;
  The &lt;strong&gt;ldflda&lt;/strong&gt; instruction pushes the address of a field located in an object onto the stack. The object must be on the stack as an object reference (type O), a managed pointer (type &amp;amp;), an unmanaged pointer (type native int), a transient pointer (type *), or an instance of a value type. The use of an unmanaged pointer is not permitted in verifiable code. The object's field is specified by a metadata token that must refer to a field member.
&lt;/blockquote&gt;

&lt;p&gt;By putting this code into my project, I was able to verify that it gives exactly the same field offsets that you can see when using the SOS technique (above). So it’s a nice technique and the only option if you want to get this information &lt;em&gt;without&lt;/em&gt; having to drop-down into a debugger.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Results&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;After all these steps we end up with the results shown in the images below, where the rows are ordered by the “Offset” value.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2014/07/hdrhistogram-with-hierachy2.png&quot;&gt;&lt;img src=&quot;/images/2014/07/hdrhistogram-with-hierachy2.png&quot; alt=&quot;HdrHistogram (with Hierachy)&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;b&gt;AbstractHistogramBase.cs -&amp;gt; AbstractHistogram.cs -&amp;gt; Histogram.cs&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;You can see that with the class hierarchy in place, the fields remain grouped as we want them to (shown by the orange/green/blue highlighting). What is interesting is that the JITter has still rearranged fields within a single group, preferring to put Int64 (long) fields before Int32 (int) fields in this case. This is seen by comparing the ordering of the “Field” column with the “Offset” one, where the values in the “Field” column represent the original ordering of the fields as they appear in the source code.&lt;/p&gt;

&lt;p&gt;However when we put all the fields in a single class, we lose the grouping:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2014/07/histogramallinoneclass2.png&quot;&gt;&lt;img src=&quot;/images/2014/07/histogramallinoneclass2.png&quot; alt=&quot;HistogramAllInOneClass&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;b&gt;Equivalent fields all in one class&lt;/b&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Alternative Technique&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;To achieve the same effect you can use the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.structlayoutattribute(v=vs.110).aspx&quot; target=&quot;_blank&quot;&gt;StructLayout attribute&lt;/a&gt;, but this requires that you calculate all the offsets yourself, which can be cumbersome:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;[StructLayout(LayoutKind.Explicit, Size = 28, CharSet = CharSet.Ansi)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HistogramAllInOneClass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// &quot;Cold&quot; accessed fields. Not used in the recording code path:&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FieldOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FieldOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;highestTrackableValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FieldOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowestTrackableValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FieldOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfSignificantValueDigits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are interested, the full results of this test &lt;a href=&quot;/images/2014/07/hdrhistogram-field-layout1.xlsx&quot; target=&quot;_blank&quot;&gt;are available&lt;/a&gt;&lt;/p&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2014/07/04/know-thy-net-object-memory-layout/&quot;&gt;Know thy .NET object memory layout (Updated 2014-09-03)&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='CLR' scheme='http://www.mattwarren.org/tags#CLR'/>
   
     <category term='Performance' scheme='http://www.mattwarren.org/tags#Performance'/>
   
 </entry>
 
 <entry>
   <title>Measuring the impact of the .NET Garbage Collector - An Update</title>
   <link href="http://www.mattwarren.org/2014/06/23/measuring-the-impact-of-the-net-garbage-collector-an-update/"/>
   <updated>2014-06-23T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2014/06/23/measuring-the-impact-of-the-net-garbage-collector-an-update</id>
   <content type="html">
     &lt;h4&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Measuring performance accurately is hard. But it is a whole lot easier if someone with experience takes the time to explain your mistakes to you!!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This is an update to my &lt;a href=&quot;/2014/06/18/measuring-the-impact-of-the-net-garbage-collector/&quot; title=&quot;Measuring the impact of the .NET Garbage Collector&quot; target=&quot;_blank&quot;&gt;previous post&lt;/a&gt;, if you haven’t read that, you might want to go back and read it first.&lt;/p&gt;

&lt;p&gt;After I published that post, Gil Tene (&lt;a href=&quot;http://twitter.com/giltene&quot; title=&quot;Gil Tene - Twitter&quot; target=&quot;_blank&quot;&gt;@GilTene&lt;/a&gt;) the author of &lt;a href=&quot;http://www.azulsystems.com/downloads/jHiccup&quot; target=&quot;_blank&quot;&gt;jHiccup&lt;/a&gt;, was kind enough to send me an email pointing out a few things I got wrong! It’s great that he took the time to do this and so (with his permission), I’m going to talk through his comments.&lt;/p&gt;

&lt;p&gt;Firstly he pointed out that the premise for my investigation wasn’t in-line what jHiccup reports. So instead answering the question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;strong&gt;what % of pauses do what?&lt;/strong&gt;
&lt;/blockquote&gt;

&lt;p&gt;jHiccup answers a different question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;strong&gt;what % of my operations will see what minimum possible latency levels?&lt;/strong&gt;
&lt;/blockquote&gt;

&lt;p&gt;He also explained that I wasn’t measuring only GC pauses. This was something which I alluded to in my post, but didn’t explicitly point out.&lt;/p&gt;

&lt;blockquote&gt;
  ...I suspect that your current data is somewhat contaminated by hiccups that are not GC pauses (normal blips of 2+ msec due to scheduling, etc.). Raising the 2 msec recording threshold (e.g. to 5 or 10msec) may help with that, but then you may miss some actual GC pauses in your report. There isn't really a good way around this, since &quot;very short&quot; GC pauses and &quot;other system noise&quot; overlap in magnitude.
&lt;/blockquote&gt;

&lt;p&gt;So in summary, it is better to describe my tests as measuring &lt;strong&gt;any pauses in a program&lt;/strong&gt;, not just GC pauses. Again quoting from Gil:&lt;/p&gt;

&lt;blockquote&gt;
  Over time (and based on experience), I think you may find that just using the jHiccup approach of &lt;strong&gt;&quot;whatever is stopping my apps from running&quot;&lt;/strong&gt; will become natural, and that you'll stop analyzing the pure &quot;what percent of GC pauses do what&quot; question (if you think about it, the answer to that question is meaningless to applications).
&lt;/blockquote&gt;

&lt;p&gt;This is so true, it really doesn’t matter what is slowing your app down or causing the user to experience unacceptable pauses. What matters is finding out if and how often this is happening and then doing something about it.&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;Tweaks made&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;He also suggested some tweaks to make to the code (emphasis mine):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Record everything (good and bad):&lt;/strong&gt;
  You current code only records pauses (measurements above 2msec). To report from a &quot;% of operations&quot; viewpoint, you need to record everything, unconditionally. As you probably see in jHiccup, &lt;strong&gt;what I record as hiccups is the measured time minus the expected sleep time&lt;/strong&gt;. Recording everything will have the obvious effect of shifting the percentile levels to the right.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Correct for coordinated omission.&lt;/strong&gt;
  My &quot;well trained&quot; eye sees clear evidence of coordinated omission in your current charts (which is fine for &quot;what % of pauses&quot; question, but not for a &quot;what % of operations&quot; question): &lt;strong&gt;any vertical jumps in latency on a percentile chart are a strong indication of coordinated omission&lt;/strong&gt;. While it is possible to have such jumps be &quot;valid&quot; and happening without coordinated omission in cases where the concurrently measured transactions are &quot;either fast or slow, without blocking anything else&quot; (e.g. a web page takes either 5msec or 250msec, and never any other number in between), these are very rare in the wild, and never happen in a jHiccup-like measurement. &lt;strong&gt;Then, whenever you see a 200 msec measurement, it also means that you &quot;should have seen&quot; measurements with the values 198, 196, 194, ... 4, but never got a chance to&lt;/strong&gt;.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Based on these 2 suggestions, the code to record the timings becomes the following:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Stopwatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sleepTimeInMsecs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleepTimeInMsecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Record the pause (using the old method, for comparison)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElapsedMilliseconds&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_oldhistogram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recordValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElapsedMilliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  

  &lt;span class=&quot;c1&quot;&gt;// more accurate method, correct for coordinated omission&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_histogram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recordValueWithExpectedInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElapsedMilliseconds&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sleepTimeInMsecs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To see what difference this made to the graphs I re-ran the test, this time just in Server GC mode. You can see the changes on the graph below, the dotted lines are the original (inaccurate) mode and the solid lines show the results after they have been corrected for coordinated omission.
&lt;a href=&quot;/images/2014/06/gc-pause-times-comparision-corrected-for-coordinated-omission.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/06/gc-pause-times-comparision-corrected-for-coordinated-omission.png&quot; alt=&quot;GC Pause Times - comparision (Corrected for Coordinated Omission)&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;Correcting for Coordinated Omission&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;This is an interesting subject and after becoming aware of it, I’ve spent some time reading up on it and trying to understand it more deeply. One way to comprehend it, is to take a look at the code in HdrHistogram that handles it:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;recordCountAtValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expectedIntervalBetweenValueSamples&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;missingValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedIntervalBetweenValueSamples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;missingValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedIntervalBetweenValueSamples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;missingValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedIntervalBetweenValueSamples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;recordCountAtValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;missingValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see it fills in all the missing values, from 0 to the value you are actually storing.&lt;/p&gt;

&lt;p&gt;It is comforting to know that I’m not alone in making this mistake, the authors of Disruptor and log4j2 both made the &lt;a href=&quot;https://groups.google.com/forum/#!msg/mechanical-sympathy/icNZJejUHfE/BfDekfBEs_sJ&quot; target=&quot;_blank&quot;&gt;same mistake&lt;/a&gt; when measuring percentiles in their high-performance code.&lt;/p&gt;

&lt;p&gt;Finally if you want some more information on Coordinated Omission and the issue it is trying to prevent, take a look at &lt;a href=&quot;http://www.javaadvent.com/2013/12/how-not-to-measure-latency.html&quot; target=&quot;_blank&quot;&gt;this post&lt;/a&gt; from the Java Advent calendar (you need to scroll down past the calendar to see the actual post). The main point is that without correcting for it, you will be getting inaccurate percentile values, which kind-of defeats the point of making accurate performance measurements in the first place!&lt;/p&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2014/06/23/measuring-the-impact-of-the-net-garbage-collector-an-update/&quot;&gt;Measuring the impact of the .NET Garbage Collector - An Update&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='Performance' scheme='http://www.mattwarren.org/tags#Performance'/>
   
 </entry>
 
 <entry>
   <title>Measuring the impact of the .NET Garbage Collector</title>
   <link href="http://www.mattwarren.org/2014/06/18/measuring-the-impact-of-the-net-garbage-collector/"/>
   <updated>2014-06-18T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2014/06/18/measuring-the-impact-of-the-net-garbage-collector</id>
   <content type="html">
     &lt;p&gt;There is an &lt;a href=&quot;/2014/06/23/measuring-the-impact-of-the-net-garbage-collector-an-update/&quot; title=&quot;Measuring the impact of the .NET Garbage Collector – An Update&quot; target=&quot;_blank&quot;&gt;update to this post&lt;/a&gt;, based on feedback I received.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In my &lt;a href=&quot;/2014/06/10/roslyn-code-base-performance-lessons-part-2/&quot; title=&quot;Roslyn code base – performance lessons (part 2)&quot; target=&quot;_blank&quot;&gt;last post&lt;/a&gt; I talked about the techniques that the Roslyn team used to minimise the effect of the Garbage Collector (GC). Firstly I guess its worth discussing what the actual issue is.&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;GC Pauses and Latency&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;In early versions of the .NET CLR, garbage collection was a “Stop the world” event, i.e. before a GC could happen all the threads in your program had to be brought to a safe place and suspended. If your ASP.NET MVC app was in the middle of serving a request, it would not complete until after the GC finished and the latency for that user would be much higher than normal. This is exactly the issue that Stackoverflow ran into a few years ago, in their &lt;a href=&quot;http://samsaffron.com/archive/2011/10/28/in-managed-code-we-trust-our-recent-battles-with-the-net-garbage-collector&quot; title=&quot;Stackoverflow battles with the .NET GC&quot; target=&quot;_blank&quot;&gt;battles with the .NET Garbage Collector&lt;/a&gt;. If you look at the image below (from that blog post), you can see the spikes in response times of over 1 second, caused by Gen 2 collections.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://samsaffron.com/archive/2011/10/28/in-managed-code-we-trust-our-recent-battles-with-the-net-garbage-collector&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/06/SO-Battle-with-the-GC.png&quot; alt=&quot;Spikes in Stackoverflow response times due to Gen 2 collections&quot; class=&quot;aligncenter&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However in the .NET framework 4.5 there were &lt;a href=&quot;http://blogs.msdn.com/b/dotnet/arc7hive/2012/07/20/the-net-framework-4-5-includes-new-garbage-collector-enhancements-for-client-and-server-apps.aspx&quot; title=&quot;.NET 4.5 GC Enhancements&quot; target=&quot;_blank&quot;&gt;enhancements to the GC&lt;/a&gt; brought in that can help mitigate these (emphasis mine)&lt;/p&gt;

&lt;blockquote&gt;
  The new background server GC in the .NET Framework 4.5 offloads &lt;strong&gt;much&lt;/strong&gt; of the GC work associated with a full blocking collection to dedicated background GC threads that can run concurrently with user code, resulting in &lt;strong&gt;much shorter&lt;/strong&gt; (less noticeable) pauses. One customer reported a 70% decrease in GC pause times.
&lt;/blockquote&gt;

&lt;p&gt;But as you can see from the quote, this doesn’t get rid of pauses completely, it just minimises them. Even the &lt;a href=&quot;http://msdn.microsoft.com/library/system.runtime.gclatencymode(v=vs.110).aspx&quot; title=&quot;Sustained low-latency GC mode&quot; target=&quot;_blank&quot;&gt;SustainedLowLatency&lt;/a&gt; mode isn’t enough,  &lt;em&gt;“The collector &lt;strong&gt;tries&lt;/strong&gt; to perform only generation 0, generation 1, and concurrent generation 2 collections. &lt;strong&gt;Full blocking collections may still occur&lt;/strong&gt; if the system is under memory pressure.”&lt;/em&gt; If you want a full understanding of the different modes, you can see some nice diagrams on &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ee787088.aspx#background_server_garbage_collection&quot; title=&quot;GC modes&quot; target=&quot;_blank&quot;&gt;this MSDN page.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’m not in any way being critical or dismissive of these improvements. GC is a really hard engineering task, you need to detect and clean-up the unused memory of a program, whilst it’s running, ensuring that you don’t affect it’s correctness in any way and making sure you add as little overhead as possible. Take a look at &lt;a href=&quot;http://channel9.msdn.com/Shows/Going+Deep/Maoni-Stephens-and-Andrew-Pardoe-CLR-4-Inside-Background-GC&quot; title=&quot;Inside background GC&quot; target=&quot;_blank&quot;&gt;this video&lt;/a&gt; for some idea of what’s involved. The .NET GC is a complex and impressive piece of engineering, but there are still some scenarios where it can introduce pauses to your program.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt; In the Java world there is a commercial &lt;a href=&quot;http://www.azulsystems.com/zing/pgc&quot; target=&quot;_blank&quot;&gt;Pauseless Garbage Collector&lt;/a&gt; available from Azul Systems. It uses a &lt;a href=&quot;http://www.azulsystems.com/sites/default/files//images/wp_pgc_zing_v5.pdf&quot; title=&quot;Zing white papar&quot; target=&quot;_blank&quot;&gt;patented technique&lt;/a&gt; to offer &lt;em&gt;“Predictable, consistent garbage collection (GC) behavior”&lt;/em&gt; and &lt;em&gt;“Predictable, consistent application response times”&lt;/em&gt;, but there doesn’t seem to be anything like that in the .NET space.&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;Detecting GC Pauses&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;But how do you detect GC pauses, well the first thing to do is take a look at the properties of the process using the excellent &lt;a href=&quot;http://technet.microsoft.com/en-gb/sysinternals/bb896653.aspx&quot; title=&quot;Process Explorer&quot; target=&quot;_blank&quot;&gt;Process Explorer&lt;/a&gt; tool from &lt;a href=&quot;http://technet.microsoft.com/en-gb/sysinternals&quot; title=&quot;Sysinternals&quot; target=&quot;_blank&quot;&gt;Sysinternals&lt;/a&gt; (imagine Task Manager on steroids). It will give you a summary like the one below, the number of &lt;em&gt;Gen 0/1/2 Collections&lt;/em&gt; and &lt;em&gt;% Time in GC&lt;/em&gt; are the most interesting values to look at.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2014/06/time-in-gc.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/06/time-in-gc.png&quot; alt=&quot;Time in GC&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But the limitation of this is that it has no context, what &lt;em&gt;% of time in GC&lt;/em&gt; is too high, how many &lt;em&gt;Gen 2 collections&lt;/em&gt; are too many? What effect does GC actually have on your program, in terms of pauses that a customer will experience?&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;jHiccup and HdrHistogram&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;To gain a better understanding, I’ve used some of the ideas from the excellent &lt;a href=&quot;http://www.azulsystems.com/downloads/jHiccup&quot; target=&quot;_blank&quot;&gt;jHiccup&lt;/a&gt; Java tool. Very simply, it starts a new thread in which the following code runs:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Stopwatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// allow a little bit of leeway&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElapsedMilliseconds&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Record the pause&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_histogram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recordValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElapsedMilliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Any pauses that this thread experiences will also be seen by the other threads running in the program and whilst these pauses aren’t &lt;em&gt;guaranteed&lt;/em&gt; to be caused by the GC, it’s the most likely culprit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this uses the &lt;a href=&quot;https://github.com/HdrHistogram/HdrHistogram/tree/master/src/main/csharp&quot; target=&quot;_blank&quot;&gt;.NET port&lt;/a&gt; of the Java &lt;a href=&quot;https://github.com/HdrHistogram/HdrHistogram&quot; target=&quot;_blank&quot;&gt;HdrHistogram&lt;/a&gt;, a full explanation of what HdrHistogram offers and how it works is available in the &lt;a href=&quot;https://github.com/HdrHistogram/HdrHistogram/blob/master/README&quot; target=&quot;_blank&quot;&gt;Readme&lt;/a&gt;. But the summary is that it offers a non-intrusive way of collecting samples in a histogram, so that you can then produce a graph of the &lt;a href=&quot;http://www.azulsystems.com/sites/www.azulsystems.com/azul/images/jhiccup/3gb-hotspot-hiccup.gif&quot; target=&quot;_blank&quot;&gt;50%/99%/99.9%/99.99% percentiles&lt;/a&gt;. It does this by allocating all the memory it needs up front, so after start-up it performs no allocations during usage. The benefit of recording full percentile information like this is that you get a much fuller view of any outlying values, compared to just recording a simple average.&lt;/p&gt;

&lt;p&gt;To trigger garbage collection, the test program also runs several threads, each executing the code below. In a loop, each thread creates a large &lt;code&gt;string&lt;/code&gt; and a &lt;code&gt;byte array&lt;/code&gt;, to simulate what a web server might be doing when generating a response to a web request (for instance from de-serialising some Json and creating a HTML page). Then to ensure that the objects are kept around long enough, they are both put into a Least Recently Used (LRU) cache, that holds the 2000 most recent items.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;processingThreads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadCounter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stringCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetHashCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Use 80K, If we are &amp;gt; 85,000 bytes = LOH and we don't want these there&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;NextBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bytesCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetHashCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;threadCounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// So we don't thrash the CPU!!!!&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4&gt;&lt;strong&gt;Test Results&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;The test was left running for 10 mins, in each of the following GC modes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Workstation Batch (non-concurrent)&lt;/li&gt;
&lt;li&gt;Workstation Interactive (concurrent)&lt;/li&gt;
&lt;li&gt;Server Batch (non-concurrent)&lt;/li&gt;
&lt;li&gt;Server Interactive (concurrent)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The results are below, you can clearly see that Server modes offer lower pauses than the Workstation modes and that Interactive (concurrent) mode is also an improvement over Batch mode. The graph shows pause times on the Y axis (so lower is better) and the X axis plots the percentiles, scaled logarithmically.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2014/06/gc-pause-times-comparision.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/06/gc-pause-times-comparision.png&quot; alt=&quot;GC Pause Times - comparision&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we take a closer look at just the 99% percentile, i.e. the value (at) which “1 in 100” pauses are less than, the difference is even clearer. Here you can see that the Workstation modes have pauses upto 25 milliseconds, compared to 10 milliseconds for the Server modes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2014/06/gc-pause-times-upto-99-comparision.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/06/gc-pause-times-upto-99-comparision.png&quot; alt=&quot;GC Pause Times - upto 99% comparision&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;SustainedLowLatency Mode&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;As a final test, the program was run using the new &lt;a href=&quot;http://msdn.microsoft.com/library/system.runtime.gclatencymode(v=vs.110).aspx&quot; title=&quot;Sustained low-latency GC mode&quot; target=&quot;_blank&quot;&gt;SustainedLowLatency&lt;/a&gt; mode, to see what effect that has. In the graph below you can see this offers lower pause times, although it isn’t able to sustain these for an unlimited period of time. After 10 minutes we start to see longer pauses compared to those we saw when running the test for just 5 minutes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2014/06/gc-pause-times-comparision-including-sustainedlowlatency.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/06/gc-pause-times-comparision-including-sustainedlowlatency.png&quot; alt=&quot;GC Pause Times - comparision including SustainedLowLatency&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s worth noting that there is a trade-off to take into account when using this mode, &lt;a href=&quot;http://msdn.microsoft.com/en-US/library/bb384202(v=vs.110).aspx&quot; title=&quot;Sustained low-latency GC mode&quot; target=&quot;_blank&quot;&gt;SustainedLowLatency mode is&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  For applications that have time-sensitive operations for a contained but potentially longer duration of time during which interruptions from the garbage collector could be disruptive. For example, applications that need quick response times as market data changes during trading hours.
  This mode results in a larger managed heap size than other modes. Because it does not compact the managed heap, higher fragmentation is possible. Ensure that sufficient memory is available.
&lt;/blockquote&gt;

&lt;p&gt;All the data used in these tests can be found in the spreadsheet &lt;a href=&quot;/images/2014/06/gc-pause-times-comparision.xlsx&quot;&gt;GC Pause Times - comparision&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.reddit.com/r/csharp/comments/28ghp8/measuring_the_impact_of_the_net_garbage_collector/&quot; target=&quot;_blank&quot;&gt;Discuss on the csharp sub-reddit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=8282310&quot; target=&quot;_blank&quot;&gt;Discuss on Hacker News&lt;/a&gt;&lt;/p&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2014/06/18/measuring-the-impact-of-the-net-garbage-collector/&quot;&gt;Measuring the impact of the .NET Garbage Collector&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='Garbage Collectors' scheme='http://www.mattwarren.org/tags#Garbage Collectors'/>
   
     <category term='Performance' scheme='http://www.mattwarren.org/tags#Performance'/>
   
 </entry>
 
 <entry>
   <title>Roslyn code base - performance lessons (part 2)</title>
   <link href="http://www.mattwarren.org/2014/06/10/roslyn-code-base-performance-lessons-part-2/"/>
   <updated>2014-06-10T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2014/06/10/roslyn-code-base-performance-lessons-part-2</id>
   <content type="html">
     &lt;p&gt;In my &lt;a href=&quot;/2014/06/05/roslyn-code-base-performance-lessons-part-1/&quot; target=&quot;_blank&quot;&gt;previous post&lt;/a&gt;, I talked about some of the general performance lessons that can be learnt from the &lt;a href=&quot;https://roslyn.codeplex.com/&quot; target=&quot;_blank&quot;&gt;Roslyn&lt;/a&gt; project. This post builds on that and looks at specific examples from the code base.&lt;/p&gt;

&lt;p&gt;Generally the performance gains within Roslyn come down to one thing:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;strong&gt;Ensuring the garbage collector&amp;nbsp;does the least possible amount of work&lt;/strong&gt;
&lt;/blockquote&gt;

&lt;p&gt;.NET is a managed language and one of the features that it provides is memory management, via the garbage collector (GC). However GC doesn’t come for free, it has to find and inspect all the &lt;em&gt;live&lt;/em&gt; objects (and their descendants) in the “mark” phrase, before cleaning up any &lt;em&gt;dead&lt;/em&gt; objects in the “sweep” phase.&lt;/p&gt;

&lt;p&gt;This is backed up by the guidance provided for &lt;a href=&quot;https://roslyn.codeplex.com/wikipage?title=How%20to%20Contribute&amp;amp;referringTitle=Documentation&quot; target=&quot;_blank&quot;&gt;contributing to Roslyn&lt;/a&gt;, from the &lt;strong&gt;Coding Conventions&lt;/strong&gt; section:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
  &lt;li&gt;Avoid allocations in compiler hot paths:
  
  &lt;ul&gt;
  &lt;li&gt;Avoid LINQ.&lt;/li&gt;
  &lt;li&gt;Avoid using foreach over collections that do not have a struct enumerator.&lt;/li&gt;
  &lt;li&gt;Consider using an object pool. There are many usages of object pools in the compiler to see an example.&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s interesting to see LINQ specifically called out, I think it’s great and it does allow you to write much more declarative and readable code, in fact I’d find it hard to write C# code without it. But behind the scenes there are lots of hidden allocations going on and they are not always obvious. If you don’t believe me, have a go at &lt;a href=&quot;http://joeduffyblog.com/2010/09/06/the-premature-optimization-is-evil-myth/&quot; target=&quot;_blank&quot;&gt;Joe Duffy’s quiz&lt;/a&gt; (about 1/2 way through the blog post).&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Techniques used&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;There are several techniques used in the Roslyn code base that either minimise or eliminate allocations, thus giving the GC less work to do. One important characteristic all of them share is that they are only applied to “Hot Paths” within the code. &lt;a href=&quot;http://c2.com/cgi/wiki?PrematureOptimization&quot; target=&quot;_blank&quot;&gt;Optimising prematurely&lt;/a&gt; is never recommended, nor is using optimisations on parts of your code that are rarely exercised. You need to measure and identify the &lt;strong&gt;bottlenecks&lt;/strong&gt; and understand what are the &lt;strong&gt;hot-paths&lt;/strong&gt; through your code, &lt;strong&gt;before&lt;/strong&gt; you apply any optimisations.&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;Avoiding allocations altogether&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Within the .NET framework there are many methods that cause allocations, for instance String.Trim(..) or any LINQ methods. To combat this we can find several examples where code was specifically re-written, for example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;// PERF: Avoid calling string.Trim() because that allocates a new substring&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;from &lt;a href=&quot;http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis.CSharp/Compiler/DocumentationCommentCompiler.cs#731&quot; target=&quot;_blank&quot;&gt;DocumentationCommentCompiler.cs&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;// PERF: Expansion of &quot;assemblies.Any(a =&amp;gt; a.NamespaceNames.Contains(namespaceName))&quot; to avoid allocating a lambda.&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;from &lt;a href=&quot;http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis.Workspaces/Shared/Extensions/IAssemblySymbolExtensions.cs#17&quot; target=&quot;_blank&quot;&gt;IAssemblySymbolExtensions.cs&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;// PERF: Beware ImmutableArray.Builder.Sort allocates a Comparer wrapper object&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;from &lt;a href=&quot;http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis/Collections/ImmutableArrayExtensions.cs#439&quot; target=&quot;_blank&quot;&gt;ImmutableArrayExtensions.cs&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another good lesson is that each improvement is annotated with a “&lt;code&gt;// PERF:&lt;/code&gt;” comment to explain the reasoning, I guess this is to prevent another developer coming along and re-factoring the code to something more readable (at the expense of performance).&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;Object pooling with a Cache&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Another strategy used is &lt;a&gt;object pooling&lt;/a&gt; where rather than &lt;em&gt;newing&lt;/em&gt; up objects each time, old ones are re-used. Again this helps relieve pressure on the GC as less objects are allocated and the ones that are, stick around for a while (often the life-time of the program). This is a sweet-spot for the .NET GC, as per the advice from Rico Mariani’s excellent &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms973837.aspx#dotnetgcbasics_topic4&quot; target=&quot;_blank&quot;&gt;Garbage Collector Basics and Performance Hints&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;strong&gt;Too Many Almost-Long-Life Objects&lt;/strong&gt;
  Finally, perhaps the biggest pitfall of the generational garbage collector is the creation of many objects, which are neither exactly temporary nor are they exactly long-lived. These objects can cause a lot of trouble, because they will not be cleaned up by a gen0 collection (the cheapest), as they will still be necessary, and they might even survive a gen1 collection because they are still in use, but they soon die after that.
&lt;/blockquote&gt;

&lt;p&gt;We can see how this was handled in Roslyn in the code below from &lt;a href=&quot;http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis.Workspaces/Formatting/StringBuilderPool.cs&quot; target=&quot;_blank&quot;&gt;StringBuilderPool&lt;/a&gt;, that makes use of the more generic &lt;a href=&quot;http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis.Workspaces/Utilities/ObjectPools/PooledObject.cs#12&quot; target=&quot;_blank&quot;&gt;ObjectPool&lt;/a&gt; infrastructure and &lt;a href=&quot;http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis.Workspaces/Utilities/ObjectPools/SharedPools.cs#c5905bf81da0a7e8&quot; target=&quot;_blank&quot;&gt;helper classes&lt;/a&gt;. Obviously it was such a widely used pattern that they build a generic class to handle the bulk of the work, making it easy to write an implementation for a specific type, including StringBuilder, Dictionary, HashSet and Stream.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilderPool&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Allocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SharedPools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AllocateAndClear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SharedPools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ClearAndFree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ReturnAndFree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SharedPools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ForgetTrackedObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Having a class like this makes sense, a large part of compiling is parsing and building strings. Not only do they use a StringBuilder to save lots of temporary String allocations, but they also re-use StringBuilder objects to save the GC the work of having to clean up these.&lt;/p&gt;

&lt;p&gt;Interestingly enough this technique has also been used inside the .NET framework itself, you can see this in the code below from &lt;a href=&quot;http://referencesource.microsoft.com/#mscorlib/system/text/stringbuildercache.cs#40&quot; target=&quot;_blank&quot;&gt;StringBuilderCache.cs&lt;/a&gt;. Again, the comment shows that the optimisation was debated and a trade-off between memory usage and efficiency was weighed up.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilderCache&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// The value 360 was chosen in discussion with performance experts as a compromise between using&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// as little memory (per thread) as possible and still covering a large part of short-lived&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// StringBuilder creations on the startup path of VS designers.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_BUILDER_SIZE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;360&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThreadStatic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CachedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Acquire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefaultCapacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_BUILDER_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilderCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CachedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Avoid stringbuilder block fragmentation by getting a new StringBuilder&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// when the requested size is larger than the current capacity&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Capacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;StringBuilderCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CachedInstance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Capacity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_BUILDER_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;StringBuilderCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CachedInstance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetStringAndRelease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which you then use like this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilderCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Acquire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// use the builder as normal, i.e. builder.Append(..)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilderCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetStringAndRelease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4&gt;&lt;strong&gt;Specialised Collections&lt;/strong&gt; &lt;a name=&quot;SpecialisedCollections&quot;&gt;&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Finally there are several examples where custom collections were written to ensure that excessive memory overhead wasn’t created. For instance in the code below from &lt;a href=&quot;http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis.CSharp/Symbols/Metadata/PE/PENamedTypeSymbol.cs#673&quot; target=&quot;_blank&quot;&gt;PENamesTypeSymbol.cs&lt;/a&gt;, you can clearly see that specific collections are re-used whenever there are 0, 1 or up-to 6 items. 
The comment clearly spells out the trade-off, so whilst these collections aren’t as efficient when doing lookups (&lt;em&gt;O(n)&lt;/em&gt; v &lt;em&gt;O(log n)&lt;/em&gt;), they are more efficient in terms of space and so the trade-off is worth it. It’s also interesting to note that the size of &lt;em&gt;6&lt;/em&gt; wasn’t chose randomly, in their tests they found that 50% of the time there were 6 items or fewer, so these optimisations will give a performance gain in the &lt;em&gt;majority&lt;/em&gt; of scenarios.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateReadOnlyMemberNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpecializedCollections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EmptySet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpecializedCollections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SingletonCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;First&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// PERF: Small collections can be implemented as ImmutableArray.&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// While lookup is O(n), when n is small, the memory savings are more valuable.&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Size 6 was chosen because that represented 50% of the names generated in the Picasso end to end.&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// This causes boxing, but that's still superior to a wrapped HashSet&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImmutableArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpecializedCollections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadOnlySet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;All in all there are some really nice tricks and examples of high-performance code to be found in the Roslyn code base. But the main lesson is that you should &lt;strong&gt;never&lt;/strong&gt; be applying these for the sake of it or because they look clever. They should only be used in conjunction with proper performance testing that identifies the parts of your code that cause it to run slower than your performance goals.&lt;/p&gt;

&lt;p&gt;Interestingly enough StackOverflow faced a similar issue a few years back, see &lt;a href=&quot;http://samsaffron.com/archive/2011/10/28/in-managed-code-we-trust-our-recent-battles-with-the-net-garbage-collector&quot; target=&quot;_blank&quot;&gt;In managed code we trust, our recent battles with the .NET Garbage Collector&lt;/a&gt;, but that’s a subject for another post, stay tuned!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Since first writing this post, I’ve found out about an excellent talk &lt;a href=&quot;http://channel9.msdn.com/Events/TechEd/NorthAmerica/2013/DEV-B333&quot; target=&quot;_blank&quot;&gt;Essential Truths Everyone Should Know about Performance in a Large Managed Codebase&lt;/a&gt;, in which Dustin Campbell (a Roslyn Program Manager), talks about how they improved the performance of Roslyn. I can’t recommend it enough.&lt;/p&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2014/06/10/roslyn-code-base-performance-lessons-part-2/&quot;&gt;Roslyn code base - performance lessons (part 2)&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='C#' scheme='http://www.mattwarren.org/tags#C#'/>
   
     <category term='Open Source' scheme='http://www.mattwarren.org/tags#Open Source'/>
   
     <category term='Performance' scheme='http://www.mattwarren.org/tags#Performance'/>
   
     <category term='Performance Lessons' scheme='http://www.mattwarren.org/tags#Performance Lessons'/>
   
     <category term='Roslyn' scheme='http://www.mattwarren.org/tags#Roslyn'/>
   
 </entry>
 
 <entry>
   <title>Roslyn code base - performance lessons (part 1)</title>
   <link href="http://www.mattwarren.org/2014/06/05/roslyn-code-base-performance-lessons-part-1/"/>
   <updated>2014-06-05T00:00:00+00:00</updated>
   <id>http://www.mattwarren.org/2014/06/05/roslyn-code-base-performance-lessons-part-1</id>
   <content type="html">
     &lt;p&gt;At &lt;a href=&quot;http://www.buildwindows.com/&quot; target=&quot;_blank&quot;&gt;Build 2014&lt;/a&gt; Microsoft open source their next-generation C#/VB.NET compiler, called &lt;a href=&quot;http://msdn.microsoft.com/en-us/vstudio/roslyn.aspx&quot; target=&quot;_blank&quot;&gt;Roslyn&lt;/a&gt;. The project is &lt;a href=&quot;https://roslyn.codeplex.com/&quot; target=&quot;_blank&quot;&gt;hosted on codeplex&lt;/a&gt; and you can even &lt;a href=&quot;http://source.roslyn.codeplex.com/&quot; target=&quot;_blank&quot;&gt;browse the source&lt;/a&gt;, using the new Reference Source browser, which is itself &lt;a href=&quot;http://www.hanselman.com/blog/AnnouncingTheNewRoslynpoweredNETFrameworkReferenceSource.aspx&quot; target=&quot;_blank&quot;&gt;powered by Roslyn&lt;/a&gt; (that’s some crazy, meta-recursion going on there!).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://source.roslyn.codeplex.com/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/2014/05/roslyn-reference-source-browser.png&quot; alt=&quot;Roslyn reference source browser&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Easter Eggs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There’s also some nice info available, for instance you can &lt;a href=&quot;http://source.roslyn.codeplex.com/i.txt&quot; target=&quot;_blank&quot;&gt;get a summary&lt;/a&gt; of the number of lines of code, files etc, you can also list the &lt;a href=&quot;http://source.roslyn.codeplex.com/Projects.txt&quot; target=&quot;_blank&quot;&gt;projects&lt;/a&gt; and &lt;a href=&quot;http://source.roslyn.codeplex.com/Assemblies.txt&quot; target=&quot;_blank&quot;&gt;assemblies&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;strong&gt;ProjectCount=50
DocumentCount=4,366
LinesOfCode=2,355,329
BytesOfCode=96,850,461
DeclaredSymbols=124,312
DeclaredTypes=6,649
PublicTypes=2,076&lt;/strong&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s ~2.3 million lines of code, across over 4300 files! (HT to Slaks for &lt;a href=&quot;http://blog.slaks.net/2014-02-24/inside-the-new-net-reference-source/#toc_2&quot; target=&quot;_blank&quot;&gt;pointing out this functionality&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Being part of the process&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are in any way interested in new C# language features or just want to find out how a compiler is built, this is really great news. On top of this, not only have Microsoft open sourced the code, the entire process is there for everyone to see. You can get a peek behind the scenes of the &lt;a href=&quot;https://roslyn.codeplex.com/discussions/546465&quot; target=&quot;_blank&quot;&gt;C# Design Meetings&lt;/a&gt;, debate possible new features &lt;a href=&quot;https://roslyn.codeplex.com/discussions/542963&quot; target=&quot;_blank&quot;&gt;with some of the designers&lt;/a&gt; and best of all, they seem &lt;a href=&quot;https://roslyn.codeplex.com/discussions/541194#post1240018&quot; target=&quot;_blank&quot;&gt;genuinely interested&lt;/a&gt; in getting community feedback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Taking performance seriously&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But what I find really interesting is the performance lessons that can be learned. As outlined in &lt;a href=&quot;http://blogs.msdn.com/b/csharpfaq/archive/2014/01/15/roslyn-performance-matt-gertz.aspx&quot; target=&quot;_blank&quot;&gt;this post&lt;/a&gt;, performance is something they take seriously. It’s not really surprising, the new compiler can’t afford to be slower than the old C++ one and developers are pretty demanding customers, so any performance issues would be noticed and complained about.&lt;/p&gt;

&lt;p&gt;To give you an idea of what’s involved, here’s the list of scenarios that they measure the performance against.&lt;/p&gt;

&lt;ul style=&quot;color:#424242;&quot;&gt;
    &lt;li&gt;Build timing of small, medium, and (very) large solutions&lt;/li&gt;
    &lt;li&gt;Typing speed when working in the above solutions, including “goldilocks” tests where we slow the typing entry to the speed of a human being&lt;/li&gt;
    &lt;li&gt;IDE feature speed (navigation, rename, formatting, pasting, find all references, etc…)&lt;/li&gt;
    &lt;li&gt;Peak memory usage for the above solutions&lt;/li&gt;
    &lt;li&gt;All of the above for multiple configurations of CPU cores and available memory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And to make sure that they have accurate measurements and that they know as soon as performance has degraded (&lt;strong&gt;emphasis mine&lt;/strong&gt;):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p style=&quot;color:#424242;&quot;&gt;These are all &lt;strong&gt;assessed &amp;amp; reported daily&lt;/strong&gt;, so that we can identify &amp;amp; repair any check-in that introduced a regression as soon as possible, before it becomes entrenched.  Additionally, we don’t just check for the average time elapsed on a given metric; &lt;strong&gt;we also assess the 98&lt;sup&gt;th&lt;/sup&gt; &amp;amp; 99.9&lt;sup&gt;th&lt;/sup&gt; percentiles&lt;/strong&gt;, because we want good performance all of the time, not just some of the time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There’s lots of information about why &lt;a href=&quot;http://filipspagnoli.wordpress.com/2009/11/13/lies-damned-lies-and-statistics-21-misleading-averages/&quot; target=&quot;_blank&quot;&gt;just using averages is a bad idea&lt;/a&gt;, particularly when &lt;a href=&quot;http://mvolo.com/why-average-latency-is-a-terrible-way-to-track-website-performance-and-how-to-fix-it/&quot; target=&quot;_blank&quot;&gt;dealing with response times&lt;/a&gt;, so it’s good to see that they are using percentiles as well. But running performance tests as part of their daily builds and tracking those numbers over time, is a really good example of taking performance seriously, &lt;strong&gt;performance testing wasn’t left till the end, as an after-thought&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I’ve worked on projects where the performance targets were at best vague and ensuring they were met was left till right at the end, after all the features had been implemented. It’s much harder to introduce performance testing at this time, we certainly don’t do it with unit testing, so why with performance testing?&lt;/p&gt;

&lt;p&gt;This ties in with &lt;a href=&quot;http://blog.codinghorror.com/performance-is-a-feature/&quot; target=&quot;_blank&quot;&gt;Stack Overflow mantra&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;&lt;strong&gt;Performance is a feature&lt;/strong&gt;&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next time I’ll be looking at specific examples of performance enhancements made in the code base and what problems they are trying to solve.&lt;/p&gt;

     
     
     
     
       &lt;p&gt;The post &lt;a href=&quot;http://www.mattwarren.org/2014/06/05/roslyn-code-base-performance-lessons-part-1/&quot;&gt;Roslyn code base - performance lessons (part 1)&lt;/a&gt; first appeared on my blog &lt;a href=&quot;http://mattwarren.org&quot;&gt;Performance is a Feature!&lt;/a&gt;&lt;/p&gt;
       
       &lt;a href=&quot;http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=641373&quot; rel=&quot;tag&quot; style=&quot;display:none&quot;&gt;CodeProject&lt;/a&gt;
     
   </content>
   
     <category term='C#' scheme='http://www.mattwarren.org/tags#C#'/>
   
     <category term='Open Source' scheme='http://www.mattwarren.org/tags#Open Source'/>
   
     <category term='Performance' scheme='http://www.mattwarren.org/tags#Performance'/>
   
     <category term='Performance Lessons' scheme='http://www.mattwarren.org/tags#Performance Lessons'/>
   
     <category term='Roslyn' scheme='http://www.mattwarren.org/tags#Roslyn'/>
   
 </entry>
 

</feed>
