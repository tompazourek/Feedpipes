<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Julia Evans]]></title>
  <link href="http://jvns.ca/atom.xml" rel="self"/>
  <link href="http://jvns.ca"/>
  <updated>2019-06-28T18:46:02+00:00</updated>
  <id>http://jvns.ca</id>
  <author>
    <name><![CDATA[Julia Evans]]></name>
  </author>
  <generator uri="http://gohugo.io/">Hugo</generator>

  
  <entry>
    <title type="html"><![CDATA[Get your work recognized: write a brag document]]></title>
    <link href="https://jvns.ca/blog/brag-documents/"/>
    <updated>2019-06-28T18:46:02+00:00</updated>
    <id>https://jvns.ca/blog/brag-documents/</id>
    <content type="html"><![CDATA[

<p>There&rsquo;s this idea that, if you do great work at your job, people will (or should!) automatically
recognize that work and reward you for it with promotions / increased pay. In practice, it&rsquo;s often
more complicated than that &ndash; some kinds of important work are more visible/memorable than others.
It&rsquo;s frustrating to have done something really important and later realize that you didn&rsquo;t get
rewarded for it just because the people making the decision didn&rsquo;t understand or remember what you
did. So I want to talk about a tactic that I and lots of people I work with have used!</p>

<p>This blog post isn&rsquo;t just about being promoted or getting raises though. The ideas here have
actually been more useful to me to help me reflect on themes in my work, what&rsquo;s important to me,
what I&rsquo;m learning, and what I&rsquo;d like to be doing differently. But they&rsquo;ve definitely helped with
promotions!</p>

<p>You can also <a href="#template">skip to the brag document template at the end</a>.</p>

<h3 id="you-don-t-remember-everything-you-did">you don&rsquo;t remember everything you did</h3>

<p>One thing I&rsquo;m always struck by when it comes to performance review time is a feeling of &ldquo;wait, what
<em>did</em> I do in the last 6 months?&ldquo;. This is a kind of demoralizing feeling and it&rsquo;s usually not based
in reality, more in &ldquo;I forgot what cool stuff I actually did&rdquo;.</p>

<p>I invariably end up having to spend a bunch of time looking through my pull requests, tickets,
launch emails, design documents, and more. I always end up finding small (and sometimes
not-so-small) things that I completely forgot  I did, like:</p>

<ul>
<li>mentored an intern 5 months ago</li>
<li>did a small-but-important security project</li>
<li>spent a few weeks helping get an important migration over the line</li>
<li>helped X put together this design doc</li>
<li>etcetera!</li>
</ul>

<h3 id="your-manager-doesn-t-remember-everything-you-did">your manager doesn&rsquo;t remember everything you did</h3>

<p>And if you don&rsquo;t remember everything important you did, your manager (no matter how great they are!)
probably doesn&rsquo;t either. And they need to explain to other people why you should be promoted or
given an evaluation like &ldquo;exceeds expectations&rdquo; (&ldquo;X&rsquo;s work is so awesome!!!!&rdquo; doesn&rsquo;t fly).</p>

<p>So if your manager is going to effectively advocate for you, they need help.</p>

<h3 id="here-s-the-tactic-write-a-document-listing-your-accomplishments">here&rsquo;s the tactic: write a document listing your accomplishments</h3>

<p>The tactic is pretty simple! Instead of trying to remember everything you did with your brain,
maintain a &ldquo;brag document&rdquo; that lists everything so you can refer to it when you get to performance
review season! This is a pretty common tactic &ndash; when I started doing this I mentioned it to more
experienced people and they were like &ldquo;oh yeah, I&rsquo;ve been doing that for a long time, it really
helps&rdquo;.</p>

<p>Where I work we call this a &ldquo;brag document&rdquo; but I&rsquo;ve heard other names for the same concept like
&ldquo;hype document&rdquo; or &ldquo;list of stuff I did&rdquo; :).</p>

<p>There&rsquo;s a basic template for a brag document at the end of this post.</p>

<h3 id="share-your-brag-document-with-your-manager">share your brag document with your manager</h3>

<p>When I first wrote a brag document I was kind of nervous about sharing it with my manager. It felt
weird to be like &ldquo;hey, uh, look at all the awesome stuff I did this year, I wrote a long document
listing everything&rdquo;. But my manager was really thankful for it &ndash; I think his perspective was &ldquo;this
makes my job way easier, now I can look at the document when writing your perf review instead of
trying to remember what happened&rdquo;.</p>

<p>Giving them a document that explains your accomplishments will really help your manager advocate for
you in discussions about your performance and come to any meetings they need to have prepared.</p>

<p>Brag documents also <strong>really</strong> help with manager transitions &ndash; if you get a new manager 3 months
before an important performance review that you want to do well on, giving them a brag document
outlining your most important work &amp; its impact will help them understand what you&rsquo;ve been doing
even though they may not have been aware of any of your work before.</p>

<h3 id="share-it-with-your-peer-reviewers">share it with your peer reviewers</h3>

<p>Similarly, if your company does peer feedback as part of the promotion/perf process  &ndash; share your
brag document with your peer reviewers!! Every time someone shares their doc with me I find it SO
HELPFUL with writing their review for much the same reasons it&rsquo;s helpful to share it with your
manager &ndash; it reminds me of all the amazing things they did, and when they list their goals in their
brag document it also helps me see what areas they might be most interested in feedback on.</p>

<p>On some teams at work it&rsquo;s a team norm to share a brag document with peer reviewers to make it
easier for them.</p>

<h3 id="explain-the-big-picture">explain the big picture</h3>

<p>In addition to just listing accomplishments, in your brag document you can write the narrative explaining the big picture of your work. Have you been really focused on security? On building your product skills &amp; having really good relationships with your users? On building a strong culture of code review on the team?</p>

<p>In my brag document, I like to do this by making a section for areas that I&rsquo;ve been focused on (like &ldquo;security&rdquo;) and listing all the work I&rsquo;ve done in that area there. This is especially good if you&rsquo;re working on something fuzzy like &ldquo;building a stronger culture of code review&rdquo; where all the individual actions you do towards that might be relatively small and there isn&rsquo;t a big shiny ship.</p>

<h3 id="use-your-brag-document-to-notice-patterns">use your brag document to notice patterns</h3>

<p>In the past I&rsquo;ve found the brag document useful not just to hype my accomplishments, but also to reflect on the work I&rsquo;ve done. Some questions it&rsquo;s helped me with:</p>

<ul>
<li>What work do I feel most proud of?</li>
<li>Are there themes in these projects I should be thinking about? What&rsquo;s the big picture of what I&rsquo;m working on?  (am I working a lot on security? localization?).</li>
<li>What do I wish I was doing more / less of?</li>
<li>Which of my projects had the effect I wanted, and which didn&rsquo;t? Why might that have been?</li>
<li>What could have gone better with project X? What might I want to do differently next time?</li>
</ul>

<h3 id="you-can-write-it-all-at-once-or-update-it-every-2-weeks">you can write it all at once or update it every 2 weeks</h3>

<p>Many people have told me that it works best for them if they take a few minutes to update their brag document every 2 weeks ago. For me it actually works better to do a single marathon session every 6 months or every year where I look through everything I did and reflect on it all at once. Try out different approaches and see what works for you!</p>

<h3 id="don-t-forget-to-include-the-fuzzy-work">don&rsquo;t forget to include the fuzzy work</h3>

<p>A lot of us work on fuzzy projects that can feel hard to quantify, like:</p>

<ul>
<li>improving code quality on the team / making code reviews a little more in depth</li>
<li>making on call easier</li>
<li>building a more fair interview process / performance review system</li>
<li>refactoring / driving down technical debt</li>
</ul>

<p>A lot of people will leave this kind of work out because they don&rsquo;t know how to explain why it&rsquo;s important. But I think this kind of work is especially important to put into your brag document because it&rsquo;s the most likely to fall under the radar! One way to approach this is to, for each goal:</p>

<ol>
<li>explain your goal for the work (why do you think it&rsquo;s important to refactor X piece of code?)</li>
<li>list some things you&rsquo;ve done towards that goal</li>
<li>list any effects you&rsquo;ve seen of the work, even if they&rsquo;re a little indirect</li>
</ol>

<p>If you tell your coworkers this kind of work is important to you and tell them what you&rsquo;ve been
doing, maybe they can also give you ideas about how to do it more effectively or make the effects of
that work more obvious!</p>

<h3 id="encourage-each-other-to-celebrate-accomplishments">encourage each other to celebrate accomplishments</h3>

<p>One nice side effect of having a shared idea that it&rsquo;s normal/good to maintain a brag document at
work is that I sometimes see people encouraging each other to record &amp; celebrate their
accomplishments (&ldquo;hey, you should put that in your brag doc, that was really good!&rdquo;). It can be hard
to see the value of your work sometimes, especially when you&rsquo;re working on something hard, and an
outside perspective from a friend or colleague can really help you see why what you&rsquo;re doing is
important.</p>

<p>Brag documents are good when you use them on your own to advocate for yourself, but I think they&rsquo;re
better as a collaborative effort to recognize where people are excelling.</p>

<p>Next, I want to talk about a couple of structures that we&rsquo;ve used to help people recognize their accomplishments.</p>

<h3 id="the-brag-workshop-help-people-list-their-accomplishments">the brag workshop: help people list their accomplishments</h3>

<p>The way this &ldquo;brag document&rdquo; practice started in the first place is that my coworker <a href="https://karla.io/">Karla</a> and I wanted to help other women in engineering advocate for themselves more in the performance review process. The idea is that some people undersell their accomplishments more than they should, so we wanted to encourage those people to &ldquo;brag&rdquo; a little bit and write down what they did that was important.</p>

<p>We did this by running a &ldquo;brag workshop&rdquo; just before performance review season. The format of the workshop is like this:</p>

<p><strong>Part 1: write the document: 1-2 hours</strong>. Everybody sits down with their laptop, starts looking
through their pull requests, tickets they resolved, design docs, etc, and puts together a list of
important things they did in the last 6 months.</p>

<p><strong>Part 2: pair up and make the impact of your work clearer: 1 hour</strong>. The goal of this part is to
pair up, review each other&rsquo;s documents, and identify places where people haven&rsquo;t bragged &ldquo;enough&rdquo; &ndash;
maybe they worked on an extremely critical project to the company but didn&rsquo;t highlight how important
it was, maybe they improved test performance but didn&rsquo;t say that they made the tests 3 times faster
and that it improved everyone&rsquo;s developer experience. It&rsquo;s easy to accidentally write &ldquo;I shipped
$feature&rdquo; and miss the follow up (&ldquo;&hellip; which caused $thing to happen&rdquo;). Another person reading
through your document can help you catch the places where you need to clarify the impact.</p>

<h3 id="biweekly-brag-document-writing-session">biweekly brag document writing session</h3>

<p>Another approach to helping people remember their accomplishments: my friend Dave gets some friends
together every couple of weeks or so for everyone to update their brag documents. It&rsquo;s a nice way
for people to talk about work that they&rsquo;re happy about &amp; celebrate it a little bit, and updating
your brag document as you go can be easier than trying to remember everything you did all at once at
the end of the year.</p>

<p>These don&rsquo;t have to be people in the same company or even in the same city &ndash; that group meets over
video chat and has people from many different companies doing this together from Portland, Toronto,
New York, and Montreal.</p>

<p>In general, especially if you&rsquo;re someone who really cares about your work, I think it&rsquo;s really
positive to share your goals &amp; accomplishments (and the things that haven&rsquo;t gone so well too!) with
your friends and coworkers. It makes it feel less like you&rsquo;re working alone and more like
everyone is supporting each other in helping them accomplish what they want.</p>

<h3 id="thanks">thanks</h3>

<p>Thanks to Karla Burnett who I worked with on spreading this idea at work, to Dave Vasilevsky for
running brag doc writing sessions, to Will Larson who encouraged me to start one <a href="https://lethain.com/career-narratives/">of these</a> in the
first place, to my manager Jay Shirley for always being encouraging &amp; showing me that this is a
useful way to work with a manager, and to Allie, Dan, Laura, Julian, Kamal, Stanley, and Vaibhav for
reading a draft of this.</p>

<p>I&rsquo;d also recommend the blog post <a href="http://blog.aashni.me/2019/01/hype-yourself-youre-worth-it/">Hype Yourself! You&rsquo;re Worth It!</a> by Aashni Shah which talks about a similar approach.</p>

<h2 id="a-name-template-class-anchor-appendix-brag-document-template-a"><a name="template" class="anchor">Appendix: brag document template</a></h2>

<p>Here&rsquo;s a template for a brag document! Usually I make one brag document per year. (&ldquo;Julia&rsquo;s
2017 brag document&rdquo;). I think it&rsquo;s okay to make it quite long / comprehensive &ndash; 5-10 pages or more
for a year of work doesn&rsquo;t seem like too much to me, especially if you&rsquo;re including some
graphs/charts / screenshots to show the effects of what you did.</p>

<p>One thing I want to emphasize, for people who don&rsquo;t like to brag, is &ndash; <strong>you don&rsquo;t have to try to
make your work sound better than it is</strong>. Just make it sound <strong>exactly as good as it is</strong>! For
example &ldquo;was the primary contributor to X new feature that&rsquo;s now used by 60% of our customers and
has gotten Y positive feedback&rdquo;.</p>

<h3 id="goals-for-this-year">Goals for this year:</h3>

<ul>
<li>List your major goals here! Sharing your goals with your manager &amp; coworkers is really nice because it helps them see how they can support you in accomplishing those goals!</li>
</ul>

<h3 id="goals-for-next-year">Goals for next year</h3>

<ul>
<li>If it&rsquo;s getting towards the end of the year, maybe start writing down what you think your goals for next year might be.</li>
</ul>

<h3 id="projects">Projects</h3>

<p>For each one, go through:</p>

<ul>
<li>What your contributions were (did you come up with the design? Which components did you build? Was there some useful insight like &ldquo;wait, we can cut scope and do what we want by doing way less work&rdquo; that you came up with?)</li>
<li>The impact of the project &ndash; who was it for? Are there numbers you can attach to it? (saved X dollars? shipped new feature that has helped sell Y big deals? Improved performance by X%? Used by X internal users every day?). Did it support some important non-numeric company goal (required to pass an audit? helped retain an important user?)</li>
</ul>

<p>Remember: don&rsquo;t forget to explain what the results of you work actually were! It&rsquo;s often important to go back a few months later and fill in what actually happened after you launched the project.</p>

<h3 id="collaboration-mentorship">Collaboration &amp; mentorship</h3>

<p>Examples of things in this category:</p>

<ul>
<li>Helping others in an area you&rsquo;re an expert in (like &ldquo;other engineers regularly ask me for one-off help
solving weird bugs in their CSS&rdquo; or &ldquo;quoting from the C standard at just the right moment&rdquo;)</li>
<li>Mentoring interns / helping new team members get started</li>
<li>Writing really clear emails/meeting notes</li>
<li>Foundational code that other people built on top of</li>
<li>Improving monitoring / dashboards / on call</li>
<li>Any code review that you spent a particularly long time on / that you think was especially important</li>
<li>Important questions you answered (&ldquo;helped Risha from OTHER_TEAM with a lot of questions related to Y&rdquo;)</li>
<li>Mentoring someone on a project (&ldquo;gave Ben advice from time to time on leading his first big project&rdquo;)</li>
<li>Giving an internal talk or workshop</li>
</ul>

<h3 id="design-documentation">Design &amp; documentation</h3>

<p>List design docs &amp; documentation that you worked on</p>

<ul>
<li>Design docs: I usually just say &ldquo;wrote design for X&rdquo; or &ldquo;reviewed design for X&rdquo;</li>
<li>Documentation: maybe briefly explain the goal behind this documentation (for example &ldquo;we were getting a lot of questions about X, so I documented it and now we can answer the questions more quickly&rdquo;)</li>
</ul>

<h3 id="company-building">Company building</h3>

<p>This is a category we have at work &ndash; it basically means &ldquo;things you did to help the company overall, not just your project / team&rdquo;. Some things that go in here:</p>

<ul>
<li>Going above &amp; beyond with interviewing or recruiting (doing campus recruiting, etc)</li>
<li>Improving important processes, like the interview process or writing better onboarding materials</li>
</ul>

<h3 id="what-you-learned">What you learned</h3>

<p>My friend Julian suggested this section and I think it&rsquo;s a great idea &ndash; try listing important
things you learned or skills you&rsquo;ve acquired recently! Some examples of skills you might be
learning or improving:</p>

<ul>
<li>how to do performance analysis &amp; make code run faster</li>
<li>internals of an important piece of software (like the JVM or Postgres or Linux)</li>
<li>how to use a library (like React)</li>
<li>how to use an important tool (like the command line or Firefox dev tools)</li>
<li>about a specific area of programming (like localization or timezones)</li>
<li>an area like product management / UX design</li>
<li>how to write a clear design doc</li>
<li>a new programming language</li>
</ul>

<p>It&rsquo;s really easy to lose track of what skills you&rsquo;re learning, and usually when I reflect on this I
realize I learned a lot more than I thought and also notice things that I&rsquo;m <em>not</em> learning that I
wish I was.</p>

<h3 id="outside-of-work">Outside of work</h3>

<p>It&rsquo;s also often useful to track accomplishments outside of work, like:</p>

<ul>
<li>blog posts</li>
<li>talks/panels</li>
<li>open source work</li>
<li>Industry recognition</li>
</ul>

<p>I think this can be a nice way to highlight how you&rsquo;re thinking about your career outside of strictly what you&rsquo;re doing at work.</p>

<p>This can also include other non-career-related things you&rsquo;re proud of, if that feels good to you! Some people like to keep a combined personal + work brag document.</p>

<h3 id="general-prompts">General prompts</h3>

<p>If you&rsquo;re feeling stuck for things to mention, try:</p>

<ul>
<li>If you were trying to convince a friend to come join your company/team, what would you tell them about your work?</li>
<li>Did anybody tell you you did something well recently?</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What does debugging a program look like?]]></title>
    <link href="https://jvns.ca/blog/2019/06/23/a-few-debugging-resources/"/>
    <updated>2019-06-23T18:48:35+00:00</updated>
    <id>https://jvns.ca/blog/2019/06/23/a-few-debugging-resources/</id>
    <content type="html"><![CDATA[

<p>I was debugging with a friend who&rsquo;s a relatively new programmer yesterday, and showed them a few
debugging tips. Then I was thinking about how to teach debugging this morning, and <a href="https://twitter.com/b0rk/status/1142825259546140673">mentioned on
Twitter</a> that I&rsquo;d never seen a really good
guide to debugging your code.  (there are a ton of really great replies by Anne Ogborn to that tweet
if you are interested in debugging tips)</p>

<p>As usual, I got a lot of helpful answers and now I have a few ideas about how to teach debugging
skills / describe the process of debugging.</p>

<h3 id="a-couple-of-debugging-resources">a couple of debugging resources</h3>

<p>I was hoping for more links to debugging books/guides, but here are the 2 recommendations I
got:</p>

<p><strong>&ldquo;Debugging&rdquo; by David Agans</strong>: Several people recommended the book
<a href="http://debuggingrules.com/">Debugging</a>, which looks like a nice and fairly short book that explains
a debugging strategy. I haven&rsquo;t read it yet (though I ordered it to see if I should be recommending
it) and the rules laid out in the book (&ldquo;understand the system&rdquo;, &ldquo;make it fail&rdquo;, &ldquo;quit thinking and
look&rdquo;, &ldquo;divide and conquer&rdquo;, &ldquo;change one thing at a time&rdquo;, &ldquo;keep an audit trail&rdquo;, &ldquo;check the plug&rdquo;,
&ldquo;get a fresh view&rdquo;, and &ldquo;if you didn&rsquo;t fix it, it ain&rsquo;t fixed&rdquo;) seem extremely resaonable :).  He
also has a charming <a href="http://debuggingrules.com/?page_id=40">debugging poster</a>.</p>

<p><strong>&ldquo;How to debug&rdquo; by John Regehr</strong>: <a href="https://blog.regehr.org/archives/199">How to Debug</a> is a very
good blog post based on Regehr&rsquo;s experience teaching a university embedded systems course. Lots of
good advice.  He also has a <a href="https://blog.regehr.org/archives/849">blog post reviewing 4 books about debugging</a>, including Agans&rsquo; book.</p>

<h3 id="reproduce-your-bug-but-how-do-you-do-that">reproduce your bug (but how do you do that?)</h3>

<p>The rest of this post is going to be an attempt to aggregate different ideas about debugging
people tweeted at me.</p>

<p>Somewhat obviously, everybody agrees that being able to consistently reproduce a bug is important if
you want to figure out what&rsquo;s going on. I have an intuitive sense for how to do this but I&rsquo;m not
sure how to <strong>explain</strong> how to go from &ldquo;I saw this bug twice&rdquo; to &ldquo;I can consistently reproduce this
bug on demand on my laptop&rdquo;, and I wonder whether the techniques you use to do this depend on the
domain (backend web dev, frontend,  mobile, games, C++ programs, embedded etc).</p>

<h3 id="reproduce-your-bug-quickly">reproduce your bug <em>quickly</em></h3>

<p>Everybody also agrees that it&rsquo;s extremely useful be able to reproduce the bug quickly (if it takes
you 3 minutes to check if every change helped, iterating is VERY SLOW).</p>

<p>A few suggested approaches:</p>

<ul>
<li>for something that requires clicking on a bunch of things in a browser to reproduce, recording
what you clicked on with <a href="https://www.seleniumhq.org/">Selenium</a> and getting Selenium to replay
the UI interactions (suggested <a href="https://twitter.com/AnnieTheObscure/status/1142843984642899968">here</a>)</li>
<li>writing a unit test that reproduces the bug (if you can). bonus: you can add this to your test
suite later if it makes sense</li>
<li>writing a script / finding a command line incantation that does it (like <code>curl MY_APP.local/whatever</code>)</li>
</ul>

<h3 id="accept-that-it-s-probably-your-code-s-fault">accept that it&rsquo;s probably your code&rsquo;s fault</h3>

<p>Sometimes I see a problem and I&rsquo;m like &ldquo;oh, library X has a bug&rdquo;, &ldquo;oh, it&rsquo;s DNS&rdquo;, &ldquo;oh, SOME OTHER
THING THAT IS NOT MY CODE is broken&rdquo;. And sometimes it&rsquo;s not my code! But in general between an
established library and my code that I wrote last month, usually it&rsquo;s my code that I wrote last
month that&rsquo;s the problem :).</p>

<h3 id="start-doing-experiments">start doing experiments</h3>

<p>@act_gardner gave a <a href="https://twitter.com/act_gardner/status/1142838587437830144">nice, short explanation of what you have to do after you reproduce your
bug</a></p>

<blockquote>
<p>I try to encourage people to first fully understand the bug - What&rsquo;s happening? What do you expect
to happen? When does it happen? When does it not happen? Then apply their mental model of the
system to guess at what could be breaking and come up with experiments.</p>

<p>Experiments could be changing or removing code, making API calls from a REPL, trying new inputs,
poking at memory values with a debugger or print statements.</p>
</blockquote>

<p>I think the loop here may be:</p>

<ul>
<li>make guess about one aspect about what might be happening (&ldquo;this variable is set to X where it
should be Y&rdquo;, &ldquo;the server is being sent the wrong request&rdquo;, &ldquo;this code is never running at all&rdquo;)</li>
<li>do experiment to check that guess</li>
<li>repeat until you understand what&rsquo;s going on</li>
</ul>

<h3 id="change-one-thing-at-a-time">change one thing at a time</h3>

<p>Everybody definitely agrees that it is important to change one thing a time when doing an
experiment to verify an assumption.</p>

<h3 id="check-your-assumptions">check your assumptions</h3>

<p>A lot of debugging is realizing that something you were <strong>sure</strong> was true (&ldquo;wait this request is
going to the new server, right, not the old one???&ldquo;) is actually&hellip; not true. I made an attempt to
<a href="https://twitter.com/b0rk/status/1142812831420768257">list some common incorrect assumptions</a>. Here
are some examples:</p>

<ul>
<li>this variable is set to X (&ldquo;that filename is definitely right&rdquo;)</li>
<li>that variable&rsquo;s value can&rsquo;t possibly have changed between X and Y</li>
<li>this code was doing the right thing before</li>
<li>this function does X</li>
<li>I&rsquo;m editing the right file</li>
<li>there can&rsquo;t be any typos in that line I wrote it is just 1 line of code</li>
<li>the documentation is correct</li>
<li>the code I&rsquo;m looking at is being executed at some point</li>
<li>these two pieces of code execute sequentially and not in parallel</li>
<li>the code does the same thing when compiled in debug / release mode (or with -O2 and without, or&hellip;)</li>
<li>the compiler is not buggy (though this is last on purpose, the compiler is only very rarely to blame :))</li>
</ul>

<h3 id="weird-methods-to-get-information">weird methods to get information</h3>

<p>There are a lot of normal ways to do experiments to check your assumptions / guesses about what the
code is doing (print out variable values, use a debugger, etc). Sometimes, though, you&rsquo;re in a more
difficult environment where you can&rsquo;t print things out and don&rsquo;t have access to a debugger (or it&rsquo;s
inconvenient to do those things, maybe because there are too many events). Some ways to cope:</p>

<ul>
<li><a href="https://twitter.com/cocoaphony/status/1142847665690030080">adding sounds on mobile</a>: &ldquo;In the
mobile world, I live on this advice. Xcode can play a sound when you hit a breakpoint (and
continue without stopping). I place them certain places in the code, and listen for buzzing Tink
to indicate tight loops or Morse/Pop pairs to catch unbalanced events&rdquo; (also <a href="https://twitter.com/AnnieTheObscure/status/1142842421954244608">this tweet</a>)</li>
<li>there&rsquo;s a very cool talk about <a href="https://qnoid.com/2013/06/08/Sound-Debugging.html">using XCode to play sound for iOS debugging here</a></li>
<li><a href="https://twitter.com/wombatnation/status/1142887843963867136">adding LEDs</a>: &ldquo;When I did embedded
dev ages ago on grids of transputers, we wired up an LED to an unused pin on each chip. It was
surprisingly effective for diagnosing parallelism issues.&rdquo;</li>
<li><a href="https://twitter.com/irvingreid/status/1142887472441040896">string</a>: &ldquo;My networks prof told me
about a hack he saw at Xerox in the early days of Ethernet: a tap in the coax with an amp and
motor and piece of string. The busier the network was, the faster the string twirled.&rdquo;</li>
<li><a href="http://peep.sourceforge.net/intro.html">peep</a> is a &ldquo;network auralizer&rdquo; that translates what&rsquo;s
happening on your system into sounds. I spent 10 minutes trying to get it to compile and failed so
far but it looks very fun and I want to try it!!</li>
</ul>

<p>The point here is that information is the most important thing and you need to do whatever&rsquo;s
necessary to get information.</p>

<h3 id="write-your-code-so-it-s-easier-to-debug">write your code so it&rsquo;s easier to debug</h3>

<p>Another point a few people brought up is that you can improve your program to make it
easier to debug. tef has a nice post about this: <a href="https://programmingisterrible.com/post/173883533613/code-to-debug">Write code that’s easy to delete, and easy to debug too.</a> here. I thought this
was very true:</p>

<blockquote>
<p>Debuggable code isn’t necessarily clean, and code that’s littered with checks or error handling
rarely makes for pleasant reading.</p>
</blockquote>

<p>I think one interpretation of &ldquo;easy to debug&rdquo; is &ldquo;every single time there&rsquo;s an error, the program
reports to you exactly what happened in an easy to understand way&rdquo;. Whenever my program has a
problem and says sometihng &ldquo;error: failure to connect to SOME_IP port 443: connection timeout&rdquo;
I&rsquo;m like THANK YOU THAT IS THE KIND OF THING I WANTED TO KNOW and I can check if I need to fix a
firewall thing or if I got the wrong IP for some reason or what.</p>

<p>One simple example of this recently: I was making a request to a server I wrote and the
reponse I got was &ldquo;upstream connect error or disconnect/reset before headers&rdquo;. This is an nginx
error which basically in this case boiled down to &ldquo;your program crashed before it sent anything in
response to the request&rdquo;. Figuring out the cause of the crash was pretty easy, but having better
error handling (returning an error instead of crashing) would have saved me a little time
because instead of having to go check the cause of the crash, I could have just read the error
message and figured out what was going on right away.</p>

<h3 id="error-messages-are-better-than-silently-failing">error messages are better than silently failing</h3>

<p>To get closer to the dream of &ldquo;every single time there&rsquo;s an error, the program reports
to you exactly what happened in an easy to understand way&rdquo; you also need to be disciplined about
immediately returning an error message instead of silently writing incorrect data / passing a
nonsense value to another function which will do WHO KNOWS WHAT with it and cause you a gigantic
headache. This means adding code like this:</p>

<pre><code>if UNEXPECTED_THING:
    raise &quot;oh no THING happened&quot;
</code></pre>

<p>This isn&rsquo;t easy to get right (it&rsquo;s not always obvious where you should be raising errors!&ldquo;) but it
really helps a lot.</p>

<h3 id="failure-print-out-a-stack-of-errors-not-just-one-error">failure: print out a stack of errors, not just one error.</h3>

<p>Related to returning helpful errors that make it easy to debug: Rust has a really incredible error
handling library <a href="https://github.com/rust-lang-nursery/failure">called failure</a> which basicaly lets
you return a chain of errors instead of just one error, so you can print out a stack of errors like:</p>

<pre><code>&quot;error starting server process&quot; caused by
&quot;error initializing logging backend&quot; caused by
&quot;connection failure: timeout connecting to 1.2.3.4 port 1234&quot;.
</code></pre>

<p>This is SO MUCH MORE useful than just <code>connection failure: timeout connecting to 1.2.3.4 port 1234</code>
by itself because it tells you the significance of 1.2.3.4 (it&rsquo;s something to do with the logging
backend!). And I think it&rsquo;s also more useful than <code>connection failure: timeout connecting to 1.2.3.4 port 1234</code>
with a stack trace, because it summarizes at a high level the parts that went wrong instead of
making you read all the lines in the stack trace (some of which might not be relevant!).</p>

<p>tools like this in other languages:</p>

<ul>
<li>Go: the idiom to do this seems to be to just concatenate your stack of errors together as a
big string so you get &ldquo;error: thing one: error: thing two : error: thing three&rdquo; which works okay but
is definitely a lot less structured than <code>failure</code>&rsquo;s system</li>
<li>Java: I hear you can give exceptions causes but haven&rsquo;t used that myself</li>
<li>Python 3: you can use <code>raise ... from</code> which sets the <code>__cause__</code> attribute on the exception and then
your exceptions will be separated by <code>The above exception was the direct cause of the following
exception:..</code></li>
</ul>

<p>If you know how to do this in other languages I&rsquo;d be interested to hear!</p>

<h3 id="understand-what-the-error-messages-mean">understand what the error messages mean</h3>

<p>One sub debugging skill that I take for granted a lot of the time is understanding what error
messages mean! I came across this nice graphic explaining <a href="https://pythonforbiologists.com/29-common-beginner-errors-on-one-page/">common Python errors and what they
mean</a>, which breaks down
things like <code>NameError</code>, <code>IOError</code>, etc.</p>

<p>I think a reason interpreting error messages is hard is that understanding a new error message might
mean learning a new concept &ndash; <code>NameError</code> can mean &ldquo;Your code uses a variable outside the scope
where it&rsquo;s defined&rdquo;, but to really understand that you need to understand what variable scope is! I
ran into this a lot when learning Rust &ndash; the Rust compiler would be like &ldquo;you have a weird lifetime
error&rdquo; and I&rsquo;d like be &ldquo;ugh ok Rust I get it I will go actually learn about how lifetimes work
now!&ldquo;.</p>

<p>And a lot of the time error messages are caused by a problem very different from the text of the
message, like how &ldquo;upstream connect error or disconnect/reset before headers&rdquo; might mean &ldquo;julia,
your server crashed!&ldquo;. The skill of understanding what error messages mean is often not transferable
when you switch to a new area (if I started writing a lot of React or something tomorrow, I would
probably have no idea what any of the error messages meant!). So this definitely isn&rsquo;t just an issue
for beginner programmers.</p>

<h3 id="that-s-all-for-now">that&rsquo;s all for now!</h3>

<p>I feel like the big thing I&rsquo;m missing when talking about debugging skills is a stronger
understanding of where people get stuck with debugging &ndash; it&rsquo;s easy to say &ldquo;well, you need to
reproduce the problem, then make a more minimal reproduction, then start coming up with guesses and
verifying them, and improve your mental model of the system, and then figure it out, then fix the
problem and hopefully write a test to make it not come back&rdquo;, but &ndash; where are people actually
getting stuck in practice? What are the hardest parts? I have some sense of what the hardest parts
usually are for me but I&rsquo;m still not sure what the hardest parts usually are for someone newer to
debugging their code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why are monoidal categories interesting?]]></title>
    <link href="https://jvns.ca/blog/2019/03/26/what-are-monoidal-categories/"/>
    <updated>2019-03-26T22:36:24+00:00</updated>
    <id>https://jvns.ca/blog/2019/03/26/what-are-monoidal-categories/</id>
    <content type="html"><![CDATA[

<p>Hello! Someone on Twitter asked a question about tensor categories recently and I remembered &ldquo;oh,
I know something about that!! These are a cool thing!&ldquo;. Monoidal categories are also called &ldquo;tensor
categories&rdquo; and I think that term feels a little more concrete: one of the biggest examples of a
tensor category is the category of vector spaces with the tensor product as the way you combine
vectors / functions. &ldquo;Monoidal&rdquo; means &ldquo;has an associative binary operation with an identity&rdquo;, and with
vector spaces the tensor product is the &ldquo;associative binary operation&rdquo; it&rsquo;s referring to. So I&rsquo;m
going to mostly use &ldquo;tensor categories&rdquo; in this post instead.</p>

<p>So here&rsquo;s a quick stab at explaining why tensor categories are cool. I&rsquo;m going to make a lot of
oversimplifications which I figure is better than trying to explain category theory from the ground
up. I&rsquo;m not a category theorist (though I spent 2 years in grad school doing a bunch of category
theory) and I will almost certainly say wrong things about category theory.</p>

<p>In this post I&rsquo;m going to try to talk about <a href="https://arxiv.org/pdf/1803.05316.pdf">Seven Sketches in Compositionality: An Invitation to
Applied Category Theory</a> using mostly plain English.</p>

<h2 id="tensor-categories-aren-t-monads">tensor categories aren&rsquo;t monads</h2>

<p>If you have been around functional programming for a bit, you might see the word &ldquo;monoid&rdquo; and
&ldquo;categories&rdquo; and wonder &ldquo;oh, is julia writing about monads, like in Haskell&rdquo;? I am not!!</p>

<p>There is a sentence &ldquo;monads are a monoid in the category of endofunctors&rdquo; which includes both the
word &ldquo;monoid&rdquo; and &ldquo;category&rdquo; but that is not what I am talking about at all. We&rsquo;re not going to talk
about types or Haskell or monads or anything.</p>

<h3 id="tensor-categories-are-about-proving-or-defining-things-with-pictures">tensor categories are about proving (or defining) things with pictures</h3>

<p>Here&rsquo;s what I think is a really nice example from this [&ldquo;seven sketches in compositionality&rdquo;]((<a href="https://arxiv.org/pdf/1803.05316.pdf">https://arxiv.org/pdf/1803.05316.pdf</a>) PDF (on
page 47):</p>

<p><img src="/images/monoidal-preorder.png"></p>

<p>The idea here is that you have 3 inequalities</p>

<ol>
<li><code>t &lt;= v + w</code></li>
<li><code>w + u &lt;= x + z</code></li>
<li><code>v + x &lt;= y</code>,</li>
</ol>

<p>and you want to prove that <code>t + u &lt;= y + z</code>.</p>

<p>You can do this algebraically pretty easily.</p>

<p>But in this diagram they&rsquo;ve done something really different! They&rsquo;ve sort of drawn the inequalities
as boxes with lines coming out of them for each variable, and then you can see that you end up with
a <code>t</code> and a <code>u</code> on the left and a <code>y</code> and a <code>z</code> on the right, and so maybe that means that <code>t + u &lt;= y + z</code>.</p>

<p>The first time I saw something like this in a math class I felt like &ndash; what? what is happening? you
can&rsquo;t just draw PICTURES to prove things?!! And of course you can&rsquo;t <em>just</em> draw pictures to prove
things.</p>

<p>What&rsquo;s actually happening in pictures like this is that when you put 2 things next to each other in
the picture (like <code>t</code> and <code>u</code>), that actually represents the &ldquo;tensor product&rdquo; of <code>t</code> and <code>u</code>. In
this case the &ldquo;tensor product&rdquo; is defined to be addition. And the tensor product (addition in this case) has
some special properties &ndash;</p>

<ol>
<li>it&rsquo;s associative</li>
<li>if <code>a &lt;= b</code> and <code>c &lt;= d</code> then <code>a + c &lt;= b + d</code></li>
</ol>

<p>so saying that this picture proves that <code>t + u &lt;= y + z</code> <strong>actually</strong> means that you can read a
proof off the diagram in a straightforward way:</p>

<pre><code>      t    + u 
&lt;= (v + w) + u 
=  v + (w + u) 
&lt;= v + (x + z) 
=  (v + x) + z 
&lt;=   y     + z
</code></pre>

<p>So all the things that &ldquo;look like they would work&rdquo; according to the picture actually do work in
practice because our tensor product thing is associative and because addition works nicely with the
<code>&lt;=</code> relationship. The book explains all this in a lot more detail.</p>

<h2 id="draw-vector-spaces-with-string-diagrams">draw vector spaces with &ldquo;string diagrams&rdquo;</h2>

<p>Proving this simple inequality is kind of boring though! We want to do something more interesting,
so let&rsquo;s talk about vector spaces! Here&rsquo;s a diagram that includes some vector spaces (U1, U2, V1, V2)
and some functions (f,g) between them.</p>

<p><img src="/images/tensor-vector.png"></p>

<p>Again, here what it means to have U1 stacked on top of U2 is that we&rsquo;re taking a tensor product of
U1 and U2. And the tensor product is associative, so there&rsquo;s no ambiguity if we stack 3 or 4 vector
spaces together!</p>

<p>This is all explained in a lot more detail in this nice blog post called <a href="https://qchu.wordpress.com/2012/11/05/introduction-to-string-diagrams/">introduction to string diagrams</a> (which I took that picture from).</p>

<h2 id="define-the-trace-of-a-matrix-with-a-picture">define the trace of a matrix with a picture</h2>

<p>So far this is pretty boring! But in a <a href="https://qchu.wordpress.com/2012/11/06/string-diagrams-duality-and-trace/">follow up blog
post</a>, they talk about
something more outrageous: you can (using vector space duality) take the lines in one of these diagrams and move them
<strong>backwards</strong> and make loops. So that lets us define the trace of a function <code>f : V -&gt; V</code> like this:</p>

<p><img src="/images/trace.png"></p>

<p>This is a really outrageous thing! We&rsquo;ve said, hey, we have a function and we want to get a number
in return right? Okay, let&rsquo;s just&hellip; draw a circle around it so that there are no lines left coming
out of it, and then that will be a number! That seems a lot more natural and prettier than the usual
way of defining the trace of a matrix (&ldquo;sum up the numbers on the diagonal&rdquo;)!</p>

<p>When I first saw this I thought it was super cool that just drawing a circle is actually a
legitimate way of defining a mathematical concept!</p>

<h2 id="how-are-tensor-category-diagrams-different-from-regular-category-theory-diagrams">how are tensor category diagrams different from regular category theory diagrams?</h2>

<p>If you see &ldquo;tensor categories let you prove things with pictures&rdquo; you might think &ldquo;well, the whole
point of category theory is to prove things with pictures, so what?&ldquo;. I think there are a few things
that are different in tensor category diagrams:</p>

<ol>
<li>with string diagrams, the lines are objects and the boxes are functions which is the opposite of
how usual category theory diagrams are</li>
<li>putting things next to each other in the diagram has a specific meaning (&ldquo;take the tensor product
of those 2 things&rdquo;) where as in usual category theory diagrams it doesn&rsquo;t. being able to combine
things in this way is powerful!</li>
<li>half circles have a specific meaning (&ldquo;take the dual&rdquo;)</li>
<li>you can use specific elements of a (eg vector space) in a diagram which usually you wouldn&rsquo;t do
in a category theory diagram (the objects would be the whole vector space, not one element of
that vector space)</li>
</ol>

<h2 id="what-does-this-have-to-do-with-programming">what does this have to do with programming?</h2>

<p>Even though this is usually a programming blog I don&rsquo;t know whether this particular thing really has
anything to do with programming, I just remembered I thought it was cool.
I wrote my <a href="https://github.com/jvns/masters-thesis/raw/master/thesis.pdf">master&rsquo;s
thesis</a> (which i will link to even
though it&rsquo;s not very readable) on topological quantum computing which involves a bunch of monoidal
categories.</p>

<p>Some of the diagrams in this post are sort of why I got interested in that area in the first place
&ndash; I thought it was really cool that you could formally define / prove things with pictures. And
useful things, like the trace of a matrix!</p>

<h2 id="edit-some-ways-this-might-be-related-to-programming">edit: some ways this might be related to programming</h2>

<p>Someone pointed me to a couple of twitter threads (coincidentally from this week!!) that relate
tensor categories &amp; diagrammatic methods to programming:</p>

<ol>
<li><a href="https://twitter.com/KenScambler/status/1108738366529400832">this thread from @KenScambler</a> (&ldquo;My best kept secret* is that string &amp; wiring diagrams&ndash;plucked straight out of applied category theory&ndash;are <em>fabulous</em> for software and system design.)</li>
<li><a href="https://twitter.com/KenScambler/status/1109474342822244353">this other thread by him of 31 interesting related things to this topic</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New zine: Bite Size Networking!]]></title>
    <link href="https://jvns.ca/blog/2019/03/15/new-zine--bite-size-networking-/"/>
    <updated>2019-03-15T23:49:39+00:00</updated>
    <id>https://jvns.ca/blog/2019/03/15/new-zine--bite-size-networking-/</id>
    <content type="html"><![CDATA[

<p>Last week I released a new zine: Bite Size Networking! It&rsquo;s the third zine in the &ldquo;bite size&rdquo;
series:</p>

<ol>
<li><a href="https://wizardzines.com/zines/bite-size-linux/">Bite Size Linux</a></li>
<li><a href="https://wizardzines.com/zines/bite-size-command-line/">Bite Size Command Line</a></li>
<li><a href="https://wizardzines.com/zines/bite-size-networking/">Bite Size Networking</a></li>
</ol>

<p>You can get it for $10 at <a href="https://wizardzines.com/zines/bite-size-networking/">https://wizardzines.com/zines/bite-size-networking/</a>! (or $150/$250/$600 for
the corporate rate).</p>

<p>Here&rsquo;s the cover and table of contents!</p>

<div align="center">
<a href="https://gum.co/bite-size-networking"><img width="250px" src="https://jvns.ca/images/bite-size-networking-cover.png"></a>
<a href="https://jvns.ca/images/bite-size-networking-toc.png"><img width="250px" src="https://jvns.ca/images/bite-size-networking-toc.png"></a>
</div>

<p>A few people have asked for a 3-pack with all 3 &ldquo;bite size&rdquo; zines which is coming soon!</p>

<h3 id="why-this-zine">why this zine?</h3>

<p>In last few years I&rsquo;ve been doing a lot of networking at work, and along the way I&rsquo;ve gone from &ldquo;uh,
what even is tcpdump&rdquo; to &ldquo;yes I can just type in <code>sudo tcpdump -c 200 -n port 443 -i lo</code>&rdquo; without
even thinking twice about it. As usual this zine is the resource I wish I had 4 years ago. There are
so many things it took me a long time to figure out how to do like:</p>

<ul>
<li>inspect SSL certificates</li>
<li>make DNS queries</li>
<li>figure out what server is using that port</li>
<li>find out whether the firewall is causing you problems or not</li>
<li>capture / search network traffic on a machine</li>
</ul>

<p>and as often happens with computers none of them are really that hard!! But the man pages for the
tols you need to do these things are Very Long and as usual don&rsquo;t differentiate between &ldquo;everybody
always uses this option and you 10000% need to know it&rdquo; and &ldquo;you will never use this option it does
not matter&rdquo;. So I spent a long time staring sadly at the tcpdump man page.</p>

<p>the pitch for this zine is:</p>

<blockquote>
<p>It’s Thursday afternoon and your users are reporting SSL errors in production and you don’t know
why. Or a HTTP header isn’t being set correctly and it’s breaking the site. Or you just got a
notification that your site’s SSL certificate is expiring in 2 days. Or you need to update DNS to
point to a new server. Or a server suddenly isn’t able to connect to a service. And networking
maybe isn’t your full time job, but you still need to get the problem fixed.</p>
</blockquote>

<p>Kamal (my partner) proofreads all my zines and we hit an exciting milestone with this one: this is
the first zine where he was like &ldquo;wow, I really did not know a lot of the stuff in this zine&rdquo;. This
is of course because I&rsquo;ve spent a lot more time than him debugging weird networking things,
and when you practice something you get better at it :)</p>

<h3 id="a-couple-of-example-pages">a couple of example pages</h3>

<p>Here are a couple of example pages, to give you an idea of what&rsquo;s in the zine:</p>

<p><img width="100%" src="https://jvns.ca/images/ngrep.png">
<img width="100%" src="https://jvns.ca/images/ping.png"></p>

<h3 id="next-thing-to-get-better-at-getting-feedback">next thing to get better at: getting feedback!</h3>

<p>One thing I&rsquo;ve realized that while I get a ton of help from people while writing these zines (I
read probably a thousand tweets from people suggesting ideas for things to include in the zine), I
don&rsquo;t get as much feedback from people about the final product as I&rsquo;d like!</p>

<p>I often hear positive things (&ldquo;I love them!&rdquo;, &ldquo;thank you so much!&rdquo;, &ldquo;this helped me in my job!&rdquo;) but
I&rsquo;d really love to hear more about which bits specifically helped the most and what didn&rsquo;t make as
much sense or what you would have liked to see more of. So I&rsquo;ll probably be asking a few questions
about that to people who buy this zine!</p>

<h3 id="selling-zines-is-going-well">selling zines is going well</h3>

<p>When I made the switch about a year ago from &ldquo;every zine I release is free&rdquo; to &ldquo;the old zines are
free but all the new ones are not free&rdquo; it felt scary! It&rsquo;s been startlingly totally fine and a very
positive thing. Sales have been really good, people take the work more seriously, I can spend more
time on them, and I think the quality has gone up.</p>

<p>And I&rsquo;ve been doing occasional <a href="https://twitter.com/b0rk/status/1104368319816220674">giveaways</a> for
people who can&rsquo;t afford a $10 zine, which feels like a nice way to handle &ldquo;some people legitimately
can&rsquo;t afford $10 and I would like to get them information too&rdquo;.</p>

<h3 id="what-s-next">what&rsquo;s next?</h3>

<p>I&rsquo;m not sure yet! A few options:</p>

<ul>
<li>kubernetes</li>
<li>more about linux concepts (bite size linux part II)</li>
<li>how to do statistics using simulations</li>
<li>something else!</li>
</ul>

<p>We&rsquo;ll see what I feel most inspired by :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Organizing this blog into categories]]></title>
    <link href="https://jvns.ca/blog/2019/02/17/organizing-this-blog-into-categories/"/>
    <updated>2019-02-17T20:55:37+00:00</updated>
    <id>https://jvns.ca/blog/2019/02/17/organizing-this-blog-into-categories/</id>
    <content type="html"><![CDATA[

<p>Today I organized the front page of this blog (<a href="https://jvns.ca">jvns.ca</a>) into CATEGORIES! Now it
is actually possible to make some sense of what is on here!! There are 28 categories (computer networking!
learning! &ldquo;how things work&rdquo;! career stuff! many more!) I am so excited about this.</p>

<p>How it works: Every post is in only 1 category. Obviously the categories aren&rsquo;t &ldquo;perfect&rdquo; (there is
a &ldquo;how things work&rdquo; category and a &ldquo;kubernetes&rdquo; category and a &ldquo;networking&rdquo; category, and so for a
&ldquo;how container networking works in kubernetes&rdquo; I need to just pick one) but I think it&rsquo;s really nice
and I&rsquo;m hoping that it&rsquo;ll make the blog easier for folks to navigate.</p>

<p>If you&rsquo;re interested in more of the story of how I&rsquo;m thinking about this: I&rsquo;ve been a little
dissatisfied for a long time with how this blog is organized. Here&rsquo;s where I started, in 2013, with a
pretty classic blog layout (this is Octopress, which was a Jekyll Wordpress-lookalike theme that was
cool back then and which served me very well for a long time):</p>

<p><img src="https://jvns.ca/images/website-2013.png"></p>

<h3 id="problem-with-show-the-5-most-recent-posts-you-don-t-know-what-the-person-s-writing-is-about">problem with &ldquo;show the 5 most recent posts&rdquo;: you don&rsquo;t know what the person&rsquo;s writing is about!</h3>

<p>This is a super common way to organize a blog: on the homepage of your blog, you display maybe the 5
most recent posts, and then maybe have a &ldquo;previous&rdquo; link.</p>

<p>The thing I find tricky about this (as a blog reader) is that</p>

<ol>
<li>it&rsquo;s hard to hunt through their back catalog to find cool things they&rsquo;ve written</li>
<li>it&rsquo;s SO HARD to get an overall sense for the body of a person&rsquo;s work by reading 1 blog post at a
time</li>
</ol>

<h3 id="next-attempt-show-every-post-in-chronological-order">next attempt: show every post in chronological order</h3>

<p>My next attempt at blog organization was to show every post on the homepage in chronological order.
This was inspired by <a href="https://danluu.com">Dan Luu&rsquo;s blog</a>, which takes a super minimal approach.
I switched to this (according to the internet archive) sometime in early 2016. Here&rsquo;s what it looked
like (with some CSS issues :))</p>

<p><img src="https://jvns.ca/images/website-2016.png"></p>

<p>The reason I like this &ldquo;show every post in chronological order&rdquo; approach more is that when I discover a
new blog, I like to obsessively binge read through the whole thing to see all the cool stuff the person
has written. <a href="https://rachelbythebay.com/w/">Rachel by the bay</a> also organizes her writing this way,
and when I found her blog I was like OMG WOW THIS IS AMAZING I MUST READ ALL OF THIS NOW and being
able to look through all the entries quickly and start reading ones that caught my eye was SO FUN.</p>

<p><a href="https://lethain.com/all-posts/">Will Larson&rsquo;s blog</a> also has a &ldquo;list of all posts&rdquo; page which I
find useful because it&rsquo;s a good blog, and sometimes I want to refer back to something he wrote
months ago and can&rsquo;t remember what it was called, and being able to scan through all the titles
makes it easier to do that.</p>

<p>I was pretty happy with this and that&rsquo;s how it&rsquo;s been for the last 3 years.</p>

<h3 id="problem-a-chronological-list-of-390-posts-still-kind-of-sucks">problem: a chronological list of 390 posts still kind of sucks</h3>

<p>As of today, I have 390 posts here (360,000 words! that&rsquo;s, like, 4 300-page books! eep!). This is
objectively a lot of writing and I would like people new to the blog to be able to navigate it and
actually have some idea what&rsquo;s going on.</p>

<p>And this blog is not actually just a totally disorganized group of words! I have a lot of specific
interests: I&rsquo;ve written probably 30 posts about computer networking, 15ish on ML/statistics, 20ish
career posts, etc. And when I write a new Kubernetes post or whatever, it&rsquo;s usually at least sort of
related to some ongoing train of thought I have about Kubernetes. And it&rsquo;s totally obvious to <em>me</em>
what other posts that post is related to, but obviously to a new person it&rsquo;s not at all clear what
the trains of thought are in this blog.</p>

<h3 id="solution-for-now-assign-every-post-1-just-1-category">solution for now: assign every post 1 (just 1) category</h3>

<p>My new plan is to assign every post a single category. I got this idea from <a href="https://codewithoutrules.com/worklife/">Itamar Turner-Trauring&rsquo;s site</a>.</p>

<p>Here are the initial categories:</p>

<ul>
<li>Cool computer tools / features / ideas</li>
<li>Computer networking</li>
<li>How a computer thing works</li>
<li>Kubernetes / containers</li>
<li>Zines / comics</li>
<li>On writing comics / zines</li>
<li>Conferences</li>
<li>Organizing conferences</li>
<li>Businesses / marketing</li>
<li>Statistics / machine learning / data analysis</li>
<li>Year in review</li>
<li>Infrastructure / operations engineering</li>
<li>Career / work</li>
<li>Working with others / communication</li>
<li>Remote work</li>
<li>Talks transcripts / podcasts</li>
<li>On blogging / speaking</li>
<li>On learning</li>
<li>Rust</li>
<li>Linux debugging / tracing tools</li>
<li>Debugging stories</li>
<li>Fan posts about awesome work by other people</li>
<li>Inclusion</li>
<li>rbspy</li>
<li>Performance</li>
<li>Open source</li>
<li>Linux systems stuff</li>
<li>Recurse Center (my daily posts during my RC batch)</li>
</ul>

<p>I guess you can tell this is a systems-y blog because there are 8 different systems-y categories
(kubernetes, infrastructure, linux debugging tools, rust, debugging stories, performance, and linux
systems stuff, how a computer thing works) :).</p>

<p>But it was nice to see that I also have this huge career / work category! And that category is
pretty meaningful to me, it includes a lot of things that I struggled with and were hard for me to
learn. And I get to put all my machine learning posts together, which is an area I worked in for 3
years and am still super interested in and every so often learn a new thing about!</p>

<h3 id="how-i-assign-the-categories-a-big-text-file">How I assign the categories: a big text file</h3>

<p>I came up with a scheme for assigning the categories that I thought was really fun! I knew
immediately that coming up with categories in advance would be impossible (how was I supposed to
know that &ldquo;fan posts about awesome work by other people&rdquo; was a substantial category?)</p>

<p>So instead, I took kind of a Marie Kondo approach: I wrote a script to just dump all the titles of
every blog post into a text file, and then I just used vim to organize them roughly into similar
sections. Seeing everything in one place (a la marie kondo) really helped me see the patterns and
figure out what some categories were.</p>

<p><a href="https://github.com/jvns/jvns.ca/blob/2f7b2723994628a5348069dd87b3df68c2f0285c/scripts/titles.txt">Here&rsquo;s the final result of that text file</a>.
I think having a lightweight way of organizing the posts all in one file made a huge difference and
that it would have been impossible for me to seen the patterns otherwise.</p>

<h3 id="how-i-implemented-it-a-hugo-taxonomy">How I implemented it: a hugo taxonomy</h3>

<p>Once I had that big text file, I wrote <a href="https://github.com/jvns/jvns.ca/blob/2f7b2723994628a5348069dd87b3df68c2f0285c/scripts/parse_titles.py">a janky python script</a> to assign the categories in that text file to the actual posts.</p>

<p>I use Hugo for this blog, and so I also needed to tell Hugo about the categories. This blog already technically
has tags (though they&rsquo;re woefully underused, I didn&rsquo;t want to delete them). I use Hugo, and it turns
out that in Hugo you can define arbitrary taxonomies. So I defined a new taxonomy for these sections
(right now it&rsquo;s called, unimaginitively, <code>juliasections</code>).</p>

<p>The details of how I did this are pretty boring but <a href="https://github.com/jvns/jvns.ca/blob/25d239a3ba36c1bae1d055d2b7d50a4f1d0489ef/themes/orange/layouts/index.html#L39-L59">here&rsquo;s the hugo template that makes it display on the homepage</a>. I used this <a href="https://gohugo.io/templates/taxonomy-templates/">Hugo documentation page on taxonomies a lot</a>.</p>

<h3 id="organizing-my-site-is-cool-reverse-chronology-maybe-isn-t-the-best-possible-thing">organizing my site is cool! reverse chronology maybe isn&rsquo;t the best possible thing!</h3>

<p>Amy Hoy has this interesting article called <a href="https://stackingthebricks.com/how-blogs-broke-the-web/">how the blog broke the
web</a> about how the rise of blog software
made people adopt a site format that maybe didn&rsquo;t serve what they were writing the best.</p>

<p>I don&rsquo;t personally feel that mad about the blog / reverse chronology organization: I like blogging!
I think it was nice for the first 6 years or whatever to be able to just write things that I think
are cool without thinking about where they &ldquo;fit&rdquo;. It&rsquo;s worked really well for me.</p>

<p>But today, 360,000 words in, I think it makes sense to add a little more structure :).</p>

<h3 id="what-it-looks-like-now">what it looks like now!</h3>

<p>Here&rsquo;s what the new front page organization looks like! These are the blogging / learning / rust
sections! I think it&rsquo;s cool how you can see the evolution of some of my thinking (I sure have
written a lot of posts about asking questions :)).</p>

<p><img src="https://jvns.ca/images/website-2019.png"></p>

<h3 id="i-the-personal-website">I ❤ the personal website</h3>

<p>This is also part of why I love having a personal website that I can organize any way I want: for
both of my main sites (<a href="https://jvns.ca">jvns.ca</a> and now
<a href="https://wizardzines.com">wizardzines.com</a>) I have total control over how they appear! And I can
evolve them over time at my own pace if I decide something a little different will work better for
me. I&rsquo;ve gone from a jekyll blog to octopress to a custom-designed octopress blog to Hugo and made a
ton of little changes over time. It&rsquo;s so nice.</p>

<p>I think it&rsquo;s fun that these 3 screenshots are each 3 years apart &ndash; what I wanted in 2013 is
not the same as 2016 is not the same as 2019! This is okay!</p>

<p>And I really love seeing how other people choose to organize their personal sites! Please keep
making cool different personal sites.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[!!Con 2019: submit a talk!]]></title>
    <link href="https://jvns.ca/blog/2019/02/16/--con-2019--submit-a-talk-/"/>
    <updated>2019-02-16T11:03:27+00:00</updated>
    <id>https://jvns.ca/blog/2019/02/16/--con-2019--submit-a-talk-/</id>
    <content type="html"><![CDATA[

<p>As some of you might know, for the last 5 years I&rsquo;ve been one of the organizers for a conferences
called <a href="http://bangbangcon.com">!!Con</a>. This year it&rsquo;s going to be held on <strong>May 11-12 in NYC</strong>.</p>

<p>The submission deadline is <strong>Sunday, March 3</strong> and you can <a href="http://bangbangcon.com/give-a-talk.html">submit a talk here</a>.</p>

<p>(we also expanded to the west coast this year: <a href="http://bangbangcon.com/west/">!!Con West</a> is next
week!! I&rsquo;m not on the !!Con West team since I live on the east coast but they&rsquo;re doing amazing work,
I have a ticket, and I&rsquo;m so excited for there to be more !!Con in the world)</p>

<h3 id="con-is-about-the-joy-excitement-and-surprise-of-computing">!!Con is about the joy, excitement, and surprise of computing</h3>

<p>Computers are AMAZING. You can make programs that seem like magic, computer science has all kind of
fun and surprising tidbits, there are all kinds of ways to make really cool art with computers, the
systems that we use every day (like DNS!) are often super fascinating, and sometimes our computers
do REALLY STRANGE THINGS and it&rsquo;s very fun to figure out why.</p>

<p>!!Con is about getting together for 2 days to share what we all love about computing. The only rule
of !!Con talks is that the talk has to have an exclamation mark in the title :)</p>

<p>We originally considered calling !!Con ExclamationMarkCon but that was too
unwieldy so we went with !!Con :).</p>

<h3 id="con-is-inclusive">!!Con is inclusive</h3>

<p>The other big thing about !!Con is that we think computing should include everyone. To make !!Con a
space where everyone can participate, we</p>

<ul>
<li>have open captioning for all talks (so that people who can&rsquo;t hear well can read the text of the
talk as it&rsquo;s happening). This turns out to be great for LOTS of people &ndash; if you just weren&rsquo;t
paying attention for a second, you can look at the live transcript to see what you missed!</li>
<li>pay our speakers &amp; pay for speaker travel</li>
<li>have a code of conduct (of course)</li>
<li>use the RC <a href="https://www.recurse.com/social-rules">social rules</a></li>
<li>make sure our washrooms work for people of all genders</li>
<li>let people specify on their badges if they don&rsquo;t want photos taken of them</li>
<li>do a lot of active outreach to make sure our set of speakers is diverse</li>
</ul>

<h3 id="past-con-talks">past !!Con talks</h3>

<p>I think maybe the easiest way to explain !!Con if you haven&rsquo;t been is through the talk titles! Here
are a few arbitrarily chosen talks from past !!Cons:</p>

<ul>
<li><a href="http://youtube.com/watch?v=pfHpDDXJQVg">Four Fake Filesystems!</a></li>
<li><a href="http://youtube.com/watch?v=ld4gpQnaziU">Islamic Geometry: Hankin’s Polygons in Contact Algorithm!!!</a></li>
<li><a href="http://youtube.com/watch?v=1QgamEwwPro">Don&rsquo;t know about you, but I&rsquo;m feeling like SHA-2!: Checksumming with Taylor Swift</a></li>
<li><a href="http://youtube.com/watch?v=yX7tDROZUt8">MissingNo., my favourite Pokémon!</a></li>
<li><a href="http://youtube.com/watch?v=67Y-wH0FJFg">Music! Programming! Arduino! (Or: Building Electronic Musical Interfaces to Create Awesome)</a></li>
<li><a href="http://youtube.com/watch?v=G1r55efei5c">How I Code and Use a Computer at 1,000 WPM!!</a></li>
<li><a href="http://youtube.com/watch?v=UE-fJjMasec">The emoji that Killed Chrome!!</a></li>
<li><a href="http://youtube.com/watch?v=hfatYo2J8gY">We built a map to aggregate real-time flood data in under two days!</a></li>
<li><a href="http://youtube.com/watch?v=KqEc2Ek4GzA">PUSH THE BUTTON! 🔴 Designing a fun game where the only input is a BIG RED BUTTON! 🔴 !!!</a></li>
<li><a href="http://youtube.com/watch?v=PS_9pyIASvQ">Serious programming with jq?! A practical and purely functional programming language!</a></li>
<li><a href="http://youtube.com/watch?v=FhVob_sRqQk">I wrote to a dead address in a deleted PDF and now I know where all the airplanes are!!</a></li>
<li><a href="http://youtube.com/watch?v=T75FvUDirNM">Making Mushrooms Glow!</a></li>
<li><a href="http://youtube.com/watch?v=bkQJdaGGVM8">HDR Photography in Microsoft Excel?!</a></li>
<li><a href="http://youtube.com/watch?v=enRY9jd0IJw">DHCP: IT’S MOSTLY YELLING!!</a></li>
<li><a href="http://youtube.com/watch?v=meovx9OqWJc">Lossy text compression, for some reason?!</a></li>
<li><a href="http://youtube.com/watch?v=0eXg4B1feOY">Plants are Recursive!!: Using L-Systems to Generate Realistic Weeds</a></li>
</ul>

<p>If you want to see more (or get an idea of what !!Con talk descriptions usually look like), here&rsquo;s every past year of the conference:</p>

<ul>
<li>2018: <a href="http://bangbangcon.com/2018/speakers.html">talk descriptions</a> and <a href="http://bangbangcon.com/2018/recordings.html">recordings</a></li>
<li>2017: <a href="http://bangbangcon.com/2017/speakers.html">talk descriptions</a> and <a href="http://bangbangcon.com/2017/recordings.html">recordings</a></li>
<li>2016: <a href="http://bangbangcon.com/2016/speakers.html">talk descriptions</a> and <a href="http://bangbangcon.com/2016/recordings.html">recordings</a></li>
<li>2015: <a href="http://bangbangcon.com/2015/speakers.html">talk descriptions</a> and <a href="http://bangbangcon.com/2015/recordings.html">recordings</a></li>
<li>2014: <a href="http://bangbangcon.com/2014/speakers.html">talk descriptions</a> and <a href="http://bangbangcon.com/2014/recordings.html">recordings</a></li>
</ul>

<h3 id="this-year-you-can-also-submit-a-play-song-performance">this year you can also submit a play / song / performance!</h3>

<p>One difference from previous !!Cons is that if you want submit a non-talk-talk to !!Con this year
(like a play!), you can! I&rsquo;m very excited to see what people come up with. For more of that see
<a href="https://organicdonut.com/2019/01/expanding-the-con-aesthetic/">Expanding the !!Con aesthetic</a>.</p>

<h3 id="all-talks-are-reviewed-anonymously">all talks are reviewed anonymously</h3>

<p>One big choice that we&rsquo;ve made is to review all talks anonymously. This means that we&rsquo;ll review your
talk the same way whether you&rsquo;ve never given a talk before or if you&rsquo;re an internationally
recognized public speaker. I love this because many of our best talks are from first time speakers
or people who I&rsquo;d never heard of before, and I think anonymous review makes it easier to find great
people who aren&rsquo;t well known.</p>

<h3 id="writing-a-good-outline-is-important">writing a good outline is important</h3>

<p>We can&rsquo;t rely on someone&rsquo;s reputation to determine if they&rsquo;ll give a good talk, but we do need a way
to see that people have a plan for how to present their material in an engaging way. So we ask
everyone to give a somewhat detailed outline explaining how they&rsquo;ll spend their 10 minutes. Some
people do it minute-by-minute and some people just say &ldquo;I&rsquo;ll explain X, then Y, then Z, then W&rdquo;.</p>

<p>Lindsey Kuper wrote some good advice about writing a clear !!Con outline here which has some examples of really good outlines <a href="http://composition.al/blog/2017/06/30/how-to-write-a-timeline-for-a-bangbangcon-talk-proposal/">which you can see here</a>.</p>

<h3 id="we-re-looking-for-sponsors">We&rsquo;re looking for sponsors</h3>

<p>!!Con is pay-what-you-can (if you can&rsquo;t afford a $300 conference ticket, we&rsquo;re the conference for
you!). Because of that, we rely on our incredible sponsors (companies who want to build an inclusive
future for tech with us!) to help make up the difference so that we can pay our speakers for their
amazing work, pay for speaker travel, have open captioning, and everything else that makes !!Con the
amazing conference it is.</p>

<p>If you love !!Con, a huge way you can help support the conference is to ask your company to sponsor
us!  Here&rsquo;s our <a href="http://bangbangcon.com/sponsors">sponsorship page</a> and you can email me at
julia@jvns.ca if you&rsquo;re interested.</p>

<h3 id="hope-to-see-you-there">hope to see you there ❤</h3>

<p>I&rsquo;ve met so many fantastic people through !!Con, and it brings me a lot of joy every year. The thing
that makes !!Con great is all the amazing people who come to share what they&rsquo;re excited about every
year, and I hope you&rsquo;ll be one of them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Networking tool comics!]]></title>
    <link href="https://jvns.ca/blog/2019/02/10/a-few-networking-tool-comics/"/>
    <updated>2019-02-10T12:55:52+00:00</updated>
    <id>https://jvns.ca/blog/2019/02/10/a-few-networking-tool-comics/</id>
    <content type="html"><![CDATA[<p>Hello! I haven&rsquo;t been blogging too much recently because I&rsquo;m working on a new <a href="https://wizardzines.com">zine</a> project: Linux
networking tools!</p>

<p>I&rsquo;m pretty excited about this one &ndash; I LOVE computer networking (it&rsquo;s what I spent a big chunk of
the last few years at work doing), but getting started with all the tools was originally a little
tricky! For example &ndash; what if you have the IP address of a server and you want to make a https
connection to it and check that it has a valid certificate? But you haven&rsquo;t changed DNS to resolve
to that server yet (because you don&rsquo;t know if it works!) so you need to use the IP address? If you do
<code>curl https://1.2.3.4/</code>, curl will tell you that the certificate isn&rsquo;t valid (because it&rsquo;s not valid
for 1.2.3.4). So you need to know to do <code>curl https://jvns.ca --resolve jvns.ca:443:104.198.14.52</code>.</p>

<p>I know how to use <code>curl --resolve</code> because my coworker told me how. And I learned that to find out
when a cert expires you can do <code>openssl x509 -in YOURCERT.pem  -text -noout</code> the same way. So the
goal with this zine is basically to be &ldquo;your very helpful coworker who gives you tips about how to
use networking tools&rdquo; in case you don&rsquo;t have that person.</p>

<p>And as we know, a lot of these tools have VERY LONG man pages and you only usually need to know
like 5 command line options to do 90% of what you want to do. For example I only ever do maybe 4
things with openssl even though the openssl man pages together have more than 60,000 words.</p>

<p>There are a few things I&rsquo;m also adding (like ethtool and nmap and tc) which I don&rsquo;t personally use
super often but I think are super useful to people with different jobs than me. And I&rsquo;m a big fan of
mixing more advanced things (like tc) with basic things (like ssh) because then even if you&rsquo;re
learning the basic things for the first time, you can learn that the advanced thing exists!</p>

<p>Here&rsquo;s some work in progress:</p>

<div align="center">
<img src="https://jvns.ca/images/curl.jpeg">
<img src="https://jvns.ca/images/ssh.jpeg">
<img src="https://jvns.ca/images/netcat.jpeg">
<img src="https://jvns.ca/images/nmap.jpeg">
<img src="https://jvns.ca/images/openssl.jpeg">
<img src="https://jvns.ca/images/ethtool.jpeg">
</div>

<p>It&rsquo;s been super fun to draw these: I didn&rsquo;t know about <code>ssh-copy-id</code> or <code>~.</code> before I made that ssh
comic and I really wish I&rsquo;d known about them earlier!</p>

<p>As usual I&rsquo;ll announce the zine when it comes out here, or you can sign up for announcements at
<a href="https://wizardzines.com/mailing-list/">https://wizardzines.com/mailing-list/</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A few early marketing thoughts]]></title>
    <link href="https://jvns.ca/blog/2019/01/29/marketing-thoughts/"/>
    <updated>2019-01-29T18:47:23+00:00</updated>
    <id>https://jvns.ca/blog/2019/01/29/marketing-thoughts/</id>
    <content type="html"><![CDATA[

<p>At some point last month I said I might write more about business, so here are some very early
marketing thoughts for my zine business (<a href="https://wizardzines.com">https://wizardzines.com</a>!). The question I&rsquo;m trying to
make some progress on in this post is: &ldquo;how to do marketing in a way that feels good?&rdquo;</p>

<h3 id="what-s-the-point-of-marketing">what&rsquo;s the point of marketing?</h3>

<p>Okay! What&rsquo;s marketing? What&rsquo;s the point? I think the ideal way marketing works is:</p>

<ol>
<li>you somehow tell a person about a thing</li>
<li>you explain somehow why the thing will be useful to them / why it is good</li>
<li>they buy it and they like the thing because it&rsquo;s what they expected</li>
</ol>

<p>(or, when you explain it they see that they don&rsquo;t want it and don&rsquo;t buy it which is good too!!)</p>

<p>So basically as far as I can tell good marketing is just explaining what the thing is and why it is
good in a clear way.</p>

<h3 id="what-internet-marketing-techniques-do-people-use">what internet marketing techniques do people use?</h3>

<p>I&rsquo;ve been thinking a bit about internet marketing techniques I see people using on me recently. Here
are a few examples of internet marketing techniques I&rsquo;ve seen:</p>

<ol>
<li>word of mouth (&ldquo;have you seen this cool new thing?!&rdquo;)</li>
<li>twitter / instagram marketing (build a twitter/instagram account)</li>
<li>email marketing (&ldquo;build a mailing list with a bajillion people on it and sell to them&rdquo;)</li>
<li>email marketing (&ldquo;tell your existing users about features that they already have that they might
want to use&rdquo;)</li>
<li>social proof marketing (&ldquo;jane from georgia bought a sweater&rdquo;), eg fomo.com</li>
<li>cart notifications (&ldquo;you left this sweater in your cart??! did you mean to buy it? maybe you
should buy it!&ldquo;)</li>
<li>content marketing (which is fine but whenever people refer to my writing as &lsquo;content&rsquo; I get
grumpy :))</li>
</ol>

<h3 id="you-need-some-way-to-tell-people-about-your-stuff">you need <em>some</em> way to tell people about your stuff</h3>

<p>Something that is definitely true about marketing is that you need some way to tell new people about
the thing you are doing. So for me when I&rsquo;m thinking about running a business it&rsquo;s less about
&ldquo;should i do marketing&rdquo; and more like &ldquo;well obviously i have to do marketing, how do i do it in a
way that i feel good about?&rdquo;</p>

<h3 id="what-s-up-with-email-marketing">what&rsquo;s up with email marketing?</h3>

<p>I feel like every single piece of internet marketing advice I read says &ldquo;you need a mailing list&rdquo;.
This is advice that I haven&rsquo;t really taken to heart &ndash; technically I have 2 mailing lists:</p>

<ol>
<li>the RSS feed for this blog, which sends out new blog posts to a mailing list  for folks who don&rsquo;t
use RSS (which 3000 of you get)</li>
<li><a href="https://wizardzines.com">https://wizardzines.com</a>&rsquo;s list, for comics / new zine announcements (780 people subscribe to that! thank you!)</li>
</ol>

<p>but definitely neither of them is a Machine For Making Sales and I&rsquo;ve put in almost no efforts in
that direction yet.</p>

<p>here are a few things I&rsquo;ve noticed about marketing mailing lists:</p>

<ul>
<li>most marketing mailing lists are boring but some marketing mailing lists are actually interesting!
For example I kind of like <a href="https://stackingthebricks.com/">amy hoy</a>&rsquo;s emails.</li>
<li>Someone told me recently that they have 200,000 people on their mailing list (?!!) which made the
&ldquo;a mailing list is a machine for making money&rdquo; concept make a lot more sense to me. I wonder if
people who make a lot of money from their mailing lists all have huge 10k+ person mailing lists
like this?</li>
</ul>

<h3 id="what-works-for-me-twitter">what works for me: twitter</h3>

<p>Right now for my zines business I&rsquo;d guess maybe 70% of my sales come from Twitter. The
main thing I do is tweet pages from zines I&rsquo;m working on (for example: yesterday&rsquo;s <a href="https://twitter.com/b0rk/status/1090058524137345025">comic about ss</a>). The comics are usually good and fun so invariably they get tons of
retweets, which means that I end up with lots of followers, which means that when I later put up the
zine for sale lots of people will buy it.</p>

<p>And of course people don&rsquo;t <em>have</em> to buy the zines, I post most of what ends up in my zines on
twitter for free, so it feels like a nice way to do it. Everybody wins, I think.</p>

<p>(side note: when I started getting tons of new followers from my comics I was actually super worried
that it would make my experience of Twitter way worse. That hasn&rsquo;t happened! the new followers all
seem totally reasonable and I still get a lot of really interesting twitter replies which is
wonderful ❤)</p>

<p>I don&rsquo;t try to hack/optimize this really: I just post comics when I make them and I try to make them
good.</p>

<h3 id="a-small-twitter-innovation-putting-my-website-on-the-comics">a small Twitter innovation: putting my website on the comics</h3>

<p>Here&rsquo;s one small marketing change that I made that I think makes sense!</p>

<p>In the past, I didn&rsquo;t put anything about how to buy my
comics on the comics I posted on Twitter, just my Twitter username. Like this:</p>

<div align="center">
<img src="/images/kill.jpeg" width=400px>
</div>

<p>After a while, I realized people were asking me all the time &ldquo;hey, can I buy a book/collection?
where do these come from? how do I get more?&ldquo;! I think a marketing secret is &ldquo;people actually want
to buy things that are good, it is useful to tell people where they can buy things that are good&rdquo;.</p>

<p>So just recently I&rsquo;ve started adding my website and a note about my current project on the comics I
post on Twitter. It doesn&rsquo;t say much: just &ldquo;❤ these comics? buy a collection! wizardzines.com&rdquo; and
&ldquo;page 11 of my upcoming bite size networking zine&rdquo;. Here&rsquo;s what it looks like:</p>

<div align="center">
<img src="/images/ss.jpeg" width=400px>
</div>

<p>I feel like this strikes a pretty good balance between &ldquo;julia you need to tell people what you&rsquo;re
doing otherwise how are they supposed to buy things from you&rdquo; and &ldquo;omg too many sales pitches
everywhere&rdquo;? I&rsquo;ve only started doing this recently so we&rsquo;ll see how it goes.</p>

<h3 id="should-i-work-on-a-mailing-list">should I work on a mailing list?</h3>

<p>It seems like the same thing that works on twitter would work by email if I wanted to put in the
time (email people comics! when a zine comes out, email them about the zine and they can buy it if
they want!).</p>

<p>One thing I LOVE about Twitter though is that people always reply to the comics I post with their
own tips and tricks that they love and I often learn something new. I feel like email would be
nowhere near as fun :)</p>

<p>But I still think this is a pretty good idea: keeping up with twitter can be time consuming and I
bet a lot of people would like to get occasional email with programming drawings. (would you?)</p>

<p>One thing I&rsquo;m not sure about is &ndash; a lot of marketing mailing lists seem to use somewhat aggressive
techniques to get new emails (a lot of popups on a website, or adding everyone who signs up to their
service / buys a thing to a marketing list) and while I&rsquo;m basically fine with that (unsubscribing is
easy!), I&rsquo;m not sure that it&rsquo;s what I&rsquo;d want to do, and maybe less aggressive techniques will work
just as well? We&rsquo;ll see.</p>

<h3 id="should-i-track-conversion-rates">should I track conversion rates?</h3>

<p>A piece of marketing advice I assume people give a lot is &ldquo;be data driven, figure out what things
convert the best, etc&rdquo;. I don&rsquo;t do this almost at all &ndash; gumroad used to tell me that most of my
sales came from Twitter which was good to know, but right now I have basically no idea how it works.</p>

<p>Doing a bunch of work to track conversion rates feels bad to me: it seems like it would be
really easy to go down a dumb rabbit hole of &ldquo;oh, let&rsquo;s try to increase conversion by 5%&rdquo; instead of
just focusing on making really good and cool things.</p>

<p>My guess is that what will work best for me for a while is to have some data that tells me in broad
strokes how the business works (like &ldquo;about 70% of sales come from twitter&rdquo;) and just leave it at
that.</p>

<h3 id="should-i-do-advertising">should I do advertising?</h3>

<p>I had a conversation with Kamal about this post that went:</p>

<ul>
<li>julia: &ldquo;hmm, maybe I should talk about ads?&rdquo;</li>
<li>julia: &ldquo;wait, are ads marketing?&rdquo;</li>
<li>kamal: &ldquo;yes ads are marketing&rdquo;</li>
</ul>

<p>So, ads! I don&rsquo;t know anything about advertising except that you can advertise on Facebook or
Twitter or Google. Some non-ethical questions I have about advertising:</p>

<ul>
<li>how do you choose what keywords to advertise on?</li>
<li>are there actually cheap keywords, like is &lsquo;file descriptors&rsquo; cheap?</li>
<li>how much do you need to pay per click? (for some weird linux keywords, google estimated 20 cents
a click?)</li>
<li>can you use ads effectively for something that costs $10?</li>
</ul>

<p>This seems nontrivial to learn about and I don&rsquo;t think I&rsquo;m going to try soon.</p>

<h3 id="other-marketing-things">other marketing things</h3>

<p>a few other things I&rsquo;ve thought about:</p>

<ul>
<li>I learned about &ldquo;social proof marketing&rdquo; sites like fomo.com yesterday which makes popups on your
site like &ldquo;someone bought COOL THING 3 hours ago&rdquo;. This seems like it has some utility (people are
actually buying things from me all the time, maybe that&rsquo;s useful to share somehow?) but those
popups feel a bit cheap to me and I don&rsquo;t really think it&rsquo;s something I&rsquo;d want to do right now.</li>
<li>similarly a lot of sites like to inject these popups like &ldquo;HELLO PLEASE SIGN UP FOR OUR MAILING
LIST&rdquo;. similar thoughts. I&rsquo;ve been putting an email signup link in the footer which seems like a
good balance between discoverable and annoying. As an example of a popup which isn&rsquo;t too
intrusive, though: nate berkopec has <a href="https://www.speedshop.co/2019/01/10/three-activerecord-mistakes.html">one on his site</a> which feels really
reasonable! (scroll to the bottom to see it)</li>
</ul>

<p>Maybe marketing is all about &ldquo;make your things discoverable without being annoying&rdquo;? :)</p>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>Hopefully some of this was interesting! Obviously the most important thing in all of this is to make
cool things that are useful to people, but I think cool useful writing does not actually sell
itself!</p>

<p>If you have thoughts about what kinds of marketing have worked well for you / you&rsquo;ve felt good about
I would love to hear them!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some nonparametric statistics math]]></title>
    <link href="https://jvns.ca/blog/2018/12/29/some-initial-nonparametric-statistics-notes/"/>
    <updated>2018-12-29T12:05:54+00:00</updated>
    <id>https://jvns.ca/blog/2018/12/29/some-initial-nonparametric-statistics-notes/</id>
    <content type="html"><![CDATA[

<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
</script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<p>I&rsquo;m trying to understand nonparametric statistics a little more formally. This post may not be that
intelligible because I&rsquo;m still pretty confused about nonparametric statistics, there is a lot of
math, and I make no attempt to explain any of the math notation. I&rsquo;m working towards being able to
explain this stuff in a much more accessible way but first I would like to understand some of the
math!</p>

<p>There&rsquo;s some MathJax in this post so the math may or may not render in an RSS reader.</p>

<p>Some questions I&rsquo;m interested in:</p>

<ul>
<li>what is nonparametric statistics exactly?</li>
<li>what guarantees can we make? are there formulas we can use?</li>
<li>why do methods like the bootstrap method work?</li>
</ul>

<p>since these notes are from reading a math book and math books are extremely dense this is basically
going to be &ldquo;I read 7 pages of this math book and here are some points I&rsquo;m confused about&rdquo;</p>

<h3 id="what-s-nonparametric-statistics">what&rsquo;s nonparametric statistics?</h3>

<p>Today I&rsquo;m looking at &ldquo;all of nonparametric statistics&rdquo; by Larry Wasserman. He defines nonparametric
inference as:</p>

<blockquote>
<p>a set of modern statistical methods that aim to keep the number of underlying assumptions as weak
as possible</p>
</blockquote>

<p>Basically my interpretation of this is that &ndash; instead of assuming that your data comes from a
specific family of distributions (like the normal distribution) and then trying to estimate the
paramters of that distribution, you don&rsquo;t make many assumptions about the distribution (&ldquo;this is
just some data!!&ldquo;). Not having to make assumptions is nice!</p>

<p>There aren&rsquo;t <strong>no</strong> assumptions though &ndash; he says</p>

<blockquote>
<p>we assume that the distribution $F$ lies in some set $\mathfrak{F}$ called a <strong>statistical
model</strong>. For example, when estimating a density $f$, we might assume that
$$ f \in \mathfrak{F} = \left\{ g : \int(g^{\prime\prime}(x))^2dx \leq c^2 \right\}$$
which is the set of densities that are not &ldquo;too wiggly&rdquo;.</p>
</blockquote>

<p>I have not too much intuition for the condition $\int(g^{\prime\prime}(x))^2dx \leq c^2$. I
calculated that integral for <a href="https://www.wolframalpha.com/input/?i=integrate+(d%2Fdx(d%2Fdx(exp(-x%5E2))))%5E2++dx+from+x%3D-infinity+to+infinity">the normal distribution on wolfram alpha</a> and got 4, which is a good start. (4 is not infinity!)</p>

<p>some questions I still have about this definition:</p>

<ul>
<li>what&rsquo;s an example of a probability density function that <em>doesn&rsquo;t</em> satisfy that
$\int(g^{\prime\prime}(x))^2dx \leq c^2$ condition? (probably something with an infinite number of
tiny wiggles, and I don&rsquo;t think any distribution i&rsquo;m interested in in practice would have an
infinite number of tiny wiggles?)</li>
<li>why does the density function being &ldquo;too wiggly&rdquo; cause problems for nonparametric inference? very
unclear as yet.</li>
</ul>

<h3 id="we-still-have-to-assume-independence">we still have to assume independence</h3>

<p>One assumption we <strong>won&rsquo;t</strong> get away from is that the samples in the data we&rsquo;re dealing with are
independent. Often data in the real world actually isn&rsquo;t really independent, but I think the what
people do  a lot of the time is to make a good effort at something approaching independence and then
close your eyes and pretend it is?</p>

<h3 id="estimating-the-density-function">estimating the density function</h3>

<p>Okay! Here&rsquo;s a useful section! Let&rsquo;s say that I have 100,000 data points from a distribution.
I can draw a histogram like this of those data points:</p>

<p><img src="/images/nonpar-histogram.png"></p>

<p>If I have 100,000 data points, it&rsquo;s pretty likely that that histogram is pretty close to the
actual distribution. But this is math, so we should be able to make that statement precise, right?</p>

<p>For example suppose that 5% of the points in my sample are more than 100. Is the probability that
a point is greater than 100 <strong>actually</strong> 0.05? The book gives a nice formula for this:</p>

<p>$$ \mathbb{P}(|\widehat{P}_n(A) - P(A)| &gt; \epsilon ) \leq 2e^{-2n\epsilon^2} $$</p>

<p>(by <a href="https://en.wikipedia.org/wiki/Hoeffding%27s_inequality">&ldquo;Hoeffding&rsquo;s inequality&rdquo;</a> which I&rsquo;ve
never heard of before). Fun aside about that inequality: here&rsquo;s a nice jupyter notebook by henry
wallace using it to <a href="https://nbviewer.jupyter.org/github/henrywallace/games/blob/master/boggle/boggle.ipynb#Estimating-Word-Probabilities">identify the most common Boggle words</a>.</p>

<p>here, in our example:</p>

<ul>
<li>n is 1000 (the number of data points we have)</li>
<li>$A$ is the set of points more than 100</li>
<li>$\widehat{P}_n(A)$ is the empirical probability that a point is more than 100 (0.05)</li>
<li>$P(A)$ is the actual probability</li>
<li>$\epsilon$ is how certain we want to be that we&rsquo;re right</li>
</ul>

<p>So, what&rsquo;s the probability that the <strong>real</strong> probability is between 0.04 and 0.06? $\epsilon =
0.01$, so it&rsquo;s $2e^{-2 \times 100,000 \times (0.01)^2} = 4e^{-9} $ ish (according to wolfram alpha)</p>

<p>here is a table of how sure we can be:</p>

<ul>
<li>100,000 data points: 4e-9 (TOTALLY CERTAIN that 4% - 6% of points are more than 100)</li>
<li>10,000 data points: 0.27 (27% probability that we&rsquo;re wrong! that&rsquo;s&hellip; not bad?)</li>
<li>1,000 data points: 1.6 (we know the probability we&rsquo;re wrong is less than.. 160%? that&rsquo;s not good!)</li>
<li>100 data points: lol</li>
</ul>

<p>so basically, in this case, using this formula: 100,000 data points is AMAZING, 10,000 data points
is pretty good, and 1,000 is much less useful. If we have 1000 data points and we see that 5% of
them are more than 100, we DEFINITELY CANNOT CONCLUDE that 4% to 6% of points are more than 100. But
(using the same formula) we can use $\epsilon = 0.04$ and conclude that with 92% probability 1% to
9% of points are more than 100. So we can still learn some stuff from 1000 data points!</p>

<p>This intuitively feels pretty reasonable to me &ndash; like it makes sense to me that if you have NO IDEA
what your distribution that with 100,000 points you&rsquo;d be able to make quite strong inferences, and that with 1000 you can do a lot less!</p>

<h3 id="more-data-points-are-exponentially-better">more data points are exponentially better?</h3>

<p>One thing that I think is really cool about this estimating the density function formula is that how
sure you can be of your inferences scales <strong>exponentially</strong> with the size of your dataset (this is the
$e^{-n\epsilon^2}$). And also exponentially with the square of how sure you want to be (so wanting
to be sure within 0.01 is VERY DIFFERENT than within 0.04). So 100,000 data points isn&rsquo;t 10x better
than 10,000 data points, it&rsquo;s actually like 10000000000000x better.</p>

<p>Is that true in other places? If so that seems like a super useful intuition! I still feel pretty
uncertain about this, but having some basic intuition about &ldquo;how much more useful is 10,000 data
points than 1,000 data points?&ldquo;) feels like a really good thing.</p>

<h3 id="some-math-about-the-bootstrap">some math about the bootstrap</h3>

<p>The next chapter is about the bootstrap! Basically the way the bootstrap works is:</p>

<ol>
<li>you want to estimate some statistic (like the median) of your distribution</li>
<li>the bootstrap lets you get an estimate and also the variance of that estimate</li>
<li>you do this by repeatedly sampling with replacement from your data and then calculating the
statistic you want (like the median) on your samples</li>
</ol>

<p>I&rsquo;m not going to go too much into how to implement the bootstrap method because it&rsquo;s explained in a
lot of place on the internet. Let&rsquo;s talk about the math!</p>

<p>I think in order to say anything meaningful about bootstrap estimates I need to learn a new term: a
<strong>consistent estimator</strong>.</p>

<h3 id="what-s-a-consistent-estimator">What&rsquo;s a consistent estimator?</h3>

<p>Wikipedia says:</p>

<blockquote>
<p>In statistics, a <strong>consistent estimator</strong> or <strong>asymptotically consistent estimator</strong> is an
estimator — a rule for computing estimates of a parameter $\theta_0$ — having the property that as
the number of data points used increases indefinitely, the resulting sequence of estimates
converges in probability to $\theta_0$.</p>
</blockquote>

<p>This includes some terms where I forget what they mean (what&rsquo;s &ldquo;converges in probability&rdquo; again?).
But this seems like a very good thing! If I&rsquo;m estimating some parameter (like the median), I would
DEFINITELY LIKE IT TO BE TRUE that if I do it with an infinite amount of data then my estimate
works. An estimator that is not consistent does not sound very useful!</p>

<h3 id="why-when-are-bootstrap-estimators-consistent">why/when are bootstrap estimators consistent?</h3>

<p>spoiler: I have no idea. The book says the following:</p>

<blockquote>
<p>Consistency of the boostrap can now be expressed as follows.</p>

<p><strong>3.19 Theorem</strong>. Suppose that $\mathbb{E}(X_1^2) &lt; \infty$. Let $T_n = g(\overline{X}_n)$ where
$g$ is continuously differentiable at $\mu = \mathbb{E}(X_1)$ and that $g\prime(\mu) \neq 0$.
Then,</p>

<p>$$ \sup_u | \mathbb{P}_{\widehat{F}_n} \left(  \sqrt{n} (T( \widehat{F}_n*) - T( \widehat{F}_n) \leq u \right) - \mathbb{P}_{\widehat{F}} \left(  \sqrt{n} (T( \widehat{F}_n) - T( \widehat{F}) \leq u \right) | \rightarrow^\text{a.s.} 0 $$</p>

<p><strong>3.21 Theorem</strong>. Suppose that $T(F)$ is Hadamard differentiable with respect to $d(F,G)= sup_x|F(x)-G(x)|$ and
that $0 &lt; \int L^2_F(x) dF(x) &lt; \infty$.
Then,</p>

<p>$$ \sup_u | \mathbb{P}_{\widehat{F}_n} \left(  \sqrt{n} (T( \widehat{F}_n*) - T( \widehat{F}_n) \leq u \right) - \mathbb{P}_{\widehat{F}} \left(  \sqrt{n} (T( \widehat{F}_n) - T( \widehat{F}) \leq u \right) | \rightarrow^\text{P} 0 $$</p>
</blockquote>

<p>things I understand about these theorems:</p>

<ul>
<li>the two formulas they&rsquo;re concluding are the same, except I think one is about convergence &ldquo;almost
surely&rdquo; and one about &ldquo;convergence in probability&rdquo;. I don&rsquo;t remember what either of those mean.</li>
<li>I think for our purposes of doing Regular Boring Things we can replace &ldquo;Hadamard differentiable&rdquo;
with &ldquo;differentiable&rdquo;</li>
<li>I think they don&rsquo;t actually show the consistency of the bootstrap, they&rsquo;re actually about
consistency of the bootstrap confidence interval estimate (which is a different thing)</li>
</ul>

<p>I don&rsquo;t really understand how they&rsquo;re related to consistency, and in particular the $\sup_u$ thing
is weird, like if you&rsquo;re looking at $\mathbb{P}(something &lt; u)$, wouldn&rsquo;t you want to minimize $u$
and not maximize it? Maybe it&rsquo;s a typo and it should be $\inf_u$?</p>

<p>it concludes:</p>

<blockquote>
<p>there is a tendency to treat the bootstrap as a panacea for all problems. But the bootstrap
requires regularity conditions to yield valid answers. It should not be applied blindly.</p>
</blockquote>

<h3 id="this-book-does-not-seem-to-explain-why-the-bootstrap-is-consistent">this book does not seem to explain why the bootstrap is consistent</h3>

<p>In the appendix (3.7) it gives a sketch of a proof for showing that estimating the <strong>median</strong> using
the bootstrap is consistent. I don&rsquo;t think this book actually gives a proof anywhere that bootstrap
estimates in general are consistent, which was pretty surprising to me. It gives a bunch of
references to papers. Though I guess bootstrap confidence intervals are the most important thing?</p>

<h3 id="that-s-all-for-now">that&rsquo;s all for now</h3>

<p>This is all extremely stream of consciousness and I only spent 2 hours trying to work through this, but some things I think I learned in the last couple hours are:</p>

<ol>
<li>maybe having more data is exponentially better? (is this true??)</li>
<li>&ldquo;consistency&rdquo; of an estimator is a thing, not all estimators are consistent</li>
<li>understanding when/why nonparametric bootstrap estimators are consistent in general might be very
hard (the proof that the bootstrap median estimator is consistent already seems very
complicated!)</li>
<li>boostrap confidence intervals are not the same thing as bootstrap estimators. Maybe I&rsquo;ll learn
the difference next!</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2018: Year in review]]></title>
    <link href="https://jvns.ca/blog/2018/12/23/2018--year-in-review/"/>
    <updated>2018-12-28T09:55:37+00:00</updated>
    <id>https://jvns.ca/blog/2018/12/23/2018--year-in-review/</id>
    <content type="html"><![CDATA[

<p>I wrote these in <a href="https://jvns.ca/blog/2015/12/26/2015-year-in-review/">2015</a> and
<a href="https://jvns.ca/blog/2016/12/21/2016--year-in-review/">2016</a> and
<a href="https://jvns.ca/blog/2017/12/31/2017--year-in-review/">2017</a> and it&rsquo;s always interesting to look
back at them, so here&rsquo;s a summary of what went on in my side projects in 2018.</p>

<h3 id="ruby-profiler">ruby profiler!</h3>

<p>At the beginning of this year I wrote <a href="https://github.com/rbspy/rbspy">rbspy</a> (docs: <a href="https://rbspy.github.io/">https://rbspy.github.io/</a>). It inspired a Python version called <a href="https://github.com/benfred/py-spy">py-spy</a> and a PHP profiler called <a href="https://github.com/adsr/phpspy/">phpspy</a>, both of which are excellent. I think py-spy in particular is <a href="https://jvns.ca/blog/2018/09/08/an-awesome-new-python-profiler--py-spy-/">probably <em>better</em></a> than rbspy which makes me really happy.</p>

<p>Writing a program that does something innovative (<code>top</code> for your Ruby program&rsquo;s functions!) and
inspiring other people to make amazing new tools is something I&rsquo;m really proud of.</p>

<h3 id="started-a-side-business">started a side business!</h3>

<p>A very surprising thing that happened in 2018 is that I started a business! This is the website:
<a href="https://wizardzines.com/">https://wizardzines.com/</a>, and I sell programming zines.</p>

<p>It&rsquo;s been astonishingly successful (it definitely made me enough money that I could have lived on
just the revenue from the business this year), and I&rsquo;m really grateful to everyone&rsquo;s who&rsquo;s supported
that work. I hope the zines have helped you. I always thought that it was impossible to make
anywhere near as much money teaching people useful things as I can as a software developer, and now
I think that&rsquo;s not true. I don&rsquo;t think that I&rsquo;d <em>want</em> to make that switch (I like working as a
programmer!), but now I actually think that if I was serious about it and was interested in working
on my business skills, I could probably make it work.</p>

<p>I don&rsquo;t really know what&rsquo;s next, but I plan to write at least one zine next year. I learned a few
things about business this year, mainly from:</p>

<ul>
<li><a href="https://twitter.com/sehurlburt">stephanie hurlburt&rsquo;s twitter</a></li>
<li><a href="https://stackingthebricks.com/">amy hoy</a></li>
<li>the book <a href="https://www.amazon.com/Growing-Business-Paul-Hawken/dp/0671671642">growing a business by paul hawken</a></li>
<li>seeing what joel hooks is doing with <a href="https://egghead.io/">egghead.io</a></li>
<li>a little from <a href="https://www.indiehackers.com/">indie hackers</a></li>
</ul>

<p>I used to think that sales / marketing had to be gross, but reading some of these business books
made me think that it&rsquo;s actually possible to run a business by being honest &amp; just building good
things.</p>

<h3 id="work">work!</h3>

<p>this is mostly about side projects, but a few things about work:</p>

<ul>
<li>I still have the same manager (<a href="https://twitter.com/jshirley">jay</a>). He&rsquo;s been really great to
work with. The <a href="https://wizardzines.com/zines/manager/">help! i have a manager!</a> zine is secretly
largely things I learned from working with him.</li>
<li>my team made some big networking infrastructure changes and it went pretty well. I learned a lot
about proxies/TLS and a little bit about C++.</li>
<li>I mentored another intern, and the intern I mentored last year joined us full time!</li>
</ul>

<p>When I go back to work I&rsquo;m going to switch to working on something COMPLETELY DIFFERENT (writing
code that sends messages to banks!) for 3 months. It&rsquo;s a lot closer to the company&rsquo;s core business,
and I think it&rsquo;ll be neat to learn more about how financial infastracture works.</p>

<p>I struggled a bit with understanding/defining my job this year. I wrote <a href="https://jvns.ca/blog/senior-engineer/">What&rsquo;s a senior engineer&rsquo;s job?</a> about that, but I have not yet reached enlightenment.</p>

<h3 id="talks">talks!</h3>

<p>I gave 4 talks in 2018:</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=FBMC9bm-KuU">So you want to be a wizard</a> at StarCon</li>
<li><a href="https://jvns.ca/blog/2018/04/16/rbspy-talk/">Building a Ruby profiler</a> at the Recurse Center&rsquo;s
localhost series</li>
<li><a href="https://www.deconstructconf.com/2018/julia-evans-build-impossible-programs">Build Impossible Programs</a> in May at Deconstruct.</li>
<li><a href="https://www.youtube.com/watch?v=obB2IvCv-K0">High Reliability Infrastructure Migrations</a> at
Kubecon. I&rsquo;m pretty happy about this talk because I&rsquo;ve wanted to give a good talk about what I do
at work for a long time and I think I finally succeeded. Previously when I gave talks about my
work I think I fell into the trap of just describing what we do (&ldquo;we do X Y Z&rdquo; &hellip; &ldquo;okay, so
what?&ldquo;).  With this one, I think I was able to actually say things that were useful to other
people.</li>
</ul>

<p>In past years I&rsquo;ve mostly given talks which can mostly be summarized &ldquo;here are some cool tools&rdquo; and
&ldquo;here is how to learn hard things&rdquo;. This year I changed focus to giving talks about the actual work
I do &ndash; there were two talks about building a Ruby profiler, and one about what I do at work
(I spend a lot of time on infrastructure migrations!)</p>

<p>I&rsquo;m not sure whether if I&rsquo;ll give any talks in 2019. I travelled more than I wanted to in 2018, and
to stay sane I ended up having to cancel on a talk I was planning to give with relatively short
notice which wasn&rsquo;t good.</p>

<h3 id="podcasts">podcasts!</h3>

<p>I also experimented a bit with a new format: the podcast! These were basically all really fun! They
don&rsquo;t take that long (about 2 hours total?).</p>

<ul>
<li><a href="https://softwareengineeringdaily.com/2018/06/05/profilers-with-julia-evans/">Software Engineering Daily</a>, on rbspy and how to use a profiler</li>
<li><a href="https://twit.tv/shows/floss-weekly/episodes/487">FLOSS weekly</a>, again about rbspy. They told me
I&rsquo;m the guest that asked <em>them</em> the most questions, which I took as a compliment :)</li>
<li><a href="https://www.codenewbie.org/podcast/how-does-the-internet-work">CodeNewbie</a> on computer networking
&amp; how the Internet works</li>
<li><a href="https://hanselminutes.com/643/learning-how-to-be-a-wizard-programmer-with-julia-evans">Hanselminutes with Scott Hanselman</a> on writing zines / teaching / learning</li>
<li><a href="https://player.fm/series/eggheadio-developer-chats-1728019/exploring-concepts-and-teaching-using-focused-zines-with-julia-evans">egghead.io</a>, on making zines &amp; running a business</li>
</ul>

<p>what I learned about doing podcasts:</p>

<ul>
<li>It&rsquo;s really important to give the hosts a list of good questions to ask, and to be prepared to
give good answers to those questions! I&rsquo;m not a super polished podcast guest.</li>
<li>you need a good microphone. At least one of these people told me I actually couldn&rsquo;t be on their
podcast unless I had a good enough microphone, so I bought a <a href="https://www.amazon.com/gp/product/B000EOPQ7E/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B000EOPQ7E&amp;linkCode=as2&amp;tag=diabeticbooks&amp;linkId=ZBZBIVR4EB7V6JFL">medium fancy microphone</a>. It wasn&rsquo;t too expensive and it&rsquo;s nice to have a better quality microphone! Maybe I will use it more to record audio/video at some point!</li>
</ul>

<h3 id="con">!!Con</h3>

<p>I co-organized <a href="http://bangbangcon.com">!!Con</a> for the 4th time &ndash; I ran sponsorships. It&rsquo;s always
such a delight and the speakers are so great.</p>

<p>!!Con is expanding <a href="http://bangbangcon.com/west/">to the west coast in 2019</a> &ndash; I&rsquo;m not directly
involved with that but it&rsquo;s going to be amazing.</p>

<h3 id="blog-posts">blog posts!</h3>

<p>I apparently wrote 54 blog posts in 2018. A couple of my favourites are <a href="https://jvns.ca/blog/senior-engineer/">What&rsquo;s a senior engineer&rsquo;s job?</a>
, <a href="https://jvns.ca/blog/2018/09/01/learning-skills-you-can-practice/">How to teach yourself hard things</a>, and <a href="https://jvns.ca/blog/2018/05/11/batch-editing-files-with-ed/">batch editing files with ed</a>.</p>

<p>There were basically 4 themes in blogging for 2018:</p>

<ul>
<li>progress on the rbspy project while I was working on it (<a href="https://jvns.ca/categories/ruby-profiler/">this category</a>)</li>
<li>computer networking / infrastructure engineering (basically all I did at work this year was
networking, though I didn&rsquo;t write about it as much as I might have)</li>
<li>musings about zines / business / developer education, for instance <a href="https://jvns.ca/blog/2018/09/23/why-sell-zines/">why sell zines?</a> and <a href="https://jvns.ca/blog/2018/09/01/who-pays-to-educate-developers-/">who pays to educate developers?</a></li>
<li>a few of the usual &ldquo;how do you learn things&rdquo; / &ldquo;how do you succeed at your job&rdquo; posts as I figure
things about about that, for instance <a href="https://jvns.ca/blog/2018/02/18/working-remotely--4-years-in/">working remotely, 4 years in</a></li>
</ul>

<h3 id="a-tiny-inclusion-project-a-guide-to-performance-reviews">a tiny inclusion project: a guide to performance reviews</h3>

<p><a href="https://jvns.ca/blog/2017/12/31/2017--year-in-review/">Last year</a> in addition to my actual job, I
did a couple of projects at work towards helping make sure the performance/promotion process works
well for folks &ndash; i collaborated with the amazing <a href="https://karla.io/">karla</a> on the idea of a &ldquo;brag
document&rdquo;, and redid our engineering levels.</p>

<p>This year, in the same vein, I wrote a document called the &ldquo;Unofficial guide to the performance
reviews&rdquo;. A lot of folks said it helped them but probably it&rsquo;s too early to celebrate. I think
explaining to folks how the performance review process actually works and how to approach it is
really valuable and I might try to publish a more general version here at some point.</p>

<p>I like that I work at a place where it&rsquo;s possible/encouraged to do projects like this. I spend a
relatively small amount of time on them (maybe I spent 15 hours on this one?) but it feels good to
be able to make tiny steps towards building a better workplace from time to time. It&rsquo;s really hard
to judge the results though!</p>

<h3 id="conclusions">conclusions?</h3>

<p>some things that worked in 2018:</p>

<ul>
<li>setting <a href="https://jvns.ca/blog/senior-engineer/">boundaries</a> around what my job is</li>
<li>doing open source work while being paid for it</li>
<li>starting a side business</li>
<li>doing small inclusion projects at work</li>
<li>writing zines is very time consuming but I feel happy about the time I spent on that</li>
<li>blogging is always great</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New talk: High Reliability Infrastructure Migrations]]></title>
    <link href="https://jvns.ca/blog/2018/12/15/new-talk--high-reliability-infrastructure-migrations/"/>
    <updated>2018-12-15T14:11:39+00:00</updated>
    <id>https://jvns.ca/blog/2018/12/15/new-talk--high-reliability-infrastructure-migrations/</id>
    <content type="html"><![CDATA[

<p>On Tuesday I gave a talk at KubeCon called <a href="https://www.youtube.com/watch?v=obB2IvCv-K0">High Reliability Infrastructure
Migrations</a>. The abstract was:</p>

<blockquote>
<p>For companies with high availability requirements (99.99% uptime or higher), running new software
in production comes with a lot of risks. But it&rsquo;s possible to make significant infrastructure
changes while maintaining the availability your customers expect! I&rsquo;ll give you a toolbox for
derisking migrations and making infrastructure changes with confidence, with examples from our
Kubernetes &amp; Envoy experience at Stripe.</p>
</blockquote>

<h2 id="video">video</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/obB2IvCv-K0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="slides">slides</h3>

<p>Here are the slides:</p>

<script async class="speakerdeck-embed" data-id="5e42b5ea4a39448899b0a90521088e12" data-ratio="1.77469670710572" src="//speakerdeck.com/assets/embed.js"></script>

<p>since everyone always asks, I drew them in the Notability app on an iPad. I do this because it&rsquo;s
faster than trying to use regular slides software and I can make better slides.</p>

<h2 id="a-few-notes">a few notes</h2>

<p>Here are a few links &amp; notes about things I mentioned in the talk</p>

<h3 id="skycfg-write-functions-not-yaml">skycfg: write functions, not YAML</h3>

<p>I talked about how my team is working on non-YAML interfaces for configuring Kubernetes. The demo is
at <a href="http://skycfg.fun">skycfg.fun</a>, and it&rsquo;s <a href="https://github.com/stripe/skycfg">on GitHub here</a>. It&rsquo;s based on
<a href="https://github.com/bazelbuild/starlark">Starlark</a>, a configuration language that&rsquo;s a subset of
Python.</p>

<p>My coworker <a href="https://john-millikin.com/">John</a> has promised that he&rsquo;ll write a blog post about it at
some point, and I&rsquo;m hoping that&rsquo;s coming soon :)</p>

<h3 id="no-haunted-forests">no haunted forests</h3>

<p>I mentioned a deploy system rewrite we did. John has a great blog post about when rewrites are a
good idea and how he approached that rewrite called <a href="https://john-millikin.com/sre-school/no-haunted-forests">no haunted
forests</a>.</p>

<h3 id="ignore-most-kubernetes-ecosystem-software">ignore most kubernetes ecosystem software</h3>

<p>One small point that I made in the talk was that on my team we ignore almost all software in the
Kubernetes ecosystem so that we can focus on a few core pieces (Kubernetes &amp; Envoy, plus some small
things like kiam). I wanted to mention this because I think often in Kubernetes land it can seem
like everyone is using Cool New Things (helm! istio! knative! eep!). I&rsquo;m sure those projects are
great but I find it much simpler to stay focused on the basics and I wanted people to know that it&rsquo;s
okay to do that if that&rsquo;s what works for your company.</p>

<p>I think the reality is that actually a lot of folks are still trying to work out how to use this new
software in a reliable and secure way.</p>

<h3 id="other-talks">other talks</h3>

<p>I haven&rsquo;t watched other Kubecon talks yet, but here are 2 links:</p>

<p>I heard good things about <a href="https://www.youtube.com/watch?v=ytu3aUCwlSg&amp;index=127&amp;t=0s&amp;list=PLj6h78yzYM2PZf9eA7bhWnIh_mK1vyOfU">this keynote from melanie cebula about kubernetes at airbnb</a>, and I&rsquo;m excited to see <a href="https://www.youtube.com/watch?v=a03te8xEjUg&amp;index=65&amp;list=PLj6h78yzYM2PZf9eA7bhWnIh_mK1vyOfU&amp;t=0s">this talk about kubernetes security</a>. The <a href="https://schd.ws/hosted_files/kccna18/1c/KubeCon%20NA%20-%20This%20year%2C%20it%27s%20about%20security%20-%2020181211.pdf">slides from that security talk look useful</a></p>

<p>Also I&rsquo;m very excited to see Kelsey Hightower&rsquo;s keynote as always, but that recording isn&rsquo;t up yet. If you
have other Kubecon talks to recommend I&rsquo;d love to know what they are.</p>

<h3 id="my-first-work-talk-i-m-happy-with">my first work talk I&rsquo;m happy with</h3>

<p>I usually give talks about debugging tools, or side projects, or how I approach my job at a high
level &ndash; not on the actual work that I do at my job. What I talked about in this talk is basically
what I&rsquo;ve been learning how to do at work for the last ~2 years. Figuring out how to make big
infrastructure changes safely took me a long time (and I&rsquo;m not done!), and so I hope this talk helps
other folks do the same thing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How do you document a tech project with comics?]]></title>
    <link href="https://jvns.ca/blog/2018/12/09/how-do-you-document-a-tech-project-with-comics/"/>
    <updated>2018-12-09T00:51:28+00:00</updated>
    <id>https://jvns.ca/blog/2018/12/09/how-do-you-document-a-tech-project-with-comics/</id>
    <content type="html"><![CDATA[

<p>Every so often I get email from people saying basically &ldquo;hey julia! we have an open source project!
we&rsquo;d like to use comics / zines / art to document our project! Can we hire you?&ldquo;.</p>

<p>spoiler: the answer is &ldquo;no, you can&rsquo;t hire me&rdquo; &ndash; I don&rsquo;t do commissions. But I do think this is a
cool idea and I&rsquo;ve often wished I had something more useful to say to people than &ldquo;no&rdquo;, so if you&rsquo;re
interested in this, here are some ideas about how to accomplish it!</p>

<h3 id="zine-drawing">zine != drawing</h3>

<p>First, a terminology distinction. One weird thing I&rsquo;ve noticed is that people frequently refer to
individual tech drawings as &ldquo;zines&rdquo;. I think this is due to me communicating poorly somehow, but &ndash;
drawings are not zines! A zine is a <strong>printed booklet</strong>, like a small maga<strong>zine</strong>. You wouldn&rsquo;t call a
photo of a model in Vogue a magazine! The magazine has like a million pages! An individual drawing
is a drawing/comic/graphic/whatever. Just clarifying this because I think it causes a bit of
unnecessary confusion.</p>

<h3 id="comics-without-good-information-are-useless">comics without good information are useless</h3>

<p>Usually when folks ask me &ldquo;hey, could we make a comic explaining X&rdquo;, it doesn&rsquo;t seem like they have
a clear idea of what information exactly they want to get across, they just have a vague idea that
maybe it would be cool to draw some comics. This makes sense &ndash; figuring out what information would
be useful to tell people is very hard!! It&rsquo;s 80% of what I spend my time on when making comics.</p>

<p>You should think about comics the same way as any kind of documentation &ndash; start with the
information you want to convey, who your target audience is, and how you want to distribute it
(twitter? on your website? in person?), and figure out how to illustrate it after :). The
information is the main thing, not the art!</p>

<p>Once you have a clear story about what you want to get across, you can start trying to think
about how to represent it using illustrations!</p>

<h3 id="focus-on-concepts-that-don-t-change">focus on concepts that don&rsquo;t change</h3>

<p>Drawing comics is a much bigger investment than writing documentation (it takes me like 5x longer to
convey the same information in a comic than in writing). So use it wisely!  Because it&rsquo;s not that
easy to edit, if you&rsquo;re going to make something a comic you want to focus on concepts that are very
unlikely to change. So talk about the core ideas in your project instead of the exact command line
arguments it takes!</p>

<p>Here are a couple of options for how you could use comics/illustrations to document your project!</p>

<h3 id="option-1-a-single-graphic">option 1: a single graphic</h3>

<p>One format you might want to try is a single, small graphic explaining what your project is about
and why folks might be interested in it. For example: <a href="https://twitter.com/b0rk/status/986444234365521920">this zulip comic</a></p>

<p>This is a short thing, you could post it on Twitter or print it as a pamphlet to give out. The
information content here would probably be basically what&rsquo;s on your project homepage, but presented in a
more fun/exciting way :)</p>

<p>You can put a pretty small amount of information in a single comic. With that Zulip comic, the
things I picked out were:</p>

<ul>
<li>zulip is sort of like slack, but it has threads</li>
<li>it&rsquo;s easy to keep track of threads even if the conversation takes place over several days</li>
<li>you can much more easily selectively catch up with Zulip</li>
<li>zulip is open source</li>
<li>there&rsquo;s an open zulip server you can try out</li>
</ul>

<p>That&rsquo;s not a lot of information! It&rsquo;s 50 words :). So to do this effectively you need to distill
your project down to 50 words in a way that&rsquo;s still useful. It&rsquo;s not easy!</p>

<h3 id="option-2-many-comics">option 2: many comics</h3>

<p>Another approach you can take is to make a more in depth comic / illustration, like <a href="https://cloud.google.com/kubernetes-engine/kubernetes-comic/">google&rsquo;s guide to kubernetes</a> or <a href="https://thenewstack.io/kubernetes-gets-childrens-book/">the children&rsquo;s illustrated guide to kubernetes</a>.</p>

<p>To do this, you need a much stronger concept than &ldquo;uh, I want to explain our project&rdquo; &ndash; you want to
have a clear target audience in mind! For example, if I were drawing a set of Docker comics, I&rsquo;d
probably focus on folks who want to use Docker in production. so I&rsquo;d want to discuss:</p>

<ul>
<li>publishing your containers to a public/private registry</li>
<li>some best practices for tagging your containers</li>
<li>how to make sure your hosts don&rsquo;t run out of disk space from downloading too many containers</li>
<li>how to use layers to save on disk space / download less stuff</li>
<li>whether it&rsquo;s reasonable to run the same containers in production &amp; in dev</li>
</ul>

<p>That&rsquo;s totally different from the set of comics I&rsquo;d write for folks who just want to use Docker to
develop locally!</p>

<h3 id="option-3-a-printed-zine">option 3: a printed zine</h3>

<p>The main thing that differentiates this from &ldquo;many comics&rdquo; is that zines are printed! Because of that,
for this to make sense you need to have a place to give out the printed copies! Maybe you&rsquo;re going
present your project at a major conference? Maybe you give workshops about your project and want
to give our the zine to folks in the workshop as notes? Maybe you want to mail it to people?</p>

<h3 id="how-to-hire-someone-to-help-you">how to hire someone to help you</h3>

<p>There are basically 3 ways to hire someone:</p>

<ol>
<li>Hire someone who both understands (or can quickly learn) the technology you want to document and
can illustrate well. These folks are tricky to find and probably expensive (I certainly wouldn&rsquo;t
do a project like this for less than $10,000 even if I did do commissions), just because programmers
can usually charge a pretty high consulting rate. I&rsquo;d guess that the main failure mode here
is that it might be impossible/very hard to find someone, and it might be expensive.</li>
<li>Collaborate with an illustrator to draw it for you. The main failure mode here is that if you
don&rsquo;t give the illustrator clear explanations of your tech to work with, you.. won&rsquo;t end up with
a clear and useful explanation. From what I&rsquo;ve seen, <strong>most folks underinvest in writing clear
explanations for their illustrators</strong> &ndash; I&rsquo;ve seen a few really adorable tech comics that I don&rsquo;t
find useful or clear at all. I&rsquo;d love to see more people do a better job of this. What&rsquo;s the
point of having an adorable illustration if it doesn&rsquo;t teach anyone anything? :)</li>
<li>Draw it yourself :). This is what I do, obviously. stick figures are okay!</li>
</ol>

<p>Most people seem to use method #2 &ndash; I&rsquo;m not actually aware of any tech folks who have done
commissioned comics (though I&rsquo;m sure it&rsquo;s happened!). I think method #2 is a great option and I&rsquo;d
love to see more folks do it. Paying illustrators is really fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An example of how C++ destructors are useful in Envoy]]></title>
    <link href="https://jvns.ca/blog/2018/11/18/c---destructors---really-useful/"/>
    <updated>2018-11-18T10:21:28+00:00</updated>
    <id>https://jvns.ca/blog/2018/11/18/c---destructors---really-useful/</id>
    <content type="html"><![CDATA[

<p>For a while now I&rsquo;ve been working with a C++ project (Envoy), and sometimes I need to contribute to
it, so my C++ skills have gone from &ldquo;nonexistent&rdquo; to &ldquo;really minimal&rdquo;. I&rsquo;ve learned what an
initializer list is and that a method starting with <code>~</code> is a destructor. I almost know what an
lvalue and an rvalue are but not quite.</p>

<p>But the other day when writing some C++ code I figured out something exciting about how to use
destructors that I hadn&rsquo;t realized! (the tl;dr of this post for people who know C++ is &ldquo;julia
finally understands what RAII is and that it is useful&rdquo; :))</p>

<h3 id="what-s-a-destructor">what&rsquo;s a destructor?</h3>

<p>C++ has objects. When an C++ object goes out of scope, the compiler inserts a call to its
destructor. So if you have some code like</p>

<pre><code>function do_thing() {
  Thing x{}; // this calls the Thing constructor
  return 2;
}
</code></pre>

<p>there will be a call to x&rsquo;s destructor at the end of the <code>do_thing</code> function. so the code c++
generates looks something like:</p>

<ul>
<li>make new thing</li>
<li>call the new thing&rsquo;s destructor</li>
<li>return 2</li>
</ul>

<p>Obviously destructors are way more complicated like this. They need to get called when there are
exceptions! And sometimes they get called manually. And for lots of other reasons too. But there are
10 million things to know about C++ and that is not what we&rsquo;re doing today, we are just talking
about one thing.</p>

<h3 id="what-happens-in-a-destructor">what happens in a destructor?</h3>

<p>A lot of the time memory gets freed, which is how you avoid having memory leaks. But that&rsquo;s not what
we&rsquo;re talking about in this post! We are talking about something more interesting.</p>

<h3 id="the-thing-we-re-interested-in-envoy-circuit-breakers">the thing we&rsquo;re interested in: Envoy circuit breakers</h3>

<p>So I&rsquo;ve been working with Envoy a lot.  3 second Envoy refresher: it&rsquo;s a HTTP proxy, your application
makes requests to Envoy, which then proxies the request to the servers the application wants to talk
to.</p>

<p>One very useful feature Envoy has is this thing called &ldquo;circuit breakers&rdquo;.  Basically the idea with
is that if your application makes 50 billion connections to a service, that will probably overwhelm
the service. So Envoy keeps track how many TCP connections you&rsquo;ve made to a service, and will stop you from making
new requests if you hit the limit. The default <code>max_connection</code> limit</p>

<h3 id="how-do-you-track-connection-count">how do you track connection count?</h3>

<p>To maintain a circuit breaker on the number of TCP connections, that means you need to keep an
accurate count of how many TCP connections are currently open! How do you do that? Well, the way it
works is to maintain a <code>connections</code> counter and:</p>

<ul>
<li>every time a connection is opened, increment the counter</li>
<li>every time a connection is destroyed (because of a reset / timeout / whatever), decrement the
counter</li>
<li>when creating a new connection, check that the <code>connections</code> counter is not over the limit</li>
</ul>

<p>that&rsquo;s all! And incrementing the counter when creating a new connection is pretty easy. But how do
you make sure that the counter gets <em>decremented</em> wheh the connection is destroyed? Connections can
be destroyed in a lot of ways (they can time out! they can be closed by Envoy! they can be closed by
the server! maybe something else I haven&rsquo;t thought of could happen!) and it seems very easy to
accidentally miss a way of closing them.</p>

<h3 id="destructors-to-the-rescue">destructors to the rescue</h3>

<p>The way Envoy solves this problem is to create a connection object (called
<code>ActiveClient</code> in the HTTP connection pool) for every connection.</p>

<p>Then it:</p>

<ul>
<li>increments the counter in the constructor (<a href="https://github.com/envoyproxy/envoy/blob/200b0e41641be46471c2ce3d230aae395fda7ded/source/common/http/http1/conn_pool.cc#L301">code</a>)</li>
<li>decrements the counter in the destructor (<a href="https://github.com/envoyproxy/envoy/blob/200b0e41641be46471c2ce3d230aae395fda7ded/source/common/http/http1/conn_pool.cc#L315">code</a>)</li>
<li>checks the counter when a new connection is created (<a href="https://github.com/envoyproxy/envoy/blob/200b0e41641be46471c2ce3d230aae395fda7ded/source/common/http/http1/conn_pool.cc#L97">code</a>)</li>
</ul>

<p>The beauty of this is that now you don&rsquo;t need to make sure that the counter gets decremented in all
the right places, you now just need to organize your code so that the <code>ActiveClient</code> object&rsquo;s
destructor gets called when the connection has closed.</p>

<p>Where does the <code>ActiveClient</code> destructor get called in Envoy? Well, Envoy maintains 2 lists of
clients (<code>ready_clients</code> and <code>busy_clients</code>), and when a connection gets closed, Envoy removes the
client from those lists. And when it does that, it doesn&rsquo;t need to do any extra cleanup!!  In C++,
anytime a object is removed from a list, its destructor is called. So
<code>client.removeFromList(ready_clients_);</code> takes care of all the cleanup. And there&rsquo;s no chance of
forgetting to decrement the counter!! It will definitely always happen unless you accidentally leave
the object on one of these lists, which would be a bug anyway because the connection is closed :)</p>

<h3 id="raii">RAII</h3>

<p>This pattern Envoy is using here is an extremely common C++ programming pattern called &ldquo;resource
acquisition is initialization&rdquo;. I find that name very confusing but that&rsquo;s what it&rsquo;s called.
basically the way it works is:</p>

<ul>
<li>identify a resource (like &ldquo;connection&rdquo;) where a lot of things need to happen when the connection
is initialized / finished</li>
<li>make a class for that connection</li>
<li>put all the initialization / finishing code in the constructor / destructor</li>
<li>make sure the object&rsquo;s destructor method gets called when appropriate! (by removing it from a
vector / having it go out of scope)</li>
</ul>

<p>Previously I knew about using this pattern for kind of obvious things (make sure all the memory
gets freed in the destructor, or make sure file descriptors get closed). But I didn&rsquo;t realize it was
also useful for cases that are slightly less obviously a resource like &ldquo;decrement a counter&rdquo;.</p>

<p>The reason this pattern works is because the C++ compiler/standard library does a bunch of work to
make sure that destructors get called when you&rsquo;re done with an object &ndash; the compiler inserts
destructor calls at the end of each block of code, after exceptions, and many standard library
collections make sure destructors are called when you remove an object from a collection.</p>

<h3 id="raii-gives-you-prompt-deterministic-and-hard-to-screw-up-cleanup-of-resources">RAII gives you prompt, deterministic, and hard-to-screw-up cleanup of resources</h3>

<p>The exciting thing here is that this programming pattern gives you a way to schedule cleaning up
resources that&rsquo;s:</p>

<ul>
<li>easy to ensure always happens (when the object goes away, it always happens, even if there was an
exception!)</li>
<li>prompt &amp; determinstic (it happens right away and it&rsquo;s guaranteed to happen!)</li>
</ul>

<h3 id="what-languages-have-raii">what languages have RAII?</h3>

<p>C++ and Rust have RAII. Probably other languages too. Java, Python, Go, and garbage collected
languages in general do not.  In a garbage collected language you can often set up destructors to be
run when the object is GC&rsquo;d. But often (like in this case, which the connection count) you want
things to be cleaned up <strong>right away</strong> when the object is no longer in use, not some indeterminate
period later whenever GC happens to run.</p>

<p>Python context managers are a related idea, you could do something like:</p>

<pre><code>with conn_pool.connection() as conn:
    do stuff
</code></pre>

<h3 id="that-s-all-for-now">that&rsquo;s all for now!</h3>

<p>Hopefully this explanation of RAII is interesting and mostly correct. Thanks to Kamal for clarifying
some RAII things for me!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some notes on running new software in production]]></title>
    <link href="https://jvns.ca/blog/2018/11/11/understand-the-software-you-use-in-production/"/>
    <updated>2018-11-11T11:00:01+00:00</updated>
    <id>https://jvns.ca/blog/2018/11/11/understand-the-software-you-use-in-production/</id>
    <content type="html"><![CDATA[

<p>I&rsquo;m working on a talk for kubecon in December! One of the points I want to get across is the amount
of time/investment it takes to use new software in production without causing really serious
incidents, and what that&rsquo;s looked like for us in our use of Kubernetes.</p>

<p>To start out, this post isn&rsquo;t blanket advice. There are lots of times when it&rsquo;s totally fine to just
use software and not worry about <strong>how</strong> it works exactly. So let&rsquo;s start by talking about when it&rsquo;s
important to invest.</p>

<h3 id="when-it-matters-99-99">when it matters: 99.99%</h3>

<p>If you&rsquo;re running a service with a low SLO like 99% I don&rsquo;t think it matters that much to understand
the software you run in production. You can be down for like 2 hours a month! If something goes
wrong, just fix it and it&rsquo;s fine.</p>

<p>At 99.99%, it&rsquo;s different. That&rsquo;s 45 minutes / year of downtime, and if you find out about a serious
issue for the first time in production it could easily take you 20 minutes or to revert the change.
That&rsquo;s half your uptime budget for the year!</p>

<h3 id="when-it-matters-software-that-you-re-using-heavily">when it matters: software that you&rsquo;re using heavily</h3>

<p>Also, even if you&rsquo;re running a service with a 99.99% SLO, it&rsquo;s impossible to develop a super deep
understanding of every single piece of software you&rsquo;re using. For example, a web service might use:</p>

<ul>
<li>100 library dependencies</li>
<li>the filesystem (so there&rsquo;s linux filesystem code!)</li>
<li>the network (linux networking code!)</li>
<li>a database (like postgres)</li>
<li>a proxy (like nginx/haproxy)</li>
</ul>

<p>If you&rsquo;re only reading like 2 files from disk, you don&rsquo;t need to do a super deep dive into Linux
filesystems internals, you can just read the file from disk.</p>

<p>What I try to do in practice is identify the components which we rely on the (or have the most
unusual use cases for!), and invest time into understanding those. These are usually pretty easy to
identify because they&rsquo;re the ones which will cause the most problems :)</p>

<h3 id="when-it-matters-new-software">when it matters: new software</h3>

<p>Understanding your software especially matters for newer/less mature software projects, because it&rsquo;s
morely likely to have bugs &amp; or just not have matured enough to be used by most people without
having to worry. I&rsquo;ve spent a bunch of time recently with Kubernetes/Envoy which are both relatively
new projects, and neither of those are remotely in the category of &ldquo;oh, it&rsquo;ll just work, don&rsquo;t worry
about it&rdquo;.  I&rsquo;ve spent many hours debugging weird surprising edge cases with both of them and
learning how to configure them in the right way.</p>

<h3 id="a-playbook-for-understanding-your-software">a playbook for understanding your software</h3>

<p>The playbook for understanding the software you run in production is pretty simple. Here it is:</p>

<ol>
<li>Start using it in production in a non-critical capacity (by sending a small percentage of traffic
to it, on a less critical service, etc)</li>
<li>Let that bake for a few weeks.</li>
<li>Run into problems.</li>
<li>Fix the problems. Go to step 3.</li>
</ol>

<p>Repeat until you feel like you have a good handle on this software&rsquo;s failure modes and are
comfortable running it in a more critical capacity. Let&rsquo;s talk about that in a little more detail,
though:</p>

<h3 id="what-running-into-bugs-looks-like">what running into bugs looks like</h3>

<p>For example, I&rsquo;ve been spending a lot of time with Envoy in the last year. Some of the issues we&rsquo;ve
seen along the way are: (in no particular order)</p>

<ul>
<li>One of the default settings resulted in retry &amp; timeout headers not being respected</li>
<li>Envoy (as a client) doesn&rsquo;t support TLS session resumption, so servers with a large amount of Envoy clients get DDOSed by TLS handshakes</li>
<li>Envoy&rsquo;s active healthchecking means that you services get healthchecked by every client. This is
mostly okay but (again) services with many clients can get overwhelmed by it.</li>
<li>Having every client independently healthcheck every server interacts somewhat poorly with services
which are under heavy load, and can exacerbate performance issues by removing up-but-slow clients
from the load balancer rotation.</li>
<li>Envoy doesn&rsquo;t retry failed connections by default</li>
<li>it frequently segfaults when given incorrect configuration</li>
<li>various issues with it segfaulting because of resource leaks / memory safety issues</li>
<li>hosts running out of disk space between we didn&rsquo;t rotate Envoy log files often enough</li>
</ul>

<p>A lot of these aren&rsquo;t bugs &ndash; they&rsquo;re just cases where what we expected the default configuration
to do one thing, and it did another thing. This happens all the time, and it can result in really
serious incidents. Figuring out how to configure a complicated piece of software appropriately takes
a lot of time, and you just have to account for that.</p>

<p>And Envoy is great software! The maintainers are incredibly responsive, they fix bugs quickly and
its performance is good. It&rsquo;s overall been quite stable and it&rsquo;s done well in production. But just
because something is great software doesn&rsquo;t mean you won&rsquo;t also run into 10 or 20 relatively serious
issues along the way that need to be addressed in one way or another. And it&rsquo;s helpful to understand
those issues <strong>before</strong> putting the software in a really critical place.</p>

<h3 id="try-to-have-each-incident-only-once">try to have each incident only once</h3>

<p>My view is that running new software in production inevitably results in incidents. The trick:</p>

<ol>
<li>Make sure the incidents aren&rsquo;t too serious (by making &lsquo;production&rsquo; a less critical system first)</li>
<li>Whenever there&rsquo;s an incident (even if it&rsquo;s not that serious!!!), spend the time necessary to
understand exactly why it happened and how to make sure it doesn&rsquo;t happen again</li>
</ol>

<p>My experience so far has been that it&rsquo;s actually relatively possible to pull off &ldquo;have every
incident only once&rdquo;. When we investigate issues and implement remediations, usually that issue
<strong>never comes back</strong>. The remediation can either be:</p>

<ul>
<li>a configuration change</li>
<li>reporting a bug upstream and either fixing it ourselves or waiting for a fix</li>
<li>a workaround (&ldquo;this software doesn&rsquo;t work with 10,000 clients? ok, we just won&rsquo;t use it with in
cases where there are that many clients for now!&ldquo;, &ldquo;oh, a memory leak? let&rsquo;s just restart it every
hour&rdquo;)</li>
</ul>

<p>Knowledge-sharing is really important here too &ndash; it&rsquo;s always unfortunate when one person finds an
incident in production, fixes it, but doesn&rsquo;t explain the issue to the rest of the team so somebody
else ends up causing the same incident again later because they didn&rsquo;t hear about the original
incident.</p>

<h3 id="understand-what-is-ok-to-break-and-isn-t">Understand what is ok to break and isn&rsquo;t</h3>

<p>Another huge part of understanding the software I run in production is understanding which parts
are OK to break (aka &ldquo;if this breaks, it won&rsquo;t result in a production incident&rdquo;) and which aren&rsquo;t.
This lets me <strong>focus</strong>: I can put big boxes around some components and decide &ldquo;ok, if this breaks it
doesn&rsquo;t matter, so I won&rsquo;t pay super close attention to it&rdquo;.</p>

<p>For example, with Kubernetes:</p>

<p>ok to break:</p>

<ul>
<li>any stateless control plane component can crash or be cycled out or go down for 5 minutes at any
time. If we had 95% uptime for the kubernetes control plane that would probably be fine, it just
needs to be working most of the time.</li>
<li>kubernetes networking (the system where you give every pod an IP addresses) can break as much as
it wants because we decided not to use it to start</li>
</ul>

<p>not ok:</p>

<ul>
<li>for us, if etcd goes down for 10 minutes, that&rsquo;s ok. If it goes down for 2 hours, it&rsquo;s not</li>
<li>containers not starting or crashing on startup (iam issues, docker not starting containers, bugs
in the scheduler, bugs in other controllers) is serious and needs to be looked at immediately</li>
<li>containers not having access to the resources they need (because of permissions issues, etc)</li>
<li>pods being terminated unexpectedly by Kubernetes (if you configure kubernetes wrong it can
terminate your pods!)</li>
</ul>

<p>with Envoy, the breakdown is pretty different:</p>

<p>ok to break:</p>

<ul>
<li>if the envoy control plane goes down for 5 minutes, that&rsquo;s fine (it&rsquo;ll keep working with stale
data)</li>
<li>segfaults on startup due to configuration errors are sort of okay because they manifest so early
and they&rsquo;re unlikely to surprise us (if the segfault doesn&rsquo;t happen the 1st time, it shouldn&rsquo;t
happen the 200th time)</li>
</ul>

<p>not ok:</p>

<ul>
<li>Envoy crashes / segfaults are not good &ndash; if it crashes, network connections don&rsquo;t happen</li>
<li>if the control server serves incorrect or incomplete data that&rsquo;s extremely dangerous and can
result in serious production incidents. (so downtime is fine, but serving incorrect data is not!)</li>
</ul>

<p>Neither of these lists are complete at all, but they&rsquo;re examples of what I mean by &ldquo;understand your
sofware&rdquo;.</p>

<h3 id="sharing-ok-to-break-not-ok-lists-is-useful">sharing ok to break / not ok lists is useful</h3>

<p>I think these &ldquo;ok to break&rdquo; / &ldquo;not ok&rdquo; lists are really useful to share, because even if they&rsquo;re not
100% the same for every user, the lessons are pretty hard won. I&rsquo;d be curious to hear about your
breakdown of what kinds of failures are ok / not ok for software you&rsquo;re using!</p>

<p>Figuring out all the failure modes of a new piece of software and how they apply to your situation
can take months. (this is is why when you ask your database team &ldquo;hey can we just use NEW DATABASE&rdquo;
they look at you in such a pained way). So anything we can do to help other people learn faster is
amazing</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tailwind: style your site without writing any CSS!]]></title>
    <link href="https://jvns.ca/blog/2018/11/01/tailwind--write-css-without-the-css/"/>
    <updated>2018-11-01T21:21:05+00:00</updated>
    <id>https://jvns.ca/blog/2018/11/01/tailwind--write-css-without-the-css/</id>
    <content type="html"><![CDATA[

<p>Hello! Over the last couple of days I put together a new website for my zines
(<a href="https://wizardzines.com">https://wizardzines.com</a>). To make this website, I needed to write HTML and CSS. Eep!!</p>

<p>Web design really isn&rsquo;t my strong suit. I&rsquo;ve been writing mediocre HTML/CSS for probably like 12
years now, and since I don&rsquo;t do it at all in my job and am making no efforts to improve, the chances
of my mediocre CSS skills magically improving are&hellip; not good.</p>

<p>But! I want to make websites sometimes, and It&rsquo;s 2018! All websites need to be responsive! So even
if I make a pretty minimalist site, it does need to at least sort of work on phones and tablets and
desktops with lots of different screen sizes. I know about CSS and flexboxes and media queries,
but in practice putting all of those things together is usually a huge pain.</p>

<p>I ended up making this site with <a href="https://tailwindcss.com/docs/what-is-tailwind/">Tailwind CSS</a>, and
it helped me make a site I felt pretty happy with my minimal CSS skills and just 2 evenings of work!</p>

<p>The Tailwind author wrote a blog post called <a href="https://adamwathan.me/css-utility-classes-and-separation-of-concerns/">CSS Utility Classes and &ldquo;Separation of Concerns&rdquo;</a> which you should very possibly read instead of this :).</p>

<h3 id="css-zen-garden-change-your-css-not-your-html">CSS zen garden: change your CSS, not your HTML</h3>

<p>Until yesterday, what I believed about writing good CSS was living in about 2003 with the <a href="http://www.csszengarden.com/">CSS zen
garden</a>. The CSS zen garden was (and is! it&rsquo;s still up!) this site
which was like &ldquo;hey everyone!! you can use CSS to style your websites instead of HTML tables! Just
write nice semantic HTML and then you can accomplish anything you need to do with CSS! This is
amazing!&rdquo; They show it off by providing <a href="http://www.csszengarden.com/221/">lots</a> <a href="http://www.csszengarden.com/218/">of</a> <a href="http://www.csszengarden.com/215/">different</a> designs for the site, which all use exactly the same HTML. It&rsquo;s a really fun &amp; creative thing and it obviously made an impression because I remember it like 10 years later.</p>

<p>And it makes sense! The idea that you should write semantic HTML, kind of like this:</p>

<pre><code>div class=&quot;zen-resources&quot; id=&quot;zen-resources&quot;&gt;
   &lt;h3 class=&quot;resources&quot;&gt;Resources:&lt;/h3&gt;
</code></pre>

<p>and then style those classes.</p>

<h3 id="writing-css-is-not-actually-working-for-me">writing CSS is not actually working for me</h3>

<p>Even though I believe in this CSS zen garden semantic HTML ideal, I feel like writing CSS is not
actually really working for me personally. I know some CSS basics &ndash; I know <code>font-size</code> and <code>align</code>
and <code>min-height</code> and can even sort of use flexboxes and CSS grid. I can mostly center things. I made
<a href="https://rbspy.github.io/">https://rbspy.github.io/</a> responsive by writing CSS.</p>

<p>But I only write CSS probably every 4 months or something, and only for tiny personal sites, and in
practive I always end up with some media query problem sadly googling &ldquo;how do I center div&rdquo; for the
500th time. And everything ends up kind of poorly aligned and eventually I get something that sort
of works and hide under the bed.</p>

<h3 id="css-frameworks-where-you-don-t-write-css">CSS frameworks where you don&rsquo;t write CSS</h3>

<p>So! There&rsquo;s this interesting thing that has happened where now there are CSS frameworks where you
don&rsquo;t actually write any CSS at all to use them! Instead, you just add lots of CSS classes to each
element to style it. It&rsquo;s basically the opposite of the CSS zen garden &ndash; you have a single CSS file
that you don&rsquo;t change, and then you use 10 billion classes in your HTML to style your site.</p>

<p>Here&rsquo;s an example from <a href="https://wizardzines.com/zines/manager/">https://wizardzines.com/zines/manager/</a>. This snippet puts images of the cover
and the table of contents side by side.</p>

<pre><code>&lt;div class=&quot;flex flex-row flex-wrap justify-center&quot;&gt;
  &lt;div class=&quot;md:w-1/2 md:pr-4&quot;&gt;
    &lt;img src='cover.png'&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;md:w-1/2&quot;&gt;
    &lt;a class=&quot;outline-none&quot; href='/zines/manager/toc.png'&gt;
    &lt;img src='toc.png'&gt;
   	&lt;/a&gt;  
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>Basically the outside div is a flexbox &ndash; <code>flex</code> means <code>display: flex</code>, <code>flex-row</code> means
<code>flex-direction: row</code>, etc. Most (all?) of the classes apply exactly 1 line of CSS.</p>

<p>Here&rsquo;s the &lsquo;Buy&rsquo; Button:</p>

<pre><code>&lt;a class=&quot;text-xl rounded bg-orange pt-1 pb-1 pr-4 pl-4 text-white hover:text-white no-underline leading-loose&quot; href=&quot;https://gum.co/oh-shit-git&quot;&gt;Buy for $10&lt;/a&gt;
</code></pre>

<p>The Buy button breaks down as:</p>

<ul>
<li><code>pt, pb, pr, pl</code> are padding</li>
<li><code>text-white, hover:text-white</code> are the text color</li>
<li><code>no-underline</code> is <code>text-decoration: none</code></li>
<li><code>leading-loose</code> sets <code>line-height: 1.5</code></li>
</ul>

<h3 id="why-it-s-fun-easy-media-queries">why it&rsquo;s fun: easy media queries</h3>

<p>Tailwind does a really nice thing with media queries, where if you add a class <code>lg:pl-4</code>, it means
&ldquo;add padding, but only on screens that are &lsquo;large&rsquo; or bigger.</p>

<p>I love this because it&rsquo;s really easy to experiment and I don&rsquo;t need to go hunt through my media
queries to make something look better on a different screen size! For example, for that image
example above, I wanted to make the images display side by side, but only on biggish screens. So I
could just add the class <code>md:w-1/2</code>, which makes the width 50% on screens bigger than &lsquo;medium&rsquo;.</p>

<pre><code>  &lt;div class=&quot;md:w-1/2 md:pr-4&quot;&gt;
    &lt;img src='cover.png'&gt;
  &lt;/div&gt;
</code></pre>

<p>Basically there&rsquo;s CSS in Tailwind something like:</p>

<pre><code>@media screen and (min-width: 800px) {
    .md:w-1/2 {
        width: 50%;
    }
}
</code></pre>

<p>I thought it was interesting that all of the Tailwind media queries seem to be expressed in terms of
<code>min-width</code> instead of <code>max-width</code>. It seems to work out okay.</p>

<h3 id="why-it-s-fun-it-s-fast-to-iterate">why it&rsquo;s fun: it&rsquo;s fast to iterate!</h3>

<p>Usually when I write CSS I try to add classes in a vaguely semantic way to my code, style them with
CSS, realize I made the wrong classes, and eventually end up with weird divs with the id
&ldquo;WRAPPER-WRAPPER-THING&rdquo; or something in a desperate attempt to make something centered.</p>

<p>It feels incredibly freeing to not have to give any of my divs styles or IDs at all and just focus
on thinking about how they should look. I just have one kind of thing to edit!  (the HTML). So if I
want to add some padding on the left, I can just add a <code>pl-2</code> class, and it&rsquo;s done!</p>

<p><a href="https://wizardzines.com/">https://wizardzines.com/</a> has basically no CSS at all except for a single <code>&lt;link href=&quot;https://cdn.jsdelivr.net/npm/tailwindcss/dist/tailwind.min.css&quot; rel=&quot;stylesheet&quot;&gt;</code>.</p>

<h3 id="why-is-this-different-from-inline-styles">why is this different from inline styles?</h3>

<p>These CSS frameworks are a little weird because adding the <code>no-underline</code> class is literally the
same as writing an inline <code>text-decoration: none</code>. So is this just basically equivalent to using
inline CSS styles? It&rsquo;s not! Here are a few extra features it has:</p>

<ol>
<li>media queries. being able to specify alternate attributes depending on the size (<code>sm:text-orange md:text-white</code>) is awesome to be able to do so quickly</li>
<li>Limits &amp; standards. With normal CSS, I can make any element any width I want. For me, this is not a good thing! With tailwind, there are only <a href="https://tailwindcss.com/docs/width">30ish options for width</a>, and I found that these limits made me way easier for me to make reasonable CSS choices that made my site look the way I wanted. No more <code>width: 300px; /* i hope this looks okay i don't know help */</code> Here&rsquo;s the <a href="https://tailwindcss.com/docs/colors">colour palette</a>! It forces you to do everything in <code>em</code> instead of using pixels which I understand is a Good Idea even though I never actually do it when writing CSS.</li>
</ol>

<h3 id="why-does-it-make-sense-to-use-css-this-way">why does it make sense to use CSS this way?</h3>

<p>It seems like there are some other trends in web development that make this approach to CSS make
more sense than it might have in, say, 2003.</p>

<p>I wonder if the reason this approach makes more sense now is that we&rsquo;re doing more generation of
HTML than we were in 2003. In my tiny example, this approach to CSS actually doesn&rsquo;t introduce
<strong>that</strong> much duplication into my site, because all of the HTML is generated by Hugo templates, so most
styles only end up being specified once anyway. So even though I need to write this absurd <code>text-xl
rounded bg-orange pt-1 pb-1 pr-4 pl-4 text-white hover:text-white no-underline leading-loose</code> set of
classes to make a button, I only really need to write it once.</p>

<p>I&rsquo;m not sure!</p>

<h3 id="other-similar-css-frameworks">other similar CSS frameworks</h3>

<ul>
<li><a href="https://tachyons.io/">tachyons</a></li>
<li><a href="https://bulma.io/">bulma</a></li>
<li><a href="https://tailwindcss.com/">tailwind</a></li>
<li>to some extent the much older <a href="https://getbootstrap.com/">bootstrap</a>, though when I&rsquo;ve used that I
ultimately felt like all my sites looked exactly the same (&ldquo;oh, another bootstrap site&rdquo;), which
made me stop using it.</li>
</ul>

<p>There are probably lots more. I haven&rsquo;t tried Tachyons or Bulma at all. They look nice too.</p>

<h3 id="utility-first-not-utility-only">utility-first, not utility-only</h3>

<p>Tne thing the Tailwind author says that I think is interesting is that the goal of Tailwind is not
actually for you to <strong>never</strong> write CSS (even though obviously you can get away with that for small
sites). There&rsquo;s some more about that in <a href="https://news.ycombinator.com/item?id=18084013">these HN comments</a>.</p>

<h3 id="should-everyone-use-this-no-idea">should everyone use this? no idea</h3>

<p>I have no position on the One True Way to write (or not write) CSS. I&rsquo;m not a frontend developer and
you definitely should not take advice from me. But I found this a lot easier than just about
everything I&rsquo;ve tried previously, so maybe it will help you too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When does teaching with comics work well?]]></title>
    <link href="https://jvns.ca/blog/2018/10/28/when-does-teaching-with-comics-work-well/"/>
    <updated>2018-10-28T09:13:41+00:00</updated>
    <id>https://jvns.ca/blog/2018/10/28/when-does-teaching-with-comics-work-well/</id>
    <content type="html"><![CDATA[

<p>I&rsquo;m speaking at <a href="https://letssketchtech.splashthat.com/">Let&rsquo;s sketch tech!</a> in San Francisco
in December. I&rsquo;ve been thinking about what to talk about (the mechanics of making zines? how comics
skills are different from drawing skills? the business of self-publishing?). So here&rsquo;s one
interesting question: in what situations does using comics to teach help?</p>

<h3 id="comics-are-kind-of-magic">comics are kind of magic</h3>

<p>The place I&rsquo;m starting with is &ndash; comics often feel <strong>magical</strong> to me. I&rsquo;ll post a comic on, for
instance, /proc, and dozens of people will tell me &ldquo;wow, I didn&rsquo;t know this existed, this is so
useful!&ldquo;. It seems clear that explaining things with comics often works well for a lot of people.
But it&rsquo;s less clear which situations comics are useful in! So this post is an attempt to explore
that.</p>

<p>See also <a href="https://jvns.ca/teach-tech-with-cartoons/">How to teach technical concepts with cartoons</a>
which is more about techniques I use and less about &ldquo;when it works&rdquo;.</p>

<h3 id="what-s-up-with-learning-styles">what&rsquo;s up with &ldquo;learning styles?&rdquo;</h3>

<p>One possible way to answer the question &ldquo;when does using comics to teach work well?&rdquo; is &ldquo;well, some
people are visual learners, and for those people comics work well&rdquo;. This is based on the idea that
different people have different &ldquo;learning styles&rdquo; and learn more effectively when taught using their
preferred learning style.</p>

<p>It&rsquo;s clear that different people have different learning <strong>preferences</strong> (for instance I like
reading text and dislike watching videos). From my very brief reading of Wikipedia, it seems less
clear that folks actually learn more effectively when taught using their preferences. So, whether or
not this is true, it&rsquo;s not how I think about what I&rsquo;m doing here.</p>

<p>Here&rsquo;s all the reading I did about this (not much!):</p>

<ul>
<li>the <a href="https://en.wikipedia.org/wiki/Learning_styles">wikipedia article</a></li>
<li><a href="http://www.learningscientists.org/blog/2016/5/8/weekly-digest-9">how to talk about learning styles</a> from a learning science blog</li>
<li><a href="http://www.learningscientists.org/blog/2017/5/25-1">a blog post about alternative theories that might have better evidence</a></li>
<li><a href="https://www.nytimes.com/2010/09/07/health/views/07mind.html?_r=3&amp;hp=&amp;pagewanted=all">a new york times article</a> on study skills / learning styles</li>
<li>the abstract of this review of <a href="http://journals.sagepub.com/doi/abs/10.1111/j.1539-6053.2009.01038.x">learning styles research</a> which doesn&rsquo;t find evidence that students learn better with their preferred learning style</li>
<li><a href="https://prairieworldcomicsblog.wordpress.com/2017/05/04/legacy-comic-learning-styles/">a nice comic about learning styles</a> (possibly sourced from wikipedia?)</li>
</ul>

<h3 id="learning-preferences-still-matter">learning preferences still matter</h3>

<p>You could conclude from this that learning preferences don&rsquo;t matter at all, and you should just
teach any given concept in the best way for that <em>concept</em>. But!! I think learning preferences still
matter, at least for me. I don&rsquo;t teach in a classroom, I teach whoever feels like reading what I&rsquo;m
writing on the internet! And if people don&rsquo;t feel like learning the things I&rsquo;m teaching because of
the way they&rsquo;re presented, they won&rsquo;t!</p>

<p>For example &ndash; I don&rsquo;t watch videos to learn. (which is not to say that I&rsquo;m incapable of learning
from videos, just studies show I just don&rsquo;t watch them). So if someone is teaching a lot of cool
things I want to learn on YouTube, I won&rsquo;t watch them!</p>

<p>So right now I&rsquo;m reading statements like &ldquo;I&rsquo;m a visual learner&rdquo; as a preference worth paying
attention to :).</p>

<h3 id="when-comics-help-diagrams">when comics help: diagrams</h3>

<p>A lot of the systems I work with involve a lot of interacting systems. For example, Kubernetes is a
complicated system with many components. It took me <strong>months</strong> to understand how the components fit
together. Eventually I understood that the answer is this diagram:</p>

<div align="center">
<img src="https://jvns.ca/images/kube-components.png">
</div>

<p>The point of this diagram  is that all Kubernetes&rsquo; state lives in etcd, every other Kubernetes
component decides what to do by making requests to the API server, and none of the components
communicate with each other (or etcd) directly. Those are some of the most important things to know
about Kubernetes&rsquo; architecture, which is why they&rsquo;re in the diagram.</p>

<p>Not all diagrams are helpful though!! I&rsquo;m going to pick on someone else&rsquo;s kubernetes diagram (<a href="https://x-team.com/blog/introduction-kubernetes-architecture/">source</a>), which is totally accurate but which I personally find less helpful.</p>

<div align="center">
<img src="https://jvns.ca/images/sad-architecture-diagram.png">
</div>

<p>I think the way this diagram (and a lot of diagrams!) are drawn is:</p>

<ul>
<li>identify the components of the system</li>
<li>draw boxes for each component and arrows between components that communicate</li>
</ul>

<p>This approach works well in a lot of contexts, but personally I find it often leaves me feeling
confused about how the system works. Diagrams like this often don&rsquo;t highlight the most
important/unusual architectural decisions! The way I like to draw diagrams is, instead:</p>

<ul>
<li>figure out what the key architecture decision(s) are that folks need to understand to use it</li>
<li>draw a diagram that illustrates those architecture decisions (possibly including boxes and arrows)</li>
<li>leave out parts that aren&rsquo;t key to understanding the architecture</li>
</ul>

<p>So, for that kubernetes diagram, I left out pods and the role of the kubelet and where any of these
components are running (on a master? on a worker?), because even those those are very important,
they weren&rsquo;t my teaching goals for the diagram.</p>

<h3 id="when-comics-help-explaining-scenarios">when comics help: explaining scenarios</h3>

<p>Something I find really effective is to quickly explain a few important things about something
that&rsquo;s really complicated like &ldquo;how to run kubernetes&rdquo; or &ldquo;how distributed systems work&rdquo;.</p>

<p>Often when trying to explain a huge topic, people start with generalities (&ldquo;let me explain what a
linearizable system is!&ldquo;). I have another approach that I prefer, which I think of as the
&ldquo;scenes from&rdquo; approach, or &ldquo;get specific!&rdquo;. (which is the same as the best way to give a lightning
talk &ndash; explain one specific interesting thing instead of trying to give an overview).</p>

<p>The idea is to zoom into a common specific scenario that you&rsquo;ll run into in real life. For example,
a really common situation when using a linearizable distributed system is that it&rsquo;ll periodically
become unavailable due to a leader election. I didn&rsquo;t know that that was commmon when I started
working with distributed systems!! So just saying &ldquo;hey, here is a thing that happens in practice&rdquo;
can be useful.</p>

<p>Here are 2 example comics I&rsquo;ve done in this style:</p>

<div align="center">
<a href="https://jvns.ca/images/operating-kubernetes.png">
<img src="/images/operating-kubernetes.png">
</a>
<a href="https://jvns.ca/images/scenes-distributed.jpeg">
<img src="/images/scenes-distributed.jpeg">
</a>
</div>

<p>Comics are a really good fit for illustrating scenarios like this because often there&rsquo;s some kind of
interaction! (&ldquo;can&rsquo;t you see we&rsquo;re having a leader election??&rdquo;)</p>

<h3 id="when-comics-help-writing-a-short-structured-list">when comics help: writing a short structured list</h3>

<p>I&rsquo;ve gotten really into using comics to explain command line tools recently (eg the <a href="https://gumroad.com/l/bite-size-command-line">bite size
command line zine</a>).</p>

<p>One of my favorite comics from that zine is the grep comic. The reason I love this comic is that it
literally includes every grep command line argument I&rsquo;ve ever used, as well as a few I haven&rsquo;t but
that I think seem useful. And I&rsquo;ve been using grep for 15 years! I think it&rsquo;s amazing that it&rsquo;s
possible to usefully summarize grep in such a small space.</p>

<div align="center">
<a href="https://jvns.ca/images/grep.jpeg">
<img src="/images/grep.jpeg">
</a>
</div>

<p>I think it&rsquo;s important in this case that the list be <strong>structured</strong> &ndash; all of the things in this
list are the same type (&ldquo;grep command line arguments&rdquo;). I think comics work well here just because
your can make the list colourful / fun / visually appealing.</p>

<h3 id="when-comics-help-explaining-a-simple-idea">when comics help: explaining a simple idea</h3>

<p>I spent most of <a href="https://gum.co/bite-size-linux">bite size linux</a> explaining various Linux ideas.
Here&rsquo;s a pipes comic that I was pretty happy with! I think this is a little bit like &ldquo;draw a
diagram&rdquo; &ndash; there are a few fundamental concepts about pipes that I think are useful to
understand, specifically that pipes have a buffer and that writes to a pipe block if the buffer is
full.</p>

<div align="center">
<a href="https://jvns.ca/images/pipes.jpeg">
<img src="/images/pipes.jpeg">
</a>
</div>

<p>I think comics work well for this just because you can mix text and small diagrams really easily,
and with something like pipes the tiny diagrams help a lot.</p>

<h3 id="that-s-all-for-now">that&rsquo;s all for now</h3>

<p>I don&rsquo;t think this is the &lsquo;right&rsquo; categorization of &ldquo;when comics work for teaching&rdquo; yet. But I think
this is a somewhat accurate description of how I&rsquo;ve been using them so far. If you have other
thoughts about when comics work (and when they don&rsquo;t!) I&rsquo;d love to hear them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New zine: Oh shit, git!]]></title>
    <link href="https://jvns.ca/blog/2018/10/27/new-zine--oh-shit--git-/"/>
    <updated>2018-10-27T23:21:23+00:00</updated>
    <id>https://jvns.ca/blog/2018/10/27/new-zine--oh-shit--git-/</id>
    <content type="html"><![CDATA[

<p>Hello! Last week <a href="https://twitter.com/ksylor">Katie Sylor-Miller</a> and I released a new zine called
&ldquo;Oh shit, Git!&rdquo;. It has a bunch of common git mistakes and how to fix them! I learned a surprising
number of things by working on it (like what <code>HEAD@{2}</code> means, and that you can do
<code>my-branch-name@{2}</code> to see what a branch was previously pointing to, and more ways to use <code>git diff</code>)</p>

<p>You can get it for $10 at <a href="https://gum.co/oh-shit-git">Oh shit, git!</a> or a swear-free version at <a href="https://gum.co/dangit-git">Dangit, git!</a>. Here&rsquo;s the cover and table of contents: (you can click on the table of contents to make it bigger).</p>

<div align="center">
<a href="https://gum.co/oh-shit-git"><img width="250px" src="https://jvns.ca/images/ohshit-cover-bw.png"></a>
<a href="https://jvns.ca/images/ohshit-toc.png"><img width="250px" src="https://jvns.ca/images/ohshit-toc.png"></a>
</div>

<h3 id="why-this-zine">why this zine?</h3>

<p>I&rsquo;ve thought for a couple of years that it might be fun to write a git zine, but I had NO IDEA how
to do it. I was in this weird place with git where, even though I know that git is really confusing,
I felt like I&rsquo;d forgotten what it was like to be confused/scared by Git. And I write most things
from a place of &ldquo;I was super confused by this thing just recently, let me explain it!!&rdquo;.</p>

<p>But then!! I saw that Katie Sylor-Miller had made this delightful website called <a href="https://ohshitgit.com/">oh shit,
git!</a> explaining how to get out of common git mishaps. I thought this was
really brilliant because a lot of the things on that site (&ldquo;oh shit, i committed to the wrong
branch!&ldquo;) are things I remember being really scary when I was less comfortable with git!</p>

<p>So I thought, maybe this could be useful for folks to have as a paper reference! Maybe we could make
a zine out of it! So I emailed her and she agreed to work with me. And now here it is! :D. Very
excited to have done a first collaboration.</p>

<h3 id="what-s-new-in-the-oh-shit-git-zine">what&rsquo;s new in the oh shit, git! zine?</h3>

<p>The zine isn&rsquo;t the same as the website &ndash; we decided we wanted to add some fundamental information
about how Git works (what&rsquo;s a commit?), because to really work with Git effectively you need to
understand at least a little bit about how commits and branches work! And some of the explanations
are improved. Probably about 50% of the material in the zine is from the website and 50% is new.</p>

<h3 id="a-couple-of-example-pages">a couple of example pages</h3>

<p>Here are a couple of example pages, to give you an idea of what&rsquo;s in the zine:</p>

<p><img width="100%" src="https://jvns.ca/images/ohshit-commit.png"></p>

<p>and a page on <code>git reflog</code>:</p>

<p><img width="100%" src="https://jvns.ca/images/ohshit-reflog.png"></p>

<h3 id="that-might-be-it-for-zines-in-2018">that might be it for zines in 2018!</h3>

<p>I&rsquo;m not sure, but I don&rsquo;t think I&rsquo;ll write any more zines for a couple of months. So far there have
been 5 (!!!) this year &ndash; perf, bite size linux, bite size command line, help! I have a manager!,
and this one!. I&rsquo;m really happy with that number and very grateful to everyone who&rsquo;s supported them.</p>

<p>ideas I have for zines right now include:</p>

<ul>
<li>kubernetes</li>
<li>how to do statistics using programming</li>
<li>&lsquo;bite size networking&rsquo;, on the 10 billion different command line tools used for different networking things</li>
<li>&lsquo;bite size linux v2&rsquo;, about more core linux concepts that i didn&rsquo;t get to in &lsquo;bite size linux&rsquo;</li>
</ul>

<p>There&rsquo;s a definite tradeoff between writing zines and blogging, and writing blog posts is really
fun. Maybe I&rsquo;ll try going back in that direction for a little.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Envoy basics]]></title>
    <link href="https://jvns.ca/blog/2018/10/27/envoy-basics/"/>
    <updated>2018-10-27T08:40:25+00:00</updated>
    <id>https://jvns.ca/blog/2018/10/27/envoy-basics/</id>
    <content type="html"><![CDATA[

<p><a href="https://www.envoyproxy.io/">Envoy</a> is a newish network proxy/webserver in the same universe as HAProxy and nginx. When I first
learned about it around last fall, I was pretty confused by it.</p>

<p>There are a few kinds of questions one might have about any piece of software:</p>

<ul>
<li>how does do you use it?</li>
<li>why is it useful?</li>
<li>how does it work internally?</li>
</ul>

<p>I&rsquo;m going to spend most of my time in this post on &ldquo;how do you use it?&rdquo;, because I found a lot of
the basics about how to configure Envoy very confusing when I started. I&rsquo;ll explain some of the
Envoy jargon that I was initially confused by (what&rsquo;s an SDS? XDS? CDS? EDS?  ADS? filter? cluster?
listener? help!)</p>

<p>There will also be a little bit of &ldquo;why is it useful?&rdquo; and nothing at all about the internals.</p>

<h3 id="what-s-envoy">What&rsquo;s Envoy?</h3>

<p>Envoy is a network proxy. You compile it, you put it on the server that you want the, you tell it
which configuration file to use it, and away you go!</p>

<p>Here&rsquo;s probably the simplest possible example of using Envoy. The configuration file is <a href="https://gist.githubusercontent.com/jvns/340e4d20c83b16576c02efc08487ed54/raw/1ddc3038ed11c31ddc70be038fd23dddfa13f5d3/envoy_config.json">a gist</a>.
This example starts a webserver on port 7777 that proxies to another HTTP server on port 8000.</p>

<p>If you have Docker, you can try it now &ndash; just download the configuration, start the Envoy docker
image, and away you go!</p>

<pre><code>python -mSimpleHTTPServer &amp; # Start a HTTP server on port 8000
wget https://gist.githubusercontent.com/jvns/340e4d20c83b16576c02efc08487ed54/raw/1ddc3038ed11c31ddc70be038fd23dddfa13f5d3/envoy_config.json
docker run --rm --net host -v=$PWD:/config envoyproxy/envoy /usr/local/bin/envoy -c /config/envoy_config.json
</code></pre>

<p>This will start an Envoy HTTP server, and then you can make a request to Envoy! Just <code>curl
localhost:7777</code> and it&rsquo;ll proxy the request to <code>localhost:8000</code>.</p>

<h3 id="envoy-basic-concepts-clusters-listeners-routes-and-filters">Envoy basic concepts: clusters, listeners, routes, and filters</h3>

<p>This small tiny
<a href="https://gist.githubusercontent.com/jvns/340e4d20c83b16576c02efc08487ed54/raw/1ddc3038ed11c31ddc70be038fd23dddfa13f5d3/envoy_config.json">envoy_config.json</a>
we just ran contains all the basic Envoy concepts!</p>

<p>First, there&rsquo;s a <strong>listener</strong>. This tells Envoy to bind to a port, in this case 7777:</p>

<pre><code>&quot;listeners&quot;: [{
  &quot;address&quot;: { 
     &quot;socket_address&quot;: { &quot;address&quot;: &quot;127.0.0.1&quot;, &quot;port_value&quot;: 7777 } 
</code></pre>

<p>Next up, the listener has <strong>filters</strong>. Filters tell the listener what to do with the requests it receives,
and you give Envoy an array of filters. If you&rsquo;re doing something complicated typically you&rsquo;ll apply
several filters to every requests coming in.</p>

<p>There are a few different kinds of filters (<a href="https://www.envoyproxy.io/docs/envoy/v1.8.0/api-v2/api/v2/listener/listener.proto#listener-filter">see list of TCP filters</a>), but the most important filter is probably the <code>envoy.http_connection_manager</code> filter, which is used for proxying HTTP requests. The HTTP connection manager has a further list of HTTP filters that it applies (<a href="https://www.envoyproxy.io/docs/envoy/v1.8.0/api-v2/config/filter/network/http_connection_manager/v2/http_connection_manager.proto#envoy-api-msg-config-filter-network-http-connection-manager-v2-httpfilter">see list of HTTP filters</a>). The most important of those is the <code>envoy.router</code> filter which routes requests to the right backend.</p>

<p>In our example, here&rsquo;s how we&rsquo;ve configured our filters. There&rsquo;s one TCP filter
(<code>envoy.http_connection_manager</code>) which uses 1 HTTP filter (<code>envoy.router</code>)</p>

<pre><code>&quot;filters&quot;: [
 {
   &quot;name&quot;: &quot;envoy.http_connection_manager&quot;,
   &quot;config&quot;: {
     &quot;stat_prefix&quot;: &quot;ingress_http&quot;,
     &quot;http_filters&quot;: [{ &quot;name&quot;: &quot;envoy.router&quot;, &quot;config&quot;: {} }],
....
</code></pre>

<p>Next, let&rsquo;s talk about <strong>routes</strong>. You&rsquo;ll notice that so far we haven&rsquo;t explained to the
<code>envoy.router</code> filter what to <strong>do</strong> with the requests it receives. Where should it proxy them? What
paths should it match? In our case, the answer to that question is going to be &ldquo;proxy all requests
to localhost:8000&rdquo;.</p>

<p>The <code>envoy.router</code> filter is configured with an array of routes. Here&rsquo;s how they&rsquo;re configured in
our test configuration. In our case there&rsquo;s just one route.</p>

<pre><code>&quot;route_config&quot;: {
  &quot;virtual_hosts&quot;: [
    {
      &quot;name&quot;: &quot;blah&quot;,
      &quot;domains&quot;: &quot;*&quot;,
      &quot;routes&quot;: [
        {
          &quot;match&quot;: { &quot;prefix&quot;: &quot;/&quot; },
          &quot;route&quot;: { &quot;cluster&quot;: &quot;banana&quot; }
</code></pre>

<p>This gives a list of domains to match (these are matched against the requests Host header).  If we
changed <code>&quot;domains&quot;: &quot;*&quot;</code> to <code>&quot;domains&quot;: &quot;my.cool.service&quot;</code>, then we&rsquo;d need to pass the header <code>Host:
my.cool.service</code> to get a response.</p>

<p>If you&rsquo;re paying attention to the ongoing saga of this configuration, you&rsquo;ll notice that the port
<code>8000</code> hasn&rsquo;t been mentioned anywhere. There&rsquo;s just <code>&quot;cluster&quot;: &quot;banana&quot;</code>. What&rsquo;s a cluster?</p>

<p>Well, a <strong>cluster</strong> is a collection of address (IP address / port) that are the backend for a
service. For example, if you have 8 machines running a HTTP service, then you might have 8 hosts in
your cluster. Every service needs its own cluster. This example cluster is really simple: it&rsquo;s just
a single IP/port, running on localhost.</p>

<pre><code>  &quot;clusters&quot;:[
    {
      &quot;name&quot;: &quot;banana&quot;,
      &quot;type&quot;: &quot;STRICT_DNS&quot;,
      &quot;connect_timeout&quot;: &quot;1s&quot;,
      &quot;hosts&quot;: [
        { &quot;socket_address&quot;: { &quot;address&quot;: &quot;127.0.0.1&quot;, &quot;port_value&quot;: 8000 } }
      ]
    }
  ]
</code></pre>

<h3 id="tips-for-writing-envoy-configuration-by-hand">tips for writing Envoy configuration by hand</h3>

<p>I find writing Envoy configurations from scratch pretty time consuming &ndash; there are some examples in
the Envoy repository (<a href="https://github.com/envoyproxy/envoy">https://github.com/envoyproxy/envoy</a>), but even after using Envoy for a year
this basic configuration actually took me 45 minutes to get right. Here are a few tips:</p>

<ul>
<li>Envoy has 2 different APIs: the v1 and the v2 API. Many newer features are only available in the
v2 API, and I find its documentation a little easier to navigate because it&rsquo;s automatically
generated from protocol buffers. (eg the Cluster docs are generated from <a href="https://github.com/envoyproxy/envoy/blob/master/api/envoy/api/v2/cds.proto">cds.proto</a>)</li>
<li>A few good starting points in the Envoy API docs: <a href="https://www.envoyproxy.io/docs/envoy/v1.8.0/api-v2/api/v2/lds.proto#envoy-api-msg-listener">Listener</a>, <a href="https://www.envoyproxy.io/docs/envoy/v1.8.0/api-v2/api/v2/cds.proto#cluster">Cluster</a>, <a href="https://www.envoyproxy.io/docs/envoy/v1.8.0/api-v2/api/v2/listener/listener.proto#envoy-api-msg-listener-filter">Filter</a>,  <a href="https://www.envoyproxy.io/docs/envoy/v1.8.0/api-v2/api/v2/route/route.proto#envoy-api-msg-route-virtualhost">Virtual Host</a>. To get all the information you need you need to click a lot (for example to see how to configure the cluster for a route you need to start at &ldquo;Virtual Host&rdquo; and click route_config -&gt; virtual_hosts -&gt; routes -&gt; route -&gt; cluster), but it works.</li>
<li>The <a href="https://www.envoyproxy.io/docs/envoy/v1.8.0/intro/arch_overview/arch_overview">architecture overview docs</a> are useful and give an overall explanation of how some Envoy things are configured.</li>
<li>You can use either json or yaml to configure Envoy. Above I&rsquo;ve used JSON.</li>
</ul>

<h3 id="you-can-configure-envoy-with-a-server">You can configure Envoy with a server</h3>

<p>Even though we started with a configuration file on disk, one thing that makes Envoy really
different from HAProxy or nginx is that Envoy often <strong>isn&rsquo;t configured with a configuration file</strong>.
Instead, you can configure Envoy with one or several configuration <strong>servers</strong> which dynamically
change your configuration.</p>

<p>To get an idea of why this might be useful: imagine that you&rsquo;re using Envoy to load balance requests
to 50ish backend servers, which are EC2 instances that you periodically rotate out. So
<a href="http://your-website.com">http://your-website.com</a> requests go to Envoy, and get routed to an Envoy <em>cluster</em>, which needs to
be a list of the 50 IP addresses and ports of those servers.</p>

<p>But what if those servers change over time? Maybe you&rsquo;re launching new ones or they&rsquo;re getting
terminated. You could handle this by periodically changing the Envoy configuration file and
restarting Envoy. Or!! You could set up a &ldquo;cluster discovery service&rdquo; (or &ldquo;CDS&rdquo;), which for example
could query the AWS API and return all the IPs of your backend servers to Envoy.</p>

<p>I&rsquo;m not going to get into the details of how to configure a discovery service, but basically it
looks like this (from <a href="https://github.com/envoyproxy/envoy/blob/master/configs/envoy_service_to_service_v2.template.yaml">this template</a>). You tell it how often to refresh and what the address of the server is.</p>

<pre><code>dynamic_resources:
  cds_config:
    api_config_source:
      cluster_names:
      - cds_cluster
      refresh_delay: 30s
...
  - name: cds_cluster
    connect_timeout: 0.25s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    hosts:
    - socket_address:
        protocol: TCP
        address: cds.yourcompany.net
        port_value: 80
</code></pre>

<h3 id="4-kinds-of-envoy-discovery-services">4 kinds of Envoy discovery services</h3>

<p>There are 4 kinds of resources you can set up discovery services for Envoy &ndash; routes (&ldquo;what cluster
should requests with this HTTP header go to&rdquo;), clusters (&ldquo;what backends does this service have?&rdquo;),
listener (the filters for a port), and endpoints. These are called RDS, CDS, LDS, and EDS
respectively. <a href="https://github.com/envoyproxy/data-plane-api/blob/master/XDS_PROTOCOL.md">XDS</a> is the
overall protocol.</p>

<p>The easiest way to write a discovery service from scratch is probably in Go using the
<a href="https://github.com/envoyproxy/go-control-plane">go-control-plane</a> library.</p>

<h3 id="some-envoy-discovery-services">some Envoy discovery services</h3>

<p>It&rsquo;s definitely possible to write Envoy configuration services from scratch, but there are some
other open source projects that implement Envoy discovery services. Here are the ones I know about,
though I&rsquo;m sure there are more:</p>

<ul>
<li>There&rsquo;s an open source Envoy discovery service called <a href="https://github.com/turbinelabs/rotor">rotor</a> which looks interesting. The company that built it just <a href="https://blog.turbinelabs.io/turbine-labs-is-shutting-down-and-our-team-is-joining-slack-2ad41554920c">shut down</a> a couple weeks ago.<br /></li>
<li><a href="https://istio.io/">Istio</a> (as far as I understand it) is  basically an Envoy discovery service
that uses information from the Kubernetes API (eg the services in your cluster) to configure Envoy
clusters/routes. It has its own configuration language.</li>
<li>consul might be adding support for Envoy (see <a href="https://www.hashicorp.com/blog/consul-1-2-service-mesh">this blog post</a>), though I don&rsquo;t fully understand
the status there</li>
</ul>

<h3 id="what-s-a-service-mesh">what&rsquo;s a service mesh?</h3>

<p>Another term that I hear a lot is &ldquo;service mesh&rdquo;. Basically a &ldquo;service mesh&rdquo; is where you install
Envoy on the same machine as every one of your applications, and proxy all your network requests
through Envoy.</p>

<p>Basically it gives you more easily control how a bunch of different applications (maybe written in
different programming languages) communicate with each other.</p>

<h3 id="why-is-envoy-interesting">why is Envoy interesting?</h3>

<p>I think these discovery services are really the exciting thing about Envoy. If all of your network
traffic is proxied through Envoy and you control all Envoy configuration from a central server, then
you can potentially:</p>

<ul>
<li>use <a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/circuit_breaking">circuit breaking</a></li>
<li>route requests to <a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/load_balancing#zone-aware-routing">only close instances</a></li>
<li>encrypt network traffic end-to-end</li>
<li>run controlled code rollouts (want to send only 20% of traffic to the new server you spun up? okay!)</li>
</ul>

<p>all without having to change any application code anywhere. Basically it&rsquo;s a very powerful/flexible
decentralized load balancer.</p>

<p>Obviously setting up a bunch of discovery services and operating them and using them to configure
your internal network infrastructure in complicated ways is a lot more work than just &ldquo;write an
nginx configuration file and leave it alone&rdquo;, and it&rsquo;s probably more complexity than is appropriate
for most people. I&rsquo;m not going to venture into telling you who should or should not use Envoy, but
my experience has been that, like Kubernetes, it&rsquo;s both very powerful and very complicated.</p>

<h3 id="other-exciting-things-about-envoy-timeout-headers-and-metrics">other exciting things about Envoy: timeout headers and metrics</h3>

<p>One of the things I really like about Envoy is that you can pass it a HTTP header to tell it how to
retry/timeout your requests!! This is amazing because implementing timeout / retry logic correctly
works differently in every programming language and people get it wrong ALL THE TIME. So being able
to just pass a header is great.</p>

<p>The timeout &amp; retry headers are documented <a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/http_filters/router_filter#http-headers-consumed">here</a>, and here are my favourites:</p>

<ul>
<li><code>x-envoy-max-retries</code>: how many times to retry</li>
<li><code>x-envoy-retry-on</code>: which failures to retry (eg <code>5xx</code> or <code>connect-failure</code>)</li>
<li><code>x-envoy-upstream-rq-timeout-ms</code>: total timeout</li>
<li><code>x-envoy-upstream-rq-per-try-timeout-ms</code>: timeout per retry</li>
</ul>

<h3 id="that-s-all-for-now">that&rsquo;s all for now</h3>

<p>I have a lot of thoughts about Envoy (too many to write in one blog post!), so maybe I&rsquo;ll say more
later!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's a senior engineer's job?]]></title>
    <link href="https://jvns.ca/blog/senior-engineer/"/>
    <updated>2018-10-06T23:16:40+00:00</updated>
    <id>https://jvns.ca/blog/senior-engineer/</id>
    <content type="html"><![CDATA[

<p>There&rsquo;s this great post by John Allspaw called &ldquo;<a href="https://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/">On being a senior engineer</a>&rdquo;. I originally read it
4ish years ago when I started my current job and it really influenced how I thought about the
direction I wanted to go in.</p>

<p>Rereading it 4 years later, one thing that&rsquo;s really interesting to me about that blog post is that
it&rsquo;s explaining that empathy / helping your team succeed is an important part of being a senior
engineer. Which of course is true!</p>

<p>But from where I stand today, most (all?) of the senior engineers I know take on a significant
amount of helping-other-people work in addition to their individual programming work. The challenge
I see me/my coworkers struggling with today isn&rsquo;t so much &ldquo;what?? I have to TALK TO PEOPLE??
UNBELIEVABLE.&rdquo; and more &ldquo;wait, how do I balance all of this leadership work with my individual
contributions / programming work in a way that&rsquo;s sustainable for me? How much of what kind of work
should I be doing?&ldquo;. So instead of talking about the <strong>attributes</strong> that a senior engineer has from
Allspaw&rsquo;s post (which I totally agree with), instead I want to talk here about the <strong>work</strong> that a
senior engineer does.</p>

<h3 id="what-this-post-is-describing">what this post is describing</h3>

<p>&ldquo;what a senior engineer does&rdquo; is a huge topic and this is a small post. things to keep in mind
when reading:</p>

<ul>
<li>this is just one possible description of what a &ldquo;senior engineer&rdquo; could do. There are a lot of ways
to work and this isn&rsquo;t intended to be definitive.</li>
<li>I have basically only worked at one company and this is just about my experiences so my
perspective is obviously pretty limited</li>
<li>There are obviously a lot of levels of &ldquo;senior engineer&rdquo; out there. This is aimed somewhere around
P3/P4 in the <a href="https://twitter.com/Gankro/status/1046438955439271936">Mozilla ladder</a> (senior
engineer / staff engineer), maybe a bit more on the &ldquo;staff&rdquo; side.</li>
</ul>

<h3 id="what-s-part-of-the-job">What&rsquo;s part of the job</h3>

<p>These are things that I view as being mostly a senior engineer&rsquo;s job and less a manager&rsquo;s job.
(though managers definitely do some of this too, especially creating new projects / relating
projects to business priorities)</p>

<p>The thing that holds all this together is that almost all of this work is fundamentally
<strong>technical</strong>: helping someone get unstuck on a tricky project is obviously a human interaction, but
the issues we&rsquo;ll be working on together will generally be computer issues! (&ldquo;maybe if we simplify
this design we can be done with this way sooner!&ldquo;)</p>

<ul>
<li><strong>Write code.</strong> (obviously)</li>
<li><strong>Do code reviews.</strong> (obviously)</li>
<li><strong>Write and review design docs.</strong> As with other review tasks, I think of &ldquo;review design docs&rdquo;
as &ldquo;get a second set of eyes on it, which will probably help improve the design&rdquo;.</li>
<li><strong>Help team members when they&rsquo;re stuck.</strong> Sometimes folks get stuck on a project, and it&rsquo;s important
to work to support them! I think of this less as &ldquo;parachute from the sky and deliver your magical
knowledge to people&rdquo; and more as &ldquo;work together to understand the problem they&rsquo;re trying to solve
and see if 2 brains are better than 1&rdquo; :). This also means working with someone to solve the
problem instead of solving the problem for them.</li>
<li><strong>Hold folks to a high quality standard.</strong> &ldquo;Quality&rdquo; will mean different things for different folks
(for my team it means reliability/security/usability). Usually when someone makes a decision that
seems off to me, it&rsquo;s either because I know something that they don&rsquo;t or they know something I
don&rsquo;t! So instead of telling someone &ldquo;hey you did this wrong you should do X instead&rdquo;, I try to
just give them some extra information that they didn&rsquo;t have and often that sorts it out. And
pretty often it turns out that I was missing something and actually their decision was totally
reasonable! In the past I&rsquo;ve very occasionally seen senior engineers try to enforce quality
standards by repeating their opinions more and more loudly because they think their opinions are
Right and I haven&rsquo;t personally found that helpful.</li>
<li><strong>Create new projects.</strong> A software engineering team isn&rsquo;t a zero-sum place! The best engineers I know
don&rsquo;t hoard the most interesting work for themselves, they create new interesting/important work
and create space for folks to do that work. For example, someone on my team spearheaded a rewrite
of our deployment system which was super successful and now there&rsquo;s a whole team working on new
features that are way easier to build post-rewrite!</li>
<li><strong>Plan your projects&rsquo; work.</strong> This is about writing down / communicating the roadmap for projects
you&rsquo;re working on and making sure that folks understand the plan.</li>
<li><strong>Proactively communicate project risks.</strong> It&rsquo;s really important to recognize when something you&rsquo;re
working on isn&rsquo;t going well, communicate it to other engineers/managers, and figure out what to
do.</li>
<li><strong>Communicate successes!</strong></li>
<li><strong>Do side projects that benefit the team/company</strong>. I see a lot of senior engineers occasionally
doing small high leverage projects (like building dev tooling / helping set policies) that end up
helping a LOT of people get their work done a lot better.</li>
<li><strong>Be aware of how projects relate to business priorities.</strong></li>
<li><strong>Decide when to stop doing a project</strong>. Figuring out when to stop / not start work on something
is surprisingly hard :)</li>
</ul>

<p>I put &ldquo;write code&rdquo; first because I find it surprisingly easy to accidentally let that take a back
seat :)</p>

<p>One thing I left out is &ldquo;make estimates&rdquo;. Making estimates is something I&rsquo;m still not very good at
and that I don&rsquo;t think I see very much of (?), but I think it could be worth spending more time on
some day.</p>

<p>This list feels like a lot and like if you tried to do all those things all the time it would
consume all available brain space. I think in general it probably makes sense to carve out a subset
and decide &ldquo;right now I&rsquo;m going to focus on X Y Z, I think my brain will explode if I try to do A B
C as well&rdquo;.</p>

<h3 id="what-s-not-part-of-the-job">What&rsquo;s not part of the job</h3>

<p>This section is a bit tricky. I&rsquo;m not saying that these aren&rsquo;t a senior engineer&rsquo;s job in the sense
of &ldquo;I won&rsquo;t help create a good work environment on my team, how dare you suggest that&rsquo;s part of my
job!!&ldquo;. Most senior engineers I know have spent a huge amount of time thinking about these issues
and work on them quite a bit.</p>

<p>The reason I think it&rsquo;s useful to create a boundary here is that everyone I work with has a really
strong sense of ownership/responsibility to the team / company (&ldquo;does it need to be done? well,
sure, I can do that!!&ldquo;) and I think it&rsquo;s easy for that willingness to do whatever needs to happen to
turn into folks getting overwhelmed/overworked/unable to make the kinds of technical contributions
that are actually their core job. So if you can create some boundaries around your role it&rsquo;s easier
to decide what sorts of work to ask for help with when things are hectic. The actual boundary you
draw course depends on you / your team :)</p>

<p>Most of these are a manager&rsquo;s job. Caveats: managers do a lot more than the things listed here (for
instance &ldquo;create new projects&rdquo;), and at some companies some of these things might actually be the
job of a senior engineer (eg sprint management).</p>

<ul>
<li>Make sure every team member&rsquo;s work is recognized</li>
<li>Make sure work is allocated in a fair way</li>
<li>Make sure folks are working well together</li>
<li>Build team cohesion</li>
<li>Have 1:1s with everyone on the team</li>
<li>Train new managers / help them understand what&rsquo;s expected of them (though I think senior ICs often
actually do end up picking some of this up?)</li>
<li>Do project management for projects you&rsquo;re not working on (where I work, that&rsquo;s the job of whatever
engineer is leading that project)</li>
<li>Be a product manager</li>
<li>Do sprint management / organize everyone&rsquo;s work into milestones / run weekly team meetings</li>
</ul>

<h3 id="explicitly-setting-boundaries-is-useful">Explicitly setting boundaries is useful</h3>

<p>I ran into an interesting situation recently where I was talking to a manager about which things
were and weren&rsquo;t part of my job as an engineer, and we realized that we had very different
expectations! We talked about it and I think it&rsquo;s sorted out now, but it made me realize that it&rsquo;s
very important to agree about what the expectations are :)</p>

<p>When I started out as an engineer, my job was pretty straightforward &ndash; I wrote code, tried to come
up with projects that made sense, and that was fine. My manager always had a clear sense of what my
job was and it wasn&rsquo;t too complicated. Now that&rsquo;s less true! So now I view it as being more my
responsibility to define a job that:</p>

<ul>
<li>I can do / is sustainable for me</li>
<li>I want to do / that&rsquo;s overall enjoyable &amp; in line with my personal goals</li>
<li>is valuable to the team/organization</li>
</ul>

<p>And the exact shape of that job will be different for different people (not everyone has the same
interests &amp; strengths, for example I am actually not amazing at code review yet!), which I think
makes it even more important to negotiate it / do expectation setting.</p>

<h3 id="don-t-agree-to-a-job-you-can-t-do-don-t-want">Don&rsquo;t agree to a job you can&rsquo;t do / don&rsquo;t want</h3>

<p>I think pushing back if I&rsquo;m asked to do work that I can&rsquo;t do or that I think will make me unhappy
long term is important! I find it kind of tempting to agree to take on a lot of work that I know I
don&rsquo;t really enjoy (&ldquo;oh, it&rsquo;s good for the team!&rdquo;, &ldquo;well <em>someone</em> needs to do it!&ldquo;). But, while I
obviously sometimes take on tasks just because they need to be done, I think it&rsquo;s actually really
important for team health for folks to be overall doing jobs that are sustainable for them and that
they overall enjoy.</p>

<p>So I&rsquo;ll take on small tasks that just need to get done, but I think it&rsquo;s important for me not to say
&ldquo;oh sure, I&rsquo;ll spend a large fraction of my time doing this thing that I&rsquo;m bad at and that I
dislike, no problem&rdquo; :). And if &ldquo;someone&rdquo; needs to do it, maybe that just means we need to
hire/train someone new to fill the gap :)</p>

<h3 id="i-still-have-a-lot-to-learn">I still have a lot to learn!</h3>

<p>While I feel like I&rsquo;m starting to understand what this &ldquo;senior engineer&rdquo; thing is all about (7 years
into my career so far), I still feel like I have a LOT to learn about it and I&rsquo;d be interested to
hear how other people define the boundaries of their job!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some possible career goals]]></title>
    <link href="https://jvns.ca/blog/2018/09/30/some-possible-career-goals/"/>
    <updated>2018-09-30T23:55:07+00:00</updated>
    <id>https://jvns.ca/blog/2018/09/30/some-possible-career-goals/</id>
    <content type="html"><![CDATA[

<p>I was thinking about career goals a person could have (as a software developer) this morning, and it
occurred to me that there are a lot of possible goals! So I <a href="https://twitter.com/b0rk/status/1046456874856583173">asked folks on Twitter</a> what some possible goals were and got a lot of answers.</p>

<p>This list intentionally has big goals and small goals, and goals in very different directions. It
definitely does not attempt to tell you what sorts of goals you <em>should</em> have. I&rsquo;m not sure yet
whether it&rsquo;s helpful or not but here it is just in case :)</p>

<p>I&rsquo;ve separated them into some very rough categories. Also I feel like there&rsquo;s a lot missing from this list still, and I&rsquo;d be happy to hear what&rsquo;s missing <a href="https://twitter.com/b0rk/status/1046626447379509250">on twitter</a>.</p>

<h3 id="technical-goals">technical goals</h3>

<ul>
<li>become an expert in a domain/technology/language (databases, machine learning, Python)</li>
<li>get to a point where you can drop into new situations or technologies and quickly start making a
big impact</li>
<li>do research-y work / something that&rsquo;s never been done before</li>
<li>satisfy your intellectual curiosity about something</li>
<li>get comfortable with really big codebases</li>
<li>work on a system that has X scale/complexity (millions of requests per second, etc)</li>
<li>scale a project way past its original design goals</li>
<li>do work that saves the company a large amount of money</li>
<li>be an incident commander for an incident and run the postmortem</li>
<li>make an contribution to an open source project</li>
<li>get better at some skill (testing / debugging / a programming language / machine learning)</li>
<li>become a core maintainer for an important OSS project</li>
<li>build an important system from scratch</li>
<li>be involved with a product/project from start to end (over several years)</li>
<li>understand how complex systems fail (and how to make them not fail)</li>
<li>be able to build prototypes quickly for new ideas</li>
</ul>

<h3 id="job-goals">job goals</h3>

<ul>
<li>get your first job</li>
<li>pass a programming interview</li>
<li>get your &ldquo;dream job&rdquo; (if you have one)</li>
<li>work at a prestigious company</li>
<li>work at a very small company</li>
<li>work at a company for a really long time (to see how things play out over time)</li>
<li>work at lots of different companies (to get lots of different perspectives)</li>
<li>get a raise</li>
<li>become a manager</li>
<li>get to a specific title (&ldquo;architect&rdquo;, &ldquo;senior engineer&rdquo;, &ldquo;CTO&rdquo;, &ldquo;developer evangelist&rdquo;, &ldquo;principal engineer&rdquo;)</li>
<li>work at a nonprofit / company where you believe in the mission</li>
<li>work on a product that your family / friends would recognize</li>
<li>work in many different fields</li>
<li>work in a specific field you care about (transit, security, government)</li>
<li>get paid to work on a specific project (eg the linux kernel)</li>
<li>as an academic, have stable funding to work towards your research interests</li>
<li>become a baker / work on something else entirely :)</li>
</ul>

<h3 id="entrepreneurship-goals">entrepreneurship goals</h3>

<p>This category is obviously pretty big (there are lots of start-your-own-business related goals!) and
I&rsquo;m not going to try to be exhaustive.</p>

<ul>
<li>start freelancing</li>
<li>start a consulting company</li>
<li>make your first sale of software you wrote</li>
<li>get VC funding / start a startup</li>
<li>get to X milestone with a company you started</li>
</ul>

<h3 id="product-goals">product goals</h3>

<p>I think the difference between &ldquo;technical goals&rdquo; and &ldquo;product goals&rdquo; is pretty interesting &ndash; this
area is more about the impact that your programs have on the people who use them than what those
programs consist of technically.</p>

<ul>
<li>do your work in a specific <em>way</em> that you care about (eg make websites that are accessible)</li>
<li>build tools for people who you work with directly (this can be so fun!!)</li>
<li>make a big difference to a system you care about (eg &ldquo;internet security&rdquo;)</li>
<li>do work that helps solve an important problem (climate change, etc)</li>
<li>work in a team/project whose product affects more than a million people</li>
<li>work on a product that people love</li>
<li>build developer tools</li>
</ul>

<h3 id="people-leadership-goals">people/leadership goals</h3>

<ul>
<li>help new people on your team get started</li>
<li>help someone get a job/opportunity that they wouldn&rsquo;t have had otherwise</li>
<li>mentor someone and see them get better over time</li>
<li>&ldquo;be a blessing to others you wished someone else was to you&rdquo;</li>
<li>be a union organizer / promote fairness at work</li>
<li>build a more inclusive team</li>
<li>build a community that matters to people (via a meetup group or otherwise)</li>
</ul>

<h3 id="communication-community-goals">communication / community goals</h3>

<ul>
<li>write a technical book</li>
<li>give a talk (meetup, conference talk, keynote)</li>
<li>give a talk at a really prestigious conference / in front of people you respect</li>
<li>give a workshop on something you know really well</li>
<li>start a conference</li>
<li>write a popular blog / an article that gets upvoted a lot</li>
<li>teach a class (eg at a high school / college)</li>
<li>change the way folks in the industry think about something (eg blameless postmortems, fairness in
machine learning)</li>
</ul>

<h3 id="work-environment-goals">work environment goals</h3>

<p>A lot of people talked about the flexibility to choose their own work environment / hours (eg &ldquo;work
remotely&rdquo;).</p>

<ul>
<li>get flexible hours</li>
<li>work remotely</li>
<li>get your own office</li>
<li>work in a place where you feel accepted/included</li>
<li>work with people who share your values (this involves knowing what your values are! :) )</li>
<li>work with people who are very experienced / skilled</li>
<li>have good health insurance / benefits</li>
<li>make X amount of money</li>
</ul>

<h3 id="other-goals">other goals</h3>

<ul>
<li>remain as curious and in love with programming as the first time I did it</li>
</ul>

<h3 id="nobody-can-tell-you-what-your-goals-are">nobody can tell you what your goals are</h3>

<p>This post came out of reading <a href="https://lethain.com/career-narratives/">this blog post</a> about how
your company&rsquo;s career ladder is probably not the same as your goals and chasing the next promotion
may not be the best way to achieve them.</p>

<p>I&rsquo;ve been lucky enough to have a lot of my basic goals met (&ldquo;make money&rdquo;, &ldquo;learn a lot of things at
work&rdquo;, &ldquo;work with kind and very competent people&rdquo;), and after that I&rsquo;ve found it hard to figure out
which of all of these milestones here will actually feel meaningful to me! Sometimes I will achieve
a new goal and find that it doesn&rsquo;t feel very satisfying to have done it. And other times I will do
something that I didn&rsquo;t <em>think</em> was a huge deal to me, but feel really proud of it afterwards.</p>

<p>So it feels pretty useful to me to write down these things and think &ldquo;do I really want to work at
FANCY_COMPANY? would that feel good? do I care about working at a nonprofit? do I want to learn how
to build software products that lots of people use? do I want to work on an application that serves
a million requests per second? When I accomplished that goal in the past, did it actually feel
meaningful, or did I not really care?&rdquo;</p>
]]></content>
  </entry>
  
</feed>
