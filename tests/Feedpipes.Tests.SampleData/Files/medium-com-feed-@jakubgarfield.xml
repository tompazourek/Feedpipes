<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Jakub Chodounsky on Medium]]></title>
        <description><![CDATA[Stories by Jakub Chodounsky on Medium]]></description>
        <link>https://medium.com/@jakubgarfield?source=rss-1c7c2d4e77f7------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*NRdZmQG6pjDc3QxGblpA6g.jpeg</url>
            <title>Stories by Jakub Chodounsky on Medium</title>
            <link>https://medium.com/@jakubgarfield?source=rss-1c7c2d4e77f7------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Fri, 26 Jul 2019 16:08:45 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@jakubgarfield" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[5 .NET blogs for C# developers to follow in 2019]]></title>
            <link>https://medium.com/@jakubgarfield/5-net-blogs-for-c-developers-to-follow-in-2019-2b4af10927ae?source=rss-1c7c2d4e77f7------2</link>
            <guid isPermaLink="false">https://medium.com/p/2b4af10927ae</guid>
            <category><![CDATA[csharp]]></category>
            <category><![CDATA[microsoft]]></category>
            <category><![CDATA[programming]]></category>
            <category><![CDATA[software-development]]></category>
            <category><![CDATA[dotnet]]></category>
            <dc:creator><![CDATA[Jakub Chodounsky]]></dc:creator>
            <pubDate>Tue, 21 May 2019 00:58:20 GMT</pubDate>
            <atom:updated>2019-05-24T04:17:12.686Z</atom:updated>
            <content:encoded><![CDATA[<h3>5 .NET blogs for C# developers to follow in 2019</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Cbj_BcK5ePD4Mc4TK4sfvQ.jpeg" /></figure><p>.NET is getting bigger and gaining more and more traction. With the next <a href="https://devblogs.microsoft.com/dotnet/introducing-net-5/">release</a> it is going to bring C# to more platforms.</p><p>Microsoft is going to ship Windows with full <a href="https://devblogs.microsoft.com/commandline/announcing-wsl-2/">Linux kernel in the WSL 2</a> which makes Windows the go to platform for all the various web developers. And it gives us powerful tools to make our jobs easier.</p><p>Now, more than ever, is the best time to be a C# developer. The .NET ecosystem is blooming and Microsoft is going in the right direction by focusing on developers (developers! developers!).</p><p>It is hard to keep up with all the changes so let’s look at a few blogs that are worth following in 2019. I’m not going to talk about the golden .NET icons like <a href="http://hanselman.com/blog">Scott Hanselman</a>, <a href="https://codeblog.jonskeet.uk/">Jon Skeet</a>, or <a href="https://ericlippert.com/">Eric Lippert</a>. Instead we’ll look at the less known writers that are producing amazing content.</p><h3>1. <a href="http://dontcodetired.com/blog/">Don’t Code Tired</a></h3><p>I’ve been following <a href="https://twitter.com/robertsjason">Jason</a> for a while and he’s producing not just great articles but other amazing content. These days his blog is focused on Azure and testing, but he also writes about C# fundamentals and a bit about <a href="http://asp.net/">ASP.NET</a>.</p><h3>2. <a href="https://adamsitnik.com/">.NET Performance and Reliability</a></h3><p>As the title of <a href="https://twitter.com/SitnikAdam">Adam’s</a> blog suggests he’s focusing on performance, profiling, and the lower levels of C# programming. You will learn about different benchmarking tools, core concepts, and techniques for fast code.</p><p>His blog reminds me of another great writer of .NET deep dives — Matt Warren and his <a href="https://mattwarren.org/">Performance is a Feature!</a> And it’s not a coincidence as both of them are contributors to <a href="https://github.com/dotnet/BenchmarkDotNet">BenchmarkDotNet</a> and a few other useful tools.</p><h3>3. <a href="https://michaelscodingspot.com/">Michael’s Coding Spot</a></h3><p>Despite the fact that <a href="https://twitter.com/michaelshpilt">Michael’s</a> blog is only 2 years old, he wrote more than most in a decade. He is publishing new content every week and recently covered topics like queues, jobs, deadlocks, and various debugging techniques. The articles are well written and super useful for every professional C# developer.</p><h3>4. <a href="https://christianfindlay.com/">Christian Findlay’s Software Development</a></h3><p><a href="https://twitter.com/CFDevelop">Christian’s</a> blog is focused on GUI development and cross-platform user interfaces. He writes about various toolkit and frameworks, Xamarin, WPF, and mobile development.</p><p>He’s also into cryptocurrencies so there is a bit of behind the scenes from a C# developer point of view.</p><h3>5. <a href="https://www.tabsoverspaces.com/">tabs ↹ over ␣ ␣ ␣ spaces</a></h3><p><a href="https://twitter.com/cincura_net">Jiří Činčura</a> is a fellow Czech developer and he’s been writing about .NET for more than 12 years by now. You will find a wide range of topics covered in his blog. From core C# concepts, database, to Win32 API and others.</p><p>He’s also heavily involved within the Czech .NET community and speaks often at conferences.</p><h3>Bonus tip: <a href="https://csharpdigest.net/?utm_source=medium&amp;utm_medium=blog&amp;utm_campaign=blogs+follow+2019">C# Digest</a></h3><p>Finding good quality content to stay up to date is not easy and it takes time. But you can let someone else do it for you. <a href="https://csharpdigest.net/?utm_source=medium&amp;utm_medium=blog&amp;utm_campaign=blogs+follow+2019">C# Digest</a> is a weekly email newsletter with only the top 5 articles from .NET world. In your inbox. Every Monday.</p><figure><a href="https://usejournal.com/?utm_source=medium.com&amp;utm_medium=noteworthy_blog&amp;utm_campaign=tech&amp;utm_content=guest_post_image"><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*PYxBP_WV7LI6zc-zdUkNqQ.png" /></a></figure><p>📝 Read this story later in <a href="https://blog.usejournal.com/r/?url=https%3A%2F%2Fusejournal.com%2F%3Futm_source%3Dmedium.com%26utm_medium%3Dnoteworthy_blog%26utm_campaign%3Dtech%26utm_content%3Dguest_post_read_later_text">Journal</a>.</p><p>👩‍💻 Wake up every Sunday morning to the week’s most noteworthy stories in Tech waiting in your inbox. <a href="https://blog.usejournal.com/r/?url=https%3A%2F%2Fusejournal.com%2Fnewsletter%2Fnoteworthy-in-tech%2F%3Futm_source%3Dmedium.com%26utm_medium%3Dnoteworthy_blog%26utm_campaign%3Dtech%26utm_content%3Dguest_post_text">Read the Noteworthy in Tech newsletter</a>.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2b4af10927ae" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Progressive web application as a share option in Android]]></title>
            <link>https://medium.com/@jakubgarfield/progressive-web-application-as-a-share-option-in-android-74263fc068e3?source=rss-1c7c2d4e77f7------2</link>
            <guid isPermaLink="false">https://medium.com/p/74263fc068e3</guid>
            <category><![CDATA[web-development]]></category>
            <category><![CDATA[android]]></category>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[chrome]]></category>
            <category><![CDATA[progressive-web-app]]></category>
            <dc:creator><![CDATA[Jakub Chodounsky]]></dc:creator>
            <pubDate>Sun, 24 Mar 2019 00:00:00 GMT</pubDate>
            <atom:updated>2019-03-31T20:26:25.975Z</atom:updated>
            <content:encoded><![CDATA[<p><a href="https://chodounsky.net/2016/12/23/progressive-web-applications/">Progressive Web Applications</a> are becoming more and more powerful and now can be registered as a share intent on Android devices. This means that any Android application can share directly to your web app through the standard native sharing dialog.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/512/0*jiaOe9oQ-JBdJLlA.png" /></figure><p>It also works the other way around. Your <a href="https://developers.google.com/web/updates/2016/09/navigator-share">PWA can trigger</a> the native share dialog and send data to other applications. This brings them one step closer to native apps.</p><p>In this article we will focus on becoming the share target.</p><blockquote><em>Can a progressive web app be registered as a share option in Android?</em></blockquote><p>For a long time this wasn’t an option. But with the release of <a href="https://www.chromestatus.com/features/5662315307335680">Chrome 71</a> on Android there is an experimental support of the <a href="https://github.com/WICG/web-share-target">Web Share Target API</a>. Your PWA can appear in the sharing menu. How cool is that?</p><p>Let’s have a look at what you need to get your website into the Android sharing dialog:</p><ol><li>Manifest</li><li>Service Worker</li><li>Share target</li></ol><p>If you like this type of content, check out <a href="https://reactdigest.net/?utm_source=medium&amp;utm_medium=blog&amp;utm_campaign=pwashare">React Digest</a>, a weekly newsletter with 5 hand-curated top quality articles.</p><h3>Becoming progressive</h3><p>The first steps are really about becoming a progressive web application. The share intent will be registered when the user “installs” the app by saving it to the <a href="https://developers.google.com/web/fundamentals/app-install-banners/">home screen</a> — either from a popup or manually.</p><p><em>Important note: </em><strong><em>Your website needs to be served over HTTPS</em></strong><em>.</em></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/0*D1gnPRy_jRcMCGuM.png" /></figure><p>For that you will need a website manifest and a registered service worker. Firstly, let’s have a look at a simple manifest.json.</p><pre>{<br>  &quot;short_name&quot;: &quot;Sharing Demo&quot;,<br>  &quot;name&quot;: &quot;Web Target Sharing Demo&quot;,<br>  &quot;icons&quot;: [<br>    {<br>      &quot;src&quot;: &quot;/android-chrome-192x192.png&quot;,<br>      &quot;type&quot;: &quot;image/png&quot;,<br>      &quot;sizes&quot;: &quot;192x192&quot;<br>    },<br>    {<br>      &quot;src&quot;: &quot;/android-chrome-512x512.png&quot;,<br>      &quot;type&quot;: &quot;image/png&quot;,<br>      &quot;sizes&quot;: &quot;512x512&quot;<br>    }<br>  ],<br>  &quot;start_url&quot;: &quot;/&quot;,<br>  &quot;background_color&quot;: &quot;#ffffff&quot;,<br>  &quot;display&quot;: &quot;standalone&quot;,<br>  &quot;theme_color&quot;: &quot;#ffffff&quot;<br>}</pre><p>You can read about all the different values and options in more detail <a href="https://developers.google.com/web/fundamentals/web-app-manifest/">here</a>. After that, we will need to link to our manifest in our HTML files. So add the following into head section of your page.</p><pre>&lt;link rel=&quot;manifest&quot; href=&quot;/manifest.json&quot;&gt;</pre><p>The Second thing for an app to become a PWA is a registered service worker with a fetch event. It doesn’t need to do much, it just has to be there. The simplest way to do that is to create service-worker.js with an empty fetch listener.</p><pre>self.addEventListener(&#39;fetch&#39;, function(event) {});</pre><p>It won’t do anything but it is everything we need for now. Next, we will register the service worker in our page.</p><pre>if (&#39;serviceWorker&#39; in navigator) {<br>    navigator.serviceWorker.register(&#39;/service-worker.js&#39;)<br>      .then(function(reg){<br>        console.log(&quot;Service worker registered.&quot;);<br>     }).catch(function(err) {<br>        console.log(&quot;Service worker not registered. This happened:&quot;, err)<br>    });<br> }</pre><p>Nice work! It wasn’t too hard and we changed a simple website into a progressive web app. If you are using HTTPS you should be able to see the <em>Add to home screen</em> popup when you visit your website.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/0*lgmHNO_kHmOJ5Z0k.png" /></figure><p>You can use Chrome Dev Tools to check on the manifest and see if the app can be installed. Go to Application -&gt; Manifest or use <a href="https://developers.google.com/web/tools/lighthouse/">Lighthouse</a> and see the <em>Installable</em> section of the report.</p><p>Converting your website to a progressive web application was actually the hard part. Registering the share intent so your app will appear in the native dialog is super easy.</p><p>You need to add the following lines into your manifest.json that we created previously.</p><pre>&quot;share_target&quot;:<br>  {<br>    &quot;action&quot;: &quot;/share&quot;,<br>    &quot;params&quot;:<br>    {<br>      &quot;title&quot;: &quot;title&quot;,<br>      &quot;text&quot;: &quot;text&quot;,<br>      &quot;url&quot;: &quot;url&quot;<br>    }<br>  },</pre><p>Every time a user will share something through the dialog the request will go to /share endpoint of your website with query parameters of title, text, and url.</p><p><em>Note: If you are sharing something from mobile Chrome the URL actually comes through as a text.</em></p><p>Now we put everything together and this is the final version of the manifest.json file with registered share_target section.</p><pre>{<br>  &quot;short_name&quot;: &quot;Sharing Demo&quot;,<br>  &quot;name&quot;: &quot;Web Target Sharing Demo&quot;,<br>  &quot;icons&quot;: [<br>    {<br>      &quot;src&quot;: &quot;/android-chrome-192x192.png&quot;,<br>      &quot;type&quot;: &quot;image/png&quot;,<br>      &quot;sizes&quot;: &quot;192x192&quot;<br>    },<br>    {<br>      &quot;src&quot;: &quot;/android-chrome-512x512.png&quot;,<br>      &quot;type&quot;: &quot;image/png&quot;,<br>      &quot;sizes&quot;: &quot;512x512&quot;<br>    }<br>  ],<br>  &quot;share_target&quot;:<br>  {<br>    &quot;action&quot;: &quot;/share&quot;,<br>    &quot;params&quot;:<br>    {<br>      &quot;title&quot;: &quot;title&quot;,<br>      &quot;text&quot;: &quot;text&quot;,<br>      &quot;url&quot;: &quot;url&quot;<br>    }<br>  },<br>  &quot;start_url&quot;: &quot;/&quot;,<br>  &quot;background_color&quot;: &quot;#ffffff&quot;,<br>  &quot;display&quot;: &quot;standalone&quot;,<br>  &quot;theme_color&quot;: &quot;#ffffff&quot;<br>}</pre><p>After that, you can use any method of reading the query parameters that suits your needs. Either server-side like this with Ruby on Rails:</p><pre>def share<br>  <a href="http://twitter.com/url">@url</a> = params[:url]<br>  <a href="http://twitter.com/title">@title</a> = params[:title]<br>  <a href="http://twitter.com/text">@text</a> = params[:text]<br>end</pre><p>or client-side with a bit of good old javascript:</p><pre>var parsedUrl = new URL(window.location.toString());<br>console.log(&#39;Title shared: &#39; + parsedUrl.searchParams.get(&#39;name&#39;));<br>console.log(&#39;Text shared: &#39; + parsedUrl.searchParams.get(&#39;description&#39;));<br>console.log(&#39;URL shared: &#39; + parsedUrl.searchParams.get(&#39;link&#39;));</pre><p>I’m a big fan of progressive web apps and the web share target makes the integration with your mobile workflow much smoother. It comes with a few caveats of being experimental so the API will most likely change or it could totally disappear. Also, keep in mind that (at the moment) it’s supported only on Android devices and your Apple users won’t benefit from it . The proposal takes iOS into account though so maybe some time in the future. I’ve been waiting for this feature for a while and I’m super-excited that it made it to the Android community.</p><p>If you liked this article and you are a React Developer, check out <a href="https://reactdigest.net/?utm_source=medium&amp;utm_medium=blog&amp;utm_campaign=pwashare">React Digest</a> — a weekly newsletter that will keep you up to date.</p><p><em>Originally published at </em><a href="https://chodounsky.net/2019/03/24/progressive-web-application-as-a-share-option-in-android/"><em>chodounsky.net</em></a><em> on March 24, 2019.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=74263fc068e3" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[C# — good career choice or not?]]></title>
            <link>https://medium.com/@jakubgarfield/c-good-career-choice-or-not-172185a88b0a?source=rss-1c7c2d4e77f7------2</link>
            <guid isPermaLink="false">https://medium.com/p/172185a88b0a</guid>
            <category><![CDATA[programming]]></category>
            <category><![CDATA[csharp]]></category>
            <category><![CDATA[careers]]></category>
            <category><![CDATA[microsoft]]></category>
            <category><![CDATA[software-development]]></category>
            <dc:creator><![CDATA[Jakub Chodounsky]]></dc:creator>
            <pubDate>Wed, 17 May 2017 21:56:05 GMT</pubDate>
            <atom:updated>2018-12-03T03:51:12.083Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*zjx7eX9u7I1qizkAq59atQ.jpeg" /></figure><p>If you are just starting out or you are a seasoned developer with battle scars and years of experience under your belt you asked yourself this question at least once: is C# a good career choice?</p><p>Well, let’s try to answer it as objectively as we can. At times you can replace C# with .NET ecosystem as a whole.</p><h3>Variety</h3><p>C# and .NET framework is one of the most versatile tools for software developers. You don’t have to jump across different stacks to get more exposure to different platforms.</p><p>You have two great frameworks for creating <strong>web applications</strong> — <a href="https://www.asp.net/">ASP.NET</a> and <a href="https://www.asp.net/mvc">ASP.NET MVC</a>. The tooling and the speed of development is on par with the most advanced frameworks in other languages. The biggest competition in this area would be without any doubts <a href="http://rubyonrails.org/">Ruby on Rails</a>.</p><p>With <a href="https://www.xamarin.com/">Xamarin</a> being acquired by Microsoft the state of <strong>mobile development</strong> for the major platforms is at a great stage. There is a huge benefit of maintaining a codebase in one language and having shared libraries across the Android and iOS platforms. With C# you can do all of that. Other major players in this area are <a href="https://facebook.github.io/react-native/">React Native</a> backed by Facebook but some of my mobile developer friends would swear on the native platform development.</p><p>Microsoft’s <strong>cloud platform</strong>, <a href="https://azure.microsoft.com/">Azure</a>, is growing fast and offers various tools not just for your backend API code and storage, but also for background jobs, machine learning, various cognitive services, enterprise solutions and security and identity management. There is a lot of goodies there that could make your developer’s life easier. Not to forget to mention that if you are a MSDN subscriber, you get a <a href="https://azure.microsoft.com/en-us/pricing/member-offers/msdn-benefits-details/">free credit to try them all</a>.</p><p>When you need a thick client; a <strong>desktop application;</strong> it will be usually targeted towards Windows. You can’t really get a better framework for getting the job done than <a href="https://msdn.microsoft.com/en-us/library/ms754130(v=vs.110).aspx">WPF</a> or the simplicity of <a href="https://msdn.microsoft.com/en-us/library/dd30h2yb(v=vs.110).aspx">WinForms</a>. There is not a lot of innovation in the field but those frameworks are far from being dead. They are the steady workhorse that is easy to use and does the job.</p><p>Lastly and slightly unexpectedly, there is a large camp of <strong>game developers</strong>. <a href="https://unity3d.com/">Unity</a> — one of the biggest 3D engines uses C# as a language of choice and the tooling in Visual Studio gets better with every new version.</p><p>C# gives you a great variety of applications that you can create and you don’t need to learn new libraries and language constructs. You can write web applications in <a href="https://docs.racket-lang.org/continue/">Lisp</a> or <a href="https://ci.inria.fr/pharo-contribution/job/EnterprisePharoBook/lastSuccessfulBuild/artifact/book-result/WebApp/WebApp.html">Smalltalk</a> and create Android applications in <a href="http://www.rubymotion.com/">Ruby</a> but that doesn’t mean that you should. C# on the other hand is one of the best tools for the job in any given category.</p><h3>Technical</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*IRFhWNqusUWbTsB1hQXhrQ.gif" /><figcaption>He’s using Visual Studio, right? Right?!</figcaption></figure><p>C# is an <strong>object oriented </strong><a href="https://en.wikipedia.org/wiki/Imperative_programming"><strong>imperative language</strong></a> — you tell the computer what to do and can wrap those commands into objects modelling your desired world. This paradigm is the most widely used nowadays and therefore a good one to master. Applications patterns and object oriented practices are transferable to many other platforms and languages.</p><p>But apart from that, C# also has a number of features from <strong>functional languages</strong>. You don’t get tail-recursion, but LINQ is a brilliant tool for data transformation and filtering. And with <a href="https://medium.com/@jakubgarfield/c-7-0-and-beyond-with-mads-torgersen-36c44a047024">C# 7.0</a> you get pattern matching as well. So you can expand your skills with other paradigms without leaving your favourite language.</p><p>Apart from that, C# is <strong>statically typed</strong>. That gives you an amazing tool when working on bigger projects with larger team and you realise how helpful it is when you find yourself in this situation in a dynamically typed languages like Ruby.</p><p>Also, there are <strong>dynamic features</strong> of C#. The dynamic keyword and reflection API gives you powerful tools to create nice DSLs or effectively work with JSON APIs. With great power comes also great responsibility and you shouldn’t use them mindlessly, but you have that tool in your toolbox.</p><p>If this article convinces you that C# is a good career choice check out <a href="https://csharpdigest.net?utm_source=medium&amp;utm_medium=blog&amp;utm_campaign=csharp+good+career+choice">C# Digest weekly newsletter</a> to stay up to date with .NET community.</p><h3>Experience</h3><p>One of the biggest advantages of C# is that it is used amongst the wide spectrum of companies. From <strong>small startups</strong> to giant <strong>corporations</strong>.</p><p>Each type of company has a different set of challenges and problems so I recommend every programmer to go through each type in their career. Even if you think you are not made for a big corporation, working for one gives you a decent perspective on what these companies are struggling with.</p><p>And on the other end of the spectrum startup sized company doesn’t need to be 80 hours per week work, but you will have to step into more breadth of roles — devops, technical support and a green field development.</p><p>Gaining exposure to various businesses is possible with C# without relearning the framework and language and you can focus more on the domain and team dynamics instead.</p><p>Try to find a huge corporation using Ruby — not that easy.</p><h3>Money and Stability</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/480/1*yV_0UjF8HXFGjKTU27bJIA.gif" /><figcaption>Make it rain!</figcaption></figure><p>Let’s be honest. We work because we need to earn our living. And with C# you have <strong>solid prospects</strong>. Big finance corporations are using C# as their stack of choice which guarantees salaries on the higher end of the spectrum.</p><p>You can always earn more cheddar by being a specialised COBOL contractor, SAP consultant or do whatever the current hotness is, but as a software developer that wants to have wide exposure and the ability to move across companies and types of applications you are getting one of the <strong>best deals on the market</strong>.</p><p>Add a solid foundation of good old SQL and you can mine that skillset for the next few decades of <strong>mortgage driven development</strong>.</p><p>Apart from that, there is <strong>plenty job opportunities</strong> in C# in most places around the world which gives you desired stability and option to change in case your current company gets into troubles.</p><h3>Microsoft</h3><p>Microsoft used to be this evil closed company that wanted to get all the profits (honestly, show me a company that doesn’t) at all cost that all the technical people made fun of and prefer not to touch Windows Vista even with a long stick. But the times are changing, especially for developers.</p><p>C# and .NET framework with the <a href="https://github.com/dotnet/roslyn">Roslyn</a> compiler are <a href="https://github.com/dotnet/csharplang">open-sourced</a> and hosted on Github.</p><p>.NET Core runs on many other platforms than just Windows and we have <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac</a> and lightweight <a href="https://code.visualstudio.com/">Visual Studio Code</a> that runs almost everywhere.</p><p>There is a great team behind C# language pushing the innovation forwards and the Cloud and Enterprise division under <a href="https://weblogs.asp.net/scottgu">Scott Guthrie</a> is thriving. One clear direction behind the product is important.</p><p>Windows <a href="https://msdn.microsoft.com/en-us/commandline/wsl/about">has a bash</a> now and runs Ubuntu and plan to <a href="https://blogs.msdn.microsoft.com/commandline/2017/05/11/new-distros-coming-to-bashwsl-via-windows-store/">add Fedora and SUSE</a>.</p><p>Exciting times for C# developers!</p><h3>Competition</h3><p>Let’s discuss other platforms and their strengths and weaknesses.</p><p>What about Java? <strong>Java</strong> is pretty much similar to C# — all the benefits are there. You might get better tooling and more support for some trendy machine learning and big data frameworks but you won’t be building nice desktop clients for Windows. Also, the language standard and the language features are a bit behind C#. In overall, not a bad career choice either.</p><p>When talking about <strong>Ruby</strong>, you can honestly replace it with Ruby on Rails, as the vast majority of Ruby jobs are Rails jobs. It dominated in the web startup world in the past decade. Other web frameworks caught up, but you have a lot of successful small to medium businesses built on top of Rails that needs development and maintenance. It is a good choice for startups where you want to move fast but don’t want to grow the team too much. It is a great choice if you want to work a remotly — there is far more options than in any other language. But the job market might be limited in your area and you will be building CRUD web apps.</p><p><strong>Javascript</strong> is currently high in demand. It is easy to get into and you can write backend with <a href="https://nodejs.org/en/">Node.js</a>, desktop applications with <a href="https://electron.atom.io/">Electron</a> and mobile apps with <a href="https://facebook.github.io/react-native/">React Native</a>. Javascript wasn’t made for maintaining a large codebase and the ever changing world of front-end framework gets tiring. And lots of times it is just reinventing the wheel again. But if you are in web stack you will need to have some exposure to it anyway. I’d use it as a secondary language for front-end heavy web applications.</p><p>What other platforms and languages would you consider and how would they compare to C#?</p><h3>Conclusion</h3><p>To sum it up, you will have a great career if you decide to choose C# as a language of choice. The biggest benefit is the variety of applications you can work on and companies that use C#.</p><p>It will give you great job stability and salaries that are on the higher end of the market.</p><p>Lastly, C# is cool and fun to work with — you can always learn a new thing and Visual Studio will be your reliable buddy helping on the big projects with IntelliSense.</p><p>In overall, <em>exquisite choice sir</em>.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/1*BeweBrrzUzzdx6JqoPOs4Q.jpeg" /></figure><p>Do you want to become a better C# developer? <a href="https://csharpdigest.net?utm_source=medium&amp;utm_medium=blog&amp;utm_campaign=csharp+good+career+choice">Subscribe to C# Digest</a> and stay up to date within the .NET world.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=172185a88b0a" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[My blog isn’t there — it would be hardly a good C# resource compared to the others.]]></title>
            <link>https://medium.com/@jakubgarfield/my-blog-isnt-there-it-would-be-hardly-a-good-c-resource-compared-to-the-others-f63ead8d1c54?source=rss-1c7c2d4e77f7------2</link>
            <guid isPermaLink="false">https://medium.com/p/f63ead8d1c54</guid>
            <dc:creator><![CDATA[Jakub Chodounsky]]></dc:creator>
            <pubDate>Mon, 15 May 2017 02:11:30 GMT</pubDate>
            <atom:updated>2017-05-15T02:11:30.236Z</atom:updated>
            <content:encoded><![CDATA[<p>My <a href="http://chodounsky.net">blog</a> isn’t there — it would be hardly a good C# resource compared to the others.</p><p>But you are probably talking about <a href="http://csharpdigest.net/">C# Digest</a> newsletter that I curate. I’m a big <a href="https://medium.com/@jakubgarfield/programming-newsletters-are-the-future-b27152734130">believer in newsletters</a> and apart from the one that I run there is just not that many (if any) focused strictly on C#. And that there is a lot of love and hard work behind it is just something I know from a personal experience.</p><p>I don’t dare to rate it, but I’d love the readers to do so. And I’m sorry if the article gave you this impression. Hopefully, you found some other useful resource to dive into.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f63ead8d1c54" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How to keep up to date as a C# developer]]></title>
            <link>https://medium.com/@jakubgarfield/how-to-keep-up-to-date-as-a-c-developer-387bff208158?source=rss-1c7c2d4e77f7------2</link>
            <guid isPermaLink="false">https://medium.com/p/387bff208158</guid>
            <category><![CDATA[software-development]]></category>
            <category><![CDATA[dotnet]]></category>
            <category><![CDATA[microsoft]]></category>
            <category><![CDATA[programming]]></category>
            <category><![CDATA[csharp]]></category>
            <dc:creator><![CDATA[Jakub Chodounsky]]></dc:creator>
            <pubDate>Sun, 14 May 2017 20:51:14 GMT</pubDate>
            <atom:updated>2018-12-03T03:49:49.510Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*MwQsBREiR0tloJOUa2WyRQ.jpeg" /></figure><p>As a developer, I bet you have a life long passion for learning and with the technology, there is always something exciting going on right now. Thus, how do you navigate in this world of constant change and keep up to date with news, which matters to a smart C# developer?</p><h3><strong>Blogs</strong></h3><p>There are plenty of great blogs about various topics related to C# but you don’t have to get too far away from good old MSDN blogs.</p><p><a href="https://blogs.msdn.microsoft.com/visualstudio/"><strong>The Visual Studio Blog</strong></a></p><p>Most of the C# developers use Visual Studio. It is great to have IDE and the Visual Studio team blogs regularly about new features, plugins and tips, which will make you more productive.</p><p><a href="https://blogs.msdn.microsoft.com/dotnet/"><strong>.NET Blog</strong></a></p><p>Wanna see what’s new with the core platform? Follow this blog and you won’t miss anything related to .NET Framework.</p><p><a href="https://blogs.msdn.microsoft.com/webdev/"><strong>.NET Web Development and Tools Blog</strong></a></p><p>If Web is your main domain, you want to follow ASP.NET team and what they are working on. Recently, they started publishing their weekly standups with the notes, which gives you a sneak peek into how the platform is being developed. Nowadays, following a single blog is not the best strategy to get your news. There are lot of interesting blogs and articles and you need to be subscribed to numerous RSS feeds. Selecting what to read will be time consuming and this brings me to the next section.</p><h3><strong>Newsletters</strong></h3><p>Newsletters are a medium, where someone else takes the time to curate the content for you. The traditional ones will land into your inbox on the periodical basis and there are few in a form of a blog.</p><p><em>Disclaimer: I curate C# and Programming Digests — if you know of any other .NET newsletters, please mention them in the comments.</em></p><p><a href="https://csharpdigest.net?utm_source=medium&amp;utm_medium=blog&amp;utm_campaign=how+to+keep+up+to+date+csharp"><strong>C# Digest</strong></a></p><p>C# Digest is a weekly newsletter, which sends you only five carefully selected links every Monday. Just five? But they are the top-notch. If you want to follow only one source, this would be it — one article for each working day. There is lot of love and hard work behind the content curation.</p><p><a href="http://blog.cwa.me.uk/"><strong>The Morning Brew</strong></a></p><p>Every morning Chris Alcock sends an update of what happened in the world of .NET Web development. He is mostly focused on ASP.NET and the world of Javascript.</p><p><a href="http://www.alvinashcraft.com/"><strong>Alvin Ashcraft’s Morning Dew</strong></a></p><p><a href="https://twitter.com/alvinashcraft">Alvin Ashcraft</a> puts together a daily list of more well-rounded resources than Chris. You can find news on WPF, databases, Powershell, development methodologies and Web programming.</p><p><a href="https://programmingdigest.net?utm_source=medium&amp;utm_medium=blog&amp;utm_campaign=how+to+keep+up+to+date+csharp"><strong>Programming Digest</strong></a></p><p>This is a similar format to C# Digest but the theme is more of a general programming. Thus, if you want to keep an eye on what is happening outside Microsoft world, this one would be a perfect to add to the mix. Again, only five high quality links weekly to your inbox.</p><h3><strong>Podcasts</strong></h3><p>I love listening to programming podcasts, as I can do it during my daily commute, exercising or even house chores. The information density is not that high but you can’t really read a book while vacuuming, right?</p><p><a href="https://www.dotnetrocks.com/"><strong>.NET Rocks!</strong></a></p><p><a href="https://twitter.com/richcampbell">Richard</a> and <a href="https://twitter.com/carlfranklin">Carl</a> are not just awesome interviewers but also funny entertainers. .NET Rocks! has been around for ages and not just .NET programmers listen to it. That’s how good it is.</p><p><a href="http://hanselminutes.com/"><strong>Hanselminutes</strong></a></p><p>Scott Hanselman is a big name in the ASP.NET community but his podcasts are often way beyond just that. Every guest is so interesting that you don’t want to miss an episode.</p><p><a href="https://channel9.msdn.com/"><strong>Channel 9</strong></a></p><p>For me personally, video doesn’t work that well, as other media but Channel 9 has been recommended to me multiple times as a free source of talks and interviews from Microsoft world.</p><h3><strong>Communities</strong></h3><p>Don’t underestimate the power of conversations. Many times, I found myself talking to a stranger at .NET meetup that pointed me to a few excellent resources and told me what’s going on in his field of work. Content curation and digestion in real time is underrated.</p><p><a href="https://www.meetup.com/"><strong>Meetup</strong></a></p><p>Meetup is a great site to find a local .NET user group. It is popular in lots of countries and if by any chance, your one is not there, I’m pretty sure there is a local alternative to it. Hence, just use Google and start participating.</p><p>I live in Wellington, New Zealand and it has a very active <a href="http://www.meetup.com/WelliDotNet/">Wellington .NET User Group</a> with regular talks and pizza — Bevan is doing an excellent job of running it.</p><p><a href="http://reddit.com/r/csharp"><strong>Reddit</strong></a></p><p>Reddit is a classic in the technology sphere. The /r/csharp is a source of interesting links and interesting questions with answers, ranging from beginners to experts. As it could be an opposite in other subreddits, beginners are treated fair with respect here and moderators are doing a amazing job of keeping the content relevant.</p><p><a href="https://discord.gg/0np62rq4o8GnQO9l"><strong>Discord</strong></a></p><p>Discord is quite new to me, but I’ve heard, it is super popular amongst gamers. It is a Slack on steroids and there is a thriving C# community, which is very helpful and would love to have you as a member.</p><p>And what about you? What resources do you follow? What is your preferred way to stay up to date?</p><p><em>This article was originally published on </em><a href="http://www.c-sharpcorner.com/blogs/how-to-keep-up-to-date-as-a-c-sharp-developer"><em>C# Corner</em></a><em>.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=387bff208158" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[5 books every C# developer should read]]></title>
            <link>https://medium.com/@jakubgarfield/5-books-every-c-developer-should-read-83844a5e2e3c?source=rss-1c7c2d4e77f7------2</link>
            <guid isPermaLink="false">https://medium.com/p/83844a5e2e3c</guid>
            <category><![CDATA[csharp]]></category>
            <category><![CDATA[books]]></category>
            <category><![CDATA[programming]]></category>
            <category><![CDATA[microsoft]]></category>
            <category><![CDATA[software-development]]></category>
            <dc:creator><![CDATA[Jakub Chodounsky]]></dc:creator>
            <pubDate>Wed, 10 May 2017 05:19:56 GMT</pubDate>
            <atom:updated>2018-12-03T03:48:38.061Z</atom:updated>
            <content:encoded><![CDATA[<h4>A list of the 5 most influential books that changed my perspective on programming.</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*ofvoRbrnn_vft8w-t7SqLQ.jpeg" /></figure><p>Some people like to watch courses, others like to tinker with the code, but I like to read. Books about programming are a bit tough sell though. Dry, long, and they become obsolete quickly. But you can find rare gems that don’t fit that boring category.</p><p>These following books helped to advance my career and change the way how I build software.</p><h4><a href="https://www.goodreads.com/book/show/7121415-clr-via-c">CLR via C#</a></h4><p>For a C# developer this should be a bible. It is long, it is detailed, but Jeff Richter is doing a great job of keeping the reader engaged. You are going to deep dive into the nitty gritty details of the .NET framework and C# and when you are done with the book your .NET skills will increase by at least 1000 points.</p><p>Please, read this book and make the .NET world a better place.</p><h4><a href="https://www.goodreads.com/book/show/179133.Domain_Driven_Design">Domain-Driven Design</a></h4><p>In this book, Eric Evans dives deep into the design of complex systems. It has an academic feel and there is a lot of theory, naming and repetition. But it is worth it.</p><p>The focus on speaking the same language as your business experts is a revelation. Learn business terms and understand the concepts in your domain. And when you start using that language in your code it is a true transformation to a self-documented maintainable piece of software.</p><h4><a href="http://www.albahari.com/threading/">Threading in C#</a></h4><p>A <strong>free</strong> chapter from Joseph Albahari C# in Nutshell book that has the best explanation of threading, synchronisation and advanced parallel techniques in C# I ever read.</p><p>It’s a must read before you type <em>new Thread(…)</em> into Visual Studio.</p><h4><a href="https://www.goodreads.com/book/show/6399113-the-passionate-programmer">The Passionate Programmer</a></h4><p>As opposed to the other pieces in this list Chad Fowler doesn’t directly focus on creating software. The main focus is how to grow your software developer career and how to approach it as a business.</p><p>For me the biggest takeaway from the book was understanding the impact of your work on the bottom-line of the company. In other words, how much money your code makes.</p><p>And also, as a software developer you need to build other skills than just hardcore coding. Marketing, networking, communication among others.</p><h4><a href="https://www.goodreads.com/book/show/13507787-practical-object-oriented-design-in-ruby">Practical Object-Oriented Design in Ruby</a></h4><p>Wait a minute. This book is not about C# at all. What is it doing on the list?</p><p>Yeah, it is in Ruby, but Sandi Metz is one of those developers that grew up with Kent Beck and went through the classic Smalltalk object oriented design school.</p><p>She has a talent for explaining hard design concepts with simple words. After reading this book, design of my objects improved dramatically and for me it’s the most influential piece I read on object oriented programming.</p><h3>Conclusion</h3><p>Firstly, if you liked the books mentioned above chances are that you might enjoy my weekly <a href="https://csharpdigest.net?utm_source=medium&amp;utm_medium=blog&amp;utm_campaign=5+books+csharp">C# Digest</a> newsletter.</p><p>There are so many technical books on the market but if you would read just these 5 from cover to cover you’d gain an exceptional knowledge and have a solid background to become a great .NET developer.</p><p>And now over to you, dear reader — which software books make it to your top 5?</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=83844a5e2e3c" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[As I understood it was referring to extension methods with structs.]]></title>
            <link>https://medium.com/@jakubgarfield/as-i-understood-it-was-referring-to-extension-methods-with-structs-61c476c7b730?source=rss-1c7c2d4e77f7------2</link>
            <guid isPermaLink="false">https://medium.com/p/61c476c7b730</guid>
            <dc:creator><![CDATA[Jakub Chodounsky]]></dc:creator>
            <pubDate>Sun, 07 May 2017 09:23:30 GMT</pubDate>
            <atom:updated>2017-05-07T09:23:30.697Z</atom:updated>
            <content:encoded><![CDATA[<p>As I understood it was referring to extension methods with structs.</p><p>Any struct passed to the extension method is by value (copied) — therefore any modification from extension method would be lost and there is an overhead with the copying of the object.</p><p>To solve this there is an open PR for <a href="https://github.com/dotnet/csharplang/issues/186">championing “by ref” extensions</a> and a <a href="https://github.com/dotnet/roslyn/issues/165">discussion</a> that was related to it.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=61c476c7b730" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[C# 7.0 and Beyond with Mads Torgersen]]></title>
            <link>https://medium.com/@jakubgarfield/c-7-0-and-beyond-with-mads-torgersen-36c44a047024?source=rss-1c7c2d4e77f7------2</link>
            <guid isPermaLink="false">https://medium.com/p/36c44a047024</guid>
            <category><![CDATA[programming]]></category>
            <category><![CDATA[csharp]]></category>
            <category><![CDATA[software-development]]></category>
            <category><![CDATA[microsoft]]></category>
            <category><![CDATA[dotnet]]></category>
            <dc:creator><![CDATA[Jakub Chodounsky]]></dc:creator>
            <pubDate>Fri, 05 May 2017 04:41:19 GMT</pubDate>
            <atom:updated>2018-12-03T03:47:01.849Z</atom:updated>
            <content:encoded><![CDATA[<p>New Zealand and Wellington especially are not exactly big so when the program manager of C# language comes into town for a meetup it would be a shame to stay at home.</p><p>This Wednesday the amazing <a href="https://www.meetup.com/WelliDotNet">WelliDotNet</a> meetup hosted <a href="https://twitter.com/MadsTorgersen">Mads Torgersen</a>; a guy responsible for the C# language design (and TypeScript and Visual Basic in the past); and he talked about the new features of C# 7.0 and where the next versions are heading.</p><p>Mads started with the results of <a href="https://stackoverflow.com/insights/survey/2017">Stack Overflow Developer Survey 2017</a> results where C# is 4th most used programming language.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/631/1*GYnh5JmLREPgIj343LpfIA.png" /><figcaption>Both C# and TypeScript are in the top 10 used programming languages</figcaption></figure><p>And it also made it to the top 10 most loved programming languages.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/612/1*1L0X8kgBDWJvLadz6R7WcA.png" /><figcaption>As well with TypeScript on impressive 3rd place</figcaption></figure><p>He thinks the reasons behind that are</p><ul><li>C# now runs on every platform (not just Windows),</li><li>Roslyn is an open compiler,</li><li>you can use your favourite editor, not just Visual Studio and</li><li>everything is open source.</li></ul><blockquote>Q: How hard was it to get more open?<br>A: It was hard initially and was happening more on team level. Now it aligns with the overall vision of Microsoft and how products interact with each other (e.g. Azure).</blockquote><p>C# evolution is a balancing act as you want to</p><ul><li>aggressively improve and also stay simple,</li><li>improve existing development and become attractive to more users,</li><li>embrace new paradigms but stay true to the spirit of C#.</li></ul><h3>New features in C# 7.0</h3><p>Mads started with minor features and talked briefly about new binary literals. And the _ separator.</p><pre>int[] x = [0b1, 0b10, 0b100, 0b1_000];<br>int y = 1_000_000;</pre><blockquote>Q: How does C# 7.0 relates to the CLR? Does it need an updated runtime?<br>A: You can target CLR 2.0 — no new feature is implemented with new IL instructions.</blockquote><h4>Tuples</h4><p>One of the major features is the direct support of tuples — System.ValueTuple. So now you can write functions with multiple return values.</p><pre>private static (int, int) Tally(int[] numbers)</pre><blockquote>Q: How is System.ValueTuple different from System.Tuple?<br>A: It is a struct as opposed to System.Tuple being class. And it has just 7 fields and the rest becomes a tuple (e.g. Item8 is a tuple).</blockquote><blockquote>Q: Why is System.Tuple class?<br>A: It was a design decision from F# team — but they might regret it as well.</blockquote><p>Also, you can write tuple literals like(0, 0);</p><blockquote>Q: Is that limited to value types only?<br>A: No, they are generic types underneath.</blockquote><p>You can optionally provide names for tuple items in method definitions, literals and everywhere else you use tuples.</p><pre>public static (int sum, int count) …<br>var x = (sum: 0, count: 0);</pre><p>These names are tracked only by the compiler; in runtime they are not used and only Item1 style is visible. In debugging the names are available but not if you use reflection.</p><p>Another feature is deconstruction of tuples with _ notation for unused variables — discards.</p><pre>(int sum, _ ) = Tally(numbers);</pre><p>The deconstruction could be also used with your own types overriding the <em>deconstructor</em>.</p><p>Tuples are mutable but it is discouraged to mutate them — items are public fields which mitigates every downsides though. You get equality, hashcode computation and all the benefits of using structs out of the box.</p><h4>Local functions</h4><p>Apart tuples you can write local functions — function inside a function. It could improve readability of your code while keeping it closed and nicely contained.</p><pre>private void MyFunction()<br>{<br>    Add(0, 1);<br>    void Add(int s, int c =&gt; r = (….);<br>}</pre><blockquote>Q: Can you pass local function as a lambda delegate to other function?<br>A: Yes, you can.</blockquote><h4>Pattern matching</h4><p>C# finally gets pattern matching in a slightly awkward syntax.</p><pre>switch (v)<br>{<br>  case int i:<br>    Add(i);<br>    break;<br>  case object[] a when a.length &gt; 0:<br>    ...<br>}</pre><blockquote>Q: Is there a plan for better matching syntax?<br>A: Yes, it is on the agenda.</blockquote><p>Note that you can use any condition expressions and it’s capable of extracting the value matched to the “local” variable. With that feature switch is now case sensitive.</p><blockquote>Q: Is this a breaking change?<br>A: No, because the previous switch expressions were using constants which didn’t care about the order.</blockquote><h4>Others</h4><p>And with that a few other smaller features. You can declare variable in the middle of expression.</p><pre>int.TryParse(…, out var x) { x += 1; }</pre><p>And you can do ref returns and ref locals. Which is useful for low level development where you don’t want to allocate objects and want to avoid garbage collection.</p><h3>The future</h3><p>New versions of C# are planned to be released on quarterly basis which sounds quite daring. The next proposals are just drafts and could be changed in the future.</p><h4>C# 7.1</h4><p>This should be a release of minor convenience features that are not really related to each other, are small and self-contained.</p><p>Being able to define async Main function even if it is mostly for demonstration purposes.</p><p>And explicitly state default initialisation with</p><pre>int i = default</pre><p>enhance the null inference</p><pre>int? n = b ? i : null</pre><p>add tuple projection initialisers</p><pre>var t = (i, n); return t.i;</pre><p>and add discards to more places</p><pre>o.PropertyChanged(_, _) =&gt; …</pre><h4>C# 7.2</h4><p>This release will focus on more low level stuff without the need to work with pointers. There is a lot of game developers using C# with Unity and better performance could also be used in finance and other applications.</p><p>Those features could include ref readonly parameters and returns (the opposite of out parameter which needs to be assigned) — it says don’t modify me.</p><p>The extension methods are not ideal so redesign them and allow them to be used with refs and on structs.</p><p>And allow ref conditionals.</p><p>Another feature could include readonly structs that don’t need to be copied and a new ref-like structures for abstraction over a chunk of memory.</p><h4>C# 7.3</h4><p>This version should focus on nicer patterns and developer’s user experience. That could involve better recursive patterns, nicer syntax for pattern matching and tuple patterns.</p><h4>C# 8.0</h4><p>Major release in which the C# team might introduce changes to CLR — that would be for the first time since the introduction of generics. All the features added since were mostly compiler tricks.</p><p>One proposed feature are nullable reference types.</p><pre>string? n; // nullable — enforces checking before usage<br>string s; // non-nullable</pre><pre>n = null; // sure<br>s = null; // warning<br>s = n; // warning</pre><pre>s.Length(); // sure<br>n.Length(); // warning<br>if (n != null) { n.length } // sure<br>n!.length // sure – a new operator converts into non-nullable</pre><p>Big feature could be adding default implementation to interface members. One of the use cases would be making C# a great tool for working with mobile platforms (both Java and Objective-C supports this feature) and make Xamarin even more awesome.</p><p>And lastly a few improvements around async with async streams and disposables and adding foreach await to process data when coming and using await for safe application of disposable pattern.</p><p>C# could add records (similar to Ruby’s OpenStruct) for simple classes with default implementation of deconstruction, hash codes and equality.</p><pre>class Person(string name, string lastName);</pre><p>Lastly, there might be a support for immutable objects.</p><h3>Conclusion</h3><p>So that’s it. The future for C# is pretty bright and the features are exciting. I’m quite happy about pattern matching introduction and deconstruction. And maybe in the future immutable objects with some nullable reference types. That’d be cool.</p><p>Again, big shoutout to WelliDotNet not just for the pizza but for the great event with the world class speaker.</p><p><em>If you liked this article you might enjoy </em><a href="https://csharpdigest.net?utm_source=medium&amp;utm_medium=blog&amp;utm_campaign=csharp+7+and+beyond"><em>C# Digest</em></a><em> newsletter with 5 links from the .NET community that I put together every week.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=36c44a047024" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Garbage collection in C#]]></title>
            <link>https://medium.com/@jakubgarfield/garbage-collection-in-c-5cd32ffd2c48?source=rss-1c7c2d4e77f7------2</link>
            <guid isPermaLink="false">https://medium.com/p/5cd32ffd2c48</guid>
            <category><![CDATA[dotnet]]></category>
            <category><![CDATA[software-development]]></category>
            <category><![CDATA[programming]]></category>
            <category><![CDATA[csharp]]></category>
            <category><![CDATA[garbage-collection]]></category>
            <dc:creator><![CDATA[Jakub Chodounsky]]></dc:creator>
            <pubDate>Wed, 03 May 2017 00:00:00 GMT</pubDate>
            <atom:updated>2018-12-03T03:45:32.848Z</atom:updated>
            <content:encoded><![CDATA[<p>When you are programming, no matter the task on hand, you are manipulating some data. These are stored in basic types and objects and they live inside computer memory. Eventually, the memory fills up and you need to make more room for new data and discard the old one.</p><p>You can do it either by hand, like C and C++ programmers (used to) do, or use a languages with a mechanism that does it for you. In C# we are fortunate enough to have a <a href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)">garbage collector</a> that takes care of our memory.</p><h3>Basic concepts</h3><p>In short, garbage collector tries to find objects that are no longer in use by the program and delete them from memory.</p><p>The first garbage collected language was <a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)">LISP</a> written by <a href="https://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)">John McCarthy</a> — one of the founders of artificial intelligence — around 1959. So the concept has been around for a while.</p><p>When you have a garbage collector in place you are making a trade off of safe memory allocations and programmer’s productivity for performance overhead. Garbage collected language will never be suitable for real-time critical applications like air traffic control, but you can get solid performance out of it — I’ve seen successful high frequency trading platforms written in C#.</p><p>Garbage collection is not only responsible for cleaning the memory and compacting it, but also allocating new objects.</p><p>.NET and CLR are making use of tracing garbage collector. That means that on every collection the collector figures out whether the object is used by tracing every object from stack roots, GC handles and static data.</p><p>Every object that could be traced is marked as live and at the end of tracing the ones without the mark are removed (swept) from the memory and it gets compacted. This is called a simple <strong>mark and sweep algorithm</strong>.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/420/0*hcALJRTPz_LLQZV3.gif" /></figure><p>It gets a bit <a href="https://en.wikipedia.org/wiki/Tracing_garbage_collection">more complex</a> than that but this is enough for having a simple mental model of what’s happening under the hood.</p><p>If the garbage collector halts the program when running we call this event <strong>stop the world</strong>. That guarantees that no new objects are allocated during collection, but it also means that there will be a delay in our program. To minimise that disruption <strong>incremental</strong> and <strong>concurrent</strong> garbage collectors has been designed.</p><p>Incremental collection makes the pauses shorter and works in small increments and concurrent doesn’t stop the program at all. For that you are paying with the overall longer collection time and the use of more CPU and memory resources than traditional stop the world.</p><h3>Generational collection</h3><p>In 1984 David Ungar came up with a <a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.122.4295&amp;rep=rep1&amp;type=pdf">generational hypothesis</a> that layed the foundations of GC that are in use these days.</p><blockquote><em>Young objects die young. Therefore reclamation algorithm should not waste time on old objects.<br> Copying survivors is cheaper than scanning corpses.</em></blockquote><p>This hypothesis gave birth of the generational garbage collectors — first used in Smalltalk and used in all modern platforms today — C# is not an exception.</p><p>The memory is divided into several generations based on the age of objects. The collection happens in the youngest generation and the surviving objects are promoted to the generation above.</p><p>In C# we have 3 generations:</p><ul><li><strong>Generation 0</strong> is the youngest generation with short-lived objects in which the collection happens the most often. New objects are placed here with the exception of large objects that go straight to the Generation 2.</li><li><strong>Generation 1</strong> serves as a buffer between the short-lived and long-lived objects.</li><li><strong>Generation 2</strong> is the place for the long-lived objects and it gets collected less often.</li></ul><p>When there is a collection over Generation 2 we call it <em>full garbage collection</em> as it goes through all objects in managed memory.</p><p>To keep the balance between generations most modern platforms are using a hybrid approach of generational cycles (minor cycle) and some variation of full mark and sweep (major cycle).</p><p>The CLR automatically adjusts itself between not letting the used memory get too big and not letting the garbage collection take too much time by setting thresholds for new object allocation.</p><p>The collection gets triggered when</p><ul><li>memory is low,</li><li>threshold is exceeded or</li><li>GC.Collect is called manually.</li></ul><p>When the collection is triggered every thread is suspended, so it can’t allocate new memory, and the GC thread goes into action.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/564/0*1tkuQIcoDXdOMesm.jpeg" /></figure><p>As you already know the collector uses static data to know whether the object is alive or not. As the static fields are kept in memory forever (until the AppDomain gets unloaded) this might lead to a common memory leak when it refers to a collection and you keep adding objects to the collection. The static field keeps the collection alive and all the objects inside alive as well. Be careful about that and possibly avoid the usage of static fields if you can.</p><h3>Characteristics</h3><p><a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e">Modern garbage collectors</a> have different characteristics and as with many things in programming — different trade offs. Based on the application requirements they could be tuned towards less interruptions and better user experience or maybe you want to run a fast server-side application that scales.</p><p>What characterizes a Garbage Collector?</p><ul><li><strong>Program throughput</strong>: CPU time spent collecting vs CPU time doing useful work.</li><li><strong>GC throughput</strong>: amount of data the collector can clear per CPU time.</li><li><strong>Heap overhead</strong>: additional memory the collector produced during collection.</li><li><strong>Pause times</strong>: time needed for collection.</li><li><strong>Pause frequency</strong>: how often does garbage collection happen?</li><li><strong>Pause distribution</strong>: short pauses vs long pauses, and how consistent the pauses are.</li><li><strong>Allocation performance</strong>: how much time does the new object allocation take? Is it predictable?</li><li><strong>Concurrency</strong>: does the collector make use of multicore CPUs?</li><li><strong>Scaling</strong>: can your GC handle larger heaps?</li><li><strong>Warmup time</strong>: can a collector adjust to the characteristics of your application? How long does it take to adjust?</li></ul><h3>Configuration</h3><p>You can influence the type and behavior of your application by setting garbage collection to a different type.</p><p>There are two major types — workstation and server. They could be configured by setting &lt;gcServer enabled=&quot;true|false&quot; /&gt; element in your application configuration.</p><pre>&lt;configuration&gt;<br>   &lt;runtime&gt;<br>       &lt;gcServer enabled=&quot;true&quot;/&gt;<br>   &lt;/runtime&gt;<br>&lt;/configuration&gt;</pre><p>The workstation setting is tuned for client-side applications. Low latency is preferred as you don’t want your forms in WPF application become unresponsive during a long pause caused by garbage collection. In this mode it favours user experience and less CPU usage.</p><p>On the other hand, the server configuration is designed for high throughput and scalability of server-side applications and it uses multiple dedicated threads for garbage collection with the highest priority. It is faster than workstation but that also comes with more CPU and memory usage. This configuration assumes that no other applications are running on the server and prioritise the GC threads accordingly. Also, it splits the managed heap into sections based on the number of CPUs. There is one special GC thread per CPU that takes care of the collection of its section. You can run this mode only on a computer with multiple CPUs.</p><p>By default, the workstation GC mode is active.</p><p>Another option you can choose is to use concurrent collection by using the &lt;gcConcurrent enabled=&quot;true|false&quot; /&gt;. It will give you more responsive application with less pause frequency and time.</p><pre>&lt;configuration&gt;<br>   &lt;runtime&gt;<br>       &lt;gcConcurrent enabled=&quot;false&quot;/&gt;<br>   &lt;/runtime&gt;<br>&lt;/configuration&gt;</pre><p>In concurrent mode, there will be an extra background thread that marks the objects alive when your application is executing its code. When it comes to collection, it will be faster as the set of dead objects has already been built.</p><p>The concurrency only affects the generation 2. Generation 0 and 1 will always be non-concurrent as they both finish fast and are not worth the extra overhead. When concurrent option is set, a dedicated thread will be used for collection.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/562/0*DF00Ij6yE49OYc3R.jpeg" /></figure><p>To improve performance of several processes running side by side, you can try using workstation garbage collection with the concurrent collection disabled. This will lead to less context switching and therefore better performance.</p><h3>Performance</h3><p>The memory is divided into small object heap and large object heap. Large objects are the ones above 85 000 bytes and they go straight into the Generation 2.</p><p>In general, fewer objects on the managed heap is less work for garbage collector. That is applied especially to the large object heap that gets collected less often.</p><p>If you feel like GC causes you troubles there are various tools that you can use to <a href="https://msdn.microsoft.com/en-us/library/ee851764(v=vs.110).aspx#performance_analysis_tools">debug it</a> — memory performance counter, WinDbg or tracing ETW events.</p><p>Triggering collection manually with GC.Collect is usually more counterproductive than beneficial unless you really know what you are doing. It might help in certain situations when you want to release a lot of memory at once (e.g. a large dialog is closed and won’t be used again) – but unless you have diagnosed a memory problem, don’t go there.</p><p>If you are calling GC.Collect manually too frequently you will certainly see a decrease of performance in your application.</p><p>When you get into situation where the latency of your application is critical — like in the middle of the high frequency trading decision loop — you can set a <a href="https://msdn.microsoft.com/en-us/library/bb384202(v=vs.110).aspx"><em>low latency mode</em></a>. This will put the GC into a low intrusive mode when it will become very conservative.</p><pre>GCLatencyMode oldMode = GCSettings.LatencyMode;<br>System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions();<br>try<br>{<br>    GCSettings.LatencyMode = GCLatencyMode.LowLatency;<br>    ...<br>}<br>finally<br>{<br>    GCSettings.LatencyMode = oldMode;<br>}</pre><p>The collection of Generation 2 will be paused for the time in low latency mode. That leads to shorter and less frequent pause times and therefore decreased program latency. But that comes with the price that you might run out of memory if you are not careful. The best guideline is to keep those low latency sections as short as possible and don’t allocate too many new objects, especially on the large heap. In this case you might want to call GC.Collect where appropriate to force the Generation 2 collection.</p><p>Don’t forget that the latency mode is process wide, so if you are running multiple threads it will be applied to all of them.</p><h3>Managed and unmanaged resources</h3><p>In <a href="https://en.wikipedia.org/wiki/Common_Language_Runtime">CLR</a> all the code that is written is managed and it will be garbage collected. C# gets compiled into CIL and runs on top of CLR so all your C# code will be garbage collected.</p><p>That sounds easy enough until you need to use unmanaged resources.</p><p>And you will use them on almost daily basis as these are database connections, COM interops, network and file streams and many others. Unmanaged resources are not garbage collected and you need to free them from your memory by hand.</p><p>If you write a type that uses an unamanged resource you should</p><ul><li>implement the <a href="https://msdn.microsoft.com/en-us/library/b1yfkh5e(v=vs.110).aspx">dispose pattern</a> and</li><li>provide a mechanism to free the resource in case consumer forgets to call Dispose.</li></ul><p>The basic implementation of a dispose pattern with the use of SafeHandle could look like</p><pre>public class DisposableResourceHolder : IDisposable<br>{<br>    private SafeHandle resource;</pre><pre>public DisposableResourceHolder()<br>    {<br>        this.resource = ...<br>    }</pre><pre>public void Dispose()<br>    {<br>        Dispose(true);<br>        GC.SuppressFinalize(this);<br>    }</pre><pre>protected virtual void Dispose(bool disposing)<br>    {<br>        if (disposing)<br>        {<br>            if (resource != null) resource.Dispose();<br>        }<br>    }<br>}</pre><p>To free the resource you can use Object.Finalize or SafeHandles. For more details check out <a href="https://msdn.microsoft.com/en-us/library/498928w2(v=vs.110).aspx">Cleaning up Unmanaged Resources</a>.</p><p>As a consumer of a type with unmanaged resource always use the using pattern.</p><pre>using (var s = new StreamReader(&quot;file.txt&quot;))<br>{<br>  ...<br>  s.Close();<br>}</pre><p>How can you tell the object needs to be disposed? It implements the IDisposable interface. Some static analysis tools can help you notice the cases where you might have forgotten to dispose your objects.</p><h3>What about other languages?</h3><p>The first versions of <strong>Ruby</strong> used a simple mark and sweep technique which isn’t the best performer but it was simple for the authors of C-extensions to write native extensions. That simplicity was the key to Ruby’s growth in the beginning and took it where it is these days. Generational collection was introduced in Ruby 2.1 (current version is 2.4) to improve the throughput of programs — quite late in terms of language maturity. After that Ruby 2.2 introduced <a href="https://blog.heroku.com/incremental-gc">incremental marking</a> which addresses long pause times by running the GC in short increments.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*8hPPS8Qh9Ansi13h." /></figure><p>Programmers in <strong>C++</strong> don’t have any garbage collection and they need to do memory management by hand. There are techniques to make that easier — <a href="http://www.boost.org/doc/libs/1_36_0/libs/smart_ptr/smart_ptr.htm">smart pointer</a> are now part of the C++ 11 standard and are a tool that automatically deletes memory from the heap. Smart pointer can be implemented with <a href="https://en.wikipedia.org/wiki/Reference_counting">reference counting</a> that ensures that the object is deleted as soon as it is no longer needed — as opposed to tracing garbage collection when the unused object waits for the next cycle of collection.</p><p><strong>Java</strong> is very similar to C# and uses <a href="http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html">tracing generational garbage collection</a> — the heap is structured to a young generation (eden, S0 and S1), old generation and permanent generation. GC uses minor and major cycles to clean the generations and promote objects from one to the other. Both the collections of young and old generations are the “stop the world” event so all the threads are suspended until they finish. There are different types of collectors on JVM — serial, parallel, concurrent mark and sweep and its replacement G1 in Java 7.</p><p><strong>Python</strong> doesn’t use tracing garbage collection but a <a href="https://www.quora.com/How-does-garbage-collection-in-Python-work">reference counting with periodical cycle detection</a> to solve the case of two dead objects pointing to each other. But as opposed to classic reference counting it combines it with the generational approach and uses the reference count instead of the mark and sweep algorithm. It doesn’t deal with memory fragmentation but tries to avoid it with allocating objects on different pools of memory.</p><p>In <strong>Javascript</strong> there isn’t a unified approach to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management">garbage collection</a>. It is in hands of browser vendors and they do it differently — Internet 6 and 7 used reference counting garbage collectors for DOM objects. From 2012 almost all modern browsers are shipped with tracing mark and sweep algorithms with some extra improvements — generations, incremental collection, concurrency and parallelism.</p><h3>Conclusion</h3><p>C# and languages on top of CLR are garbage collected. They use generational garbage collection with 3 generations and an advanced tracing mark and sweep algorithm to figure out which objects are still alive.</p><p>You can change the characteristics of the collector by changing to a server or workstation mode and setting up a concurrency mode.</p><p>Most of the times triggering garbage collection manually is not a good idea unless you really know what you are doing. And in cases where latency is important you can use latency mode to increase your program throughput and eliminate pauses.</p><p>Lastly, there are unmanaged resources like file streams, network, database connections that you need to take a special care of. Most of the times you’ll be implementing and using the IDisposable pattern so you don’t cause any memory leaks in your application.</p><p><em>If you liked this article you might enjoy </em><a href="https://csharpdigest.net?utm_source=medium&amp;utm_medium=blog&amp;utm_campaign=garbage+collection"><em>C# Digest</em></a><em> newsletter with 5 links from the .NET community that I put together every week.</em></p><h3>Resources</h3><ul><li><a href="https://msdn.microsoft.com/en-us/library/0xy59wtx(v=vs.110).aspx">Garbage collection on MSDN</a></li><li><a href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)">Garbage collection on Wikipedia</a></li><li><a href="https://en.wikipedia.org/wiki/Tracing_garbage_collection">Tracing garbage collection</a></li><li><a href="https://blog.plan99.net/modern-garbage-collection-911ef4f8bd8e#.y5kgl8qvc">Mike Hearn on Modern garbage collection</a></li><li><a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.122.4295&amp;rep=rep1&amp;type=pdf">David Ungar on Generation Scavenging</a></li></ul><p><em>Originally published at </em><a href="https://chodounsky.net/2017/05/03/garbage-collection-in-c-sharp/"><em>chodounsky.net</em></a><em> on May 3, 2017.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5cd32ffd2c48" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Programming newsletters are the future]]></title>
            <link>https://medium.com/@jakubgarfield/programming-newsletters-are-the-future-b27152734130?source=rss-1c7c2d4e77f7------2</link>
            <guid isPermaLink="false">https://medium.com/p/b27152734130</guid>
            <category><![CDATA[programming]]></category>
            <category><![CDATA[newsletter]]></category>
            <category><![CDATA[software-development]]></category>
            <category><![CDATA[news]]></category>
            <category><![CDATA[technology]]></category>
            <dc:creator><![CDATA[Jakub Chodounsky]]></dc:creator>
            <pubDate>Wed, 26 Apr 2017 20:37:07 GMT</pubDate>
            <atom:updated>2018-12-03T03:42:36.455Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*I_0qMnvv6K5SllPOFCqwyQ.jpeg" /></figure><p>Part of being a great software developer is <a href="http://www.c-sharpcorner.com/blogs/how-to-keep-up-to-date-as-a-c-sharp-developer">keeping up to date</a>, but there are a few problems with that.</p><p>Every day you are bombarded with tons of information and news from all the different sources — Twitter, HackerNews, Medium, and all the others.</p><p>Your build is running a bit slow today, so you decide to have a look at Twitter, maybe read something about the new C# 7 features. You just want to sharpen your saw as <a href="https://medium.com/@jakubgarfield/7-habits-of-highly-effective-c-developers-4eea465801be">highly effective developers</a> tend to do.</p><p>But the bottomless timeline is designed to keep you on the site longer. To distract you from your real reason why you there — to educate yourself.</p><p>Ads, link-baits, unrelated posts and suddenly you find yourself half an hour later watching some cat video, engaged in political discussion, or day dreaming after reading some startup success story. And the <a href="https://chodounsky.net/2015/11/12/focus/">focus</a> is gone.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/500/1*Y7SFpn0yzQYo1x0FFybmvg.gif" /><figcaption>Not just thrill can be gone.</figcaption></figure><p>Curation is hard. Trust me. I’ve been curating programming newsletters for a few years and it’s a skill you need to learn. When you subscribe to an email newsletter someone else does it for you.</p><p>Most current content media are designed for instant consumption. If are not there, you will miss the post. And what if it is a truly revolutionary? This creates an unpleasant fear of missing out.</p><p>That’s why you find yourself checking the streams multiple times a day and you might even not realise it. It becomes part of your subconscious habits. <em>Ctrl+T f a c e</em> … what the hell am I doing?</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/350/1*et1ftNMqdYoIEMdcPaEmHw.gif" /><figcaption>You typed Facebook into your address bar, didn’t you?</figcaption></figure><p>You feel busy, you feel important, you feel productive. The hard true is that you are not. You are just distorting your attention.</p><p>With newsletters you receive them in your inbox and you read them when it suits you (you turned email notifications off, right?). Nothing to be missed. No constant fear and no ever-present multi-tasking. That’s why I love them and I think you should too.</p><p>Turn off distractions. Get your sanity back. Read programming newsletters.</p><p>If you liked this check out the newsletters I put together every week:</p><ul><li><a href="https://csharpdigest.net?utm_source=medium&amp;utm_medium=blog&amp;utm_campaign=newsletters+are+future">C# Digest</a> is great for any .NET developers as it stays general enough to be useful for any ASP.NET developer as well as WPF or plain backend one.</li><li><a href="https://programmingdigest.net?utm_source=medium&amp;utm_medium=blog&amp;utm_campaign=newsletters+are+future">Programming Digest</a> gives you an idea of what’s happening in different programming communities. Good complement to your niche.</li><li><a href="https://reactdigest.net?utm_source=medium&amp;utm_medium=blog&amp;utm_campaign=newsletters+are+future">React Digest</a> is focused on front-end web development with React and the stack around.</li><li><a href="https://elixirdigest.net?utm_source=medium&amp;utm_medium=blog&amp;utm_campaign=newsletters+are+future">Elixir Digest</a> has everything important about Phoenix framework and Elixir language.</li><li><a href="https://aidigest.net?utm_source=medium&amp;utm_medium=blog&amp;utm_campaign=newsletters+are+future">Machine Learning Digest</a> is the best for getting your feet wet with artificial intelligence, data science, and machine learning topics.</li></ul><p>There are heaps of other great newsletters and if you follow one, please tell me in the comments below. I’d love to check them out.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b27152734130" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>