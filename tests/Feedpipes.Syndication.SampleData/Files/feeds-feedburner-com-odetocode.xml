<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/rss2full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0"><channel><title>OdeToCode by K. Scott Allen</title><description>OdeToCode by K. Scott Allen</description><copyright>(c) 2004 to 2019 OdeToCode LLC</copyright><managingEditor>scott@OdeToCode.com</managingEditor><generator>OdeToCode 2.0</generator><image><url>https://odetocode.com/images/odetocode.jpg</url><title>OdeToCode by K. Scott Allen</title><link /></image><a10:link href="https://odetocode.com/" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/rss+xml" href="http://feeds.feedburner.com/OdeToCode" /><feedburner:info xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" uri="odetocode" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><item><guid isPermaLink="true">http://odetocode.com/blogs/scott/archive/2019/06/26/talk-ideas-for-2020.aspx</guid><link>http://odetocode.com/blogs/scott/archive/2019/06/26/talk-ideas-for-2020.aspx</link><author>scott@OdeTocode.com</author><title> Talk Ideas for 2020</title><description>&lt;p&gt;After a 12-month break from developer conferences, I'm looking forward to working with a small handful of conferences next year. I've been kicking around some ideas for topics I’d like to talk about, and I'm sharing those ideas because thoughts and feedback are always appreciated!&lt;/p&gt;
&lt;h3&gt;An Architects Guide to Building Cloud Native Solutions in Azure&lt;/h3&gt;
&lt;p&gt;One of the challenges you’ll face when building applications in the cloud is in choosing the best technologies for your solution. In this session we’ll take a broad look at the technologies, services, and infrastructure available in Azure while drilling into the vital details you need to make decisions. What’s the best host for my container-based solution? Should I place my data into a data lake, a data warehouse, or a simple blob container? What’s the essential difference between a message queue and an event hub? We’ll answer these questions while also covering topics like security, identity, governance and compliance.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images3/talks2020/IMG_0916.jpg" class="image-center" alt="Into the Sky" /&gt;&lt;/p&gt;
&lt;h3&gt;Apache Spark for .NET Developers&lt;/h3&gt;
&lt;p&gt;Big data meets .NET with Apache Spark, the analytics engine for large-scale data processing. If you are a .NET developer and you need to create an ETL process for high volumes of data, or process large streams of data in real time, or train machine learning models against a big data set, or explore big data sets with exploratory queries, then Apache Spark is a technology you should know about. Once we’ve seen how to setup an Apache Spark cluster and worked with the shell, we’ll dive into the .NET bindings for Spark and see how to query and analyze data using C#, F#, and SQL.  We’ll also be looking at Azure’s DataBricks platform to work with Spark in a managed environment.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images3/talks2020/IMG_0893.jpg" class="image-center" alt="Around the Corner" /&gt;&lt;/p&gt;
&lt;h3&gt;What .NET Core Developers Should Know about MSBuild&lt;/h3&gt;
&lt;p&gt;If you’ve ever wondered what makes MSBuild work, or if you’ve ever needed to tweak the XML in a project file to allow your software to compile, then this session is for you. We’ll start by learning about the fundamental concepts in MSBuild, concepts like tasks, properties, and conditionals. We’ll then move into the details of build targets that drive most of today’s builds. This talk is based on years of experience in being the person who everyone uses to debug builds, so there will be no shortage of tips and tricks for managing and debugging your builds.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images3/talks2020/IMG_0888.jpg" class="image-center" alt="A Seat at the Table" /&gt;&lt;/p&gt;
&lt;h3&gt;Five Lessons Learned as the CTO&lt;/h3&gt;
&lt;p&gt;Leadership skills come naturally for some people, but for the rest of us we need to figure out leadership as we go along. If you are thinking of making the jump from being a technical contributor, or have your sights set for the chief technical position, this session will give you some insight and lessons learned from experiences on the job.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images3/talks2020/IMG_0880.jpg" class="image-center" alt="Tapestry" /&gt;&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/OdeToCode?a=bi0c-VPB0Y8:zMvMQiloEwM:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/OdeToCode?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</description><pubDate>Wed, 26 Jun 2019 12:24:00 Z</pubDate></item><item><guid isPermaLink="true">http://odetocode.com/blogs/scott/archive/2019/06/24/questions-from-the-ndc-oslo-panel-discussion-on-the-future.aspx</guid><link>http://odetocode.com/blogs/scott/archive/2019/06/24/questions-from-the-ndc-oslo-panel-discussion-on-the-future.aspx</link><author>scott@OdeTocode.com</author><title> Questions from the NDC Oslo Panel Discussion on the Future of .NET</title><description>&lt;p&gt;At NDC Olso I was part of a panel discussion with Julie Lerman, David Fowl  er, Damian Edwards, and Bryan Hogan. Here are my stream of consciousness answers for some of the questions presented to the panelists. Not all the questions were directed to me, but I jotted down some thoughts nonetheless.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images3/ndcpanel/IMG_0827.jpg" class="image-center" alt="NDC Oslo Show Floor" /&gt;&lt;/p&gt;
&lt;h3&gt;What are you most excited about with .NET Core 3?&lt;/h3&gt;
&lt;p&gt;This might sound odd, but I’m excited about WPF and Windows Forms. It’s not that I want to go out and write a new application using WinForms. But, I have a WinForms application that is still in production and is old enough to graduate from high school. I feel good knowing that Microsoft recognizes the importance of these older frameworks and the importance of writing desktop applications. For some scenarios, desktop applications are easier to build than web applications, and for the first time in more than 5 years I feel like .NET supports the desktop.&lt;/p&gt;
&lt;p&gt;I’m also excited about gRPC services in ASP.NET Core. I think the enterprise struggles with the alternatives to WCF and SOAP. REST and hypermedia work well for some services and applications, but there are many scenarios where you need to bang out a distributed service and don’t need the overhead of perfectly decoupled components. In other words, HTTP and JSON are great, but the old days of “Add Service Reference” aren’t as bad as many people make them out to be. Like it or not, SOAP and WS-* protocols still perform significant amounts of work in today’s world. I believe gPRC can be a better SOAP.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images3/ndcpanel/IMG_0823.jpg" class="image-center" alt="NDC Oslo Panel Discussion on the Future of .NET" /&gt;&lt;/p&gt;
&lt;h3&gt;What do you think of performance improvements in .NET Core 3?&lt;/h3&gt;
&lt;p&gt;My favorite new API is &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.math.fusedmultiplyadd?view=netcore-3.0#System_Math_FusedMultiplyAdd_System_Double_System_Double_System_Double_"&gt;Math.FusedMultiplyAdd&lt;/a&gt;. The operation sounds like something you might need in the software for a thermonuclear simulator. It’s fast, and it’s accurate! Be careful!&lt;/p&gt;
&lt;h3&gt;Where Do You See the Entity Framework Going?&lt;/h3&gt;
&lt;p&gt;I think EF needs to expand its reach far beyond relational databases. I know EF Core 3 is going to support CosmosDB, but its taking a long time to get there, and I already have good abstractions I can use in the Cosmos DB SDK, so I don’t need EF there.&lt;/p&gt;
&lt;p&gt;It’s funny, ten years ago I considered relational databases to be the only way to store data. Then I started using MongoDB in real applications and I started to see all the alternatives. Today, I think of relational databases as specialized high-end storage for specific use cases. The bulk of my data, in terms of both volume and processing, lives outside of a SQL database. The data is in blob storage, and in data lakes, and is streaming through event grids, and getting crunched in Apache Spark clusters. That’s where I need help with data.&lt;/p&gt;
&lt;p&gt;I think the best thing EF could do moving forward is to split into two frameworks. One part of the framework could map data from CSV files and JSON payloads into CLR objects as quickly as possible. But, I don’t want just an object mapper in the AutoMapper sense, I also want something similar to an F# type provider for C#. I want to point to data in an Azure data lake or an event grid stream and then express my computations using strong types.&lt;/p&gt;
&lt;p&gt;The other part of the framework could focus on sending commands and queries to a remote data source for processing. Currently, EF translates LINQ expressions into SQL, but I think we need to give up on the dream of LINQ to everything. It takes too long for EF to support new databases, like ComosDB. It takes EF too long to support common features of a single database, like views and stored procedures in SQL. What we need is an EF that allows developers to use native data processing languages in straightforward fashion. Give me an elegant way to embed SQL statements in my code. SQL is everywhere! SQL is a language supported by SQL Server, by Cosmos DB, by Apache Spark, and in the future even blob storage in Azure. I need to take advantage of as many SQL features as I can without being limited by what can be expressed in C#, and then I need to execute the SQL and map results into objects.&lt;/p&gt;
&lt;p&gt;In short, I want better language interop and forget about abstracting heterogeneous data sources behind C# expressions.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images3/ndcpanel/IMG_0829.jpg" class="image-center" alt="NDC Oslo Panel Discussion on the Future of .NET" /&gt;&lt;/p&gt;
&lt;h3&gt;Do you worry that changes in .NET could leave people behind?&lt;/h3&gt;
&lt;p&gt;I do worry. I’m worried about people getting left behind, and I’m worrying about people getting confused and giving up. A couple of years ago I made a deliberate move away from front-end development because I felt the pace of change was unhealthy. It felt like everything was changing, but not getting better. The improvements were small and not worth the cost of keeping up to date. I always use webpack 4 as a specific example. There were many breaking changes between version 4 and version 3. For example, loaders were removed and replaced by rules. From what I could tell, rules don’t offer any features beyond loaders, but everyone moving from webpack 3 to webpack 4 starts with a broken webpack build because of the change, and they need to research the change and find out how to update their webpack configuration.&lt;/p&gt;
&lt;p&gt;I think .NET and the C# language are both changing, and I do believe they are moving forward, they are improving, and they are not just changing to make a change. But, I do worry that Microsoft doesn’t keep backward compatibility as a priority anymore. I know that backward compatibility can be an albatross and there’s been a lot of bad decisions made in the name of backward compatibility, but I also know I’m not pushing my team to update their ASP.NET Core 1.1 applications because of all the breaking changes in moving to 2.2. We’ll need to move eventually, but there’s nothing forcing us to move today except for the end of support coming in a few weeks. We’ll have to set aside a couple days to make the move and figure out the new package names, the new extension method namespaces, the new name for the web host builder, and how to configure the new authentication and authorization services and middleware. Then we have to run some tests and make sure we have no regressions in performance, features, or security. Upgrading is not just setting a version property in a project file, sometimes you need to learn about the philosophy changes in the framework.&lt;/p&gt;
&lt;h3&gt;Do you find companies are still reluctant to adopt Entity Framework?&lt;/h3&gt;
&lt;p&gt;Yes, I do. Just last month I was working with a development team that made it clear from the start that this team uses a DBA, and the DBA is going to be solely responsible for writing all SQL queries for the database.&lt;/p&gt;
&lt;p&gt;It is a reasonable decision to avoid the Entity Framework, and there are many reasons you can use to justify this decision. I only ask teams to avoid EF for the &lt;em&gt;right&lt;/em&gt; reasons. Don’t avoid EF because you think EF is insecure. I’d bet EF does a better job avoiding SQL injection attacks than hand rolled code. Don’t avoid EF because you think EF will be slow, there are many scenarios where EF is fast enough.&lt;/p&gt;
&lt;h3&gt;If you could rewrite .NET entirely, what would you change?&lt;/h3&gt;
&lt;p&gt;If .NET includes the C# language, too, the first thing I’d rip out and redo is async and await. We need async programming models, but the current solution is fragile and frustrating. I don't like the Async postfix convention in my codebase. I don’t want to see ConfigureAwait in my library code. I don’t want to worry about running sync code over async code or async code over sync code. We need better operability because here we don’t always have perfectly async code bases and libraries.&lt;/p&gt;
&lt;p&gt;What I’m saying is – I want to call Task.Result and not feel dirty or fearful.&lt;/p&gt;
&lt;h3&gt;Do you think future versions of .NET should offer language features like Ballerina?&lt;/h3&gt;
&lt;p&gt;For anyone who hasn’t heard of Ballerina, go visit &lt;a href="https://ballerina.io/philosophy/"&gt;ballerina.io&lt;/a&gt;. I worry about baking Ballerina type features into the language because I’m afraid we’ll end up with something like async and await where the solution covers 80% of the easy scenarios, but the last 20% is painful or near impossible.&lt;/p&gt;
&lt;p class="image-center"&gt;&lt;img src="/images3/ndcpanel/ballerina.jpg" alt="Ballerina sample" /&gt; &lt;/p&gt;
&lt;p&gt;Like it or not, C# is a general purpose programming language, so you are going to have scenarios that require boilerplate code. I do think we can make some changes to the language that can help eliminate boilerplate code. Every time I look at a project that generates Swagger docs or OpenAPI docs, there are these &lt;code&gt;[Produces]&lt;/code&gt; attributes all over the code. The attributes are noisy and I always wonder why the tools can't figure out the real return type.&lt;/p&gt;
&lt;p&gt;Or, better yet, why can’t the language &lt;em&gt;express&lt;/em&gt; what I’m going to return? C# is an object oriented language so I need to write methods with a return type like &lt;code&gt;IActionResult&lt;/code&gt; to cover all possible return types. But, &lt;code&gt;IActionResult&lt;/code&gt; loses all the fidelity you can have with the concrete types the method actually uses. What if C# had the F# concept of a sum type, or discriminated union? Then I don’t have to lose type fidelity by specifying a return type with some base class or interface. I think changes like this would make C# and then .NET appeal to an even broader audience.&lt;/p&gt;
&lt;p&gt;I also think .NET and the tools can continue to improve for the new world of microservices. Look at what’s happened with HttpClient over the years. The original version was impossible to use correctly, because you had to choose between network socket starvation on one hand, and infinite DNS cache lookups on the other. So, we need smarter bits of infrastructure, and we need better scaffolding tools. The scaffolding tools with MVC 5 are light years ahead of the tools in ASP.NET Core in terms of features and performance.&lt;/p&gt;
&lt;p&gt;Thanks for reading, and thanks to every who came to see the panel live!&lt;/p&gt;
&lt;p&gt;&lt;img src="/images3/ndcpanel/IMG_0923.jpg" class="image-center" alt="View from Holmenkollbakken" /&gt;&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/OdeToCode?a=jg-IJ5OxByU:BWOphOoYX5g:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/OdeToCode?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</description><pubDate>Mon, 24 Jun 2019 13:12:00 Z</pubDate></item><item><guid isPermaLink="true">http://odetocode.com/blogs/scott/archive/2019/06/13/mvc-5-in-retrospect.aspx</guid><link>http://odetocode.com/blogs/scott/archive/2019/06/13/mvc-5-in-retrospect.aspx</link><author>scott@OdeTocode.com</author><title> MVC 5 In Retrospect</title><description>&lt;p&gt;I've been in the guts of an ASP.NET MVC 5 application lately and have some more perspective on the improvements we take for granted in ASP.NET Core.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images3/retrospect/oslooil.jpg" class="pull-right" alt="Oslo in Oil" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Tag helpers are far easier to read and write compared to HTML helpers. There were days when I wanted to give up on Razor views, but tag helpers make the Razor engine second to only JSX in terms of smoothness. Of all the different techniques I've used to dynamically generate HTML, JSX and TSX are by far my favorites, and I think that’s because JSX took the approach of embedding the declarative language inside the imperative language (HTML inside of JavaScript). Embedding in the other direction, as Razor and others have done (language X inside of HTML), always seems to create scenarios with awkward syntax.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is refreshing to work with a framework that embraces dependency injection, like ASP.NET Core. ASP.NET MVC danced around DI and provides a hook for a central dependency resolver,  but you always have to wonder if something might not work because you’ve strayed outside the lines.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The artificial separation between ASP.NET MVC and the ASP.NET Web API was unfortunate and unpleasant,  but follows &lt;a href="https://en.wikipedia.org/wiki/Conway%27s_law"&gt;Conway’s law&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The startup logic for an ASP.NET MVC application is difficult to follow. There is code in global.asax and three or four other files in the App_Start folder. I haven’t been a big fan of how ASP.NET Core applications organize startup logic (see opinion &lt;a href="https://odetocode.com/blogs/scott/archive/2019/02/14/net-core-opinion-7-startup-responsibilities.aspx"&gt;7&lt;/a&gt; and &lt;a href="https://odetocode.com/blogs/scott/archive/2019/03/07/net-core-opinion-10-move-more-code-out-of.aspx"&gt;10&lt;/a&gt;), but even the worst examples are far better than the MVC approach.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Applications built before attribute routing was popular have the worst API routes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Front end builds were easy and fast when all you had to do was bundle and minify jQuery and a few other files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The scaffolding tools in MVC 5 are &lt;strong&gt;far ahead&lt;/strong&gt; of the scaffolding tools for ASP.NET Core. Not only are the older tools &lt;em&gt;considerably faster&lt;/em&gt;, but they tend not to throw exceptions as often as the ASP.NET Core tooling. Hopefully, ASP.NET Core will catch up.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/OdeToCode?a=RoHxJ3WPs6A:9XPAb1SjrCI:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/OdeToCode?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</description><pubDate>Thu, 13 Jun 2019 13:21:00 Z</pubDate></item><item><guid isPermaLink="true">http://odetocode.com/blogs/scott/archive/2019/06/10/latest-course-on-azure-and-vs2019.aspx</guid><link>http://odetocode.com/blogs/scott/archive/2019/06/10/latest-course-on-azure-and-vs2019.aspx</link><author>scott@OdeTocode.com</author><title> Latest Course on Azure and VS2019</title><description>&lt;p&gt;My latest Pluralsight course, released last week, is &lt;a href="https://app.pluralsight.com/library/courses/visual-studio-azure-migrating-applications-services/table-of-contents"&gt;Migrating Applications and Services to Azure with Visual Studio 2019&lt;/a&gt;. The course is similar to my getting started course for .NET developers on Azure, but leverages more tools in Visual Studio. &lt;a href="https://app.pluralsight.com/library/courses/visual-studio-azure-migrating-applications-services/table-of-contents"&gt;&lt;img src="/images3/migrate/migrate.jpg" class="image-center" alt="Migrating Applications and Services to Azure with Visual Studio 2019" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/OdeToCode?a=yTaSxwSj9nE:opiF5bb3QCI:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/OdeToCode?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</description><pubDate>Mon, 10 Jun 2019 13:12:00 Z</pubDate></item><item><guid isPermaLink="true">http://odetocode.com/blogs/scott/archive/2019/05/30/evaluating-asp-net-core-authorization-policies.aspx</guid><link>http://odetocode.com/blogs/scott/archive/2019/05/30/evaluating-asp-net-core-authorization-policies.aspx</link><author>scott@OdeTocode.com</author><title> Evaluating ASP.NET Core Authorization Policies</title><description>&lt;p&gt;Let’s say you have the following authorization policy defined in the Configure method of your ASP.NET Core’s Startup class.&lt;/p&gt;
&lt;pre class="brush: csharp; gutter: false; toolbar: false; "&gt;
.AddAuthorization(options =&amp;gt;
{
    options.AddPolicy(&amp;quot;IsLucky&amp;quot;, builder =&amp;gt;
    {
        var random = new Random();
        builder.RequireAssertion(_ =&amp;gt; random.Next(1, 100) &amp;lt; 75);
    });
})
&lt;/pre&gt;
&lt;p&gt;This policy will grant access about ¾ of the time. It is easy to apply the policy to a controller or Razor page using the Authorize attribute.&lt;/p&gt;
&lt;pre class="brush: csharp; gutter: false; toolbar: false; "&gt;
[Authorize(Policy = &amp;quot;IsLucky&amp;quot;)]
public class SecretsModel : PageModel
{
      // ...
}
&lt;/pre&gt;
&lt;p&gt;But, what if you want to imperatively check the policy? For example, when building a navigation menu, you want to know if the user will be able to perform a given action or reach a specific resource before displaying links and command buttons in the UI. In this scenario, ask for an &lt;code&gt;IAuthorizationService&lt;/code&gt; type object in any controller or Razor page. The auth service combines a claims principal and a policy name to let you know if the user authorization check succeeds.&lt;/p&gt;
&lt;p&gt;For example, in the page model for a Razor page:&lt;/p&gt;
&lt;pre class="brush: csharp; gutter: false; toolbar: false; "&gt;
public class SecretsModel : PageModel
{
    public bool IsLucky { get; set; }
    private readonly IAuthorizationService authorization;

    public SecretsModel(IAuthorizationService authorization)
    {
        this.authorization = authorization;
    }

    public async Task OnGet()
    {
        var result = await authorization.AuthorizeAsync(User, &amp;quot;IsLucky&amp;quot;);
        IsLucky = result.Succeeded;
    }
}
&lt;/pre&gt;
&lt;p&gt;And then in the page itself:&lt;/p&gt;
&lt;pre class="brush: html; gutter: false; toolbar: false; "&gt;
@if(Model.IsLucky)
{
    &amp;lt;div&amp;gt;You got lucky!&amp;lt;/div&amp;gt;
}
else
{
    &amp;lt;div&amp;gt;No luck for you :(&amp;lt;/div&amp;gt;
}
&lt;/pre&gt;
&lt;p&gt;Of course, having an authorization policy that uses a a random number generator is weird, but I'm hoping to work it into a &amp;quot;random access&amp;quot; policy joke someday.&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/OdeToCode?a=RzvZSz_MUZI:ZYYPg4pVL38:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/OdeToCode?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</description><pubDate>Thu, 30 May 2019 13:12:00 Z</pubDate></item><item><guid isPermaLink="true">http://odetocode.com/blogs/scott/archive/2019/05/29/c-fundamentals-updated-again.aspx</guid><link>http://odetocode.com/blogs/scott/archive/2019/05/29/c-fundamentals-updated-again.aspx</link><author>scott@OdeTocode.com</author><title> C# Fundamentals Updated Again</title><description>&lt;p&gt;Speaking of Pluralsight, I released an update to my &lt;a href="https://app.pluralsight.com/library/courses/csharp-fundamentals-dev/table-of-contents"&gt;C# Fundamentals course&lt;/a&gt; in April and I'm just now catching up with the annoucement. The course is focused on the C# language, but I decided to use .NET Core and Visual Studio Code when recording the update. Now, you can follow along on Windows using Visual Studio, but you could also follow along on Linux or macOS using any text editor. If you are looking to learn C# and some object-oriented programming techniques, I designed this course for you!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://app.pluralsight.com/library/courses/csharp-fundamentals-dev/table-of-contents"&gt;&lt;img src="/images3/cs-fundamentals/diskbook.jpg" class="image-center" alt="C# Fundamentals" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/OdeToCode?a=48FQ7Y-Gtac:J5Pu5FiRR-w:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/OdeToCode?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</description><pubDate>Wed, 29 May 2019 13:12:00 Z</pubDate></item><item><guid isPermaLink="true">http://odetocode.com/blogs/scott/archive/2019/05/22/travelogue-the-pluralsight-ipo.aspx</guid><link>http://odetocode.com/blogs/scott/archive/2019/05/22/travelogue-the-pluralsight-ipo.aspx</link><author>scott@OdeTocode.com</author><title> Travelogue - The Pluralsight IPO</title><description>&lt;p&gt;I have a difficult time stating that I &lt;a href="https://odetocode.com/blogs/scott/archive/2019/02/25/travelogue-sdd-london.aspx"&gt;left London early&lt;/a&gt; to reach New York City in time for a pre-IPO party without laughing at the gaudiness of it all. However, that&amp;rsquo;s what I did just over one year ago.&lt;/p&gt;
&lt;p&gt;My Pluralsight story begins at a Visual Studio Live! Conference in 2007 when I met Fritz Onion in a speaker&amp;rsquo;s prep room. Fritz knew me from writing and blogging, and, eventually, our first meeting led me doing a "test teach" for Pluralsight.&lt;/p&gt;
&lt;p&gt;A "test teach" is a short tryout involving real students, but it was more than just a check on my speaking ability. I believe the "test teach" evaluated several soft attributes. Could I build a rapport with the students? Do I handle questions well? Can I socialize at lunchtime? Can I successfully arrange and coordinate travel on my own to reach the customer? It&amp;rsquo;s one thing to plan a trip to visit a tourist attraction where signs and strangers would help you along the way. Planning a trip to arrive at a nondescript office building in a generic business park of Jersey City at a very specific time requires more expertise [1].&lt;/p&gt;
&lt;p&gt;The test teach went well, and now I'm on a plane into Newark. Over the last 10 years I've taught dozens and dozens of classes all around the world for Pluralsight. I've made over 50 video courses for &lt;a href="https://pluralsight.com"&gt;Pluralsight.com&lt;/a&gt;. The company is ready to go public, and I've been invited to the opening bell ceremony!&lt;/p&gt;
&lt;h3&gt;The Arrival&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ve never been on a car ride into the city. I&amp;rsquo;ve always arrived on a plane, or underground on a train. But on this trip, I arranged for a driver to take me from Newark Airport to the W hotel in Times Square. It was my first time in a car through the Holland tunnel, and with all the traffic into the city at 7 pm, I had plenty of time to study the tunnel. The night was dark, wet, and foggy. New York had put on its Gotham city look, and I was waiting for the Batmobile to zoom past using an invisible traffic lane.&lt;/p&gt;
&lt;p&gt;&lt;img class="image-center" src="https://odetocode.com/images3/ps-ipo/IMG_1870.JPG" alt="Arriving in Gotham" /&gt;&lt;/p&gt;
&lt;p&gt;The pre-IPO dinner party was at Estiatorio Milos, a Greek seafood restaurant on 55th street. Milo&amp;rsquo;s food was okay. The place had the feel of an upscale restaurant designed to extract as much coin as possible from patrons while giving those same patrons the ability to brag to everyone about eating fish flown in fresh from the Mediterranean. Form over function. The company and festive atmosphere were better than the food. I joined late but found a seat among other authors, including Joe Eames, Deborah Kurata, and John Sonmez. Although there was talk of an after-party involving an ultimate milkshake, being on UK time, I needed sleep before the big morning.&lt;/p&gt;
&lt;p&gt;&lt;img class="image-center" src="https://odetocode.com/images3/ps-ipo/IMG_1872.JPG" alt="Milo's Food Offering" /&gt;&lt;/p&gt;
&lt;h3&gt;The IPO&lt;/h3&gt;
&lt;p&gt;Times Square in New York is an astounding place. Bright lights, tall buildings, and a mass of humanity moving through the streets. The ads are so intense they lead to sensory overload. There are animated ads for movies, which want to take your money in exchange for laughs. A four-story jewelry ad wants you to trade money for diamonds. Underwear, outerwear, phones, hotels, and banks all project images in a quest for branding and customers.&lt;/p&gt;
&lt;p&gt;&lt;img class="image-center" src="https://odetocode.com/images3/ps-ipo/IMG_1873.JPG" alt="Times Square from a Distance" /&gt;&lt;/p&gt;
&lt;p&gt;There was a time when I would have dismissed the square as being too artificial. But, after reading &lt;a href="https://www.amazon.com/Splendid-Exchange-Trade-Shaped-World/dp/0802144160"&gt;A Splendid Exchange&lt;/a&gt;, I&amp;rsquo;m seeing Times Square as a primal center of trade, and a natural expression of what humans have been doing for centuries. It is &lt;em&gt;the&lt;/em&gt; place where humans come to make exchanges.&lt;/p&gt;
&lt;p&gt;&lt;img class="image-center" src="https://odetocode.com/images3/ps-ipo/IMG_1877.JPG" alt="The Peak of Civilization" /&gt;&lt;/p&gt;
&lt;p&gt;When we leave the hotel the morning of the IPO, the exchange we are looking for is the NASDAQ exchange on 4 Times Square. The NASDAQ is hard to miss thanks to the 7-story curved LED display outside. In fact, this NASDAQ location is really more of a media center than an exchange. The place has television studios inside, and rooms with hundreds of cameras where companies doing an IPO can ring the opening bell and look like they are on the trading floor surrounded by &amp;ldquo;traders&amp;rdquo; working diligently in front of computer monitors. The physical NASDAQ trading market exists only in silicon and fiber optics.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m one of only six or so authors who&amp;rsquo;ve been invited to be present for the IPO. There is also 50 or more Pluralsight employees, board members, and investors. A few of the people I&amp;rsquo;ve known for years and grown fond of. But with Pluralsight&amp;rsquo;s rapid growth, the majority are strangers to me. Nevertheless, we are bonding together like molecules in a high-energy physics experiment. I&amp;rsquo;m barely through the security entrance when Gene Simmons walks out of a TV studiio. He saunters over to 4 of us gawkers and in a Gene voice says, "So ... what are you gentlemen here to sell today?"&lt;/p&gt;
&lt;p&gt;&lt;img class="image-center" src="https://odetocode.com/images3/ps-ipo/IMG_1889.JPG" alt="Me and Gene Simmons" /&gt;&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ve never felt like a true nerd until you tell Gene Simmons about your training videos covering software development. It is impossible to perform this task without sounding like the D&amp;amp;D dungeon master at the corner table of a comic book store.&lt;/p&gt;
&lt;h3&gt;It Happens Quickly&lt;/h3&gt;
&lt;p&gt;During an IPO, there are two significant moments. The first moment is the opening bell ceremony. Not every company will choose to participate in the ceremony, but I'm glad Pluralsight did. For this ceremony, everyone gathers on the stage in a circular room. In the room there are dozens of electronic displays hanging from the wall, and even more cameras. The cameras cover every possible vantage point on the stage. There&amp;rsquo;s a podium on the stage, and NASDAQ people walking around wearing headsets, carrying clipboards, and giving orders with all the authority of a television producer. In the moments leading up to the 9:30 am market opening, they are giving us pep talks and telling us the more we clap and yell, the better we'll look on TV. I'm a bit worried that if we manage to add more energy to the room, we will start a chemical reaction that lays waste to the entire building.&lt;/p&gt;
&lt;p&gt;&lt;img class="image-center" src="https://odetocode.com/images3/ps-ipo/IMG_1919.JPG" alt="The NASDAQ Media Room" /&gt;&lt;/p&gt;
&lt;p&gt;At 9:30 am, the person at the podium (Aaron, in this case), takes a cue, pushes a button, and the bell rings. Confetti begins to fall. There&amp;rsquo;s yelling, clapping, and arm raising. I think of my parents. I wish they were still alive to see this moment. I&amp;rsquo;m one parental memory away from losing it and crying all over the stage. I can&amp;rsquo;t ever remember euphoria and sadness being mixed like this.&lt;/p&gt;
&lt;p&gt;After the opening, there is professional picture taking, both inside the building, and outside in Times Square. There's also champagne, and singing and laughing, and selfies. Lots of selfies.&lt;/p&gt;
&lt;p&gt;&lt;img class="image-center" src="https://odetocode.com/images3/ps-ipo/IMG_1945.JPG" alt="Ring the Bell!" /&gt;&lt;/p&gt;
&lt;p&gt;The next big moment on IPO day comes when the first share of stock is publicly traded. I don&amp;rsquo;t remember the precise moment when this happened, but I think it was about an hour or 90 minutes later. There&amp;rsquo;s a roar when the price of the first trade execution hits the screens. There&amp;rsquo;s hugging, handshakes, and back-slapping. More selfies, lots of selfies.&lt;/p&gt;
&lt;p&gt;&lt;img class="image-center" src="https://odetocode.com/images3/ps-ipo/IMG_1948.JPG" alt="First Trade Executed!" /&gt;&lt;/p&gt;
&lt;p&gt;And then ... dispersion.&lt;/p&gt;
&lt;p&gt;We leave the studios and head back to the hotel. Most Pluralsight employees are flying out in the afternoon to be back in Utah the same day. I&amp;rsquo;m beginning to think that if my driver can come early, I&amp;rsquo;ll get through the tunnel before rush hour hits and catch an earlier flight home. Flights between D.C. and Newark go once an hour when the schedules are working. If I can't catch an earlier flight, maybe I'll take the train. Either way, it&amp;rsquo;s not even lunchtime and I&amp;rsquo;m &lt;em&gt;exhausted&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In the end, I did catch an early flight. However, before I left, I had a quiet celebration with a meal worthy of a billion-dollar IPO. I had a $5 hot pastrami sandwich from a street vendor two blocks from Times Square.&lt;/p&gt;
&lt;p&gt;Function over form.&lt;/p&gt;
&lt;p&gt;[1] Years ago, a renowned training company approached me about teaching a Web API class at Microsoft. For my first class, I was given a location on the Microsoft campus and told a Microsoft employee would be there to let me in the classroom. I arrived 30 minutes early and began waiting for my Microsoft escort to arrive. With 15 minutes left before the class started, I started emailing and trying to reach people at the training company to let them know my escort wasn't arriving. The classroom was in a locked down section of the building, and I wasn't getting past the entrance without my escort.&lt;/p&gt;
&lt;p&gt;Finally, as my escort arrived 2 minutes before the class began, I entered the room in a state of panic. As I was setting up, I noticed that one of the well known instructors from the training company was sitting in the front row of the class. He was directly in front of my podium, and I heard him say, into his phone, "looks like he &lt;em&gt;finally&lt;/em&gt; made it." I didn&amp;rsquo;t have time to think much of the statement at the time, as I only wanted to get plugged in and take a couple of deep breaths before launching into an all-day technical workshop for 70 MS engineers.&lt;/p&gt;
&lt;p&gt;Later, when I replayed the opening events in my mind, I was furious. Why didn&amp;rsquo;t someone let me know he&amp;rsquo;d be there? Why did no one respond to my calls? Why couldn&amp;rsquo;t he provide me with an escort? After that experience, I think I finished one or two more classes for this training company that we had already arranged, and then I let the relationship expire quietly.&lt;/p&gt;
&lt;p&gt;I tell this story because Pluralsight has always treated me with respect, and that's one reason I've been loyal and stuck with them.&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/OdeToCode?a=M8Tpq1tn1oU:D8dSv5pUIqM:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/OdeToCode?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</description><pubDate>Wed, 22 May 2019 11:11:00 Z</pubDate></item><item><guid isPermaLink="true">http://odetocode.com/blogs/scott/archive/2019/04/22/net-core-opinion-13-commit-your-scripts.aspx</guid><link>http://odetocode.com/blogs/scott/archive/2019/04/22/net-core-opinion-13-commit-your-scripts.aspx</link><author>scott@OdeTocode.com</author><title> .NET Core Opinion 13 - Commit Your Scripts</title><description>&lt;p&gt;In &lt;a href="https://odetocode.com/blogs/scott/archive/2019/03/27/net-core-opinion-12-use-your-asp-net-core.aspx"&gt;a previous post&lt;/a&gt;, I suggested you think of your ASP.NET Core application as a command line tool you can use to execute application specific tasks. In an &lt;a href="https://odetocode.com/blogs/scott/archive/2018/09/21/net-core-opinion-4-ndash-increase-productivity-with-dev.aspx"&gt;even earlier post&lt;/a&gt;, I suggested you keep scripts related to development checked into source control. I think you can see now how these two posts work together to make everyday development tasks automated and easy.&lt;/p&gt;
&lt;p&gt;The command line renaissance gives us a wide range of tools we can use to speed up .NET Core development. Here are some of the tools I've been using recently, in no particular order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Various &lt;a href="https://github.com/natemcmaster/dotnet-tools"&gt;dotnet global tools&lt;/a&gt;, including dotnet-cake, dotnet-t4, and dotnet-rimraf&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"&gt;Windows Subsystem for Linux&lt;/a&gt;, because it opens up an entire universe of standard tools, like &lt;a href="https://curl.haxx.se/"&gt;Curl&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;a href="https://chocolatey.org/"&gt;Chocolatey&lt;/a&gt; package manager&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/sql/tools/mssql-cli?view=sql-server-2017"&gt;mssql-cli&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="/images3/cli/mssql-cli-autocomplete.gif" class="image-center" alt="mssql-cli autocomplete" /&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest"&gt;Azure CLI&lt;/a&gt; and &lt;a href="https://aws.amazon.com/cli/"&gt;aws-shell&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="/images3/cli/aws-shell.gif" class="image-center" alt="aws-shell" /&gt;.&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/OdeToCode?a=MJpDpjH60Fg:nnlQFp1dXiw:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/OdeToCode?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</description><pubDate>Mon, 22 Apr 2019 12:01:00 Z</pubDate></item><item><guid isPermaLink="true">http://odetocode.com/blogs/scott/archive/2019/04/18/interview-on-cloudskills-fm.aspx</guid><link>http://odetocode.com/blogs/scott/archive/2019/04/18/interview-on-cloudskills-fm.aspx</link><author>scott@OdeTocode.com</author><title> Interview on CloudSkills.fm</title><description>&lt;p class="image-right"&gt;&lt;a href="https://cloudskills.fm/016"&gt;&lt;img src="https://odetocode.com/images3/cloudskills/skills.jpg" alt="CloudSkills.fm podcast" /&gt; &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There's a &lt;a href="https://cloudskills.fm/016"&gt;new episode of the CLoudSkills.fm podcast available&lt;/a&gt;, and the episode features yours truly!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this episode I talk with Scott Allen about building and running applications in the Azure cloud. Scott is a legendary software developer, conference speaker, trainer, and Pluralsight author.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I hope you enjoy the show.&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/OdeToCode?a=EH7-36nzVJ0:FbflWURND5A:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/OdeToCode?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</description><pubDate>Thu, 18 Apr 2019 12:01:00 Z</pubDate></item><item><guid isPermaLink="true">http://odetocode.com/blogs/scott/archive/2019/04/17/load-testing-on-the-web-with-k6.aspx</guid><link>http://odetocode.com/blogs/scott/archive/2019/04/17/load-testing-on-the-web-with-k6.aspx</link><author>scott@OdeTocode.com</author><title> Load Testing on the Web with K6</title><description>&lt;p&gt;There are hundreds of performance testing tools for the web. The tool I&amp;rsquo;ve been using the most for the last 10 years is a part of the web test tools in Visual Studio. Microsoft officially deprecated these tools with the 2019 release. The deprecation is not surprising given how Microsoft has not updated the tools in 10 years. While the rest of the world has moved web testing to open standards like JSON, HAR files, and interoperability with developer tools in modern browsers, the VS test tools still use ActiveX controls, and require Internet Explorer.&lt;/p&gt;
&lt;p&gt;Steve Smith recently &lt;a href="https://twitter.com/ardalis/status/1113891584997650437"&gt;asked&lt;/a&gt; VS Users what tool they plan on using in the future.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/ardalis/status/1113891584997650437"&gt;&lt;img class="image-center" src="https://odetocode.com/images3/k6/ardalistweet.jpg" alt="Which tool to use?" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the replies, a few people mentioned a tool I&amp;rsquo;ve been experimenting with named &lt;a href="https://k6.io/"&gt;K6&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can install K6 locally, or run K6 from a container. The &lt;a href="https://docs.k6.io/docs"&gt;documentation&lt;/a&gt; covers both scenarios. In addition to the docs, I&amp;rsquo;ve also been reading the &lt;a href="https://github.com/loadimpact/k6"&gt;Go source code for K6&lt;/a&gt;. I&amp;rsquo;ve had a fascination with large Go codebases recently, although I think I&amp;rsquo;m ready to try another new language now, perhaps Rust or Scala.&lt;/p&gt;
&lt;h3&gt;Authoring Tests&lt;/h3&gt;
&lt;p&gt;There were a few features of the Visual Studio test tools that made the tools useful and easy. One feature was the test recorder. The test recorder was an ActiveX control that could record all the HTTP traffic leaving the browser and store the results into an XML file. The recorder made it easy to create tests because I only needed to launch IE and then work with an application as a normal user. Although XML isn&amp;rsquo;t in fashion these days, the XML format was easy to modify both manually and programmatically. The tools also offered several extensibility points you could hook with C# for pre and post modifications of each request.&lt;/p&gt;
&lt;p&gt;K6 also makes test creation an easy task. Any browser that can export a HAR (HTTP archive) file can record test input for K6, and the developer tools of all modern browsers export HAR.&lt;/p&gt;
&lt;p&gt;&lt;img class="image-center" src="https://odetocode.com/images3/k6/saveashar.jpg" alt="Save As HAR" /&gt;&lt;/p&gt;
&lt;p&gt;You can modify the JSON HAR file by hand, or programmatically. You can also use K6 to convert the HAR file into an ES2015 module full of JavaScript code.&lt;/p&gt;
&lt;p&gt;&lt;img class="image-center" src="https://odetocode.com/images3/k6/convert.jpg" alt="Converting HAR to JS" /&gt;&lt;/p&gt;
&lt;p&gt;Here is what the generated code looks like.&lt;/p&gt;
&lt;pre class="brush: js; gutter: false; toolbar: false; "&gt;group("page_2 - ", function() {
    let req, res;
	req = [{
		"method": "get",
		"url": "https://odetocode.com/blogs/scott/archive/2019/04/04/on-the-design-of-app-launchers.aspx",
		"params": {
			"cookies": {
				".ASPXAUTH": "73..."
			},
			"headers": {
				"Host": "odetocode.com",
				"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:67.0) Gecko/20100101 Firefox/67.0",
				"Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
				"...": "..."
			}
		}
	},{
		"...": "..."
	}];
	
    res = http.batch(req);
	sleep(0.69);

});
&lt;/pre&gt;
&lt;p&gt;There is an entire API available in K6 with extensibility points for cross cutting concerns. With a script in hand, you can now run load tests from k6.&lt;/p&gt;
&lt;p&gt;&lt;img class="image-center" src="https://odetocode.com/images3/k6/k6run.jpg" alt="Running a load test" /&gt;&lt;/p&gt;
&lt;p&gt;The above run was with a single VU &amp;ndash; a single virtual user, but you can add more users and run k6 in a cluster, or in the cloud. In short, K6 has all the features of Visual Studio Load Tests, although with no UI tools for beginners. However, the APIs and command line are easy to use and rely on standard tools and languages. The current Azure load test offerings require either a web test from Visual Studio, or, a single URL for a simple test. Until this Azure story improves to add more sophisticated test inputs, K6 is a tool to keep in the toolbelt.&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/OdeToCode?a=1h9rvBRjHnc:uS_v-1LrlA4:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/OdeToCode?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;</description><pubDate>Wed, 17 Apr 2019 12:01:00 Z</pubDate></item></channel></rss>
