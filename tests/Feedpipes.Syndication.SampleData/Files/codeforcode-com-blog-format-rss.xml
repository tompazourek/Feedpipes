<?xml version="1.0" encoding="UTF-8"?>
<!--Generated by Site-Server v6.0.0-19077-19077 (http://www.squarespace.com) on Thu, 25 Jul 2019 15:00:52 GMT
--><rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://www.rssboard.org/media-rss" version="2.0"><channel><title>Code for Code</title><link>http://codeforcode.com/</link><lastBuildDate>Tue, 02 Jun 2015 12:26:38 +0000</lastBuildDate><language>en-US</language><generator>Site-Server v6.0.0-19077-19077 (http://www.squarespace.com)</generator><description></description><item><title>The Software Balancing Act</title><dc:creator>Sampo Savolainen</dc:creator><pubDate>Tue, 02 Jun 2015 11:50:52 +0000</pubDate><link>http://codeforcode.com/blog/2015/6/2/the-software-balancing-act</link><guid isPermaLink="false">52375b95e4b030ffaec4c1f9:523761bbe4b072186ca84851:556d9709e4b0e36a9e104300</guid><description><![CDATA[<p>Software development produces two distinct end products:</p><ol><li>What the customer needs</li><li>The code, processes, and tools to develop and&nbsp;maintain the first</li></ol><p>A software development project&nbsp;then tries&nbsp;to&nbsp;allocate resources fairly between the two.</p> 

  
    
    
      
        
          <a href="https://www.flickr.com/photos/91515119@N00/1795141144" target="_blank">
        
          
            <img class="thumb-image" data-image="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/556d97f0e4b0d78223bf1bfc/1433245682780/" data-image-dimensions="1024x627" data-image-focal-point="0.5,0.5" alt="Image by Wiros" data-load="false" data-image-id="556d97f0e4b0d78223bf1bfc" data-type="image" src="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/556d97f0e4b0d78223bf1bfc/1433245682780/?format=1000w" />
          
        
          </a>
        

        
        
          <p>Image by Wiros</p>
        
        

      
    
    
  


<p>The scale tilts to the first for one-off, short lived projects&nbsp;while strategic, long-term&nbsp;projects need to focus on the second.&nbsp;</p><p>The hard part&nbsp;is&nbsp;explaining to your customer&nbsp;why you need to allocate resources to the latter instead of the first.</p>]]></description></item><item><title>Dart - March</title><category>One Language per Month</category><dc:creator>Sampo Savolainen</dc:creator><pubDate>Tue, 28 Apr 2015 21:15:27 +0000</pubDate><link>http://codeforcode.com/blog/2015/4/28/dart-march</link><guid isPermaLink="false">52375b95e4b030ffaec4c1f9:523761bbe4b072186ca84851:553fd9d6e4b0cc6d762830f8</guid><description>Ever since I saw the unveiling of Dart in 2011, I've wanted to try out the 
language. For some reason I never did, but it still has my attention.</description><content:encoded><![CDATA[<p>I attended the Goto conference 2011 in Amsterdam&nbsp;where Kasper Lund, the creator of Dart, officially announced Dart. The features of the language grabbed me immediately but during that time it was not mature enough to use in real projects and I never remembered to check back on how the language was doing.</p> 

  
    
    
      
        
          
            <img class="thumb-image" data-image="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/553fdaa3e4b072b7cdd4c9b6/1430248123295/dart-logo-wordmark.png" data-image-dimensions="1733x461" data-image-focal-point="0.5,0.5" alt="dart-logo-wordmark.png" data-load="false" data-image-id="553fdaa3e4b072b7cdd4c9b6" data-type="image" src="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/553fdaa3e4b072b7cdd4c9b6/1430248123295/dart-logo-wordmark.png?format=1000w" />
          
        

        

      
    
    
  


<p>At least from my perspective, Dart and JavaScript have a lot in common. Both are used for mainly two things: browser side and server side request-response or event processing. For this reason I will be comparing these two even though&nbsp;the languages have many deep rooted differences.</p><p>JavaScript is missing concurrency. If you've read my earlier rants on different languages, you will know that concurrency is something that I rank highly in&nbsp;programming languages. Asynchronous calls alleviate much of the need for concurrency, but it is still leads to a dead end: you cannot use JavaScript if you need concurrent processes. There are ways around this of course, but they require hacks, additional&nbsp;constraints and extra effort that really would be better spent on the problem you are actually solving. Dart uses the concept of isolates to deal with concurrency. Basically these are like threads, each running their own event loop (for asynchronous calls) without any shared memory. The isolates communicate with each other through messaging. It is an interesting middle ground allowing concurrency in a safe manner without the complexity of classical low level mutual exclusion mechanisms. It might however prove to be a resource hungry pattern for the Dart runtime or compiler to implement.</p><p>Another&nbsp;main grievance with JavaScript I have is the lack of typing. Not having types makes programming very fluid and fast; libraries are simple to integrate, and options can be easily transmitted as anonymous objects. The downside to this freedom is confusion brought up when refactoring, upgrading or&nbsp;changing&nbsp;libraries, or reading old code. The depth of this confusion ranges from&nbsp;is very simple issues to huge headaches when you have tens or hundreds of thousands of lines of intricately weaved code. Having declared types will not automatically fix your code, but the constraints types set allow for tools to immediately point to problematic parts of your code. Dart supports typing and what's even better: they're optional.</p><p>Another pet peeve of mine in JavaScript is the lack of a well defined class. The newest version of JavaScript,&nbsp;ES6, will finally have&nbsp;classes, but we're&nbsp;still waiting for that to be finalized and rolled out. Dart gives programmers a formal OOP model with&nbsp;clear inheritance&nbsp;and also goodies like an&nbsp;innovative&nbsp;model for <a target="_blank" href="https://www.dartlang.org/docs/dart-up-and-running/ch02.html#getters-and-setters">getters and setters</a>.</p><p>Dart also benefits from having futures instead of callbacks from the ground up. This does not disallow using a callback model, but it does encourage library developers to use the much superior future (or "promise"&nbsp;depending on what you call them) model.</p><p>Dart still&nbsp;inspires me as a&nbsp;language - I really need to find a project I can test it on.</p><p> </p><p> </p><p> </p>]]></content:encoded><media:content type="image/png" url="http://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/523761bbe4b072186ca84851/553fd9d6e4b0cc6d762830f8/1430255776533/1500w/" medium="image" isDefault="true" width="400" height="400"><media:title type="plain">Dart - March</media:title></media:content></item><item><title>Python - February</title><category>One Language per Month</category><dc:creator>Sampo Savolainen</dc:creator><pubDate>Tue, 28 Apr 2015 19:02:45 +0000</pubDate><link>http://codeforcode.com/blog/2015/2/14/python-february</link><guid isPermaLink="false">52375b95e4b030ffaec4c1f9:523761bbe4b072186ca84851:54df2e81e4b0b72929bcb709</guid><description>Better late than never. Here's a my quick look into Python!</description><content:encoded><![CDATA[<p>Yep, I know everybody and their grandmother knows Python. I've modified Python code of sorts over the year, but I've never actually looked at what it would be like to write Python. The <a href="http://codeforcode.com/blog?category=One%20Language%20per%20Month">One Language per Month</a> challenge was a good opportunity to fix this.</p> 

  
    
    
      
        
          
            <img class="thumb-image" data-image="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/54df305ae4b0bfaec1df32b3/1423913051396/" data-image-dimensions="601x203" data-image-focal-point="0.5,0.5" alt="" data-load="false" data-image-id="54df305ae4b0bfaec1df32b3" data-type="image" src="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/54df305ae4b0bfaec1df32b3/1423913051396/?format=1000w" />
          
        

        

      
    
    
  


<p>Python has been around for a long time. It was originally released in 1991 and development on it started a few years earlier. It's a very mature language with a huge ecosystem of libraries, tools, and user base.</p><p>Python is an interpreted language that can be compiled into bytecode which then is ran in a virtual machine. The bytecode is then either interpreted or compiled, typically just-in-time, at runtime. The official runtime engine, CPython, interprets the bytecode. If you want to learn more, check out&nbsp;<a target="_blank" href="https://www.python.org/">python.org</a></p><p>The learning curve for Python was non-existent. Very easy to learn, quick to use. Quite handy!</p><p>Python has a nice generator pattern, which makes it very straightforward to create functions that stream responses out from that function onto the next step of processing. I guess the easiest way to conceptualize this is to image a function that returns a list, but instead of that&nbsp;function collecting a the complete list before returning, each element added to that list is immediately processed by the original caller,&nbsp;after which the generator function continues from where it left off. This helps write memory efficient code while avoiding complexity in the codebase.</p><p>However I found the lack of true concurrency in the language&nbsp;quite disturbing. Some runtime engines do allow for this, but the default engine, CPython, does not. This creates two issues: fragmentation and issues with cross-platform support.</p><p>Another thing I disliked in Python was how whitespace in interpreted. For some reason, I really dislike programming languages using whitespace as control characters. Typically code blocks are&nbsp;encased in braces or begin / end statements but in Python, a code block is defined by the indentation of the code. For instance in an if statement, the code block controlled by the statement is written prefixed by space characters before each line of code.</p><pre>if foo == bar:
&nbsp; print "Hello World"
</pre><p dir="ltr">For some reason or another, I just find that distasteful. However it can be argued that this teaches people to do indentation correctly right from the start. And I do like correct indentation.</p><p>I think I'll definitely find many uses for Python in the future. It matched my expectations: a fast language to do advanced scripts and stateless server processes. I just have to remember to push myself to use python instead of relying on ye olde method of shell scripts.</p><p>PS. This is very late, very very late, but I'm going to try to keep to my goal.&nbsp;While it may not be exactly one language per month, I'll strive for 12 languages within the year.</p>]]></content:encoded><media:content type="image/png" url="http://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/523761bbe4b072186ca84851/54df2e81e4b0b72929bcb709/1430247842286/1500w/" medium="image" isDefault="true" width="1500" height="1500"><media:title type="plain">Python - February</media:title></media:content></item><item><title>Foo YC20</title><dc:creator>Sampo Savolainen</dc:creator><pubDate>Mon, 02 Mar 2015 21:16:07 +0000</pubDate><link>http://codeforcode.com/blog/2015/3/2/foo-yc20-web</link><guid isPermaLink="false">52375b95e4b030ffaec4c1f9:523761bbe4b072186ca84851:54f4ce16e4b08c831d3dbeea</guid><description>I've resurrected an old project of mine to bring the Foo YC20 organ 
synthesizer / simulator to the web.</description><content:encoded><![CDATA[<p><strong>Distractions!</strong> While I did get to learn a bit of Python in February as planned, the <a href="https://codeforcode.squarespace.com/blog/2015/1/1/one-language-per-month-2015">one language per month</a> project got nevertheless derailed this month. From the start of the project I was dubious as to how long I can keep it up, but I did not think&nbsp;it would happen so early in the year. I will&nbsp;continue onwards with the next language and shall&nbsp;post the piece on Python soon. But fortunately I had a good reason for not keeping up.</p><p>I have a 1970's combo organ, a <a target="_blank" href="http://www.combo-organ.com/Yamaha/yamaha.htm#YC-20">Yamaha YC20</a>. The instrument has been with me for a while now and I've become quite attached to it. Some years ago, the previously dependable device developed some serious issues and I was somewhat startled if I would lose the organ altogether. While researching how to repair the organ, I developed an understanding of how the organ works internally. During&nbsp;the same time I had also became curious about a specialized functional programming language for DSP called&nbsp;<a target="_blank" href="http://faust.grame.fr/">Faust</a>. My technologist geek side got the better of me and I dived into a project to recreate the organ digitally. This work became the <a target="_blank" href="https://github.com/sampov2/foo-yc20">Foo YC20</a>.</p><p>The project spawned quite a few results back in 2010: a standalone playable instrument, a cross platform plugin for professional use (Linux, Windows and OS X) and a publication at the fantasically geeky Linux Audio Conference. My code has also served as a benchmark for the Faust project and has helped the project developers improve their compiler over the years.</p><p>Fast forward to a few weeks back when Stéphane Letz (of Jack 2 and Faust fame) sent me an email with an intriguing HTML file. This file was a self contained HTML + JavaScript realization of my organ.&nbsp;The UI was auto generated by the Faust toolchain and made little sense for this complex instrument&nbsp;but the processing was nevertheless the real deal.</p><p>Faust processing code is compiled into JavaScript by a two stage process: the Faust compiler produces intermediary C++ code which is compiled with&nbsp;<a target="_blank" href="http://kripken.github.io/emscripten-site/">emscripten</a>&nbsp;into <a target="_blank" href="http://asmjs.org/">asm.js</a>&nbsp;compatible JavaScript. You can read more about this on the <a target="_blank" href="http://faust.grame.fr/index.php/component/content/article/7-news/79-faust-web-audio">Faust blog</a>.</p><p>So I had a working organ in my browser with a &nbsp;lousy UI.&nbsp;I could not leave it at that now could I?</p> 

  
    
    
      
        
          <a href="http://foo-yc20.codeforcode.com" target="_blank">
        
          
            <img class="thumb-image" data-image="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/54f4d09ce4b0bd373cdd2398/1425330334415/" data-image-dimensions="1280x390" data-image-focal-point="0.5,0.5" alt="The Foo YC20 web interface." data-load="false" data-image-id="54f4d09ce4b0bd373cdd2398" data-type="image" src="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/54f4d09ce4b0bd373cdd2398/1425330334415/?format=1000w" />
          
        
          </a>
        

        
        
          <p>The Foo YC20 web interface.</p>
        
        

      
    
    
  


<p>At the core of my excitement of this project was the classic promise of the web: web software&nbsp;will work anywhere. The original Foo YC20 is pretty&nbsp;easy to run&nbsp;and&nbsp;use in a an audio production environment, but it's really difficult for non audio geeks to try it.&nbsp;Now basically anyone can <a target="_blank" href="http://foo-yc20.codeforcode.com/">run the instrument</a>. But be warned:</p><ul><li>Still a work in progress</li><li>Mouse control only (no keyboard or&nbsp;MIDI, yet)</li><li>It uses up a huge amount of CPU and it will stutter on many systems</li></ul><p>In case you're interested in what the original auto generated UI looks like, you can <a target="_blank" href="http://foo-yc20.codeforcode.com/foo-yc20-autogenerated-ui.html">access it here</a>.</p><p>The reason this relatively simple synthesizer uses so much CPU power is that it simulates the organ in its&nbsp;entirety. Typical synthesizers work by producing sound as the user plays notes. Divide down combo organs, like the YC20, are very different. They are&nbsp;actually&nbsp;matrix mixers. This particular&nbsp;design contains 12 oscillators and 7 banks of dividers resulting in 96 tone sources which are filtered and mixed together depending on the configuration of various switches and what keys are pressed down. To simulate this accurately means running all these processes all the time and this takes&nbsp;processing power. The upside to this is that your interaction with the organ has&nbsp;no effect on the CPU power required, i.e. pressing down all keys at once will not use a single bit of extra CPU.</p><p>Have fun and let me know what you think!</p><p><strong>Update May 21st 2015&nbsp;</strong>The web version has been updated and now features both keyboard and MIDI input. Also, the code repository has been moved over to GitHub.</p>]]></content:encoded><media:content type="image/png" url="http://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/523761bbe4b072186ca84851/54f4ce16e4b08c831d3dbeea/1432158159265/1500w/" medium="image" isDefault="true" width="390" height="390"><media:title type="plain">Foo YC20</media:title></media:content></item><item><title>Go - January</title><category>One Language per Month</category><dc:creator>Sampo Savolainen</dc:creator><pubDate>Sun, 01 Feb 2015 20:08:38 +0000</pubDate><link>http://codeforcode.com/blog/2015/1/1/one-language-per-month-january-go</link><guid isPermaLink="false">52375b95e4b030ffaec4c1f9:523761bbe4b072186ca84851:54a55e0ee4b01e05d9a5da27</guid><description>January is over and here is a recap of my experiences with Go.</description><content:encoded><![CDATA[<a href="http://golang.org/" target="_blank">
        
          
            <img class="thumb-image" data-image="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/54b29cdbe4b0aed39c46a3b8/1420991710771/" data-image-dimensions="1224x440" data-image-focal-point="0.5,0.5" alt="" data-load="false" data-image-id="54b29cdbe4b0aed39c46a3b8" data-type="image" src="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/54b29cdbe4b0aed39c46a3b8/1420991710771/?format=1000w" />
          
        
          </a>
        

        

      
    
    
  


<p>Go seems to be&nbsp;getting some <a target="_blank" href="https://code.google.com/p/go-wiki/wiki/GoUsers">traction</a>&nbsp;and is <a target="_blank" href="http://www.google.com/trends/explore#q=%2Fm%2F09gbxjr&amp;cmpt=q&amp;tz=">rising in popularity</a>&nbsp;either of which would by itself be a good enough reason to see what the fuss is all about. This made Go a no-brainer choice as&nbsp;one of the languages in&nbsp;my <a href="http://codeforcode.com/blog/2015/1/1/one-language-per-month-2015">One Language per Month</a> challenge of 2015.</p><p>The basic syntax is immediately familiar to anyone who knows C. <span>Despite the familiar syntax, Go has a learning c</span><span>urve. It uses a some</span><span>&nbsp;concepts that, while not entirely unique, are not that usual in programming languages.&nbsp;</span>Here's the obligatory Hello World:</p><code><pre>package main

import "fmt"

func main() {
  str := "Hello World"
  fmt.Println(str)
}</pre></code><p>Go felt&nbsp;kind of like watching Back to the Future 2&nbsp;- you're getting shiny new concepts like hoverboards and cool sneakers&nbsp;(=<a target="_blank" href="http://blog.golang.org/defer-panic-and-recover">defer</a>,&nbsp;<a target="_blank" href="http://blog.golang.org/go-concurrency-patterns-timing-out-and">go</a>, and <a target="_blank" href="http://golang.org/doc/effective_go.html#channels">channels</a>), <span>but they are presented to you in a world also littered with&nbsp;anachronisms&nbsp;that date back to the time the plot was written</span><span>.</span></p><h2><strong>The good</strong></h2><p>Starting threads in Go is a breeze. You can just prefix any function call with <em>go</em>&nbsp;and that function call will execute&nbsp;in a separate thread while current execution scope will immediately continue. Channels are special objects which work as command or message queues that can be used for communicating between different threads.&nbsp;Combining these two makes it relatively easy to do parallel computation. Using this pattern is very different from classical mutex mechanisms like&nbsp;semaphores, so it takes a bit of effort to get comfortable with it.</p><p>I also really like <em>defer</em>. This keyword is applied similarly to <em>go </em>and&nbsp;adds the function call to a stack of functions that will be called once the current function exits.&nbsp;Using defer to, for example, release resources allocated within the function,&nbsp;keeps code much cleaner than for example try-finally or try-with-resources&nbsp;in Java.</p><p>Package management is built in the language. This has been typically&nbsp;provided by an 3rd party in&nbsp;most languages I've worked with. Think Maven in Java, NPM in NodeJS, Gems for Ruby. It's very encouraging to see that ecosystem support is built into languages.</p><p>The switch statement in Go is a big improvement to how switches work in most mainstream programming languages I've used. What makes it special is that you're not creating a switch based on the value of a single variable (that typically has to be a primitive for switch to work). Instead, in Go a switch can be thought of as an if-else-if-else construct and as such, is much more versatile:</p><code><pre>switch {
  case obj.field == 1:
    // Do one thing
    break
  case obj.field == obj2.foo:
    // Do something else
    break
}</pre></code><p>Go also includes built-in support for complex numbers. This is something that will make people doing math very happy. &nbsp;If the support is designed well enough, it should help all&nbsp;external libraries talk to each other without extra data conversion troubles. I appreciate it&nbsp;when a&nbsp;language gives strong scaffolding that helps library authors&nbsp;to focus on their problem and keeps them&nbsp;from re-inventing wheels.</p><p>The language is strongly typed but without forcing programmers to always define which type a variable is. Not only does this mean that code is shorter and more to the point, but it also allows libraries to change API without breaking code using the API. The following code will work with whatever data type the library <em>lib</em>&nbsp;uses in GetFoo() and ConsumeFoo()</p><code><pre>myFoo := lib.GetFoo()
lib.ConsumeFoo(myFoo)
</pre></code><p><span>Last but not least: Go functions can return any number of&nbsp;variables. This feature should be in all languages. Having to write tuple/triple/etc. structs or classes for every project is just irritating and should never be necessary.</span></p><h2><strong>The ugly</strong></h2><p>The&nbsp;anachronisms I alluded earlier bug me somewhat. Go has chosen to go with the comfortable pattern from ancient languages like C and BASIC and has defined builtin functions&nbsp;like&nbsp;<a target="_blank" href="http://golang.org/pkg/builtin/">len(), append(), etc.</a>&nbsp;in the global namespace. This is opposed to OOP style where these functions would be the responsibility of the object in question (obj.len() instead of len(obj)).&nbsp;By doing this, they've made sure the only cross-library compatible data types are those defined at the language level. This is a very different route from for&nbsp;example Java, that defines a list as an interface anyone can implement and all libraries have consolidated on these SDK interfaces. This allows programmers to use whatever list or collection implementation they want and need in a particular situation. Java of course is OOP, but we can also contrast this to JavaScript, where you can create a class that acts exactly like an&nbsp;Array, but is backed by a different storage mechanism, or perhaps&nbsp;sends notifications&nbsp;when modified.</p><p><span>Go also allows locally stored variables as well as pointers&nbsp;to out-of-stack variables. If you have manual memory management, locally stored values are very handy as popping the stack will free all local variables and memory management is a breeze. However, for a garbage collected language, you will never need to free memory anyways. So why have both local variables and pointers? Mixing both also makes syntax more complex and clutters code with &amp;'s and *'s and other curse words. I'm sure someone has an answer to this and I'd love to hear it.</span></p><p><span>The approach taken to&nbsp;struct (object) field visibility control is frankly&nbsp;weird. Instead of applying modifiers to variables or blocks of variables (think public/protect/private in Java, or public/private&nbsp;blocks in C++), Go uses the capitalization of the field name instead. The field "foo" would be&nbsp;private, but "Foo" would be public. If you choose to change the visibility of a field, you need to go through all code accessing this field.&nbsp;</span><a target="_blank" href="http://golangtutorials.blogspot.fi/2011/06/structs-in-go-instead-of-classes-in.html">Some may argue</a><span>&nbsp;that this naming scheme&nbsp;helps you remember which fields are private and which are public, but this cuts both ways:&nbsp;If you do not remember if a field is&nbsp;private or public, you will be unable to write the correct field name in your code!</span></p><p><span>Classes in Go&nbsp;are defined by a succession of expressions: first you define a struct,then you define a constructor, then a function etc. This allows a class definition to be spread around a single or even multiple files and confusion will inevitably follow. I&nbsp;know that&nbsp;</span><a target="_blank" href="http://golang.org/doc/faq#Is_Go_an_object-oriented_language">Go isn't strictly an object oriented programming language</a><span>, but classes are nevertheless important. Maybe I'm old school, but I like the way you define the class structure and interface in a single block in a single C++ header file. Java also keeps classes nicely encapsulated, though without a separate header file Java classes do run quite long and the big picture is lost more easily.</span></p><p>While the syntax is mostly very familiar, Go takes some liberties with typical mainstream conventions&nbsp;that I find inelegant. The grouped variable definition clauses are maybe the worst offender here. While function definitions use&nbsp;commas&nbsp;to separate variables, you need to use either a semicolon or&nbsp;a newline (!) to separate variables. I know this is only syntax and has no big effect on the language as a whole, but why-oh-why? Can anyone explain the logic behind this? I especially dislike using whitespace as a control character.</p><code><pre>
func foo(param1 string, param2 string) { // legal, uses commas
  var (xx string, yy string) // illegal with commas
  var (xx string; yy string) // legal, but weird
  var (xx string yy string) // illegal, naturally. But ..
  var (xx string
       yy string) // .. this is legal. Whitespace inequality
}</pre></code><h1>Wrap-up</h1><p>This was quite a quick look at what Go is. Admittedly I ran out of time and was only able to achieve the web scraper exercise. Once I figured the right way to use channels, the concurrency pattern in the scraper came together nicely and is at least semi-elegant. Scraping is done in a&nbsp;concurrent fashion while the results from the scraping are gathered and processed neatly in a single thread. The chosen pattern does have a dark side to it: it&nbsp;&nbsp;does not allow any control over the amount of concurrency.</p><p>My views here cannot be read as deep insight into the language. Instead, they are&nbsp;honest first impressions of a programming language. I really like many of the concepts in Go, but found the syntax a wonky. I wouldn't&nbsp;say no to working with it, but at the same time I don't feel sufficiently intrigued by the language to propose it for future projects either.</p>]]></content:encoded><media:content type="image/png" url="http://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/523761bbe4b072186ca84851/54a55e0ee4b01e05d9a5da27/1422821508441/1500w/" medium="image" isDefault="true" width="330" height="330"><media:title type="plain">Go - January</media:title></media:content></item><item><title>One Language per Month - 2015</title><dc:creator>Sampo Savolainen</dc:creator><pubDate>Thu, 01 Jan 2015 13:59:46 +0000</pubDate><link>http://codeforcode.com/blog/2015/1/1/one-language-per-month-2015</link><guid isPermaLink="false">52375b95e4b030ffaec4c1f9:523761bbe4b072186ca84851:54a5488fe4b0c309d013bf0b</guid><description>My New Year's resolution is to learn one programming language every month 
in 2015.</description><content:encoded><![CDATA[<p>I have a New Year's resolution for the year 2015. My goal is to learn the basics of a new programming language each month of the year. The goal is to familiarize myself with different languages and paradigms and perhaps get some new perspective on the languages I used daily. I've attempted to select languages that are somewhat useful instead of delving into the too archaic or too experimental.</p> 

  
    
    
      
        
          <a href="https://www.flickr.com/photos/striatic/" >
        
          
            <img class="thumb-image" data-image="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/54a5510fe4b0d88dbda8e119/1420120644235/" data-image-dimensions="1321x1321" data-image-focal-point="0.47023809523809523,0.47023809523809523" alt="Image by&amp;nbsp; hobvias sudoneighm" data-load="false" data-image-id="54a5510fe4b0d88dbda8e119" data-type="image" src="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/54a5510fe4b0d88dbda8e119/1420120644235/?format=1000w" />
          
        
          </a>
        

        
        
          <p>Image by&nbsp;<a href="https://www.flickr.com/photos/striatic/">hobvias sudoneighm</a></p>
        
        

      
    
    
  


<p>Here's the plan:</p><ul><li>January -&nbsp;<a href="http://golang.org/">Go</a></li><li>February -&nbsp;<a href="https://www.python.org/">Python</a></li><li>March -&nbsp;<a href="https://www.dartlang.org/">Dart</a></li><li>April -&nbsp;<a href="https://ocaml.org/">OCaml</a></li><li>May -&nbsp;<a href="https://www.ruby-lang.org/">Ruby</a></li><li>June -&nbsp;<a href="https://www.haskell.org/">Haskell</a></li><li>July - <a href="http://blog.rust-lang.org/2015/01/09/Rust-1.0-alpha.html">Rust</a></li><li>August -&nbsp;<a href="http://en.wikipedia.org/wiki/C_Sharp_%28programming_language%29">C#</a></li><li>September - <a href="http://www.erlang.org/">Erlang</a></li><li>October -&nbsp;<a href="http://en.wikipedia.org/wiki/Lisp_%28programming_language%29">Lisp</a></li><li>November-&nbsp;<a href="http://clojure.org/">Clojure</a></li><li>December -&nbsp;<a href="http://www.lua.org/">Lua</a></li></ul><p>There are also some wildcard languages that I might choose to go for instead of the list above like&nbsp;Julia, Swift. Time will tell what will happen.</p><p>I've set myself some basic goals to reach with each language. I'll build a web scraper and a simple web server with each language. This will teach the&nbsp;syntax, available language constructs, methods for handling concurrency, and the toolchain necessary to work with each of the languages. I will also take a look at the&nbsp;ecosystems around the languages as an active and thriving community makes a huge difference when developing software.</p><p>You can follow my progress on GitHub <a href="https://github.com/sampov2/one-language-per-month-2015">https://github.com/sampov2/one-language-per-month-2015</a></p><p><strong>EDIT</strong> (Jan 11th 2015): As the Rust language is progressing nicely, I decided to dump&nbsp;Objective C in favor of it as the language of&nbsp;July.</p><p><strong>EDIT 2</strong> (Feb 16th 2015): <a href="http://nim-lang.org/">Nim </a>is another&nbsp;interesting emerging language. If I bump into a language I don't really want to deal with (I'm looking at you C#), I just might switch to Nim instead.</p>]]></content:encoded><media:content type="image/jpeg" url="http://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/523761bbe4b072186ca84851/54a5488fe4b0c309d013bf0b/1424091174521/1500w/" medium="image" isDefault="true" width="1496" height="1472"><media:title type="plain">One Language per Month - 2015</media:title></media:content></item><item><title>My first encounter with the wearable kind</title><dc:creator>Sampo Savolainen</dc:creator><pubDate>Fri, 31 Oct 2014 23:25:42 +0000</pubDate><link>http://codeforcode.com/blog/2014/10/31/first-encounter-with-the-wearable-kind</link><guid isPermaLink="false">52375b95e4b030ffaec4c1f9:523761bbe4b072186ca84851:5453f76ee4b0071f158db2aa</guid><description>I have finally received my Moto 360. That happened a little over a week 
ago, and now feels like a good time to go through what I like and dislike 
about it.</description><content:encoded><![CDATA[<p>I have finally received my Moto 360 (thanks to my couriers!). That happened a little over a week ago, and now feels like a good time to go through what I like and dislike about it.</p> 

  
    
    
      
        
          
            <img class="thumb-image" data-image="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/54540565e4b0a883ffdcfdc8/1414792553560/" data-image-dimensions="1800x1800" data-image-focal-point="0.5,0.5" alt="Yes. I am hairy. No. I will not wax them." data-load="false" data-image-id="54540565e4b0a883ffdcfdc8" data-type="image" src="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/54540565e4b0a883ffdcfdc8/1414792553560/?format=1000w" />
          
        

        
        
          <p>Yes. I am hairy. No. I will not wax them.</p>
        
        

      
    
    
  


<p>So what is it? It is a wearable device that is able to show messages, notifications, give directions and perform web searches. You can also install applications that run on the watch that provide further functionality like fitness tracking. It is also a watch, but that is not really the point. Being able to tell time with a watch has not been a main reason why people wear them in this millennium. Watches are jewelry. For the purposes of wearable technology, a watch is also a universally recognized and understood form factor.</p><p>Motorola seems to have understood these aspects of watches well. Their designers have succeeded in making a decidedly 21st century device that is yet connected with the history of fashion and watchmaking. Its design is beautiful and its smarts are relatively stealthy - it does not look like a gadget. &nbsp;In my opinion, no other smart watch on the market competes anywhere near this level. The Apple Watch is an interesting endeavor, but it has not impressed me so far. Especially since there is not even a release date for it and I am wearing the 360 as I am typing this.</p><p>First impressions of how such devices can affect day to day life are promising. Apps on the 360 have mostly been fleeting curiosities while the the notification functionality is where the magic lies. I am usually pretty bad at noticing when my phone chirps or rings - especially when I am outside the house. This has lead to me compulsively checking my phone whether I have missed a message or a call.&nbsp;<span>With the watch on my wrist, I never miss a notification. This gives me enough confidence that I do not have to check my phone every 5 minutes. This restless behavior has been put to .. rest.</span></p><p>There is a valid concern with getting overwhelmed with notifications. Checking your notifications while in social situations is at best awkward. It can also break your focus when concentrating on a task. However, I have found the user interface of the watch to be really fast and fluid. This allows me to check a notification in a matter of seconds without causing interruption to the conversation at hand. And when really necessary, you can mute the watch with a single stroke.</p><p>I also find the timer functionality very useful. Especially when you are cooking, you can easily set timers so you remember to check the grill, pan, or whatever. I have used this countless times over the past week. This to me is further proof that voice recognition is a really important step in mobile user interfaces. We just have to get over the social stigma of to talking to devices in public. Oh, and Google: please make voice recognition work properly in Finnish. The watch is completely unable to understand Finnish names!</p><p>It's not all roses though. M<span>y main concern was of battery life. It was widely reported that the 360 did not manage an entire day on a single charge. This was fortunately fixed before I received mine and the battery holds up for a day. Not a drop more, but it's okay for a day.</span></p><p><span>The biggest problem is disrupted connectivity. For a few times during the past week, the watch has stopped communicating with my phone. This renders the 360 pretty much incapacitated and worse, it eats away at the main thing I love about the experience. If the connection is disrupted, I will not get notifications and I may lose trust that notifications appear on the watch. The watch has also rebooted itself a few times and I have a hunch the connection disruption is also related to this issue. Thankfully these are not problems in the design or concept of the device.&nbsp;</span><span>As Android Wear, the operating system that runs the 360, matures, I'm sure these kinks will be worked out.</span></p><p><span>While I am sure the next generation of devices will improve on these themes and more, I find myself surprisingly content with this device. Not just content, actually, but really happy with it!</span></p><p>Oh, have I used it as a watch? I think I have told time with it almost as often as I have swapped the watch face.</p>]]></content:encoded><media:content type="image/jpeg" url="http://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/523761bbe4b072186ca84851/5453f76ee4b0071f158db2aa/1414797995415/1500w/" medium="image" isDefault="true" width="1500" height="1500"><media:title type="plain">My first encounter with the wearable kind</media:title></media:content></item><item><title>Password age is the new strength</title><dc:creator>Sampo Savolainen</dc:creator><pubDate>Mon, 05 May 2014 10:34:54 +0000</pubDate><link>http://codeforcode.com/blog/2014/5/5/password-age-is-the-new-strength</link><guid isPermaLink="false">52375b95e4b030ffaec4c1f9:523761bbe4b072186ca84851:53675083e4b08700007fd778</guid><description>How users can be trained to use better passwords by switching from static 
policies, to showing a tangible effect of their password's strength.</description><content:encoded><![CDATA[<p>Lance James wrote an&nbsp;<a href="https://securityledger.com/2014/05/is-pavlovian-password-management-the-answer/">interesting piece</a>&nbsp;on how to train users to use better passwords. His idea of setting password expiration based on the complexity of the password is a very good one. This not only educates users but also negates the need for organizations to have a single static password policy. Password policies tend to be problematic, since others like to litter their passwords with special characters (!#?) while others prefer using longer, but&nbsp;<a href="http://xkcd.com/936/">more easily remembered</a>&nbsp;passwords. It's difficult to create sane policy which covers all cases.</p> 

  
    
    
      
        
          <a href="http://anggiehutagalung.deviantart.com/art/The-Old-Padlock-269325711" target="_blank">
        
          
            <img class="thumb-image" data-image="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/53675215e4b0d6ad5391e2af/1399280152735/Image+by+AnggieHutagalung" data-image-dimensions="900x600" data-image-focal-point="0.5,0.5" alt="Image by&amp;nbsp; AnggieHutagalung" data-load="false" data-image-id="53675215e4b0d6ad5391e2af" data-type="image" src="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/53675215e4b0d6ad5391e2af/1399280152735/Image+by+AnggieHutagalung?format=1000w" />
          
        
          </a>
        

        
        
          <p>Image by&nbsp;<a href="http://anggiehutagalung.deviantart.com/">AnggieHutagalung</a></p>
        
        

      
    
    
  


<p>I would however argue that for pavlovian training to happen, the users need instant feedback based on their actions. If the user is not warned beforehand about the consequences of their new password's quality, they will only get frustrated if they're required the change the password after just a few days. As they should.</p><p>How about we just switch strength indicators to expiry indicators?</p> 

  
    
    
      
        
          
            <img class="thumb-image" data-image="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/53676529e4b0ffe404adde93/1399285034770/" data-image-dimensions="770x293" data-image-focal-point="0.5,0.5" alt="The user has entered a short, simple password." data-load="false" data-image-id="53676529e4b0ffe404adde93" data-type="image" src="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/53676529e4b0ffe404adde93/1399285034770/?format=1000w" />
          
        

        
        
          <p>The user has entered a short, simple password.</p>
        
        

      
    
    
  


 

  
    
    
      
        
          
            <img class="thumb-image" data-image="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/53676540e4b0ffe404addea3/1399285058369/" data-image-dimensions="771x292" data-image-focal-point="0.5,0.5" alt="A more complex, more difficult to hack password has been entered." data-load="false" data-image-id="53676540e4b0ffe404addea3" data-type="image" src="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/53676540e4b0ffe404addea3/1399285058369/?format=1000w" />
          
        

        
        
          <p>A more complex, more difficult to hack password has been entered.</p>
        
        

      
    
    
  


<p>So instead of telling the user they chose a bad password <em>after</em> they've changed it, we could give them direct feedback to how long they can use the new password for. This gives the user the chance to optimize their behavior between easy-to-remember vs difficult and fast expiry vs stable. We would no longer need to train the user: this mechanism would make the effect of password complexity immediately clear to the user.</p><figure >
  <blockquote>
    <span>&#147;</span>... we don’t really provide an incentive or an understanding of why we tell them to do this<span>&#148;</span>
  </blockquote>
  <figcaption class="source">&mdash; Lance James</figcaption>
</figure>
<p>The above quote on how developers fail to teach the users hits the nail on the head. The failure of most password policies is that they've been opaque and people have wanted to pass that hurdle with as little effort as possible. Switching away from static policies and abstract strength indicators to tangible variables in a language the user can understand should push us to the right direction.</p>]]></content:encoded><media:content type="image/jpeg" url="http://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/523761bbe4b072186ca84851/53675083e4b08700007fd778/1399310837097/1500w/the_old_padlock____by_anggiehutagalung-d4gcl1r.jpg" medium="image" isDefault="true" width="900" height="600"><media:title type="plain">Password age is the new strength</media:title></media:content></item><item><title>Cordova + Android + AngularJS = ♡</title><dc:creator>Sampo Savolainen</dc:creator><pubDate>Tue, 11 Feb 2014 22:52:50 +0000</pubDate><link>http://codeforcode.com/blog/2014/2/11/cordova-android-angularjs-heart</link><guid isPermaLink="false">52375b95e4b030ffaec4c1f9:523761bbe4b072186ca84851:52fa8876e4b024e79825f4a4</guid><description>Writing a mobile app was a long time coming. This is a story of my flip 
flop and what made me choose web technologies over native development 
tools.</description><content:encoded><![CDATA[<p>I recently <a href="http://codeforcode.com/blog/2014/2/11/radio-helsinki-player">released an Android application</a> for listening to my <a href="http://www.radiohelsinki.fi">favorite radio channel</a> in Helsinki. Writing a mobile app was a long time coming. This is a story of my flip flop.</p> 

  
    
    
      
        
          <a href="http://www.flickr.com/photos/tuxxilla/5696426981/" >
        
          
            <img class="thumb-image" data-image="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/52fa9206e4b0b9862062f755/1392153096388/5696426981_9dde938241_o.jpg" data-image-dimensions="943x678" data-image-focal-point="0.5,0.5" alt="Image by Markus Reinhardt" data-load="false" data-image-id="52fa9206e4b0b9862062f755" data-type="image" src="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/52fa9206e4b0b9862062f755/1392153096388/5696426981_9dde938241_o.jpg?format=1000w" />
          
        
          </a>
        

        
        
          <p>Image by Markus Reinhardt</p>
        
        

      
    
    
  


<p>For quite a while, mobile development had interested me, but I had not yet taken the plunge. I did however have a clear picture of how good quality mobile apps should be created: by using native SDKs. <a href="http://phonegap.com/">Phonegap</a>&nbsp;/&nbsp;<a href="http://cordova.apache.org/">Cordova</a> were clever hacks, but hacks nevertheless. For mobile applications, UX and integration with platform services &amp; ecosystem are vital. And these are where compromises must be made if not doing native development. And these compromises are bad, I thought.</p><p>As the time was ripe for me to actually get off my behind and start teaching myself how to do this, I did whatever any developer would do to start: I downloaded the <a href="http://developer.android.com/sdk/">Android SDK</a> and looked through a few tutorials. I had heard some nice things about the IDE. It has good integration with the Android emulator and you can easily test layouts on a wide variety of device profiles. I'm also no stranger to strongly typed object oriented languages and very fluent in Java. Considering my bias towards native development, this was going to be a match made in heaven.</p><p>Immediately after opening the IDE with a sample project, it hit me. I've always strongly disliked writing UIs. It is tedious and mind numbing, not to mention the anguish of debugging layout issues across different platforms and screen sizes. Looking at the sample application layout, browsing through the different components and attributes for the panes and buttons it dawned on me that this is indeed not HTML but a different animal with different rules and different mechanics.</p><h2>Back to the future</h2><p>Back in 2012 I was introduced to <a href="http://nodejs.org/">NodeJS</a> and <a href="http://angularjs.org/">AngularJS</a>. These two, especially as a combination, made me take JavaScript seriously both as a language and as a development platform. And not only as a language for the client side, but that's a whole different topic. The NodeJS ecosystem contains wonderful tools to make web development more tolerable. I cannot stress enough how essential it is to write CSS with a proper markup language instead of raw CSS. AngularJS gave web development a proper form and scaffolding it had been missing. Front end code became structured, testable, and reliable over night. I finally found a development model that I enjoyed working with on the front end, not to mention it allowing me to be fantastically productive. I later heard someone say that Java developers familiar with <a href="http://spring.io/">Spring</a> feel right at home with AngularJS. There is truth to that.</p><p>Fast forwarding to the topic on hand. The shock I felt looking at the alien layouting system of the Android SDK was only amplified by my previous triumph over the web. After a spell of wandering around the menus aimlessly, I shut down the IDE and felt like I was at a crossroads. Do I really want to put all that effort into building the skill set necessary for native android development? I'm not building games, doing 3D graphics, or writing HDR camera apps. I do not need to have access to low level resources or push processing power to a device's limits. And these skills would only apply to Android.</p><h2>The shift</h2><p>Not long after hitting this crossroads, I found a very interesting chromium project: <a href="https://github.com/MobileChromeApps/mobile-chrome-apps">mobile-chrome-apps</a>. This is essentially a toolchain and workflow that combines Cordova with Android and iOS SDKs. The promise of this tool is that you can have a mobile application in Google Play or App Store in a matter of hours (App Store approval takes much longer, but you get the gist).</p><p>As these experimental tools were made available, I had the idea for the Radio Helsinki Player brewing in my mind. This app was going to be dead simple and going through the process of learning all the ropes of the native SDK did not seem worth the trouble for this app.</p><p>I decided to give the <em>clever&nbsp;</em><em>hack</em> a go.</p><pre>$ . ~/nvm/nvm.sh
$ npm install -g cca
$ cca create radiohelsinki-player
cca v0.0.3
## Checking that tools are installed
Android SDK detected.
## Creating Your Application
...
$ cd radiohelsinki-player
$ cca run android --device</pre><p>Everything worked without a hitch and the template application I had just created started up on my Nexus 5. The development environment was quick to operate and robust. I was back in familiar territory. I had tools to run the application for development using a browser, the SDK emulator, or a real device. The tools could also create APK's for distribution. The stage was set.</p><h2>Under the hood</h2><p>The Radio Helsinki Player is a single screen application written using AngularJS. It has a button to play or pause the stream and the shout box, which is essentially a chat between listeners and the DJs. But at the time I'm writing this post, the shout box is only read only in the app.</p><p>Even though the application is very simple, I got to test how Cordova plugins are handled in this toolchain. I used the Cordova AudioHandler plugin for playing back audio. Installation was a breeze:</p><pre>$ cca plugin add org.apache.cordova.core.audiohandler</pre><p>All JS libraries (AngularJS, lo-dash) and assets (icons, images, fonts) are included in the application so nothing extra needs to be retrieved over the network at startup.</p><p>Building the final application was very straightforward. Once I had set up a key to sign the application, the key needs to be configured in platforms/android/ant.properties:</p><pre>key.store=/where/ever/is/the/keystore.jks
key.alias=alias
key.store.password=XXXX
key.alias.password=YYYY
</pre><p>Then to build the application:</p><pre>$ cca build android --release</pre><p>The APK will be created in the directory platforms/android/ant-build/ . Post the APK in Google Play and you're done!</p><h2>Final thoughts</h2><p>I'm not saying that this toolchain or Cordova in general should be used for all Android development. There is definitely a place for both. My lesson in this was that I was underestimating how important working with familiar techniques for productivity is. You might be able to create a better app, faster, even if the app would generally be thought of as better suited for native development.&nbsp;</p><h3>Positives</h3><ul><li>Incredibly fast workflow, from 0 to Google Play in hours. It took me about 4 hours to write the first release of Radio Helsinki Player.</li><li>You get to use AngularJS, it's awesome.</li><li><a href="https://developers.google.com/chrome-developer-tools/docs/remote-debugging">Remote debugging an Android device</a> is seamless despite having Cordova in the mix.</li></ul><h3>Negatives</h3><ul><li>mobile-chrome-apps creates a lot of scaffolding! It's difficult if not impossible for a developer to know what all these files are and what to include in version control. Some files are pure scaffolding, others are build residuals, and some are actually your code!</li><li>Relating the the previous one, 'cca clean' would be great!</li><li>When developing in a desktop browser, 'cca serve [port]' needs to have an option to watch for changed files.</li></ul><p>All in all, I'm a happy convert!</p>]]></content:encoded><media:content type="image/jpeg" url="http://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/523761bbe4b072186ca84851/52fa8876e4b024e79825f4a4/1392160566786/1500w/droid.jpg" medium="image" isDefault="true" width="243" height="224"><media:title type="plain">Cordova + Android + AngularJS = ♡</media:title></media:content></item><item><title>Radio Helsinki Player</title><dc:creator>Sampo Savolainen</dc:creator><pubDate>Tue, 11 Feb 2014 20:13:34 +0000</pubDate><link>http://codeforcode.com/blog/2014/2/11/radio-helsinki-player</link><guid isPermaLink="false">52375b95e4b030ffaec4c1f9:523761bbe4b072186ca84851:52fa8035e4b0739646689b6c</guid><description>Say Hello to Radio Helsinki Player!</description><content:encoded><![CDATA[<a href="https://play.google.com/store/apps/details?id=com.codeforcode.radiohelsinki" >
        
          
            <img class="thumb-image" data-image="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/52fa8387e4b06b4beaf3d8f7/1392149387024/icon128.png" data-image-dimensions="128x128" data-image-focal-point="0.5,0.5" alt="icon128.png" data-load="false" data-image-id="52fa8387e4b06b4beaf3d8f7" data-type="image" src="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/52fa8387e4b06b4beaf3d8f7/1392149387024/icon128.png?format=1000w" />
          
        
          </a>
        

        

      
    
    
  


<p>My <a href="http://www.radiohelsinki.fi/">favorite local radio in Helsinki</a>&nbsp;underwent major reconstructive surgery about one month ago now. The channel changed ownership, studios, it's FM channel, and most of it's programming. While this post is not about the qualitative shift in the channel's content, it's appropriate to mention that so far I have slightly scattered feelings about the change. Mostly scattered on the positive side though, I'm happy to say!</p><p>The change brought with it a revamp of their website with some unexpected side effects: I was no longer able to play their stream on Android.</p><p>For some time now, I've wanted to experiment with mobile app development. I recently noticed an <a href="http://blog.chromium.org/2014/01/run-chrome-apps-on-mobile-using-apache.html">article on a chromium project</a>&nbsp;to provide a robust toolchain and workflow for creating mobile applications using web technologies. Having these tools come by at the same time when I had a proper need to fill, finally pushed me to <a href="http://codeforcode.com/blog/2014/2/11/cordova-android-angularjs-heart">release my first Android app</a>.</p><p>Say Hello to <a href="https://play.google.com/store/apps/details?id=com.codeforcode.radiohelsinki">Radio Helsinki Player</a>!</p> 

  
    
    
      
        
          <a href="https://play.google.com/store/apps/details?id=com.codeforcode.radiohelsinki" >
        
          
            <img class="thumb-image" data-image="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/52fa8496e4b00ea56bbaf0a4/1392149657223/Screenshot_2014-02-04-00-31-09.png" data-image-dimensions="1920x1080" data-image-focal-point="0.5,0.5" alt="Screenshot_2014-02-04-00-31-09.png" data-load="false" data-image-id="52fa8496e4b00ea56bbaf0a4" data-type="image" src="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/52fa8496e4b00ea56bbaf0a4/1392149657223/Screenshot_2014-02-04-00-31-09.png?format=1000w" />
          
        
          </a>
        

        

      
    
    
  


<p>The app allows you to stream Radio Helsinki on your mobile device. In addition to the stream, you can view the shout box comments from the listeners and DJs. The app is available for free on <a href="https://play.google.com/store/apps/details?id=com.codeforcode.radiohelsinki">Google Play</a>.</p><p>Give it a go and please let me know if there is anything you'd like me to improve!</p>]]></content:encoded><media:content type="image/png" url="http://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/523761bbe4b072186ca84851/52fa8035e4b0739646689b6c/1392189150926/1500w/icon128.png" medium="image" isDefault="true" width="128" height="128"><media:title type="plain">Radio Helsinki Player</media:title></media:content></item><item><title>Experimental protection from identity theft</title><dc:creator>Sampo Savolainen</dc:creator><pubDate>Mon, 23 Sep 2013 21:51:09 +0000</pubDate><link>http://codeforcode.com/blog/2013/9/21/how-to-do-online-accounts-better</link><guid isPermaLink="false">52375b95e4b030ffaec4c1f9:523761bbe4b072186ca84851:523db450e4b0f6b279e907a1</guid><description>I have no idea how many accounts I've signed up for. As such, there are 
bits of my data all over the web. Could the web work without us giving our 
information to every website?</description><content:encoded><![CDATA[<p>I have no idea how many accounts I've signed up for. As such, there are bits of my data all over the web. I understand why forums and shops want to know who I am, or at least connect some information to a pseudonym. This also helps me: I can set up email notifications and save my shipping address, and maintain a recognizable identity in online discussions. All commendable goals without which, life online could become anything from tedious to impossible.&nbsp;<span>Nevertheless, I can't help but feel wary about having usernames, passwords, email addresses, shipping addresses, preferences, age etc. sprinkled all over.</span></p> 

  
    
    
      
        
          <a href="http://www.flickr.com/photos/eightk/2677247505/" >
        
          
            <img class="thumb-image" data-image="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/5240a592e4b09650462c79a1/1379968406956/2677247505_2c730354ab_b.jpg" data-image-dimensions="683x1024" data-image-focal-point="0.5,0.5" alt="Image by Katie" data-load="false" data-image-id="5240a592e4b09650462c79a1" data-type="image" src="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/5240a592e4b09650462c79a1/1379968406956/2677247505_2c730354ab_b.jpg?format=1000w" />
          
        
          </a>
        

        
        
          <p>Image by Katie</p>
        
        

      
    
    
  


<p>One way to deal with this is to use fake identities, but this approach brings with it multiple problems. Using a single fake identity makes this identity important to you. Losing control of it would not be as bad as having your real identity stolen, but it would have an effect anyhow. You could use a different fake identity for every site, but this requires a lot of work. It's also worth mentioning that using fake names is often a violation of ToS. Perhaps the biggest issue with the fake account approach is that you can't build online reputation that way. At least not reputation you can use on your resume.</p><p>Every site that thinks about setting up registration needs to ask some basic questions before taking the leap:</p><ol><li><strong>Does registration really create value for you? </strong>Registration should not be required only if it's one of the cool features provided by the platform you're using.&nbsp;I've seen forums that require registration before you can search the contents! Such "users" mean nothing for the site.</li><li><strong>Is there any value for the user?</strong> If prior to registering, you're unable to demonstrate benefits from signing up, you will lose users.</li><li><strong>Are you up for the task of keeping your users data safe?</strong> Will you stay up to date on news regarding vulnerabilities? Will you perform timely security updates? Will you stand up for your users if asked for data by powerful governmental entities?</li></ol><p>I know what you're thinking. Hasn't sign in via Facebook, Twitter, Google+, etc. already solved this issue? Apps that choose this authentication strategy do not need to store your credentials. This is a great first step. But I'm talking about something quite else.</p><p></p><h2>What if your account could be stored <u>outside</u> of the service?&nbsp;</h2><p>There is no rule that says that a website must store user account information in the website's own database. Barring some exceptions, some of which I attempt to tackle a bit later, account information is usually only needed when the user is actually on the site. This means that in the majority of cases, the users themselves could supply their account information when logging into a service.</p><p>There would be multiple benefits:</p><ul><li>Not storing account information on a website makes that site less of an target for identity thieves.&nbsp;<u>The payoff from hacking an individual site would be reduced close to zero</u>.</li><li><u>Login may no longer be required</u> as the account information you provide essentially identifies the user.</li><li>It would be easier for the user to keep track of their accounts.</li><li>Deleting accounts would be much easier due to users controlling their own data. Of course we would have to trust that the merchant would not be keeping a copy.</li></ul><p></p><p>The user could choose to use a cloud provider to store the account data, or use a local disk if so inclined. Cloud storage would be preferred as that would keep accounts accessible regardless what device or from where we were accessing a service.</p><p></p><h2>How would this work?</h2><p>A merchant typically trusts in their database; the owner of the software has full control of what goes into the database. This is why merchants can trust the account data they save today. Data coming from the outside needs to be somehow verified. And verification becomes key If the account information would reside outside the merchant's service.</p><p>Thankfully cryptographers have already given us great tools to do just this. A basic verifiable object could be something like this:</p><ul><li>Account information is stored in an object which is signed with the merchant's private key. This signature can be validated using the merchant's public key. This means both parties know the signature and thus the data is created by the merchant.</li><li>Signed account information would be encrypted with the public key of the user. This means only the user can read the account information. This makes it possible to store the account information on a third party service without making that service an enormous honeypot: all the honey is strongly encrypted!</li><li>The merchant will store the signature and the OAuth user id it belongs to. With this information, the merchant may check that the account data it receives from the user is in fact the newest version.</li><li>When the user supplies the account informa<span>tion, the information needs to be decrypted. The merchant knows it has received the data from the user because the user is the only one holding the private key which decrypts the data.</span></li></ul><p>With this verification process, the user may store the account data instead of the merchant and yet the merchant can be sure of the integrity of the data.&nbsp;In fact, one might argue that data integrity is better than when storing the account in the merchant's database. It's more likely that someone breaks into the merchant's database and meddles with the data, than someone hacking the digital signature of the account information. Breaking into the database would most likely result in the merchant's signing key to be exposed though.</p><h2>Reality check</h2><p>There are of course cases when the account information is required outside the typical usage. For example all background processes that operate on the user's information require some data about the user.</p><p>Let's approach this through an example. Imagine a typical web based store front. An account for such a site usually contains:</p><ol><li>Name, nickname, address, phone number, credit card details</li><li>Settings</li><li>Order history</li><li>Items last viewed</li><li>Preferences (both filled in by the user and analyzed from the her behavior)</li></ol><p>A typical use-case for such a site is: a user opens the website, browses the selection and decides to order something. After the order has been processed, the user will want to track it's progress. After receiving the product, the user will come back and give a review of the item.</p><ol><li>&nbsp;<strong>Login:</strong>&nbsp;the user's browser automatically downloads the correct account from the third party storage service of choice and provides the data to the store. No action required by the user.</li><li><strong>Browsing:&nbsp;</strong>browsing a huge selection of items in the store requires filtering and recommendations. The user's profile contains preference information and information about previous purchases. The store can use this information in addition to anonymized data stored on the server&nbsp;to show the user relevant products.</li><li><strong>Ordering:</strong> placing the order requires the store to pass parts of the account information to the payment service it's using. Once the payment has been processed, the information may be stored in the user account information. The merchant needs a copy of transaction identifiers and other metadata, but that may also be stored outside of the store front. This place may be a separate back-end system or it may be part of the payment service they are using.</li><li><strong>Sales statistics:&nbsp;</strong>this process happens unbeknownst to the user. After the order has been processed, the store uses the user's preference data and order history to create ranking data. This may happen in-line with the purchase, but most often it will be a background process. The ranking data should of course be anonymized, but determining it requires transient access to the user's account data. This can be performed via a queueing mechanism where the required account data is copied into the analysis request message, but will ultimately vanish after the task is completed.</li><li><strong>Shipping:</strong> this is by definition a long running background process where the user of the website is not present. But the store is not participating here either. The parcel service will need to keep a copy of the user's address and contact information, but it's out of the website's scope. And the parcel service works like the queue in the previous example: there is little need to store the user's data much after the package has been delivered.</li><li><strong>Tracking:&nbsp;</strong>while the parcel is in transit, the user may use the tracking code provided by the parcel service via the website to track the parcel. Piece of cake, nothing special here.</li><li><strong>Reviewing: </strong>the user comes to the website and gives a review of the order purchased. When on the website, the store knows again who the user is and can then supplement the review with account information. The combination of the information is fed into the statistics algorithm which will anonymize the data after which the copy of the user's information is no longer required.</li></ol><p>In order for the above to work,<span> <span>the only</span> </span>customer specific account information the store website needs to store, is a number of transaction records and a way to link the review text to the user's username (or whatever else is shown besides reviews). If the user identifier is not a globally known name (email address for example), this data can not be traced back to the user without the account information. Which only the user holds.</p><p>The moral of the story: the less background processes a service runs, the less of the user's data the service needs to persist. Background processes may be designed in ways that only parts of the account information are needed for the processing and so the data is stored only for the duration of the background task.</p><p>In such a system as the one described above, surprisingly little user data needs to be available at all times! A full break-in to this system would reveal very little of value for the hacker.</p><h2>Thoughts?</h2><p>This article was written as a way to figure out whether this oddball idea could actually work. I'm not fully satisfied that this makes sense to do on a grander scale, but I am truly surprised of how well this idea has stood my preliminary test.&nbsp;<span>Practical implementations would naturally require extensive browser and server support.</span></p>]]></content:encoded><media:content type="image/jpeg" url="http://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/523761bbe4b072186ca84851/523db450e4b0f6b279e907a1/1392160778174/1500w/the_hat.jpg" medium="image" isDefault="true" width="466" height="465"><media:title type="plain">Experimental protection from identity theft</media:title></media:content></item><item><title>Jungle Quest</title><dc:creator>Sampo Savolainen</dc:creator><pubDate>Mon, 16 Sep 2013 21:03:55 +0000</pubDate><link>http://codeforcode.com/blog/2013/9/16/jungle-quest</link><guid isPermaLink="false">52375b95e4b030ffaec4c1f9:523761bbe4b072186ca84851:52376647e4b0081b2db3d3ef</guid><description><![CDATA[<p>I can never remember, was it an&nbsp;<a href="http://en.wikipedia.org/wiki/Intel_8086">8086</a>&nbsp;or the <a href="http://en.wikipedia.org/wiki/ABC_80">ABC 80</a>?</p><p></p><p>Both were computers I had the privilege to play with as a kid. My dad taught computer science at a local school, which gave me the occasional chance to tag along with him to the CS classroom. The school, which I never attended myself, always felt slightly mystical. I never saw any of the pupils. It was always just the two of us, except maybe once we caught a glimpse of a janitor doing some cleaning. That place, the after hours school, was a place I loved visiting.</p><p></p> 

  
    
    
      
        
          <a href="http://en.wikipedia.org/wiki/File:Metric_ABC_80_Trondheim.jpg" >
        
          
            <img class="thumb-image" data-image="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/52377d10e4b0bfc1675c8e5d/1379368209988/800px-Metric_ABC_80_Trondheim.jpg" data-image-dimensions="800x600" data-image-focal-point="0.5,0.5" alt="Image source, Wikipedia. Thanks&amp;nbsp;Arj" data-load="false" data-image-id="52377d10e4b0bfc1675c8e5d" data-type="image" src="https://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/t/52377d10e4b0bfc1675c8e5d/1379368209988/800px-Metric_ABC_80_Trondheim.jpg?format=1000w" />
          
        
          </a>
        

        
        
          <p>Image source, Wikipedia. Thanks&nbsp;Arj</p>
        
        

      
    
    
  


<p>T<span>hinking back to those computers, it's more than clear how far we've come. I can still hear the sound of starting up those big metal boxes.</span><span>&nbsp;The plastic floppy disks gave an oscillating sound when they wound up, shortly followed by the screeching sound of the magnetic head reading data at breakneck speeds of multiple kilobytes per second. Most of the 8086's had two floppy drives, as you needed one drive for the OS and another for programs and storage. While the teacher's computer was specially fitted with an enormous 20 MB hard drive, m</span><span>any of the other computers still relied on cassette tape drives for storage.</span></p><p></p><p>However, I was never that interested about the computers themselves. I became fascinated in what they could do, and more importantly, what they could be made to do. One of the main teaching tools at the school was a turtle. This was no ordinary turtle though, but a <a href="http://en.wikipedia.org/wiki/Logo_(programming_language)">Logo</a> Turtle. A simple robot that could be programmed using a computer. Via simple commands you could make the Turtle move:</p><pre>forward 30
left 45
forward 30
right 90
...</pre><p><span>I shudder to think how much it must have cost, but I loved it. Sadly, my friendship with the Turtle was cut short. The Turtle was owned by the school board and its time in this school had ran out.</span></p><p>This brings our story back to Jungle Quest. After the Turtle was gone, something had sparked in me. The buzzing motors of the moving robot had done its best to distract me from what was to come my future. Now, Logo as a language never grabbed me. I never wanted to learn it any more than was necessary to have the crude robot knock over a bottle. But once the robot was out of the picture, I realized I wanted to know more about how the programming works. My dad was quick to point me towards my first programming language, BASIC.</p><p>To me, BASIC seemed then like the universal language. After all, both types of machines the school was equipped with had it. The ABC 80 booted up in BASIC and the 8086 had gwbasic.exe (how can I remember that command, but not what groceries to buy?)&nbsp;. With BASIC, I started learning programming.&nbsp;</p><p>One summer my dad borrowed an ABC 80 and took it home. For me, this was a big opportunity. The time to learn. What I decided to do, of course, was to write a game. What else would a kid want to write, a spreadsheet?</p><p>I remember Jungle Quest's ASCII art start screen, it's bright orange letters blazing at night, me staying up way past my bedtime. The plot was simple: you were in a jungle and your quest was to find your way out. The player was presented with difficult tasks which could only be successfully completed with the utmost precision and care:</p><p></p><pre>You are in a jungle. There is a hole covered with leaves in front of you. What do you do?
</pre>
<pre>
# _
</pre>
<p><em>Hint: "jump over hole" works, but "walk around hole" or "ujmp over hole" would mean game over.&nbsp;</em></p><p>The game had, I think, a glorious three tasks like this. Once I got a hang of how such an adventure could be written, I got bored with writing the script and the endless jumbled mess of&nbsp;<strong>if then .. else .. if then .. if then .. else .. end else</strong>&nbsp;. Despite its shortcomings, this was my first real program and I felt massively proud of. It also showed me, in a very concrete way, of how important structuring your code is. But most importantly, the flame was now lit.</p><p>Okay, so I lied. I always knew it was the ABC 80. How could I forget?</p>&nbsp;]]></description><media:content type="image/jpeg" url="http://static1.squarespace.com/static/52375b95e4b030ffaec4c1f9/523761bbe4b072186ca84851/52376647e4b0081b2db3d3ef/1379369931820/1500w/800px-Metric_ABC_80_Trondheim.jpg" medium="image" isDefault="true" width="800" height="600"><media:title type="plain">Jungle Quest</media:title></media:content></item></channel></rss>