<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="http://feeds.hanselman.com/feedblitz_rss.xslt"?><rss xmlns:content="http://purl.org/rss/1.0/modules/content/"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" version="2.0" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">
  <channel>
    <title>Scott Hanselman's Blog</title>
    <link>https://www.hanselman.com/blog/</link>
    <description>Scott Hanselman on Programming, User Experience, The Zen of Computers and Life in General</description>
    <image>
	<url>http://www.hanselman.com/blog/images/tinyheadshot2.jpg</url>
	<title>Scott Hanselman's Blog</title>
	<link>https://www.hanselman.com/blog/</link>
</image>
    <copyright>admin</copyright>
    <lastBuildDate>Thu, 18 Jul 2019 18:44:00 GMT</lastBuildDate>
    <generator>newtelligence dasBlog 4.0.0.0</generator>
    <managingEditor>scott@hanselman.com</managingEditor>
    <webMaster>scott@hanselman.com</webMaster>
<meta xmlns="http://www.w3.org/1999/xhtml" name="robots" content="noindex" />
<item>
<feedburner:origLink>https://www.hanselman.com/blog/InstallingPowerShellWithOneLineAsANETCoreGlobalTool.aspx</feedburner:origLink>
      <trackback:ping>https://www.hanselman.com/blog/Trackback.aspx?guid=6ab24f96-6c5a-4ab4-a33a-2c49bde85614</trackback:ping>
      <pingback:server>https://www.hanselman.com/blog/pingback.aspx</pingback:server>
      <pingback:target>https://www.hanselman.com/blog/PermaLink.aspx?guid=6ab24f96-6c5a-4ab4-a33a-2c49bde85614</pingback:target>
      <dc:creator>Scott Hanselman</dc:creator>
      <wfw:comment>https://www.hanselman.com/blog/CommentView.aspx?guid=6ab24f96-6c5a-4ab4-a33a-2c49bde85614</wfw:comment>
      <wfw:commentRss>https://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=6ab24f96-6c5a-4ab4-a33a-2c49bde85614</wfw:commentRss>
      <slash:comments>3</slash:comments>
      <title>Installing PowerShell with one line as a .NET Core global tool</title>
      <guid isPermaLink="false">https://www.hanselman.com/blog/PermaLink.aspx?guid=6ab24f96-6c5a-4ab4-a33a-2c49bde85614</guid>
      <link>http://feeds.hanselman.com/~/604804996/0/scotthanselman~Installing-PowerShell-with-one-line-as-a-NET-Core-global-tool.aspx</link>
      <pubDate>Thu, 18 Jul 2019 18:44:00 GMT</pubDate>
      <description><![CDATA[<div><p>I'<img title="PowerShell Mascot" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: right; padding-top: 0px; padding-left: 0px; border-left: 0px; margin: 0px 0px 0px 6px; display: inline; padding-right: 0px" border="0" alt="PowerShell Mascot" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/b9bb9e9f91a1_689A/PowerShell-2_02747505-6ef2-4328-907d-0524f27eb9d6.jpg" width="227" align="right" height="350">m a huge fan of <a href="https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools">.NET Core global tools</a>. I've done <a href="https://hanselminutes.com/650/net-core-global-tools-for-developers-with-mark-rendle">a podcast on Global Tools</a>. Just like Node and other platform have globally tools that can be easily and quickly installed and then used in build scripts, CI/CD (Continuous Integration/Continuous Deployment) systems, or just general command line utilities, .NET Global Tools are easily made (by you!) and distributed via NuGet.</p> <p>Some cool examples (and there are hundreds) are <a href="https://www.hanselman.com/blog/IntroducingTheTryNETGlobalToolInteractiveInbrowserDocumentationAndWorkshopCreator.aspx">the "Try .NET" Workshop runner and creator</a> that can you can use to make interactive documentation, or <a href="https://www.hanselman.com/blog/NETCoreCodeCoverageAsAGlobalToolWithCoverlet.aspx">coverlet</a> for code coverage. There's a great and growing <a href="https://github.com/natemcmaster/dotnet-tools?WT.mc_id=-blog-scottha">list of .NET Core Global Tools on GitHub</a>.</p> <p>If you've got the <a href="http://dotnet.microsoft.com">.NET SDK installed</a> you can try out a global tool just like this.</p> <p><code>dotnet tool install -g dotnetsay</code></p> <p>Then run this example with "dotnetsay," it's fun.</p> <p>stepping back a moment, you may be familiar with PowerShell. It's a scripting language and a command line shell like Bash or DOS or the Windows Command Prompt. You may think of PowerShell as a tool for maintaining and managing Windows Servers.</p> <p>However in recent years, PowerShell has gone cross platform and runs most anywhere. It's lightweight and has .NET Core at its, ahem, core. You can use PowerShell for scripting systems on any platform and if you're a .NET developer the team has made installing and immediately using PowerShell in scripts a one liner - which is genius. It's <a href="https://devblogs.microsoft.com/powershell/introducing-powershell-as-net-global-tool/">PowerShell as a .NET Global Tool</a>.</p> <p>Here's an example output from my system running Ubuntu. I just "dotnet tool install --global PowerShell."</p><pre>$ dotnet --version<br>2.1.502  <br>$ dotnet tool install --global PowerShell<br>You can invoke the tool using the following command:  pwsh<br>Tool 'powershell' (version '6.2.2') was successfully installed.<br>$ pwsh<br>PowerShell 6.1.1<br>https://aka.ms/pscore6-docs<br>Type 'help' to get help.      <br>PS /mnt/c/Users/Scott/Desktop&gt;<br>exit                                                                                                 </pre>
<p>Here I've checked that I have .NET 2.x or above, then I install PowerShell. I can run scripts or I can drop into the interactive shell. Note the PS prompt and my current directory above.</p>
<p>In fact, PowerShell is so useful as a scripting language when combined with .NET Core that PowerShell has been included as a global tool within the <a href="https://hub.docker.com/_/microsoft-dotnet-core-sdk/">.NET Core 3.0 Preview Docker images</a> since Preview 4. This means you can use PowerShell lines/scripts inside Docker images.</p><pre>FROM mcr.microsoft.com/dotnet/core/sdk:3.0<br>RUN pwsh -c Get-Date<br>RUN pwsh -c "Get-Module -ListAvailable | Select-Object -Property Name, Path"</pre>
<p>Being able to easily install PowerShell as a global tool means you can count on it in your scripts, CI/CDs systems, or docker containers. It's also nice to be able to be able to use existing PowerShell scripts cross platform.</p>
<p>I'm impressed with this idea - installing PowerShell itself as a .NET Global Tool. Very clever and useful.</p>
<hr>
<p><strong>Sponsor: </strong><a href="https://hnsl.mn/2YWUgug">Ossum</a> unifies agile planning, version control, and continuous integration into a smart platform that saves 3x the time and effort so your team can focus on building their next great product. <a href="https://hnsl.mn/2YWUgug">Sign up free</a>.</p><br/><hr/>Â© 2019 Scott Hanselman. All rights reserved. <br/></div><div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/604804996/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.hanselman.com/_/30/604804996/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/604804996/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/604804996/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/604804996/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</description>
      <comments>https://www.hanselman.com/blog/CommentView.aspx?guid=6ab24f96-6c5a-4ab4-a33a-2c49bde85614</comments>
      <category>DotNetCore</category>
      <category>Open Source</category>
      <category>PowerShell</category><content:encoded><![CDATA[<div><p>I'<img title="PowerShell Mascot" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: right; padding-top: 0px; padding-left: 0px; border-left: 0px; margin: 0px 0px 0px 6px; display: inline; padding-right: 0px" border="0" alt="PowerShell Mascot" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/b9bb9e9f91a1_689A/PowerShell-2_02747505-6ef2-4328-907d-0524f27eb9d6.jpg" width="227" align="right" height="350">m a huge fan of <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools">.NET Core global tools</a>. I've done <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hanselminutes.com/650/net-core-global-tools-for-developers-with-mark-rendle">a podcast on Global Tools</a>. Just like Node and other platform have globally tools that can be easily and quickly installed and then used in build scripts, CI/CD (Continuous Integration/Continuous Deployment) systems, or just general command line utilities, .NET Global Tools are easily made (by you!) and distributed via NuGet.</p> <p>Some cool examples (and there are hundreds) are <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/IntroducingTheTryNETGlobalToolInteractiveInbrowserDocumentationAndWorkshopCreator.aspx">the "Try .NET" Workshop runner and creator</a> that can you can use to make interactive documentation, or <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/NETCoreCodeCoverageAsAGlobalToolWithCoverlet.aspx">coverlet</a> for code coverage. There's a great and growing <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/natemcmaster/dotnet-tools?WT.mc_id=-blog-scottha">list of .NET Core Global Tools on GitHub</a>.</p> <p>If you've got the <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~dotnet.microsoft.com">.NET SDK installed</a> you can try out a global tool just like this.</p> <p><code>dotnet tool install -g dotnetsay</code></p> <p>Then run this example with "dotnetsay," it's fun.</p> <p>stepping back a moment, you may be familiar with PowerShell. It's a scripting language and a command line shell like Bash or DOS or the Windows Command Prompt. You may think of PowerShell as a tool for maintaining and managing Windows Servers.</p> <p>However in recent years, PowerShell has gone cross platform and runs most anywhere. It's lightweight and has .NET Core at its, ahem, core. You can use PowerShell for scripting systems on any platform and if you're a .NET developer the team has made installing and immediately using PowerShell in scripts a one liner - which is genius. It's <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://devblogs.microsoft.com/powershell/introducing-powershell-as-net-global-tool/">PowerShell as a .NET Global Tool</a>.</p> <p>Here's an example output from my system running Ubuntu. I just "dotnet tool install --global PowerShell."</p><pre>$ dotnet --version
<br>2.1.502  
<br>$ dotnet tool install --global PowerShell
<br>You can invoke the tool using the following command:  pwsh
<br>Tool 'powershell' (version '6.2.2') was successfully installed.
<br>$ pwsh
<br>PowerShell 6.1.1
<br>https://aka.ms/pscore6-docs
<br>Type 'help' to get help.      
<br>PS /mnt/c/Users/Scott/Desktop&gt;
<br>exit                                                                                                 </pre>
<p>Here I've checked that I have .NET 2.x or above, then I install PowerShell. I can run scripts or I can drop into the interactive shell. Note the PS prompt and my current directory above.</p>
<p>In fact, PowerShell is so useful as a scripting language when combined with .NET Core that PowerShell has been included as a global tool within the <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hub.docker.com/_/microsoft-dotnet-core-sdk/">.NET Core 3.0 Preview Docker images</a> since Preview 4. This means you can use PowerShell lines/scripts inside Docker images.</p><pre>FROM mcr.microsoft.com/dotnet/core/sdk:3.0
<br>RUN pwsh -c Get-Date
<br>RUN pwsh -c "Get-Module -ListAvailable | Select-Object -Property Name, Path"</pre>
<p>Being able to easily install PowerShell as a global tool means you can count on it in your scripts, CI/CDs systems, or docker containers. It's also nice to be able to be able to use existing PowerShell scripts cross platform.</p>
<p>I'm impressed with this idea - installing PowerShell itself as a .NET Global Tool. Very clever and useful.</p>
<hr>
<p><strong>Sponsor: </strong><a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/2YWUgug">Ossum</a> unifies agile planning, version control, and continuous integration into a smart platform that saves 3x the time and effort so your team can focus on building their next great product. <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/2YWUgug">Sign up free</a>.</p>
<br/><hr/>Â© 2019 Scott Hanselman. All rights reserved. 
<br/></div><Img align="left" border="0" height="1" width="1" alt="" style="border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;" hspace="0" src="http://feeds.hanselman.com/~/i/604804996/0/scotthanselman">
<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/604804996/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.hanselman.com/_/30/604804996/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/604804996/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/604804996/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/604804996/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</content:encoded></item>
<item>
<feedburner:origLink>https://www.hanselman.com/blog/DragonFruitAndSystemCommandLineIsANewWayToThinkAboutNETConsoleApps.aspx</feedburner:origLink>
      <trackback:ping>https://www.hanselman.com/blog/Trackback.aspx?guid=6ddc8d99-2416-4ebe-b65a-1fbcd50fbf21</trackback:ping>
      <pingback:server>https://www.hanselman.com/blog/pingback.aspx</pingback:server>
      <pingback:target>https://www.hanselman.com/blog/PermaLink.aspx?guid=6ddc8d99-2416-4ebe-b65a-1fbcd50fbf21</pingback:target>
      <dc:creator>Scott Hanselman</dc:creator>
      <wfw:comment>https://www.hanselman.com/blog/CommentView.aspx?guid=6ddc8d99-2416-4ebe-b65a-1fbcd50fbf21</wfw:comment>
      <wfw:commentRss>https://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=6ddc8d99-2416-4ebe-b65a-1fbcd50fbf21</wfw:commentRss>
      <slash:comments>21</slash:comments>
      <title>DragonFruit and System.CommandLine is a new way to think about .NET Console apps</title>
      <guid isPermaLink="false">https://www.hanselman.com/blog/PermaLink.aspx?guid=6ddc8d99-2416-4ebe-b65a-1fbcd50fbf21</guid>
      <link>http://feeds.hanselman.com/~/604601246/0/scotthanselman~DragonFruit-and-SystemCommandLine-is-a-new-way-to-think-about-NET-Console-apps.aspx</link>
      <pubDate>Tue, 16 Jul 2019 22:27:00 GMT</pubDate>
      <description><![CDATA[<div><p>There's some interesting stuff quietly happening in the "Console App" world within open source .NET Core right now. Within the <a href="https://github.com/dotnet/command-line-api">https://github.com/dotnet/command-line-api</a> repository are three packages:</p> <ul> <li>System.CommandLine.Experimental</li> <li>System.CommandLine.DragonFruit</li> <li>System.CommandLine.Rendering</li></ul> <p>These are interesting experiments and directions that are exploring how to make Console apps easier to write, more compelling, and more useful.</p> <p>The one I am the most infatuated with is DragonFruit. </p> <p>Historically Console apps in classic C look like this:</p><pre class="brush: csharp; gutter: false; toolbar: false; auto-links: false;">#include &lt;stdio.h&gt;<br> <br>int main(int argc, char *argv[])<br>{<br>    printf("Hello, World!\n");<br>    return 0;<br>}
</pre>
<p>That first argument argc is the count of the number of arguments you've passed in, and argv is an array of pointers to 'strings,' essentially. The actual parsing of the command line arguments and the semantic meaning of the args you've decided on are totally on you.</p>
<p>C# has done it this way, since always.</p><pre class="brush: csharp; gutter: false; toolbar: false; auto-links: false;">static void Main(string[] args)<br>{<br>    Console.WriteLine("Hello World!");<br>}
</pre>
<p>It's a pretty straight conceptual port from C to C#, right? It's an array of strings. Argc is gone because you can just args.Length.</p>
<p>If you want to make an app that does a bunch of different stuff, you've got a lot of string parsing before you get to DO the actual stuff you're app is supposed to do. In my experience, a simple console app with real proper command line arg validation can end up with half the code parsing crap and half doing stuff.</p><pre>myapp.com someCommand --param:value --verbose</pre>
<p>The larger question - one that DragonFruit tries to answer - is why doesn't .NET do the boring stuff for you in an easy and idiomatic way?</p>
<p>From <a href="https://github.com/dotnet/command-line-api/wiki/DragonFruit-overview">their docs</a>, what if you could declare a <strong>strongly-typed </strong><code>Main</code> method? This was the question that led to the creation of the experimental app model called "DragonFruit", which allows you to create an entry point with multiple parameters of various types and using default values, like this:</p><pre>static void Main(int intOption = 42, bool boolOption = false, FileInfo fileOption = null)
{
    Console.WriteLine($"The value of intOption is: {intOption}");
    Console.WriteLine($"The value of boolOption is: {boolOption}");
    Console.WriteLine($"The value of fileOption is: {fileOption?.FullName ?? "null"}");
}</pre>
<p>In this concept, the Main method - the entry point - is an interface that can be used to infer options and apply defaults.</p><pre class="brush: csharp; gutter: false; toolbar: false; auto-links: false;">using System;<br><br>namespace DragonFruit<br>{<br>    class Program<br>    {<br>        /// &lt;summary&gt;<br>        /// DragonFruit simple example program<br>        /// &lt;/summary&gt;<br>        /// &lt;param name="verbose"&gt;Show verbose output&lt;/param&gt;<br>        /// &lt;param name="flavor"&gt;Which flavor to use&lt;/param&gt;<br>        /// &lt;param name="count"&gt;How many smoothies?&lt;/param&gt;<br>        static int Main(<br>            bool verbose,<br>            string flavor = "chocolate",<br>            int count = 1)<br>        {<br>            if (verbose)<br>            {<br>                Console.WriteLine("Running in verbose mode");<br>            }<br>            Console.WriteLine($"Creating {count} banana {(count == 1 ? "smoothie" : "smoothies")} with {flavor}");<br>            return 0;<br>        }<br>    }<br>}
</pre>
<p>I can run it like this:</p><pre>&gt; dotnet run --flavor Vanilla --count 3   <br>Creating 3 banana smoothies with Vanilla</pre>
<p>The way DragonFruit does this is super clever. During the build process, DragonFruit changes this public strongly typed Main to a private (so it's not seen from the outside - .NET won't consider it an entry point. It's then replaced with a Main like this, but you'll never see it as it's in the compiled/generated artifact.</p><pre class="brush: csharp; gutter: false; toolbar: false; auto-links: false;">public static async Task&lt;int&gt; Main(string[] args)<br>{<br>    return await CommandLine.ExecuteAssemblyAsync(typeof(AutoGeneratedProgram).Assembly, args, "");<br>}
</pre>
<p>So DragonFruit has swapped your Main for its smarter Main and the magic happens! You'll even get free auto-generated help!</p><pre>DragonFruit:<br>  DragonFruit simple example program<br><br>Usage:<br>  DragonFruit [options]<br><br>Options:<br>  --verbose            Show verbose output<br>  --flavor &lt;flavor&gt;    Which flavor to use<br>  --count &lt;count&gt;      How many smoothies?<br>  --version            Display version information</pre>
<p>If you want less magic and more power, you can use <a href="https://github.com/dotnet/command-line-api/wiki/Your-first-app-with-System.CommandLine">the same APIs DragonFruit uses to make very sophisticated behaviors</a>. Check out the Wiki and Repository for more and perhaps get involved in this open source project! </p>
<p>I really like this idea and I'd love to see it taken further! Have you used DragonFruit on a project? Or are you using another command line argument parser?</p>
<hr>
<p><strong>Sponsor: </strong><a href="https://hnsl.mn/2YWUgug">Ossum</a> unifies agile planning, version control, and continuous integration into a smart platform that saves 3x the time and effort so your team can focus on building their next great product. <a href="https://hnsl.mn/2YWUgug">Sign up free</a>.</p><br/><hr/>Â© 2019 Scott Hanselman. All rights reserved. <br/></div><div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/604601246/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.hanselman.com/_/30/604601246/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/604601246/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/604601246/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/604601246/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</description>
      <comments>https://www.hanselman.com/blog/CommentView.aspx?guid=6ddc8d99-2416-4ebe-b65a-1fbcd50fbf21</comments>
      <category>DotNetCore</category><content:encoded><![CDATA[<div><p>There's some interesting stuff quietly happening in the "Console App" world within open source .NET Core right now. Within the <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/dotnet/command-line-api">https://github.com/dotnet/command-line-api</a> repository are three packages:</p> <ul> <li>System.CommandLine.Experimental</li> <li>System.CommandLine.DragonFruit</li> <li>System.CommandLine.Rendering</li></ul> <p>These are interesting experiments and directions that are exploring how to make Console apps easier to write, more compelling, and more useful.</p> <p>The one I am the most infatuated with is DragonFruit. </p> <p>Historically Console apps in classic C look like this:</p><pre class="brush: csharp; gutter: false; toolbar: false; auto-links: false;">#include &lt;stdio.h&gt;
<br> 
<br>int main(int argc, char *argv[])
<br>{
<br>    printf("Hello, World!\n");
<br>    return 0;
<br>}
</pre>
<p>That first argument argc is the count of the number of arguments you've passed in, and argv is an array of pointers to 'strings,' essentially. The actual parsing of the command line arguments and the semantic meaning of the args you've decided on are totally on you.</p>
<p>C# has done it this way, since always.</p><pre class="brush: csharp; gutter: false; toolbar: false; auto-links: false;">static void Main(string[] args)
<br>{
<br>    Console.WriteLine("Hello World!");
<br>}
</pre>
<p>It's a pretty straight conceptual port from C to C#, right? It's an array of strings. Argc is gone because you can just args.Length.</p>
<p>If you want to make an app that does a bunch of different stuff, you've got a lot of string parsing before you get to DO the actual stuff you're app is supposed to do. In my experience, a simple console app with real proper command line arg validation can end up with half the code parsing crap and half doing stuff.</p><pre>myapp.com someCommand --param:value --verbose</pre>
<p>The larger question - one that DragonFruit tries to answer - is why doesn't .NET do the boring stuff for you in an easy and idiomatic way?</p>
<p>From <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/dotnet/command-line-api/wiki/DragonFruit-overview">their docs</a>, what if you could declare a <strong>strongly-typed </strong><code>Main</code> method? This was the question that led to the creation of the experimental app model called "DragonFruit", which allows you to create an entry point with multiple parameters of various types and using default values, like this:</p><pre>static void Main(int intOption = 42, bool boolOption = false, FileInfo fileOption = null)
{
    Console.WriteLine($"The value of intOption is: {intOption}");
    Console.WriteLine($"The value of boolOption is: {boolOption}");
    Console.WriteLine($"The value of fileOption is: {fileOption?.FullName ?? "null"}");
}</pre>
<p>In this concept, the Main method - the entry point - is an interface that can be used to infer options and apply defaults.</p><pre class="brush: csharp; gutter: false; toolbar: false; auto-links: false;">using System;
<br>
<br>namespace DragonFruit
<br>{
<br>    class Program
<br>    {
<br>        /// &lt;summary&gt;
<br>        /// DragonFruit simple example program
<br>        /// &lt;/summary&gt;
<br>        /// &lt;param name="verbose"&gt;Show verbose output&lt;/param&gt;
<br>        /// &lt;param name="flavor"&gt;Which flavor to use&lt;/param&gt;
<br>        /// &lt;param name="count"&gt;How many smoothies?&lt;/param&gt;
<br>        static int Main(
<br>            bool verbose,
<br>            string flavor = "chocolate",
<br>            int count = 1)
<br>        {
<br>            if (verbose)
<br>            {
<br>                Console.WriteLine("Running in verbose mode");
<br>            }
<br>            Console.WriteLine($"Creating {count} banana {(count == 1 ? "smoothie" : "smoothies")} with {flavor}");
<br>            return 0;
<br>        }
<br>    }
<br>}
</pre>
<p>I can run it like this:</p><pre>&gt; dotnet run --flavor Vanilla --count 3   
<br>Creating 3 banana smoothies with Vanilla</pre>
<p>The way DragonFruit does this is super clever. During the build process, DragonFruit changes this public strongly typed Main to a private (so it's not seen from the outside - .NET won't consider it an entry point. It's then replaced with a Main like this, but you'll never see it as it's in the compiled/generated artifact.</p><pre class="brush: csharp; gutter: false; toolbar: false; auto-links: false;">public static async Task&lt;int&gt; Main(string[] args)
<br>{
<br>    return await CommandLine.ExecuteAssemblyAsync(typeof(AutoGeneratedProgram).Assembly, args, "");
<br>}
</pre>
<p>So DragonFruit has swapped your Main for its smarter Main and the magic happens! You'll even get free auto-generated help!</p><pre>DragonFruit:
<br>  DragonFruit simple example program
<br>
<br>Usage:
<br>  DragonFruit [options]
<br>
<br>Options:
<br>  --verbose            Show verbose output
<br>  --flavor &lt;flavor&gt;    Which flavor to use
<br>  --count &lt;count&gt;      How many smoothies?
<br>  --version            Display version information</pre>
<p>If you want less magic and more power, you can use <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/dotnet/command-line-api/wiki/Your-first-app-with-System.CommandLine">the same APIs DragonFruit uses to make very sophisticated behaviors</a>. Check out the Wiki and Repository for more and perhaps get involved in this open source project! </p>
<p>I really like this idea and I'd love to see it taken further! Have you used DragonFruit on a project? Or are you using another command line argument parser?</p>
<hr>
<p><strong>Sponsor: </strong><a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/2YWUgug">Ossum</a> unifies agile planning, version control, and continuous integration into a smart platform that saves 3x the time and effort so your team can focus on building their next great product. <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/2YWUgug">Sign up free</a>.</p>
<br/><hr/>Â© 2019 Scott Hanselman. All rights reserved. 
<br/></div><Img align="left" border="0" height="1" width="1" alt="" style="border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;" hspace="0" src="http://feeds.hanselman.com/~/i/604601246/0/scotthanselman">
<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/604601246/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.hanselman.com/_/30/604601246/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/604601246/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/604601246/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/604601246/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</content:encoded></item>
<item>
<feedburner:origLink>https://www.hanselman.com/blog/RealWorldCloudMigrationsAzureFrontDoorForGlobalHTTPAndPathBasedLoadbalancing.aspx</feedburner:origLink>
      <trackback:ping>https://www.hanselman.com/blog/Trackback.aspx?guid=7b3178c0-7b26-4f2c-9f38-e534aaf9de7c</trackback:ping>
      <pingback:server>https://www.hanselman.com/blog/pingback.aspx</pingback:server>
      <pingback:target>https://www.hanselman.com/blog/PermaLink.aspx?guid=7b3178c0-7b26-4f2c-9f38-e534aaf9de7c</pingback:target>
      <dc:creator>Scott Hanselman</dc:creator>
      <wfw:comment>https://www.hanselman.com/blog/CommentView.aspx?guid=7b3178c0-7b26-4f2c-9f38-e534aaf9de7c</wfw:comment>
      <wfw:commentRss>https://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=7b3178c0-7b26-4f2c-9f38-e534aaf9de7c</wfw:commentRss>
      <slash:comments>7</slash:comments>
      <title>Real World Cloud Migrations: Azure Front Door for global HTTP and path based load-balancing</title>
      <guid isPermaLink="false">https://www.hanselman.com/blog/PermaLink.aspx?guid=7b3178c0-7b26-4f2c-9f38-e534aaf9de7c</guid>
      <link>http://feeds.hanselman.com/~/604438374/0/scotthanselman~Real-World-Cloud-Migrations-Azure-Front-Door-for-global-HTTP-and-path-based-loadbalancing.aspx</link>
      <pubDate>Thu, 11 Jul 2019 20:22:00 GMT</pubDate>
      <description><![CDATA[<div><p>As I've mentioned lately, I'm <a href="https://www.hanselman.com/blog/RealWorldCloudMigrationsMovingA17YearOldSeriesOfSitesFromBareMetalToAzure.aspx">quietly moving my Website</a> from a physical machine to a number of Cloud Services hosted in Azure. This is an attempt to not just modernize the system - no reason to change things just to change them - but to take advantage of a number of benefits that a straight web host sometimes doesn't have. I want to have multiple microsites (the main page, the podcast, the blog, etc) with regular backups, CI/CD pipeline (check in code, go straight to staging), production swaps, a <a href="https://www.hanselman.com/blog/RealWorldCloudMigrationsCDNsAreAnEasyImprovementToLegacyApps.aspx">global CDN for content</a>, etc.</p> <p>I'm breaking a single machine into a series of small sites BUT I want to still maintain ALL my existing URLs (for good or bad) and the most important one is <strong>hanselman.com/blog/</strong> that I now want to point to <strong>hanselmanblog.azurewebsites.net</strong>.</p> <p>That means that the <strong><a href="https://docs.microsoft.com/en-us/azure/frontdoor/">Azure Front Door</a></strong> will be receiving all the traffic - it's the Front Door! - and then <strong>forward it on </strong>to the Azure Web App. That means:  <ul> <li>hanselman.com/blog/foo -&gt; hanselmanblog.azurewebsites.net/foo  <li>hanselman.com/blog/bar -&gt; hanselmanblog.azurewebsites.net/foo  <li>hanselman.com/blog/foo/bar/baz -&gt; hanselmanblog.azurewebsites.net/foo/bar/baz</li></ul> <p>There's a few things to consider when <a href="https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/proxy-load-balancer?view=aspnetcore-2.2&amp;WT.mc_id=-blog-scottha">dealing with reverse proxies</a> like this and I've written about that in detail in this article on <a href="https://www.hanselman.com/blog/DealingWithApplicationBaseURLsAndRazorLinkGenerationWhileHostingASPNETWebAppsBehindReverseProxies.aspx">Dealing with Application Base URLs and Razor link generation while hosting ASP.NET web apps behind Reverse Proxies</a>.  <p>You can and should read in detail about <a href="https://docs.microsoft.com/en-us/azure/frontdoor/front-door-overview">Azure Front Door</a> here.  <p>It's worth considering a few things. Front Door MAY be overkill for what I'm doing because I have a small, modest site. Right now I've got several backends, but they aren't yet globally distributed. If I had a system with lots of regions and lots of App Services all over the world AND a lot of static content, Front Door would be a perfect fit. Right now I have just a few App Services (Backends in this context) and I'm using Front Door primarily to manage the hanselman.com top level domain and manage traffic with URL routing.  <p>On the plus side, that might mean Azure Front Door was exactly what I needed, it was <strong>super </strong>easy to set up Front Door as there's a visual Front Door Designer. It was less than 20 minutes to get it all routed, and SSL certs too just a few hours more. You can see below that I associated staging.hanselman.com with two Backend Pools. This UI in the Azure Portal is (IMHO) far easier than the <a href="https://docs.microsoft.com/en-us/azure/frontdoor/front-door-faq#what-is-the-difference-between-azure-front-door-service-and-azure-application-gateway">Azure Application Gateway</a>. Additionally, Front Door is Global while <a href="https://docs.microsoft.com/en-us/azure/frontdoor/front-door-faq#what-is-the-difference-between-azure-front-door-service-and-azure-application-gateway">App Gateway is Regional</a>. If you were a massive global site, you might put Azure Front Door in ahem, front, and Azure App Gateway behind it, regionally. <figure><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/5bdd2c3819bc_12C81/image_f4322cd4-a3ff-4f20-8324-fc9d5c589d74.png" width="1001" height="132"></figure>  <p>Again, a little overkill as my Pools are pools are pools of one, but it gives me room to grow. I could easily balance traffic globally in the future.</p> <blockquote> <p><strong>CONFUSION: </strong>In the past with my little startup I've used <a href="https://docs.microsoft.com/en-us/azure/traffic-manager/traffic-manager-overview">Azure Traffic Manager</a> to route traffic to several App Services hosted all over the global. When I heard of Front Door I was confused, but it seems like <a href="https://docs.microsoft.com/en-us/azure/frontdoor/front-door-lb-with-azure-app-delivery-suite#global-load-balancing">Traffic Manager is mostly global DNS load balancing</a> for any network traffic, while Front Door is Layer 7 load balancing for HTTP traffic, and uses a variety of reasons to route traffic. Azure Front Door also can act as a CDN and cache all your content as well. There's lots of detail on Front Door's <a href="https://docs.microsoft.com/en-us/azure/frontdoor/front-door-routing-architecture">routing architecture</a> details and <a href="https://docs.microsoft.com/en-us/azure/frontdoor/front-door-routing-methods">traffic routing methods</a>. Azure Front Door is definitely the most sophisticated and comprehensive system for fronting all my traffic. I'm still learning what's the right size app for it and I'm not sure a blog is the ideal example app.</p></blockquote> <p>Here's how I set up /blog to hit one Backend Pool. I have it accepting both HTTP and HTTPS. Originally I had a few extra Front Door rules, one for HTTP, one for HTTPs, and I set the HTTP one to redirect to HTTPS. However, Front door charges 3 cents an hour for the each of the first 5 routing rules (then about a penny an hour for each after 5) but I don't (personally) think I should pay for what I consider "best practice" rules. That means, forcing HTTPS (an internet standard, these days) as well as URL canonicalization with a trailing slash after paths. That means /blog should 301 to /blog/ etc. These are simple prescriptive things that everyone should be doing. If I was putting a legacy app behind a Front Door, then this power and flexibility in path control would be a boon that I'd be happy to pay for. But in these cases I may be able to have that redirection work done lower down in the app itself and save money every month. I'll update this post if the pricing changes.</p> <p><img title="/blog hits the Blog App Service" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="/blog hits the Blog App Service" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/5bdd2c3819bc_12C81/image_ef2d31d9-6714-4fbf-a7bc-26cca8c50aeb.png" width="573" height="770"></p> <p>After I set up <a href="https://docs.microsoft.com/en-us/azure/frontdoor/">Azure Front Door</a> I noticed my staging blog was getting hit every few seconds, all day forever. I realized there are some health checks but since there's 80+ Azure Front Door locations and they are all checking the health of my app, it was adding up to a lot of traffic. For a large app, you need these health checks to make sure traffic fails over and you really know if you app is healthy. For my blog, less so.</p> <p>There's a few ways to tell Front Door to chill. First, I don't need Azure Front Door doing a GET requests on /. I can instead ask it to check something lighter weight. With ASP.NET 2.2 it's as easy as <a href="https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/health-checks?view=aspnetcore-2.2">adding HealthChecks</a>. It's much easier, less traffic, and you can make the health check as comprehensive as you want.</p><pre class="brush: csharp; toolbar: false; auto-links: false;">app.UseHealthChecks("/healthcheck");</pre>
<p>Next I turned the Interval WAY app so it wouldn't bug me every few seconds.</p>
<p><img title="Interval set to 255 seconds" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Interval set to 255 seconds" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/5bdd2c3819bc_12C81/image_e3aac079-4eee-4bc1-9e9e-21e35395b283.png" width="634" height="482"></p>
<p>These two small changes made a huge difference in my traffic as I didn't have so much extra "pinging."</p>
<p>After setting up Azure Front Door, I also turned on Custom Domain HTTPs and pointing staging to it. It was very easy to set up and was included in the cost.</p>
<p><img title="Custom Domain HTTPS" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="Custom Domain HTTPS" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/5bdd2c3819bc_12C81/image_998baaad-522e-43a9-b79b-0758ed1c657b.png" width="642" height="322"></p>
<p>I haven't decided if I want to set up <a href="https://docs.microsoft.com/en-us/azure/frontdoor/front-door-caching">Front Door's caching</a> or not, but it might mean an easier, more central way than using a CDN manually and changing the URLs for my sites static content and images. In fact, the <a href="https://docs.microsoft.com/en-us/azure/frontdoor/front-door-faq#what-are-the-pop-locations-for-azure-front-door-service">POP (Point of Presense) locations for Front Door are the same as those for Azure CDN</a>.</p>
<blockquote>
<p><strong>NOTE: </strong>I will have to at some point manage the Apex/Naked domain issue where hanselman.com and www.hanselman.com both resolve to my website. It seems this can be handled by either CNAME flattening or DNS chasing and I need to check with my DNS provider to see if this is supported. I suspect I can do it with an ALIAS record. Barring that, Azure also offers a <a href="https://azure.microsoft.com/en-us/services/dns">Azure DNS hosting service</a>.</p>
<p>There is another option I haven't explored yet called <a href="https://azure.microsoft.com/en-us/services/application-gateway/">Azure Application Gateway</a> that I may test out and see if it's cheaper for what I need. I primarily need SSL cert management and URL routing.</p></blockquote>
<p>I'm continuing to explore as I build out this migration plan. Let me know your thoughts in the comments.</p>
<hr>
<p><strong>Sponsor: </strong>Develop Xamarin applications without difficulty with the latest JetBrains Rider: Xcode integration, JetBrains Xamarin SDK, and manage the required SDKs for Android development, all right from the IDE. <a href="http://pubads.g.doubleclick.net/gampad/clk?id=5090967813&amp;iu=/6839/lqm.scotthanselman.site">Get it today</a></p><br/><hr/>Â© 2019 Scott Hanselman. All rights reserved. <br/></div><div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/604438374/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.hanselman.com/_/30/604438374/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/604438374/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/604438374/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/604438374/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</description>
      <comments>https://www.hanselman.com/blog/CommentView.aspx?guid=7b3178c0-7b26-4f2c-9f38-e534aaf9de7c</comments>
      <category>Azure</category><content:encoded><![CDATA[<div><p>As I've mentioned lately, I'm <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/RealWorldCloudMigrationsMovingA17YearOldSeriesOfSitesFromBareMetalToAzure.aspx">quietly moving my Website</a> from a physical machine to a number of Cloud Services hosted in Azure. This is an attempt to not just modernize the system - no reason to change things just to change them - but to take advantage of a number of benefits that a straight web host sometimes doesn't have. I want to have multiple microsites (the main page, the podcast, the blog, etc) with regular backups, CI/CD pipeline (check in code, go straight to staging), production swaps, a <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/RealWorldCloudMigrationsCDNsAreAnEasyImprovementToLegacyApps.aspx">global CDN for content</a>, etc.</p> <p>I'm breaking a single machine into a series of small sites BUT I want to still maintain ALL my existing URLs (for good or bad) and the most important one is <strong>hanselman.com/blog/</strong> that I now want to point to <strong>hanselmanblog.azurewebsites.net</strong>.</p> <p>That means that the <strong><a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/azure/frontdoor/">Azure Front Door</a></strong> will be receiving all the traffic - it's the Front Door! - and then <strong>forward it on </strong>to the Azure Web App. That means:  <ul> <li>hanselman.com/blog/foo -&gt; hanselmanblog.azurewebsites.net/foo  <li>hanselman.com/blog/bar -&gt; hanselmanblog.azurewebsites.net/foo  <li>hanselman.com/blog/foo/bar/baz -&gt; hanselmanblog.azurewebsites.net/foo/bar/baz</li></ul> <p>There's a few things to consider when <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/proxy-load-balancer?view=aspnetcore-2.2&amp;WT.mc_id=-blog-scottha">dealing with reverse proxies</a> like this and I've written about that in detail in this article on <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/DealingWithApplicationBaseURLsAndRazorLinkGenerationWhileHostingASPNETWebAppsBehindReverseProxies.aspx">Dealing with Application Base URLs and Razor link generation while hosting ASP.NET web apps behind Reverse Proxies</a>.  <p>You can and should read in detail about <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/azure/frontdoor/front-door-overview">Azure Front Door</a> here.  <p>It's worth considering a few things. Front Door MAY be overkill for what I'm doing because I have a small, modest site. Right now I've got several backends, but they aren't yet globally distributed. If I had a system with lots of regions and lots of App Services all over the world AND a lot of static content, Front Door would be a perfect fit. Right now I have just a few App Services (Backends in this context) and I'm using Front Door primarily to manage the hanselman.com top level domain and manage traffic with URL routing.  <p>On the plus side, that might mean Azure Front Door was exactly what I needed, it was <strong>super </strong>easy to set up Front Door as there's a visual Front Door Designer. It was less than 20 minutes to get it all routed, and SSL certs too just a few hours more. You can see below that I associated staging.hanselman.com with two Backend Pools. This UI in the Azure Portal is (IMHO) far easier than the <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/azure/frontdoor/front-door-faq#what-is-the-difference-between-azure-front-door-service-and-azure-application-gateway">Azure Application Gateway</a>. Additionally, Front Door is Global while <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/azure/frontdoor/front-door-faq#what-is-the-difference-between-azure-front-door-service-and-azure-application-gateway">App Gateway is Regional</a>. If you were a massive global site, you might put Azure Front Door in ahem, front, and Azure App Gateway behind it, regionally. <figure><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/5bdd2c3819bc_12C81/image_f4322cd4-a3ff-4f20-8324-fc9d5c589d74.png" width="1001" height="132"></figure>  <p>Again, a little overkill as my Pools are pools are pools of one, but it gives me room to grow. I could easily balance traffic globally in the future.</p> <blockquote> <p><strong>CONFUSION: </strong>In the past with my little startup I've used <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/azure/traffic-manager/traffic-manager-overview">Azure Traffic Manager</a> to route traffic to several App Services hosted all over the global. When I heard of Front Door I was confused, but it seems like <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/azure/frontdoor/front-door-lb-with-azure-app-delivery-suite#global-load-balancing">Traffic Manager is mostly global DNS load balancing</a> for any network traffic, while Front Door is Layer 7 load balancing for HTTP traffic, and uses a variety of reasons to route traffic. Azure Front Door also can act as a CDN and cache all your content as well. There's lots of detail on Front Door's <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/azure/frontdoor/front-door-routing-architecture">routing architecture</a> details and <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/azure/frontdoor/front-door-routing-methods">traffic routing methods</a>. Azure Front Door is definitely the most sophisticated and comprehensive system for fronting all my traffic. I'm still learning what's the right size app for it and I'm not sure a blog is the ideal example app.</p></blockquote> <p>Here's how I set up /blog to hit one Backend Pool. I have it accepting both HTTP and HTTPS. Originally I had a few extra Front Door rules, one for HTTP, one for HTTPs, and I set the HTTP one to redirect to HTTPS. However, Front door charges 3 cents an hour for the each of the first 5 routing rules (then about a penny an hour for each after 5) but I don't (personally) think I should pay for what I consider "best practice" rules. That means, forcing HTTPS (an internet standard, these days) as well as URL canonicalization with a trailing slash after paths. That means /blog should 301 to /blog/ etc. These are simple prescriptive things that everyone should be doing. If I was putting a legacy app behind a Front Door, then this power and flexibility in path control would be a boon that I'd be happy to pay for. But in these cases I may be able to have that redirection work done lower down in the app itself and save money every month. I'll update this post if the pricing changes.</p> <p><img title="/blog hits the Blog App Service" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="/blog hits the Blog App Service" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/5bdd2c3819bc_12C81/image_ef2d31d9-6714-4fbf-a7bc-26cca8c50aeb.png" width="573" height="770"></p> <p>After I set up <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/azure/frontdoor/">Azure Front Door</a> I noticed my staging blog was getting hit every few seconds, all day forever. I realized there are some health checks but since there's 80+ Azure Front Door locations and they are all checking the health of my app, it was adding up to a lot of traffic. For a large app, you need these health checks to make sure traffic fails over and you really know if you app is healthy. For my blog, less so.</p> <p>There's a few ways to tell Front Door to chill. First, I don't need Azure Front Door doing a GET requests on /. I can instead ask it to check something lighter weight. With ASP.NET 2.2 it's as easy as <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/health-checks?view=aspnetcore-2.2">adding HealthChecks</a>. It's much easier, less traffic, and you can make the health check as comprehensive as you want.</p><pre class="brush: csharp; toolbar: false; auto-links: false;">app.UseHealthChecks("/healthcheck");</pre>
<p>Next I turned the Interval WAY app so it wouldn't bug me every few seconds.</p>
<p><img title="Interval set to 255 seconds" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Interval set to 255 seconds" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/5bdd2c3819bc_12C81/image_e3aac079-4eee-4bc1-9e9e-21e35395b283.png" width="634" height="482"></p>
<p>These two small changes made a huge difference in my traffic as I didn't have so much extra "pinging."</p>
<p>After setting up Azure Front Door, I also turned on Custom Domain HTTPs and pointing staging to it. It was very easy to set up and was included in the cost.</p>
<p><img title="Custom Domain HTTPS" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="Custom Domain HTTPS" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/5bdd2c3819bc_12C81/image_998baaad-522e-43a9-b79b-0758ed1c657b.png" width="642" height="322"></p>
<p>I haven't decided if I want to set up <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/azure/frontdoor/front-door-caching">Front Door's caching</a> or not, but it might mean an easier, more central way than using a CDN manually and changing the URLs for my sites static content and images. In fact, the <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/azure/frontdoor/front-door-faq#what-are-the-pop-locations-for-azure-front-door-service">POP (Point of Presense) locations for Front Door are the same as those for Azure CDN</a>.</p>
<blockquote>
<p><strong>NOTE: </strong>I will have to at some point manage the Apex/Naked domain issue where hanselman.com and www.hanselman.com both resolve to my website. It seems this can be handled by either CNAME flattening or DNS chasing and I need to check with my DNS provider to see if this is supported. I suspect I can do it with an ALIAS record. Barring that, Azure also offers a <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://azure.microsoft.com/en-us/services/dns">Azure DNS hosting service</a>.</p>
<p>There is another option I haven't explored yet called <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://azure.microsoft.com/en-us/services/application-gateway/">Azure Application Gateway</a> that I may test out and see if it's cheaper for what I need. I primarily need SSL cert management and URL routing.</p></blockquote>
<p>I'm continuing to explore as I build out this migration plan. Let me know your thoughts in the comments.</p>
<hr>
<p><strong>Sponsor: </strong>Develop Xamarin applications without difficulty with the latest JetBrains Rider: Xcode integration, JetBrains Xamarin SDK, and manage the required SDKs for Android development, all right from the IDE. <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~pubads.g.doubleclick.net/gampad/clk?id=5090967813&amp;iu=/6839/lqm.scotthanselman.site">Get it today</a></p>
<br/><hr/>Â© 2019 Scott Hanselman. All rights reserved. 
<br/></div><Img align="left" border="0" height="1" width="1" alt="" style="border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;" hspace="0" src="http://feeds.hanselman.com/~/i/604438374/0/scotthanselman">
<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/604438374/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.hanselman.com/_/30/604438374/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/604438374/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/604438374/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/604438374/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</content:encoded></item>
<item>
<feedburner:origLink>https://www.hanselman.com/blog/DealingWithApplicationBaseURLsAndRazorLinkGenerationWhileHostingASPNETWebAppsBehindReverseProxies.aspx</feedburner:origLink>
      <trackback:ping>https://www.hanselman.com/blog/Trackback.aspx?guid=878e122e-ce47-4fc4-8f99-0c3c972ae7ad</trackback:ping>
      <pingback:server>https://www.hanselman.com/blog/pingback.aspx</pingback:server>
      <pingback:target>https://www.hanselman.com/blog/PermaLink.aspx?guid=878e122e-ce47-4fc4-8f99-0c3c972ae7ad</pingback:target>
      <dc:creator>Scott Hanselman</dc:creator>
      <wfw:comment>https://www.hanselman.com/blog/CommentView.aspx?guid=878e122e-ce47-4fc4-8f99-0c3c972ae7ad</wfw:comment>
      <wfw:commentRss>https://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=878e122e-ce47-4fc4-8f99-0c3c972ae7ad</wfw:commentRss>
      <slash:comments>6</slash:comments>
      <title>Dealing with Application Base URLs and Razor link generation while hosting ASP.NET web apps behind Reverse Proxies</title>
      <guid isPermaLink="false">https://www.hanselman.com/blog/PermaLink.aspx?guid=878e122e-ce47-4fc4-8f99-0c3c972ae7ad</guid>
      <link>http://feeds.hanselman.com/~/604312196/0/scotthanselman~Dealing-with-Application-Base-URLs-and-Razor-link-generation-while-hosting-ASPNET-web-apps-behind-Reverse-Proxies.aspx</link>
      <pubDate>Tue, 09 Jul 2019 23:04:00 GMT</pubDate>
      <description><![CDATA[<div><p><img title="Updating my site to run on Azure" style="float: right; margin: 0px 0px 0px 5px; display: inline" alt="Updating my site to run on Azure" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/5c88f4b361a9_F8DE/image_97870982-bb6e-4309-97b4-d204ce15c352.png" width="240" align="right" height="169">I'm <a href="https://www.hanselman.com/blog/RealWorldCloudMigrationsMovingA17YearOldSeriesOfSitesFromBareMetalToAzure.aspx">quietly moving my Website</a> from a physical machine to a number of Cloud Services hosted in Azure. This is an attempt to not just modernize the system - no reason to change things just to change them - but to take advantage of a number of benefits that a straight web host sometimes doesn't have. I want to have multiple microsites (the main page, the podcast, the blog, etc) with regular backups, CI/CD pipeline (check in code, go straight to staging), production swaps, a <a href="https://www.hanselman.com/blog/RealWorldCloudMigrationsCDNsAreAnEasyImprovementToLegacyApps.aspx">global CDN for content</a>, etc.</p> <p>I'm also moving from an ASP.NET 4 (was ASP.NET 2 until recently) site to ASP.NET Core 2.x LTS and changing my URL structure. I am aiming to save money but I'm not doing this as a "spend basically nothing" project. Yes, I could convert my site to a static HTML generated blog using <a href="https://www.hanselman.com/blog/ExploringWyamANETStaticSiteContentGenerator.aspx">any number</a> <a href="https://www.hanselman.com/blog/RunningTheRubyMiddlemanStaticSiteGeneratorOnMicrosoftAzure.aspx">of great static</a> site generators, or even <a href="https://www.hanselman.com/blog/HeadlessCMSAndDecoupledCMSInNETCore.aspx">a Headless CMS</a>. Yes I could host it in Azure Storage fronted by a CMS, or even as a series of Azure Functions. But I have 17 years of content in <a href="https://github.com/poppastring/dasblog-core">DasBlog</a>, I like <a href="https://github.com/poppastring/dasblog-core">DasBlog</a>, and it's being actively updated to .NET Core and it's a fun app. I also have <a href="https://www.hanselman.com/blog/UpgradingA10YearOldSiteToASPNETCoresRazorPagesUsingTheURLRewritingMiddleware.aspx">custom Razor sites</a> in the form of my podcast site and they work great with a great workflow. I want to find a balance of cost effectiveness, features, ease of use, and reliability.&nbsp; What I have now is a sinking feeling like my site is gonna die tomorrow and I'm not ready to deal with it. So, there you go.</p> <p>Currently my sites live on a real machine with real folders and it's fronted by IIS on a Windows Server. There's an app (an IIS Application, to be clear) leaving at \ so that means hanselman.com/ hits / which is likely c:\inetpub\wwwroot full stop.</p> <p>For historical reasons, when you hit hanselman.com/blog/ you're hitting the /blog IIS Application which could be at d:\whatever but may be at c:\inetpub\wwwroot\blog or even at c:\blog. Who knows. The Application and ASP.NET within it <em>knows that the site is at hanselman.com/blog. </em></p> <p>That's important, since I may write a URL like ~/about when writing code. If I'm in the hanselman.com/blog app, then ~/about means hanselman.com/blog/about. If I write /about, that means hanselman.com/about. So the ~ is a shorthand for "starting at this App's base URL." This is great and useful and makes Link generation super easy, but it only works if your app knows what it's server-side base URL is.</p> <p>To be clear, we are talking about the reality of the generated URL that's sent to and from the browser, not about any physical reality on the disk or server or app.</p> <p>I've moved my world to three Azure App Services called <strong>hanselminutes</strong>, <strong>hanselman</strong>, and <strong>hanselmanblog</strong>. They have names like <a href="http://hanselman.azurewebsites.net">http://hanselman.azurewebsites.net</a> for example. </p> <blockquote> <p><strong>ASIDE: </strong>You'll note that hitting hanselman.azurewebsites.com will hit an app that looks stopped. I don't want that site to serve traffic from there, I want it to be served from <a href="http://hanselman.com">http://hanselman.com</a>, right? Specifically only from Azure Front Door which I'll talk about in another post soon. So I'll use the Access Restrictions and Software Based Networking in Azure to deny all traffic to that site, except traffic from Azure - in this case, from the Azure Front Door Reverse Proxy I'll be using.</p></blockquote> <p>That looks like this in this Access Restrictions part of the Azure Portal.</p><figure> <p><img title="Only allowing traffic from Azure" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Only allowing traffic from Azure" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/5c88f4b361a9_F8DE/image_43fafd48-9f21-4d2f-9eb4-f1a05fcdcd3a.png" width="751" height="278"></p> <p>Since the hanselman.com app will point to hanselman.azurewebsites.net (or one of its staging slots) there's no issue with URL generation. If I say / I mean /, the root of the site. If I generate a URL like "~/about" I'll get hanselman.com/about, right?</p> <p>But with <a href="http://hanselmanblog.azurewebsites.net">http://hanselmanblog.azurewebsites.net</a> it's different.</p> <p>I want <strong>hanselman.com/blog/</strong> to point to <strong>hanselmanblog.azurewebsites.net</strong>.</p> <p>That means that the Azure Front Door will be receiving traffic, then <strong>forward it on </strong>to the Azure Web App. That means:</p> <ul> <li>hanselman.com/blog/foo -&gt; hanselmanblog.azurewebsites.net/foo</li> <li>hanselman.com/blog/bar -&gt; hanselmanblog.azurewebsites.net/foo</li> <li>hanselman.com/blog/foo/bar/baz -&gt; hanselmanblog.azurewebsites.net/foo/bar/baz</li></ul> <p>There's a few things to consider when <a href="https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/proxy-load-balancer?view=aspnetcore-2.2">dealing with reverse proxies</a> like this. </p> <p><strong>Is part of the /path being removed or is a path being added?</strong></p> <p>In the case of DasBlog, we have a configuration setting so that the app knows where it LOOKS like it is, from the Browser URL's perspective.</p> <p>My blog is at /blog so I add that in some middleware in my Startup.cs. Certainly YOU don't need to have this in config - do whatever works for you as long as context.Request.PathBase is set as the app should see it. I set this very early in my pipeline.</p> <p>That if statement is there because most folks don't install their blog at /blog, so it doesn't add the middleware.</p><pre class="brush: csharp; toolbar: false; auto-links: false;">//if you've configured it at /blog or /whatever, set that pathbase so ~ will generate correctly<br>Uri rootUri = new Uri(dasBlogSettings.SiteConfiguration.Root);<br>string path = rootUri.AbsolutePath;<br><br>//Deal with path base and proxies that change the request path<br>if (path != "/")<br>{<br>    app.Use((context, next) =&gt;<br>    {<br>        context.Request.PathBase = new PathString(path);<br>        return next.Invoke();<br>    });<br>}</pre>
<p>Sometimes you want the OPPOSITE of this. That would mean that I wanted, perhaps <strong>hanselman.com </strong>to point to <strong>hanselman.azurewebsites.net/blog/</strong>. In that case I'd do this in my Startup.cs's ConfigureServices:</p><pre class="brush: csharp; toolbar: false; auto-links: false;">app.UsePathBase("/blog");</pre>
<p>Be aware that If you're <a href="https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/proxy-load-balancer?view=aspnetcore-2.2#nginx-configuration">hosting ASP.NET Core apps behind Nginx or Apache</a> or really anything, you'll also want ASP.NET Core to respect&nbsp; X-Forwarded-For and other X-Forwarded standard headers. You'll also likely want the app to refuse to speak to anyone who isn't a certain list of proxies or configured URLs.</p>
<p>I configure these in Startup.cs's ConfigureServices from a semicolon delimited list in <em>my </em>config, but you can do this in a number of ways.</p><pre class="brush: csharp; toolbar: false; auto-links: false;">services.Configure&lt;ForwardedHeadersOptions&gt;(options =&gt;<br>{<br>    options.ForwardedHeaders = ForwardedHeaders.All;<br>    options.AllowedHosts = Configuration.GetValue&lt;string&gt;("AllowedHosts")?.Split(';').ToList&lt;string&gt;();<br>});
</pre>
<p>Since <a href="https://docs.microsoft.com/en-us/azure/frontdoor/front-door-http-headers-protocol">Azure Front Door adds these headers</a> as it forwards traffic, from my app's point of view it "just works" once I've added that above and then this in Configure()</p><pre class="brush: csharp; toolbar: false; auto-links: false;">app.UseForwardedHeaders();
</pre>
<p>There seems to be some confusion on hosting behind a reverse proxy in <a href="https://github.com/aspnet/AspNetCore/issues/2302">a few GitHub Issues</a>. I'd like to see my scenario ( /foo -&gt; / ) be a single line of code, as we see that the other scenario ( / -&gt; /foo ) is a single line.</p>
<p>Have you had any issues with URL generation when hosting your Apps behind a reverse proxy?</p>
<hr>
<p><strong>Sponsor: </strong>Develop Xamarin applications without difficulty with the latest JetBrains Rider: Xcode integration, JetBrains Xamarin SDK, and manage the required SDKs for Android development, all right from the IDE. <a href="http://pubads.g.doubleclick.net/gampad/clk?id=5090967813&amp;iu=/6839/lqm.scotthanselman.site">Get it today</a></p><br/><hr/>Â© 2019 Scott Hanselman. All rights reserved. <br/></div><div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/604312196/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.hanselman.com/_/30/604312196/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/604312196/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/604312196/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/604312196/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</description>
      <comments>https://www.hanselman.com/blog/CommentView.aspx?guid=878e122e-ce47-4fc4-8f99-0c3c972ae7ad</comments>
      <category>ASP.NET</category>
      <category>Azure</category>
      <category>DasBlog</category>
      <category>Open Source</category><content:encoded><![CDATA[<div><p><img title="Updating my site to run on Azure" style="float: right; margin: 0px 0px 0px 5px; display: inline" alt="Updating my site to run on Azure" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/5c88f4b361a9_F8DE/image_97870982-bb6e-4309-97b4-d204ce15c352.png" width="240" align="right" height="169">I'm <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/RealWorldCloudMigrationsMovingA17YearOldSeriesOfSitesFromBareMetalToAzure.aspx">quietly moving my Website</a> from a physical machine to a number of Cloud Services hosted in Azure. This is an attempt to not just modernize the system - no reason to change things just to change them - but to take advantage of a number of benefits that a straight web host sometimes doesn't have. I want to have multiple microsites (the main page, the podcast, the blog, etc) with regular backups, CI/CD pipeline (check in code, go straight to staging), production swaps, a <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/RealWorldCloudMigrationsCDNsAreAnEasyImprovementToLegacyApps.aspx">global CDN for content</a>, etc.</p> <p>I'm also moving from an ASP.NET 4 (was ASP.NET 2 until recently) site to ASP.NET Core 2.x LTS and changing my URL structure. I am aiming to save money but I'm not doing this as a "spend basically nothing" project. Yes, I could convert my site to a static HTML generated blog using <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/ExploringWyamANETStaticSiteContentGenerator.aspx">any number</a> <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/RunningTheRubyMiddlemanStaticSiteGeneratorOnMicrosoftAzure.aspx">of great static</a> site generators, or even <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/HeadlessCMSAndDecoupledCMSInNETCore.aspx">a Headless CMS</a>. Yes I could host it in Azure Storage fronted by a CMS, or even as a series of Azure Functions. But I have 17 years of content in <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/poppastring/dasblog-core">DasBlog</a>, I like <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/poppastring/dasblog-core">DasBlog</a>, and it's being actively updated to .NET Core and it's a fun app. I also have <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/UpgradingA10YearOldSiteToASPNETCoresRazorPagesUsingTheURLRewritingMiddleware.aspx">custom Razor sites</a> in the form of my podcast site and they work great with a great workflow. I want to find a balance of cost effectiveness, features, ease of use, and reliability.&nbsp; What I have now is a sinking feeling like my site is gonna die tomorrow and I'm not ready to deal with it. So, there you go.</p> <p>Currently my sites live on a real machine with real folders and it's fronted by IIS on a Windows Server. There's an app (an IIS Application, to be clear) leaving at \ so that means hanselman.com/ hits / which is likely c:\inetpub\wwwroot full stop.</p> <p>For historical reasons, when you hit hanselman.com/blog/ you're hitting the /blog IIS Application which could be at d:\whatever but may be at c:\inetpub\wwwroot\blog or even at c:\blog. Who knows. The Application and ASP.NET within it <em>knows that the site is at hanselman.com/blog. </em></p> <p>That's important, since I may write a URL like ~/about when writing code. If I'm in the hanselman.com/blog app, then ~/about means hanselman.com/blog/about. If I write /about, that means hanselman.com/about. So the ~ is a shorthand for "starting at this App's base URL." This is great and useful and makes Link generation super easy, but it only works if your app knows what it's server-side base URL is.</p> <p>To be clear, we are talking about the reality of the generated URL that's sent to and from the browser, not about any physical reality on the disk or server or app.</p> <p>I've moved my world to three Azure App Services called <strong>hanselminutes</strong>, <strong>hanselman</strong>, and <strong>hanselmanblog</strong>. They have names like <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~hanselman.azurewebsites.net">http://hanselman.azurewebsites.net</a> for example. </p> <blockquote> <p><strong>ASIDE: </strong>You'll note that hitting hanselman.azurewebsites.com will hit an app that looks stopped. I don't want that site to serve traffic from there, I want it to be served from <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~hanselman.com">http://hanselman.com</a>, right? Specifically only from Azure Front Door which I'll talk about in another post soon. So I'll use the Access Restrictions and Software Based Networking in Azure to deny all traffic to that site, except traffic from Azure - in this case, from the Azure Front Door Reverse Proxy I'll be using.</p></blockquote> <p>That looks like this in this Access Restrictions part of the Azure Portal.</p><figure> <p><img title="Only allowing traffic from Azure" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Only allowing traffic from Azure" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/5c88f4b361a9_F8DE/image_43fafd48-9f21-4d2f-9eb4-f1a05fcdcd3a.png" width="751" height="278"></p> <p>Since the hanselman.com app will point to hanselman.azurewebsites.net (or one of its staging slots) there's no issue with URL generation. If I say / I mean /, the root of the site. If I generate a URL like "~/about" I'll get hanselman.com/about, right?</p> <p>But with <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~hanselmanblog.azurewebsites.net">http://hanselmanblog.azurewebsites.net</a> it's different.</p> <p>I want <strong>hanselman.com/blog/</strong> to point to <strong>hanselmanblog.azurewebsites.net</strong>.</p> <p>That means that the Azure Front Door will be receiving traffic, then <strong>forward it on </strong>to the Azure Web App. That means:</p> <ul> <li>hanselman.com/blog/foo -&gt; hanselmanblog.azurewebsites.net/foo</li> <li>hanselman.com/blog/bar -&gt; hanselmanblog.azurewebsites.net/foo</li> <li>hanselman.com/blog/foo/bar/baz -&gt; hanselmanblog.azurewebsites.net/foo/bar/baz</li></ul> <p>There's a few things to consider when <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/proxy-load-balancer?view=aspnetcore-2.2">dealing with reverse proxies</a> like this. </p> <p><strong>Is part of the /path being removed or is a path being added?</strong></p> <p>In the case of DasBlog, we have a configuration setting so that the app knows where it LOOKS like it is, from the Browser URL's perspective.</p> <p>My blog is at /blog so I add that in some middleware in my Startup.cs. Certainly YOU don't need to have this in config - do whatever works for you as long as context.Request.PathBase is set as the app should see it. I set this very early in my pipeline.</p> <p>That if statement is there because most folks don't install their blog at /blog, so it doesn't add the middleware.</p><pre class="brush: csharp; toolbar: false; auto-links: false;">//if you've configured it at /blog or /whatever, set that pathbase so ~ will generate correctly
<br>Uri rootUri = new Uri(dasBlogSettings.SiteConfiguration.Root);
<br>string path = rootUri.AbsolutePath;
<br>
<br>//Deal with path base and proxies that change the request path
<br>if (path != "/")
<br>{
<br>    app.Use((context, next) =&gt;
<br>    {
<br>        context.Request.PathBase = new PathString(path);
<br>        return next.Invoke();
<br>    });
<br>}</pre>
<p>Sometimes you want the OPPOSITE of this. That would mean that I wanted, perhaps <strong>hanselman.com </strong>to point to <strong>hanselman.azurewebsites.net/blog/</strong>. In that case I'd do this in my Startup.cs's ConfigureServices:</p><pre class="brush: csharp; toolbar: false; auto-links: false;">app.UsePathBase("/blog");</pre>
<p>Be aware that If you're <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/proxy-load-balancer?view=aspnetcore-2.2#nginx-configuration">hosting ASP.NET Core apps behind Nginx or Apache</a> or really anything, you'll also want ASP.NET Core to respect&nbsp; X-Forwarded-For and other X-Forwarded standard headers. You'll also likely want the app to refuse to speak to anyone who isn't a certain list of proxies or configured URLs.</p>
<p>I configure these in Startup.cs's ConfigureServices from a semicolon delimited list in <em>my </em>config, but you can do this in a number of ways.</p><pre class="brush: csharp; toolbar: false; auto-links: false;">services.Configure&lt;ForwardedHeadersOptions&gt;(options =&gt;
<br>{
<br>    options.ForwardedHeaders = ForwardedHeaders.All;
<br>    options.AllowedHosts = Configuration.GetValue&lt;string&gt;("AllowedHosts")?.Split(';').ToList&lt;string&gt;();
<br>});
</pre>
<p>Since <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/azure/frontdoor/front-door-http-headers-protocol">Azure Front Door adds these headers</a> as it forwards traffic, from my app's point of view it "just works" once I've added that above and then this in Configure()</p><pre class="brush: csharp; toolbar: false; auto-links: false;">app.UseForwardedHeaders();
</pre>
<p>There seems to be some confusion on hosting behind a reverse proxy in <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/aspnet/AspNetCore/issues/2302">a few GitHub Issues</a>. I'd like to see my scenario ( /foo -&gt; / ) be a single line of code, as we see that the other scenario ( / -&gt; /foo ) is a single line.</p>
<p>Have you had any issues with URL generation when hosting your Apps behind a reverse proxy?</p>
<hr>
<p><strong>Sponsor: </strong>Develop Xamarin applications without difficulty with the latest JetBrains Rider: Xcode integration, JetBrains Xamarin SDK, and manage the required SDKs for Android development, all right from the IDE. <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~pubads.g.doubleclick.net/gampad/clk?id=5090967813&amp;iu=/6839/lqm.scotthanselman.site">Get it today</a></p>
<br/><hr/>Â© 2019 Scott Hanselman. All rights reserved. 
<br/></div><Img align="left" border="0" height="1" width="1" alt="" style="border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;" hspace="0" src="http://feeds.hanselman.com/~/i/604312196/0/scotthanselman">
<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/604312196/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.hanselman.com/_/30/604312196/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/604312196/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/604312196/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/604312196/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</content:encoded></item>
<item>
<feedburner:origLink>https://www.hanselman.com/blog/RealWorldCloudMigrationsCDNsAreAnEasyImprovementToLegacyApps.aspx</feedburner:origLink>
      <trackback:ping>https://www.hanselman.com/blog/Trackback.aspx?guid=9567ebf5-201e-47da-b5b6-5a652dd82113</trackback:ping>
      <pingback:server>https://www.hanselman.com/blog/pingback.aspx</pingback:server>
      <pingback:target>https://www.hanselman.com/blog/PermaLink.aspx?guid=9567ebf5-201e-47da-b5b6-5a652dd82113</pingback:target>
      <dc:creator>Scott Hanselman</dc:creator>
      <wfw:comment>https://www.hanselman.com/blog/CommentView.aspx?guid=9567ebf5-201e-47da-b5b6-5a652dd82113</wfw:comment>
      <wfw:commentRss>https://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=9567ebf5-201e-47da-b5b6-5a652dd82113</wfw:commentRss>
      <slash:comments>5</slash:comments>
      <title>Real World Cloud Migrations: CDNs are an easy improvement to legacy apps</title>
      <guid isPermaLink="false">https://www.hanselman.com/blog/PermaLink.aspx?guid=9567ebf5-201e-47da-b5b6-5a652dd82113</guid>
      <link>http://feeds.hanselman.com/~/604188270/0/scotthanselman~Real-World-Cloud-Migrations-CDNs-are-an-easy-improvement-to-legacy-apps.aspx</link>
      <pubDate>Thu, 04 Jul 2019 21:32:00 GMT</pubDate>
      <description><![CDATA[<div><p>I'm doing a <a href="https://www.hanselman.com/blog/RealWorldCloudMigrationsMovingA17YearOldSeriesOfSitesFromBareMetalToAzure.aspx">quiet backend migration/update to my family of sites</a>. If I do it right, there will be minimal disruption. Even though I'm a one person show (plus Mandy my podcast editor) the Cloud lets me manage digital assets like I'm a whole company with an IT department. Sure, I could FTP files directly into production, but why do that when I've got free/cheap stuff like <a href="https://azure.microsoft.com/en-us/pricing/details/devops/azure-devops-services/">Azure DevOps</a>.</p> <p>As I'm one person, I do want to keep costs down whenever possible and I've said so in my "<a href="https://www.hanselman.com/blog/PennyPinchingInTheCloudWhenDoAzureWebsitesMakeSense.aspx">Penny Pinching in the Cloud</a>" series. However, I do pay for value, so I'll try to keep costs down whenever possible, but I will pay for things I feel are useful or provide me with a quality product and/or save me time and hassle. For example, <a href="https://azure.microsoft.com/en-us/pricing/details/devops/azure-devops-services/">Azure Pipelines</a> gives one free Microsoft-hosted CI/CD pipeline and 1 hosted job with 1800 minutes a month. This should be more than enough for my set up.</p> <p>Additionally, sometimes I'll shift costs in order to both save money and improve performance as when I moved my <a href="https://www.hanselman.com/blog/PennyPinchingVideoMovingMyWebsitesImagesToTheAzureCDNAndUsingACustomDomain.aspx">Podcast's image hosting over to an Azure CDN in 2013</a>. Fast forward 6 years and since I'm doing this larger migration, I wanted to see how easy it would be to migrate even more of my static assets to a CDN.</p> <p>Make a Storage Account and ensure that its Access Level is Public if you intend folks to be able to read from it over HTTP GETs.</p> <p><img title="Public Access Level" style="display: inline" alt="Public Access Level" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Real-World-Cloud-Migrations-CDNs-are-eas_CBD4/image_fd665ab7-b9ff-4c1e-9421-85795d121a72.png" width="400" height="279"></p> <p>With in the Azure Portal you can make a CDN Profile that uses Microsoft, Akamai, or Verizon for the actual Content Distribution Network. I picked Microsoft's because I have experience with Akamai and Verizon (they were solid) and I wanted to <a href="https://azure.microsoft.com/en-us/blog/announcing-microsoft-s-own-cdn-network/">see how the new Microsoft one does</a>. It claims to put content within 50ms of 60 countries.</p> <p>You'll have a CDN endpoint host name that points to an Origin. That Origin is the Origin of your content. The Origin can be an existing place you have stuff so the CDN will basically check there first, cache things, then serve the content. Or it can be an existing WebApp or in my case, Storage. </p> <p><img title="Azure Storage Accounts for my blog" style="display: inline" alt="Azure Storage Accounts for my blog" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Real-World-Cloud-Migrations-CDNs-are-eas_CBD4/image_0acd7ec1-2787-47bc-8aba-392228fc1dde.png" width="339" height="294"></p> <p>I didn't want to make things too complex, so I have a single Storage Account with a few containers. Then I mapped custom endpoints for both my blog AND my podcast, but they share the same storage. I also took advantage of the free SSL Certs so images.hanselman.com and images.hanselminutes.com are both SSL. Gotta get those "A" grades from <a href="https://securityheaders.com/">https://securityheaders.com</a> right?</p> <figure><img title="Custom domains for my CDN" style="display: inline" alt="Custom domains for my CDN" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Real-World-Cloud-Migrations-CDNs-are-eas_CBD4/image_4e95eb48-cf89-4dd5-8119-d69210e29bb9.png" width="999" height="512"></figure> <p>Then, just grab the <a href="https://azure.microsoft.com/en-us/features/storage-explorer/">Azure Storage Explorer</a>. It's free and cross platform. In fact, you can get Storage Explorer as an app that runs locally, or you can <a href="https://portal.azure.com/#blade/Microsoft_Azure_Storage/StorageExplorerBlade">check it out in the Azure&nbsp; Portal/in-browser as well, here</a>. I've uploaded all my main assets (images used in my CSS, blog, headers, etc). </p> <p>I've settled on a basic scheme where anything that was "/images/foo.png" is now "https://images.hanselman.com/blog/foo.png" or /main/ or /podcast/ depending on who is using it. This made search and replaces reliable and easy. </p> <p>It's <a href="https://docs.microsoft.com/en-us/azure/cdn/cdn-create-new-endpoint">truly a less-than-an-hour operation to enable a CDN</a> on an existing site. While I've chose to use Azure Storage as my backing store, you can just use your existing site's /images folder and just change your markup to pull from the CDN's URL. I recommend you make a simple cdn.yourdomain.com or images.yourdomain.com. This can also easily be enabled with a CNAME in less than an hour. Having your images at another URL via a subdomain CNAME also allows for even more download parallelism from the browser.</p> <p>This is all in my Staging so you won't see it quite yet until I flip the switch on the whole migration.</p> <h3>Exploring future possibilities for dynamic image content</h3> <p>I haven't yet moved all my blog <em>content </em>images (a few gigs, but many thousands of images) to a CDN as I don't want to change my existing publishing workflow with <a href="http://openlivewriter.org/">Open Live Writer</a>. I'm considering a flow that keeps the images uploading to the Web App but then using the Custom Origin Path options in the Azure CDN that will have images get picked up Web App then get served by the CDN. In order to manage 17 years of images though, I'd need to catch URLs like this:</p><p><a href="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/0409a9d5fae6_F552/image_9.png">https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/0409a9d5fae6_F552/image_9.png</a></p>  <p>and redirect them to </p> <p><a href="https://images.hanselman.com/blog/content/binary/Windows-Live-Writer/0409a9d5fae6_F552/image_9.png">https://images.hanselman.com/blog/content/binary/Windows-Live-Writer/0409a9d5fae6_F552/image_9.png</a></p> <p>As I see it, there's a few options to get images from a GET of /blog/content/binary to be served by a CDN:</p> <ul> <li>Dynamically Rewrite the URLs on the way OUT (as the HTML is generated)  <ul> <li>CPU expensive, but ya it's cached in my WebApp</li></ul> <li>Rewriting Middleware to redirect (301?) requests to the new images location  <ul> <li>Easiest option, but costs everyone a 301 on all image GETs</li></ul> <li>Programmatically change the stored markup (basically forloop over my "database," search and replace, AND ensure future images use this new URL)  <ul> <li>A hassle, but a one time hassle  <li>Not sure about future images, I might have to change my publishing flow AND run the process on new posts occasionally. </li></ul></li></ul> <p>What are your thoughts on if I should go all the way and manage EVERY blog image vs the low hanging fruit of shared static assets? Worth it, or overkill?</p> <p>The learning process continues!</p> <p> <hr>   <p><strong>Sponsor:</strong> Seq delivers the diagnostics, dashboarding, and alerting capabilities needed by modern development teams - all on your infrastructure. <a href="https://hnsl.mn/2YzxoRp">Download now</a>.  <br/><hr/>Â© 2019 Scott Hanselman. All rights reserved. <br/></div><div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/604188270/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.hanselman.com/_/30/604188270/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/604188270/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/604188270/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/604188270/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</description>
      <comments>https://www.hanselman.com/blog/CommentView.aspx?guid=9567ebf5-201e-47da-b5b6-5a652dd82113</comments>
      <category>Azure</category><content:encoded><![CDATA[<div><p>I'm doing a <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/RealWorldCloudMigrationsMovingA17YearOldSeriesOfSitesFromBareMetalToAzure.aspx">quiet backend migration/update to my family of sites</a>. If I do it right, there will be minimal disruption. Even though I'm a one person show (plus Mandy my podcast editor) the Cloud lets me manage digital assets like I'm a whole company with an IT department. Sure, I could FTP files directly into production, but why do that when I've got free/cheap stuff like <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://azure.microsoft.com/en-us/pricing/details/devops/azure-devops-services/">Azure DevOps</a>.</p> <p>As I'm one person, I do want to keep costs down whenever possible and I've said so in my "<a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/PennyPinchingInTheCloudWhenDoAzureWebsitesMakeSense.aspx">Penny Pinching in the Cloud</a>" series. However, I do pay for value, so I'll try to keep costs down whenever possible, but I will pay for things I feel are useful or provide me with a quality product and/or save me time and hassle. For example, <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://azure.microsoft.com/en-us/pricing/details/devops/azure-devops-services/">Azure Pipelines</a> gives one free Microsoft-hosted CI/CD pipeline and 1 hosted job with 1800 minutes a month. This should be more than enough for my set up.</p> <p>Additionally, sometimes I'll shift costs in order to both save money and improve performance as when I moved my <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/PennyPinchingVideoMovingMyWebsitesImagesToTheAzureCDNAndUsingACustomDomain.aspx">Podcast's image hosting over to an Azure CDN in 2013</a>. Fast forward 6 years and since I'm doing this larger migration, I wanted to see how easy it would be to migrate even more of my static assets to a CDN.</p> <p>Make a Storage Account and ensure that its Access Level is Public if you intend folks to be able to read from it over HTTP GETs.</p> <p><img title="Public Access Level" style="display: inline" alt="Public Access Level" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Real-World-Cloud-Migrations-CDNs-are-eas_CBD4/image_fd665ab7-b9ff-4c1e-9421-85795d121a72.png" width="400" height="279"></p> <p>With in the Azure Portal you can make a CDN Profile that uses Microsoft, Akamai, or Verizon for the actual Content Distribution Network. I picked Microsoft's because I have experience with Akamai and Verizon (they were solid) and I wanted to <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://azure.microsoft.com/en-us/blog/announcing-microsoft-s-own-cdn-network/">see how the new Microsoft one does</a>. It claims to put content within 50ms of 60 countries.</p> <p>You'll have a CDN endpoint host name that points to an Origin. That Origin is the Origin of your content. The Origin can be an existing place you have stuff so the CDN will basically check there first, cache things, then serve the content. Or it can be an existing WebApp or in my case, Storage. </p> <p><img title="Azure Storage Accounts for my blog" style="display: inline" alt="Azure Storage Accounts for my blog" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Real-World-Cloud-Migrations-CDNs-are-eas_CBD4/image_0acd7ec1-2787-47bc-8aba-392228fc1dde.png" width="339" height="294"></p> <p>I didn't want to make things too complex, so I have a single Storage Account with a few containers. Then I mapped custom endpoints for both my blog AND my podcast, but they share the same storage. I also took advantage of the free SSL Certs so images.hanselman.com and images.hanselminutes.com are both SSL. Gotta get those "A" grades from <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://securityheaders.com/">https://securityheaders.com</a> right?</p> <figure><img title="Custom domains for my CDN" style="display: inline" alt="Custom domains for my CDN" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Real-World-Cloud-Migrations-CDNs-are-eas_CBD4/image_4e95eb48-cf89-4dd5-8119-d69210e29bb9.png" width="999" height="512"></figure> <p>Then, just grab the <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://azure.microsoft.com/en-us/features/storage-explorer/">Azure Storage Explorer</a>. It's free and cross platform. In fact, you can get Storage Explorer as an app that runs locally, or you can <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://portal.azure.com/#blade/Microsoft_Azure_Storage/StorageExplorerBlade">check it out in the Azure&nbsp; Portal/in-browser as well, here</a>. I've uploaded all my main assets (images used in my CSS, blog, headers, etc). </p> <p>I've settled on a basic scheme where anything that was "/images/foo.png" is now "https://images.hanselman.com/blog/foo.png" or /main/ or /podcast/ depending on who is using it. This made search and replaces reliable and easy. </p> <p>It's <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/azure/cdn/cdn-create-new-endpoint">truly a less-than-an-hour operation to enable a CDN</a> on an existing site. While I've chose to use Azure Storage as my backing store, you can just use your existing site's /images folder and just change your markup to pull from the CDN's URL. I recommend you make a simple cdn.yourdomain.com or images.yourdomain.com. This can also easily be enabled with a CNAME in less than an hour. Having your images at another URL via a subdomain CNAME also allows for even more download parallelism from the browser.</p> <p>This is all in my Staging so you won't see it quite yet until I flip the switch on the whole migration.</p> <h3>Exploring future possibilities for dynamic image content</h3> <p>I haven't yet moved all my blog <em>content </em>images (a few gigs, but many thousands of images) to a CDN as I don't want to change my existing publishing workflow with <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~openlivewriter.org/">Open Live Writer</a>. I'm considering a flow that keeps the images uploading to the Web App but then using the Custom Origin Path options in the Azure CDN that will have images get picked up Web App then get served by the CDN. In order to manage 17 years of images though, I'd need to catch URLs like this:</p><p><a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/0409a9d5fae6_F552/image_9.png">https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/0409a9d5fae6_F552/image_9.png</a></p>  <p>and redirect them to </p> <p><a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://images.hanselman.com/blog/content/binary/Windows-Live-Writer/0409a9d5fae6_F552/image_9.png">https://images.hanselman.com/blog/content/binary/Windows-Live-Writer/0409a9d5fae6_F552/image_9.png</a></p> <p>As I see it, there's a few options to get images from a GET of /blog/content/binary to be served by a CDN:</p> <ul> <li>Dynamically Rewrite the URLs on the way OUT (as the HTML is generated)  <ul> <li>CPU expensive, but ya it's cached in my WebApp</li></ul> <li>Rewriting Middleware to redirect (301?) requests to the new images location  <ul> <li>Easiest option, but costs everyone a 301 on all image GETs</li></ul> <li>Programmatically change the stored markup (basically forloop over my "database," search and replace, AND ensure future images use this new URL)  <ul> <li>A hassle, but a one time hassle  <li>Not sure about future images, I might have to change my publishing flow AND run the process on new posts occasionally. </li></ul></li></ul> <p>What are your thoughts on if I should go all the way and manage EVERY blog image vs the low hanging fruit of shared static assets? Worth it, or overkill?</p> <p>The learning process continues!</p> <p> <hr>   <p><strong>Sponsor:</strong> Seq delivers the diagnostics, dashboarding, and alerting capabilities needed by modern development teams - all on your infrastructure. <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/2YzxoRp">Download now</a>.  
<br/><hr/>Â© 2019 Scott Hanselman. All rights reserved. 
<br/></div><Img align="left" border="0" height="1" width="1" alt="" style="border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;" hspace="0" src="http://feeds.hanselman.com/~/i/604188270/0/scotthanselman">
<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/604188270/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.hanselman.com/_/30/604188270/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/604188270/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/604188270/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/604188270/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</content:encoded></item>
<item>
<feedburner:origLink>https://www.hanselman.com/blog/RealWorldCloudMigrationsMovingA17YearOldSeriesOfSitesFromBareMetalToAzure.aspx</feedburner:origLink>
      <trackback:ping>https://www.hanselman.com/blog/Trackback.aspx?guid=59cbbf1a-a4ee-4245-b584-8c4459c98301</trackback:ping>
      <pingback:server>https://www.hanselman.com/blog/pingback.aspx</pingback:server>
      <pingback:target>https://www.hanselman.com/blog/PermaLink.aspx?guid=59cbbf1a-a4ee-4245-b584-8c4459c98301</pingback:target>
      <dc:creator>Scott Hanselman</dc:creator>
      <wfw:comment>https://www.hanselman.com/blog/CommentView.aspx?guid=59cbbf1a-a4ee-4245-b584-8c4459c98301</wfw:comment>
      <wfw:commentRss>https://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=59cbbf1a-a4ee-4245-b584-8c4459c98301</wfw:commentRss>
      <slash:comments>7</slash:comments>
      <title>Real World Cloud Migrations: Moving a 17 year old series of sites from bare metal to Azure</title>
      <guid isPermaLink="false">https://www.hanselman.com/blog/PermaLink.aspx?guid=59cbbf1a-a4ee-4245-b584-8c4459c98301</guid>
      <link>http://feeds.hanselman.com/~/604120106/0/scotthanselman~Real-World-Cloud-Migrations-Moving-a-year-old-series-of-sites-from-bare-metal-to-Azure.aspx</link>
      <pubDate>Tue, 02 Jul 2019 22:46:00 GMT</pubDate>
      <description><![CDATA[<div><p>Technical Debt has a way of sneaking up on you. While my <a href="https://hanselminutes.com">podcast site</a> and the other 16ish sites I run all live in Azure and have a nice CI/CD pipeline with <a href="https://azure.microsoft.com/en-us/services/devops/">Azure DevOps</a>, my main "<a href="http://hanselman.com">Hanselman.com</a>" series of sites and mini-sites has lagged behind. I'm still happy with its responsive design, but the underlying tech has started to get more difficult to manage and build and I've decided it's time to make some updates.</p><figure><img title="Moving sites to Azure DevOps" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="Moving sites to Azure DevOps" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/a6b18123798b_894D/image_fb45b775-bfe4-4466-b5a6-a02b695827b4.png" width="1001" height="303"></figure>  <p>I want to be able to make these updates and have a clean switch over so that you, the reader, don't notice a difference. There's a number of things to think about when doing any migration like this, realizing it'll take some weeks (or months if you're a bigger company that just me).</p> <ul> <li><strong>Continuous Deployment/Continuous Integration </strong></li> <ul> <li>I host my code on GitHub and <a href="https://azure.microsoft.com/en-us/services/devops/">Azure DevOps</a> now lets you log in with GitHub and does a fine job of building AND deploying your code (while running tests AND allowing for manual quality gates) so I want to make sure my sites have a nice clean "check in and go live" process.  <li>I'll also be using Azure App Services and Deployment Slots, so I'll have a dev/test/staging site and production, like a real professional. No more editing text files in production. Well, at least, I won't tell you when I'm editing text file in production.</li></ul> <li><strong>Technology Update</strong></li> <ul> <li>Hanselman.com proper (not the blog) and the mini pages/sites underneath it run on ASP.NET 4.0 and WebForms. I was able to easily move the main site over to ASP.NET Razor Pages. Razor is just so elegant, as it's basically just HTML then you type @ and you're in C# (Razor). More on that below, but the upgrade was a day as the home page and minisites are largely readonly. <li>The Blog, hosted at /blog will be more challenging given I don't want to break two decades years of URLs, along with the fact that it's running DasBlog on a recently upgraded .NET 4.0. DasBlog was originally made in .NET 1, then upgraded to .NET 2, so this is 17 years of technical debt.  <li>That said, the .NET Standard along with open source cross-platform .NET Core has allowed us - with the leadership of Mark Downie - to create <a href="https://github.com/poppastring/dasblog-core">DasBlog Core</a>. DasBlog Core shares the core reliable (if crusty) engine of DasBlog along with an all new system of URL writing using ASP.NET Core middleware, as well as a complete re-do of the (well ahead of its time) DasBlog Theming Engine, now based on Razor Pages. It's brilliant. This is in active development.</li></ul> <li><strong>Azure Front Door</strong></li> <ul> <li>Because I'm moving from a single machine running IIS to Azure, I'll want to split things apart to remove single points of failture. I'll use <a href="https://azure.microsoft.com/en-us/services/frontdoor/">Azure Front Door</a> to manage my URL structure and act as a front end cache as well as distribute traffic to multiple Azure App Services (Web Apps). </li></ul> <li><strong>URL management </strong></li> <ul> <li>Are you changing your URLs and URL structure? Remember that <a href="https://www.hanselman.com/blog/URLsAreUI.aspx">URLs are UI</a> and they matter. I've long wanted to remove the "aspx" extension from my URLs, as well as move the TitleCaseBlogPostThing to a more "modern" title-case-blog-post-thing style. I need to do this in a way that updates my google sitemap, breaks zero URLs, 301 redirects to the new style, and uses <a href="https://medium.com/@shanselman/very-simple-64709fef4c4e">rel=canonical</a> in a smart way.</li><!--EndFragment--></ul> <li><strong>Shared Assets/CDNs/Front Door</strong></li> <ul> <li>Since I run a family of sites, there's an opportunity to use a CDN as well and some clean CNAME DNS such that images.hanselman.com and images.hanselminutes.com can share assets. Since the <a href="https://azure.microsoft.com/en-us/services/cdn/">Azure CDN</a> is easy to setup and offers free SSL certs and pay-as-you go, I'll set both of those CNAMES up to point to the same Azure Storage where I'll keep images, show pics, CSS, and JS.</li></ul></ul> <p>I'll be blogging the whole process. What do you want to hear/learn about?</p> <hr>  <p><strong>Sponsor:</strong> Seq delivers the diagnostics, dashboarding, and alerting capabilities needed by modern development teams - all on your infrastructure. <a href="https://hnsl.mn/2YzxoRp">Download now</a>.</p><br/><hr/>Â© 2019 Scott Hanselman. All rights reserved. <br/></div><div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/604120106/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.hanselman.com/_/30/604120106/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/604120106/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/604120106/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/604120106/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</description>
      <comments>https://www.hanselman.com/blog/CommentView.aspx?guid=59cbbf1a-a4ee-4245-b584-8c4459c98301</comments>
      <category>ASP.NET</category>
      <category>Azure</category>
      <category>DasBlog</category><content:encoded><![CDATA[<div><p>Technical Debt has a way of sneaking up on you. While my <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hanselminutes.com">podcast site</a> and the other 16ish sites I run all live in Azure and have a nice CI/CD pipeline with <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://azure.microsoft.com/en-us/services/devops/">Azure DevOps</a>, my main "<a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~hanselman.com">Hanselman.com</a>" series of sites and mini-sites has lagged behind. I'm still happy with its responsive design, but the underlying tech has started to get more difficult to manage and build and I've decided it's time to make some updates.</p><figure><img title="Moving sites to Azure DevOps" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="Moving sites to Azure DevOps" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/a6b18123798b_894D/image_fb45b775-bfe4-4466-b5a6-a02b695827b4.png" width="1001" height="303"></figure>  <p>I want to be able to make these updates and have a clean switch over so that you, the reader, don't notice a difference. There's a number of things to think about when doing any migration like this, realizing it'll take some weeks (or months if you're a bigger company that just me).</p> <ul> <li><strong>Continuous Deployment/Continuous Integration </strong></li> <ul> <li>I host my code on GitHub and <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://azure.microsoft.com/en-us/services/devops/">Azure DevOps</a> now lets you log in with GitHub and does a fine job of building AND deploying your code (while running tests AND allowing for manual quality gates) so I want to make sure my sites have a nice clean "check in and go live" process.  <li>I'll also be using Azure App Services and Deployment Slots, so I'll have a dev/test/staging site and production, like a real professional. No more editing text files in production. Well, at least, I won't tell you when I'm editing text file in production.</li></ul> <li><strong>Technology Update</strong></li> <ul> <li>Hanselman.com proper (not the blog) and the mini pages/sites underneath it run on ASP.NET 4.0 and WebForms. I was able to easily move the main site over to ASP.NET Razor Pages. Razor is just so elegant, as it's basically just HTML then you type @ and you're in C# (Razor). More on that below, but the upgrade was a day as the home page and minisites are largely readonly. <li>The Blog, hosted at /blog will be more challenging given I don't want to break two decades years of URLs, along with the fact that it's running DasBlog on a recently upgraded .NET 4.0. DasBlog was originally made in .NET 1, then upgraded to .NET 2, so this is 17 years of technical debt.  <li>That said, the .NET Standard along with open source cross-platform .NET Core has allowed us - with the leadership of Mark Downie - to create <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/poppastring/dasblog-core">DasBlog Core</a>. DasBlog Core shares the core reliable (if crusty) engine of DasBlog along with an all new system of URL writing using ASP.NET Core middleware, as well as a complete re-do of the (well ahead of its time) DasBlog Theming Engine, now based on Razor Pages. It's brilliant. This is in active development.</li></ul> <li><strong>Azure Front Door</strong></li> <ul> <li>Because I'm moving from a single machine running IIS to Azure, I'll want to split things apart to remove single points of failture. I'll use <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://azure.microsoft.com/en-us/services/frontdoor/">Azure Front Door</a> to manage my URL structure and act as a front end cache as well as distribute traffic to multiple Azure App Services (Web Apps). </li></ul> <li><strong>URL management </strong></li> <ul> <li>Are you changing your URLs and URL structure? Remember that <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/URLsAreUI.aspx">URLs are UI</a> and they matter. I've long wanted to remove the "aspx" extension from my URLs, as well as move the TitleCaseBlogPostThing to a more "modern" title-case-blog-post-thing style. I need to do this in a way that updates my google sitemap, breaks zero URLs, 301 redirects to the new style, and uses <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://medium.com/@shanselman/very-simple-64709fef4c4e">rel=canonical</a> in a smart way.</li><!--EndFragment--></ul> <li><strong>Shared Assets/CDNs/Front Door</strong></li> <ul> <li>Since I run a family of sites, there's an opportunity to use a CDN as well and some clean CNAME DNS such that images.hanselman.com and images.hanselminutes.com can share assets. Since the <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://azure.microsoft.com/en-us/services/cdn/">Azure CDN</a> is easy to setup and offers free SSL certs and pay-as-you go, I'll set both of those CNAMES up to point to the same Azure Storage where I'll keep images, show pics, CSS, and JS.</li></ul></ul> <p>I'll be blogging the whole process. What do you want to hear/learn about?</p> <hr>  <p><strong>Sponsor:</strong> Seq delivers the diagnostics, dashboarding, and alerting capabilities needed by modern development teams - all on your infrastructure. <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/2YzxoRp">Download now</a>.</p>
<br/><hr/>Â© 2019 Scott Hanselman. All rights reserved. 
<br/></div><Img align="left" border="0" height="1" width="1" alt="" style="border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;" hspace="0" src="http://feeds.hanselman.com/~/i/604120106/0/scotthanselman">
<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/604120106/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.hanselman.com/_/30/604120106/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/604120106/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/604120106/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/604120106/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</content:encoded></item>
<item>
<feedburner:origLink>https://www.hanselman.com/blog/GitIsCasesensitiveAndYourFilesystemMayNotBeWeirdFolderMergingOnWindows.aspx</feedburner:origLink>
      <trackback:ping>https://www.hanselman.com/blog/Trackback.aspx?guid=0c143529-a7b1-47b6-8bc7-835ffbb0eaac</trackback:ping>
      <pingback:server>https://www.hanselman.com/blog/pingback.aspx</pingback:server>
      <pingback:target>https://www.hanselman.com/blog/PermaLink.aspx?guid=0c143529-a7b1-47b6-8bc7-835ffbb0eaac</pingback:target>
      <dc:creator>Scott Hanselman</dc:creator>
      <wfw:comment>https://www.hanselman.com/blog/CommentView.aspx?guid=0c143529-a7b1-47b6-8bc7-835ffbb0eaac</wfw:comment>
      <wfw:commentRss>https://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=0c143529-a7b1-47b6-8bc7-835ffbb0eaac</wfw:commentRss>
      <slash:comments>7</slash:comments>
      <title>Git is case-sensitive and your filesystem may not be - Weird folder merging on Windows</title>
      <guid isPermaLink="false">https://www.hanselman.com/blog/PermaLink.aspx?guid=0c143529-a7b1-47b6-8bc7-835ffbb0eaac</guid>
      <link>http://feeds.hanselman.com/~/603858630/0/scotthanselman~Git-is-casesensitive-and-your-filesystem-may-not-be-Weird-folder-merging-on-Windows.aspx</link>
      <pubDate>Thu, 27 Jun 2019 21:52:00 GMT</pubDate>
      <description><![CDATA[<div><p>I was working on <a href="https://github.com/poppastring/dasblog-core">DasBlog Core</a> (an .NET Core cross-platform update of the ASP.NET WebForms-based blogging software that runs this blog) with <a href="https://twitter.com/poppastring">Mark Downie</a>, the new project manager, and <a href="https://twitter.com/spboyer">Shayne Boyer</a>. This is part of a larger cloud re-architecture of hanselman.com and the systems that run this whole site.</p> <p>Shayne was working on getting a DasBlog Core CI/CD (Continuous Integration/Continuous Development) running in Azure DevOps' build system. We wanted individual build pipelines to confirm that DasBlog Core was in fact, cross-platform, so we needed to build, test, and run it on Windows, Linux, and Mac.</p> <p>The build was working great on Windows and Mac...but failing on Linux. Why?</p> <p>Well, like all things, it's complex. </p> <ul> <li>Windows has a case-insensitive file system.  <li>By default, Mac uses a case-insensitive file system.</li></ul> <p>Since Git 1.5ish there's been a setting</p><pre>git config --global core.ignorecase true</pre>
<p>but you should always be aware of what a setting does before you just set it.</p>
<p>If you're not careful, you or someone on your team can create a case sensitive file path in your git index while you're using a case insensitive operating system like Windows or Mac. If you do this,<strong> you'll be able to end up with two separate entries from git's perspective.</strong> However Windows will silently merge them and see just one.</p>
<p>Here's our themes folder structure as seen on GitHub.com. </p>
<p><img title="Case insenstive folder names" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="Case insenstive folder names" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/11312f9fc676_45E/image_531e4130-fca6-4f5e-bd8b-964a9e48a657.png" width="252" height="214"></p>
<p>But when we clone it on Mac or Windows, we see just one folder.</p>
<p><img title="DasBlog as a single folder in VS Code" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="DasBlog as a single folder in VS Code" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/11312f9fc676_45E/60135886-9b011880-9757-11e9-8058-0651e88c95a0_7f090c62-8df1-4c6b-ad90-10e1e6c32a54.png" width="273" height="149"></p>
<p>Turns out that <a href="https://github.com/poppastring/dasblog-core/tree/4bd27f1a431befdbcb6f96e5c7ad4f513f6cffb0/source/DasBlog.Web.UI/Themes">six months ago</a> one of us introduced another folder with the name dasblog while the original was DasBlog. When we checked them on Mac or Windows the files ended up in merged into one folder, but on Linux they were/are two, so the build fails.</p>
<p>You can fix this in a few ways. You can <a href="https://stackoverflow.com/a/38288815">rename the file</a> in a case-sensitive way and commit the change:</p><pre>git mv --cached name.txt NAME.TXT</pre>
<p>Please take care and back up anything you don't understand. </p>
<p>If you're renaming a directory, you'll do a <a href="https://stackoverflow.com/a/3011723">two stage rename with a temp name</a>.</p><pre>git mv foo foo2<br>git mv foo2 FOO<br>git commit -m "changed case of dir"</pre>
<p>Be safe out there!
<hr>
</p>
<p><strong>Sponsor:</strong> Looking for a tool for performance profiling, unit test coverage, and continuous testing that works cross-platform on Windows, macOS, and Linux? <a href="https://hnsl.mn/2RIPOME">Check out the latest JetBrains Rider!</a></p><br/><hr/>Â© 2019 Scott Hanselman. All rights reserved. <br/></div><div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/603858630/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.hanselman.com/_/30/603858630/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/603858630/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/603858630/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/603858630/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</description>
      <comments>https://www.hanselman.com/blog/CommentView.aspx?guid=0c143529-a7b1-47b6-8bc7-835ffbb0eaac</comments>
      <category>DasBlog</category>
      <category>Open Source</category><content:encoded><![CDATA[<div><p>I was working on <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/poppastring/dasblog-core">DasBlog Core</a> (an .NET Core cross-platform update of the ASP.NET WebForms-based blogging software that runs this blog) with <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://twitter.com/poppastring">Mark Downie</a>, the new project manager, and <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://twitter.com/spboyer">Shayne Boyer</a>. This is part of a larger cloud re-architecture of hanselman.com and the systems that run this whole site.</p> <p>Shayne was working on getting a DasBlog Core CI/CD (Continuous Integration/Continuous Development) running in Azure DevOps' build system. We wanted individual build pipelines to confirm that DasBlog Core was in fact, cross-platform, so we needed to build, test, and run it on Windows, Linux, and Mac.</p> <p>The build was working great on Windows and Mac...but failing on Linux. Why?</p> <p>Well, like all things, it's complex. </p> <ul> <li>Windows has a case-insensitive file system.  <li>By default, Mac uses a case-insensitive file system.</li></ul> <p>Since Git 1.5ish there's been a setting</p><pre>git config --global core.ignorecase true</pre>
<p>but you should always be aware of what a setting does before you just set it.</p>
<p>If you're not careful, you or someone on your team can create a case sensitive file path in your git index while you're using a case insensitive operating system like Windows or Mac. If you do this,<strong> you'll be able to end up with two separate entries from git's perspective.</strong> However Windows will silently merge them and see just one.</p>
<p>Here's our themes folder structure as seen on GitHub.com. </p>
<p><img title="Case insenstive folder names" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="Case insenstive folder names" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/11312f9fc676_45E/image_531e4130-fca6-4f5e-bd8b-964a9e48a657.png" width="252" height="214"></p>
<p>But when we clone it on Mac or Windows, we see just one folder.</p>
<p><img title="DasBlog as a single folder in VS Code" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="DasBlog as a single folder in VS Code" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/11312f9fc676_45E/60135886-9b011880-9757-11e9-8058-0651e88c95a0_7f090c62-8df1-4c6b-ad90-10e1e6c32a54.png" width="273" height="149"></p>
<p>Turns out that <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/poppastring/dasblog-core/tree/4bd27f1a431befdbcb6f96e5c7ad4f513f6cffb0/source/DasBlog.Web.UI/Themes">six months ago</a> one of us introduced another folder with the name dasblog while the original was DasBlog. When we checked them on Mac or Windows the files ended up in merged into one folder, but on Linux they were/are two, so the build fails.</p>
<p>You can fix this in a few ways. You can <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://stackoverflow.com/a/38288815">rename the file</a> in a case-sensitive way and commit the change:</p><pre>git mv --cached name.txt NAME.TXT</pre>
<p>Please take care and back up anything you don't understand. </p>
<p>If you're renaming a directory, you'll do a <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://stackoverflow.com/a/3011723">two stage rename with a temp name</a>.</p><pre>git mv foo foo2
<br>git mv foo2 FOO
<br>git commit -m "changed case of dir"</pre>
<p>Be safe out there!
<hr>
</p>
<p><strong>Sponsor:</strong> Looking for a tool for performance profiling, unit test coverage, and continuous testing that works cross-platform on Windows, macOS, and Linux? <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/2RIPOME">Check out the latest JetBrains Rider!</a></p>
<br/><hr/>Â© 2019 Scott Hanselman. All rights reserved. 
<br/></div><Img align="left" border="0" height="1" width="1" alt="" style="border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;" hspace="0" src="http://feeds.hanselman.com/~/i/603858630/0/scotthanselman">
<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/603858630/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.hanselman.com/_/30/603858630/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/603858630/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/603858630/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/603858630/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</content:encoded></item>
<item>
<feedburner:origLink>https://www.hanselman.com/blog/AddingReactionGifsForYourBuildSystemAndTheWindowsTerminal.aspx</feedburner:origLink>
      <trackback:ping>https://www.hanselman.com/blog/Trackback.aspx?guid=5d0c21b4-aa18-477c-9a02-245d055f7e13</trackback:ping>
      <pingback:server>https://www.hanselman.com/blog/pingback.aspx</pingback:server>
      <pingback:target>https://www.hanselman.com/blog/PermaLink.aspx?guid=5d0c21b4-aa18-477c-9a02-245d055f7e13</pingback:target>
      <dc:creator>Scott Hanselman</dc:creator>
      <wfw:comment>https://www.hanselman.com/blog/CommentView.aspx?guid=5d0c21b4-aa18-477c-9a02-245d055f7e13</wfw:comment>
      <wfw:commentRss>https://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=5d0c21b4-aa18-477c-9a02-245d055f7e13</wfw:commentRss>
      <slash:comments>6</slash:comments>
      <title>Adding Reaction Gifs for your Build System and the Windows Terminal</title>
      <guid isPermaLink="false">https://www.hanselman.com/blog/PermaLink.aspx?guid=5d0c21b4-aa18-477c-9a02-245d055f7e13</guid>
      <link>http://feeds.hanselman.com/~/603822008/0/scotthanselman~Adding-Reaction-Gifs-for-your-Build-System-and-the-Windows-Terminal.aspx</link>
      <pubDate>Tue, 25 Jun 2019 21:38:00 GMT</pubDate>
      <description><![CDATA[<div><p>So, first, I'm having <a href="https://www.hanselman.com/blog/YouCanNowDownloadTheNewOpenSourceWindowsTerminal.aspx">entirely too much fun with the new open source Windows Terminal</a>. If you've got the latest version of Windows (go run Windows Update and do whatever it takes) then you can <strong>download the </strong><a href="https://www.microsoft.com/en-us/p/windows-terminal-preview/9n0dx20hk701?activetab=pivot%3Aoverviewtab&amp;WT.mc_id=-blog-scottha#"><strong>Windows Terminal from the Microsoft Store</strong></a>! This is a <a href="http://devblogs.microsoft.com/commandline/windows-terminal-microsoft-store-preview-release?WT.mc_id=-blog-scottha">preview release (think v0.2)</a> but it'll automatically update, often, from the Windows Store if you have Windows 10 version 18362.0 or higher.</p> <p>One of the most fun things is that you can have background images. Even animated gifs! You can add those images in your Settings/profile.json like this.</p><pre class="brush: js; gutter: false; toolbar: false; auto-links: false;">"backgroundImage": "c:/users/scott/desktop/doug.gif",<br>"backgroundImageOpacity": 0.7,<br>"backgroundImageStretchMode": "uniformToFill
</pre>
<p>The profile.json is just JSON and you can update it. I could even update it programmatically if I wanted to parse it and mess about.</p>
<p>BUT. Enterprising developer <a href="https://twitter.com/gpduck">Chris Duck</a> created a <a href="https://github.com/gpduck/MSTerminalSettings">lovely PowerShell Module called MSTerminalSettings</a> that lets you very easily make Profile changes with script.</p>
<p>For example, Mac developers who use iTerm often go to <a href="https://iterm2colorschemes.com/">https://iterm2colorschemes.com/</a> and get new color schemes for their consoles. Now Windows folks can as well!</p>
<p>From his docs, this example downloads the Pandora color scheme from <a href="https://iterm2colorschemes.com/">https://iterm2colorschemes.com/</a> and sets it as the color scheme for the PowerShell Core terminal profile.</p><pre class="brush: ps; gutter: false; toolbar: false; auto-links: false;">Invoke-RestMethod -Uri 'https://raw.githubusercontent.com/mbadolato/iTerm2-Color-Schemes/master/schemes/Pandora.itermcolors' -OutFile .\Pandora.itermcolors<br>Import-Iterm2ColorScheme -Path .\Pandora.itermcolors -Name Pandora<br>Get-MSTerminalProfile -Name "PowerShell Core" | Set-MSTerminalProfile -ColorScheme Pandora
</pre>
<p>That's easy! Then I was talking to <a href="https://twitter.com/TylerLeonhardt">Tyler Leonhardt</a> and suggested that we programmatically change the background using a folder full of Animated Gifs. I happen to have such a folder (with 2000 categorized gif classics) so we started coding and <a href="https://www.twitch.tv/videos/445517893">streamed the whole debacle on Tyler's Twitch</a>! </p>
<p><img src="https://user-images.githubusercontent.com/2892/60372165-8cfa0480-99b0-11e9-8e80-c37ab964f202.gif"></p>
<p>The result is <a href="https://github.com/shanselman/TerminalAttractMode">Windows Terminal Attract Mode</a> and <a href="https://github.com/shanselman/TerminalAttractMode">it's a hot mess and it is up on GitHub</a> and all set up for PowerShell Core.</p>
<p>Remember that "<a href="https://en.wikipedia.org/wiki/Glossary_of_video_game_terms#attract_mode">Attract mode</a>" is the mode an idle arcade cabinet goes into in order to attract passersby to play, so clearly the Terminal needs this also.</p><pre class="brush: ps; gutter: false; toolbar: false; auto-links: false;">./AttractMode.ps1 -name "profile name" -path "c:\temp\trouble" -secs 5
</pre>
<p>It's a proof of concept for now, and it's missing background/runspace support, being wrapped up in a proper module, etc but the idea is solid, building on a solid base, <a href="https://github.com/shanselman/TerminalAttractMode/pull/2">with improvements to idiomatic PowerShell Core already incoming</a>. Right now it'll run forever. Wrap it in Start-Job if you like as well and can stand it.</p>
<center>
<blockquote class="twitter-tweet" data-lang="en" data-conversation="none">
<p lang="en" dir="ltr">I've made aliases so the new Windows Terminal shows REACTION GIFS for my build system and tests! <a href="https://t.co/jpPSsrUoSO">pic.twitter.com/jpPSsrUoSO</a></p>â Scott Hanselman (@shanselman) <a href="https://twitter.com/shanselman/status/1144736692223406081?ref_src=twsrc%5Etfw">June 28, 2019</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></center>
<p>The next idea was to have reactions gifs to different developer situations. Break the build? Reaction Gif. Passing tests? Reaction Gif.</p>
<p>Here's a silly proof (not refactored) that aliases "dotnet build" to "db" with reactions.</p><pre class="brush: ps; gutter: false; toolbar: false; auto-links: false;">#messing around with build reaction gifs<br><br>Function DotNetAlias {<br>    dotnet build<br>    if ($?) {<br>        Start-job -ScriptBlock {<br>            d:\github\TerminalAttractMode\SetMoodGif.ps1 "PowerShell Core" "D:\Dropbox\Reference\Animated Gifs\chrispratt.gif"                            <br>            Start-Sleep 1.5<br>            d:\github\TerminalAttractMode\SetMoodGif.ps1 "PowerShell Core" "D:\Dropbox\Reference\Animated Gifs\4003cn5.gif"                            <br>        } | Out-Null<br>    }<br>    else {<br>        Start-job -ScriptBlock {<br>            d:\github\TerminalAttractMode\SetMoodGif.ps1 "PowerShell Core" "D:\Dropbox\Reference\Animated Gifs\idk-girl.gif"                            <br>            Start-Sleep 1.5<br>            d:\github\TerminalAttractMode\SetMoodGif.ps1 "PowerShell Core" "D:\Dropbox\Reference\Animated Gifs\4003cn5.gif"                            <br>        } | Out-Null<br><br>    }<br>}<br><br>Set-Alias -Name db -value DotNetAlias
</pre>
<p>I added the Start-job stuff so that the build finishes and the Terminal returns control to you while the gifs still are updating. Runspace support would be smart as well.</p>
<p>Some other ideas? Giphy support. Random mood gifs. Pick me ups. You get the idea.</p>
<p>Later, <a href="https://twitter.com/shanselman/status/1144736692223406081">Brandon Olin</a> jumped <a href="https://twitter.com/devblackops/status/1144737296463253504">in with this gem</a>. Why not get <a href="https://gist.github.com/devblackops/2dea8440b48b4d378f220841c07ec2a2">a reaction gif if anything goes wrong in your last command</a>? ERRORLEVEL 1? Explode.</p>
<p>Why are we doing this? Because it sparks joy, y'all. </p>
<hr>
<p><strong>Sponsor:</strong> Looking for a tool for performance profiling, unit test coverage, and continuous testing that works cross-platform on Windows, macOS, and Linux? <a href="https://hnsl.mn/2RIPOME">Check out the latest JetBrains Rider!</a></p><br/><hr/>Â© 2019 Scott Hanselman. All rights reserved. <br/></div><div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/603822008/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.hanselman.com/_/30/603822008/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/603822008/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/603822008/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/603822008/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</description>
      <comments>https://www.hanselman.com/blog/CommentView.aspx?guid=5d0c21b4-aa18-477c-9a02-245d055f7e13</comments>
      <category>Open Source</category>
      <category>PowerShell</category>
      <category>Win10</category><content:encoded><![CDATA[<div><p>So, first, I'm having <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/YouCanNowDownloadTheNewOpenSourceWindowsTerminal.aspx">entirely too much fun with the new open source Windows Terminal</a>. If you've got the latest version of Windows (go run Windows Update and do whatever it takes) then you can <strong>download the </strong><a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.microsoft.com/en-us/p/windows-terminal-preview/9n0dx20hk701?activetab=pivot%3Aoverviewtab&amp;WT.mc_id=-blog-scottha#"><strong>Windows Terminal from the Microsoft Store</strong></a>! This is a <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~devblogs.microsoft.com/commandline/windows-terminal-microsoft-store-preview-release?WT.mc_id=-blog-scottha">preview release (think v0.2)</a> but it'll automatically update, often, from the Windows Store if you have Windows 10 version 18362.0 or higher.</p> <p>One of the most fun things is that you can have background images. Even animated gifs! You can add those images in your Settings/profile.json like this.</p><pre class="brush: js; gutter: false; toolbar: false; auto-links: false;">"backgroundImage": "c:/users/scott/desktop/doug.gif",
<br>"backgroundImageOpacity": 0.7,
<br>"backgroundImageStretchMode": "uniformToFill
</pre>
<p>The profile.json is just JSON and you can update it. I could even update it programmatically if I wanted to parse it and mess about.</p>
<p>BUT. Enterprising developer <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://twitter.com/gpduck">Chris Duck</a> created a <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/gpduck/MSTerminalSettings">lovely PowerShell Module called MSTerminalSettings</a> that lets you very easily make Profile changes with script.</p>
<p>For example, Mac developers who use iTerm often go to <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://iterm2colorschemes.com/">https://iterm2colorschemes.com/</a> and get new color schemes for their consoles. Now Windows folks can as well!</p>
<p>From his docs, this example downloads the Pandora color scheme from <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://iterm2colorschemes.com/">https://iterm2colorschemes.com/</a> and sets it as the color scheme for the PowerShell Core terminal profile.</p><pre class="brush: ps; gutter: false; toolbar: false; auto-links: false;">Invoke-RestMethod -Uri 'https://raw.githubusercontent.com/mbadolato/iTerm2-Color-Schemes/master/schemes/Pandora.itermcolors' -OutFile .\Pandora.itermcolors
<br>Import-Iterm2ColorScheme -Path .\Pandora.itermcolors -Name Pandora
<br>Get-MSTerminalProfile -Name "PowerShell Core" | Set-MSTerminalProfile -ColorScheme Pandora
</pre>
<p>That's easy! Then I was talking to <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://twitter.com/TylerLeonhardt">Tyler Leonhardt</a> and suggested that we programmatically change the background using a folder full of Animated Gifs. I happen to have such a folder (with 2000 categorized gif classics) so we started coding and <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.twitch.tv/videos/445517893">streamed the whole debacle on Tyler's Twitch</a>! </p>
<p><img src="https://user-images.githubusercontent.com/2892/60372165-8cfa0480-99b0-11e9-8e80-c37ab964f202.gif"></p>
<p>The result is <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/shanselman/TerminalAttractMode">Windows Terminal Attract Mode</a> and <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/shanselman/TerminalAttractMode">it's a hot mess and it is up on GitHub</a> and all set up for PowerShell Core.</p>
<p>Remember that "<a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://en.wikipedia.org/wiki/Glossary_of_video_game_terms#attract_mode">Attract mode</a>" is the mode an idle arcade cabinet goes into in order to attract passersby to play, so clearly the Terminal needs this also.</p><pre class="brush: ps; gutter: false; toolbar: false; auto-links: false;">./AttractMode.ps1 -name "profile name" -path "c:\temp\trouble" -secs 5
</pre>
<p>It's a proof of concept for now, and it's missing background/runspace support, being wrapped up in a proper module, etc but the idea is solid, building on a solid base, <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/shanselman/TerminalAttractMode/pull/2">with improvements to idiomatic PowerShell Core already incoming</a>. Right now it'll run forever. Wrap it in Start-Job if you like as well and can stand it.</p>
<center>
<blockquote class="twitter-tweet" data-lang="en" data-conversation="none">
<p lang="en" dir="ltr">I've made aliases so the new Windows Terminal shows REACTION GIFS for my build system and tests! <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://t.co/jpPSsrUoSO">pic.twitter.com/jpPSsrUoSO</a></p>â Scott Hanselman (@shanselman) <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://twitter.com/shanselman/status/1144736692223406081?ref_src=twsrc%5Etfw">June 28, 2019</a></blockquote></center>
<p>The next idea was to have reactions gifs to different developer situations. Break the build? Reaction Gif. Passing tests? Reaction Gif.</p>
<p>Here's a silly proof (not refactored) that aliases "dotnet build" to "db" with reactions.</p><pre class="brush: ps; gutter: false; toolbar: false; auto-links: false;">#messing around with build reaction gifs
<br>
<br>Function DotNetAlias {
<br>    dotnet build
<br>    if ($?) {
<br>        Start-job -ScriptBlock {
<br>            d:\github\TerminalAttractMode\SetMoodGif.ps1 "PowerShell Core" "D:\Dropbox\Reference\Animated Gifs\chrispratt.gif"                            
<br>            Start-Sleep 1.5
<br>            d:\github\TerminalAttractMode\SetMoodGif.ps1 "PowerShell Core" "D:\Dropbox\Reference\Animated Gifs\4003cn5.gif"                            
<br>        } | Out-Null
<br>    }
<br>    else {
<br>        Start-job -ScriptBlock {
<br>            d:\github\TerminalAttractMode\SetMoodGif.ps1 "PowerShell Core" "D:\Dropbox\Reference\Animated Gifs\idk-girl.gif"                            
<br>            Start-Sleep 1.5
<br>            d:\github\TerminalAttractMode\SetMoodGif.ps1 "PowerShell Core" "D:\Dropbox\Reference\Animated Gifs\4003cn5.gif"                            
<br>        } | Out-Null
<br>
<br>    }
<br>}
<br>
<br>Set-Alias -Name db -value DotNetAlias
</pre>
<p>I added the Start-job stuff so that the build finishes and the Terminal returns control to you while the gifs still are updating. Runspace support would be smart as well.</p>
<p>Some other ideas? Giphy support. Random mood gifs. Pick me ups. You get the idea.</p>
<p>Later, <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://twitter.com/shanselman/status/1144736692223406081">Brandon Olin</a> jumped <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://twitter.com/devblackops/status/1144737296463253504">in with this gem</a>. Why not get <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://gist.github.com/devblackops/2dea8440b48b4d378f220841c07ec2a2">a reaction gif if anything goes wrong in your last command</a>? ERRORLEVEL 1? Explode.</p>
<p>Why are we doing this? Because it sparks joy, y'all. </p>
<hr>
<p><strong>Sponsor:</strong> Looking for a tool for performance profiling, unit test coverage, and continuous testing that works cross-platform on Windows, macOS, and Linux? <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/2RIPOME">Check out the latest JetBrains Rider!</a></p>
<br/><hr/>Â© 2019 Scott Hanselman. All rights reserved. 
<br/></div><Img align="left" border="0" height="1" width="1" alt="" style="border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;" hspace="0" src="http://feeds.hanselman.com/~/i/603822008/0/scotthanselman">
<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/603822008/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Share on Google+" href="http://feeds.hanselman.com/_/30/603822008/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/603822008/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/603822008/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/603822008/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</content:encoded></item>
</channel></rss>

